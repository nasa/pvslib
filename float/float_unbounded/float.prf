(|float|
 (|vNum_TCC1| 0
  (|vNum_TCC1-1| |nil| 3321636413 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|vNum| SUBTYPE "Prec(float.b)"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|radix_div_vNum| 0
  (|radix_div_vNum-1| |nil| 3319366647
   ("" (JUDGEMENT-TCC)
    ((""
      (CASE-REPLACE "expt(radix, Prec(b!1)) / radix=expt(radix, Prec(b!1)-1)")
      (("1" (GRIND-REALS) NIL NIL)
       ("2" (HIDE 2)
        (("2" (REWRITE "expt_minus_aux")
          (("2" (REWRITE "expt_x1_aux") NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|radix_less_vNum| 0
  (|radix_less_vNum-1| |nil| 3319366647
   ("" (JUDGEMENT-TCC)
    (("" (LEMMA "both_sides_expt_gt1_ge_aux")
      (("" (INST -1 "radix" "Prec(b!1)-1" "0")
        (("" (GRIND-REALS)
          (("" (REWRITE "expt_x1_aux" -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|FtoR_TCC1| 0
  (|FtoR_TCC1-1| |nil| 3318615387 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|FtoR| SUBTYPE "(Fexp(float.f))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|ftor_zero_fnum| 0
  (|ftor_zero_fnum-1| |nil| 3681143479
   ("" (SKEEP)
    (("" (EXPAND "FtoR")
      (("" (USE "zero_times3")
        (("" (REPLACE -1 :HIDE? T)
          (("" (SPLIT -1)
            (("1" (PROPAX) NIL NIL)
             ("2" (USE "expt_nonzero") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|float_int_def| 0
  (|float_int_def-1| |nil| 3544780855 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|Fplus_TCC1| 0
  (|Fplus_TCC1-1| |nil| 3319889173 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fplus| SUBTYPE
    "((number_fields.-)(Fexp(float.f), real_defs.min(Fexp(float.f), Fexp(float.g))))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|Fplus_TCC2| 0
  (|Fplus_TCC2-1| |nil| 3319889173 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fplus| SUBTYPE
    "((number_fields.-)(Fexp(float.g), real_defs.min(Fexp(float.f), Fexp(float.g))))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|Fplus_TCC3| 0
  (|Fplus_TCC3-1| |nil| 3319889173 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fplus| SUBTYPE
    "(number_fields.+)(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), real_defs.min(Fexp(float.f), Fexp(float.g))))))), number_fields.*(Fnum(float.g), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.g), real_defs.min(Fexp(float.f), Fexp(float.g))))))))"
    "int")))
 (|Fminus_TCC1| 0
  (|Fminus_TCC1-1| |nil| 3319889173 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fminus| SUBTYPE
    "(number_fields.-)(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), real_defs.min(Fexp(float.f), Fexp(float.g))))))), number_fields.*(Fnum(float.g), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.g), real_defs.min(Fexp(float.f), Fexp(float.g))))))))"
    "int")))
 (|sum_float_commutes| 0
  (|sum_float_commutes-1| |nil| 3545039871 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|mult_float_commutes| 0
  (|mult_float_commutes-1| |nil| 3545039902 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|FexptCorrect_TCC1| 0
  (|FexptCorrect_TCC1-1| |nil| 3545396627 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|FexptCorrect| SUBTYPE "float.n"
    "{i: integers.int | booleans.OR(float.FtoR(float.f) /= 0, reals.>=(i, 0))}")))
 (|FexptCorrect| 0
  (|FexptCorrect-1| |nil| 3545396632
   ("" (SKEEP)
    (("" (EXPAND "^")
      (("" (EXPAND "Fexpt")
        (("" (EXPAND "FtoR")
          (("" (LEMMA "mult_expt")
            (("" (CASE "n = 0")
              (("1" (REPLACE -1) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL))
                NIL)
               ("2" (INST - "n" _ _)
                (("2" (EXPAND "^" - 1)
                  (("2" (REWRITE -1)
                    (("1" (LEMMA "expt_times")
                      (("1" (INST - "Fexp(f)" "n" "radix")
                        (("1" (REPLACE -1 :DIR RL)
                          (("1" (HIDE -)
                            (("1" (EXPAND "^" + 2) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (REPLACE -1)
                        (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|sigma_TCC1| 0
  (|sigma_TCC1-1| |nil| 3544869888 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|sigma| SUBTYPE "(number_fields.-)(float.jj, 1)" "nat")))
 (|sigma_TCC2| 0
  (|sigma_TCC2-1| |nil| 3544869888 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|sigma| TERMINATION
    "float.sigma(float.ii, (number_fields.-)(float.jj, 1), float.FF)" "NIL")))
 (|FDivInt_TCC1| 0
  (|FDivInt_TCC1-2| "" 3790102628
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (CASE "radix = mod(radix,i) + i * floor(radix / i)")
        (("1" (REPLACE -3)
          (("1" (ASSERT)
            (("1" (REPLACE -1)
              (("1" (CASE "FORALL (ii,jj:int): integer_pred(ii*jj)")
                (("1" (INST - "Fnum(f)" "floor(radix/i)")
                  (("1" (ASSERT)
                    (("1" (HIDE-ALL-BUT (-1 1))
                      (("1" (GRIND :EXCLUDE "floor") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "mod") (("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|FDivInt| SUBTYPE
    "number_fields.*(Fnum(float.f), (number_fields./(float.radix, float.i)))"
    "int"))
  (|FDivInt_TCC1-1| |nil| 3544783712
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (CASE "radix = mod(radix,i) + i * floor(radix / i)")
        (("1" (REPLACE -3)
          (("1" (ASSERT)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (CASE "FORALL (ii,jj:int): integer_pred(ii*jj)")
                  (("1" (INST - "Fnum(f)" "floor(radix/i)")
                    (("1" (ASSERT)
                      (("1" (HIDE-ALL-BUT (-1 1))
                        (("1" (GRIND :EXCLUDE "floor") NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "mod") (("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|FDivInt| SUBTYPE
    "number_fields.*(Fnum(float.f), (number_fields./(float.radix, float.i)))"
    "int")))
 (|FDivInt_def| 0
  (|FDivInt_def-2| "" 3790102629
   ("" (SKEEP)
    (("" (EXPAND "mod")
      (("" (NAME "k" "floor(radix/i)")
        (("" (CASE "k = radix/i")
          (("1" (EXPAND "FDivInt")
            (("1" (REPLACE -1 :DIR RL)
              (("1" (EXPAND "FtoR")
                (("1" (LEMMA "expt_plus")
                  (("1" (INST - "Fexp(f)-1" "1" "radix")
                    (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FDivInt_def-1| |nil| 3544783715
   ("" (SKEEP)
    (("" (EXPAND "mod")
      (("" (NAME "k" "floor(radix/i)")
        (("" (CASE "k = radix/i")
          (("1" (EXPAND "FDivInt")
            (("1" (REPLACE -1 :DIR RL)
              (("1" (EXPAND "FtoR")
                (("1" (LEMMA "expt_plus")
                  (("1" (INST - "Fexp(f)-1" "1" "radix")
                    (("1" (ASSERT)
                      (("1" (REPLACE -2 1)
                        (("1" (ASSERT)
                          (("1"
                            (CASE
                                "radix ^ (Fexp(f) - 1) = (radix ^ Fexp(f))/radix")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (LEMMA "expt_plus")
                                (("2" (INST -1 "Fexp(f)" "-1" "radix")
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1 :HIDE? T)
                                      (("2" (USE "expt_inverse")
                                        (("2" (ASSERT)
                                          (("2" (USE "expt_x1")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|minimum_positive_bounded_value_TCC1| 0
  (|minimum_positive_bounded_value_TCC1-1| |nil| 3764683373
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|minimum_positive_bounded_value| SUBTYPE "(number_fields.-)(dExp(float.b))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|positive_minumum_bounded_closest_to_zero| 0
  (|positive_minumum_bounded_closest_to_zero-1| |nil| 3764956638
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "minimum_positive_bounded_value")
      (("" (EXPAND "FtoR")
        (("" (EXPAND "Fbounded?")
          (("" (FLATTEN)
            (("" (LEMMA "both_sides_expt_gt1_ge")
              (("" (INST -1 "radix" "Fexp(bf)" "-dExp(b)")
                (("1" (EXPAND ">=")
                  (("1" (REPLACE -1 :HIDE? T :DIR RL)
                    (("1" (EXPAND "abs")
                      (("1" (LIFT-IF -1)
                        (("1" (SPLIT -1)
                          (("1" (FLATTEN)
                            (("1" (CASE "Fnum(bf) <= - 1")
                              (("1" (EXPAND "vNum")
                                (("1" (MULT-BY -4 "-1" "-")
                                  (("1" (ASSERT)
                                    (("1" (MULT-BY -2 "radix ^ Fexp(bf)")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (CASE "1<=Fnum(bf)")
                              (("1" (LEMMA "le_times_le_pos")
                                (("1"
                                  (INST -1 "1" "radix ^ -dExp(b)"
                                   "radix ^ (Fexp(bf))" "Fnum(bf)")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|representability_limits_for_bounded_floats_TCC1| 0
  (|representability_limits_for_bounded_floats_TCC1-1| |nil| 3764683373
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|representability_limits_for_bounded_floats| SUBTYPE "float.E"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|representability_limits_for_bounded_floats_TCC2| 0
  (|representability_limits_for_bounded_floats_TCC2-1| |nil| 3764683373
   ("" (SKEEP :PREDS? T)
    (("" (CASE "(vNum(b) - 1) * radix ^ E > 0")
      (("1" (ASSERT) NIL NIL)
       ("2" (HIDE 2)
        (("2" (CASE "vNum(b) - 1 > 0")
          (("1" (USE "posreal_mult_closed") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (EXPAND "vNum")
            (("2" (HIDE 2)
              (("2" (TYPEPRED "Prec(b)")
                (("2" (TYPEPRED "radix")
                  (("2" (USE "pos_expt_gt") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (FLATTEN) (("3" (TYPEPRED "radix") (("3" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|representability_limits_for_bounded_floats| SUBTYPE
    "number_fields.*(((number_fields.-)(float.vNum(float.b), 1)), (exponentiation.^(float.radix, float.E)))"
    "posreal")))
 (|representability_limits_for_bounded_floats| 0
  (|representability_limits_for_bounded_floats-1| |nil| 3764955422
   ("" (SKEEP :PREDS? T)
    (("" (SKOLETIN)
      (("" (USE "positive_minumum_bounded_closest_to_zero")
        (("" (FLATTEN)
          (("" (SPLIT -1)
            (("1" (REPLACE -2 :HIDE? T)
              (("1" (SPLIT 1)
                (("1" (EXPAND "FtoR" :ASSERT? NONE)
                  (("1" (EXPAND "Fbounded?")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "abs")
                        (("1" (LIFT-IF -3)
                          (("1" (SPLIT -3)
                            (("1" (FLATTEN)
                              (("1" (CASE "radix ^ Fexp(bf) <= radix ^ E")
                                (("1" (MULT-BY -1 "-(vNum(b) - 1)" "-")
                                  (("1" (ASSERT)
                                    (("1" (CASE "-(vNum(b) - 1) <= Fnum(bf)")
                                      (("1" (MULT-BY -1 "radix ^ Fexp(bf)")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "both_sides_expt_gt1_le") NIL
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (CASE "Fnum(bf) * radix ^ (Fexp(bf)) < 0")
                                (("1" (REWRITE "neg_times_lt")
                                  (("1" (SPLIT -1)
                                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (FLATTEN) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL)
             ("3" (ASSERT)
              (("3" (REPLACE -2 :HIDE? T)
                (("3" (EXPAND "FtoR" :ASSERT? NONE)
                  (("3" (EXPAND "Fbounded?")
                    (("3" (FLATTEN)
                      (("3" (EXPAND "abs")
                        (("3" (LIFT-IF -3)
                          (("3" (SPLIT -3)
                            (("1" (FLATTEN)
                              (("1" (CASE "0<Fnum(bf) * radix ^ (Fexp(bf))")
                                (("1" (REWRITE "pos_times_lt")
                                  (("1" (SPLIT -1)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (CASE "Fnum(bf) <= vNum(b) - 1")
                                (("1" (CASE "radix ^ Fexp(bf) <= radix ^ E")
                                  (("1" (LEMMA "le_times_le_pos")
                                    (("1"
                                      (INST -1 "Fnum(bf)" "radix ^ Fexp(bf)"
                                       "radix ^ E" "vNum(b) - 1")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REWRITE "both_sides_expt_gt1_le") NIL
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|hathatln_TCC1| 0
  (|hathatln_TCC1-2| "" 3790102633
   ("" (GRIND-REALS)
    (("" (BOTH-SIDES-F -1 "exp")
      (("" (REWRITE "exp_ln" -1) (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
    NIL)
   ((|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|exp_0| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|exp_ln| FORMULA-DECL NIL |ln_exp| |lnexp|))
   SHOSTAK (|hathatln| SUBTYPE "ln_exp.ln(float.radix)" "nznum"))
  (|hathatln_TCC1-1| |nil| 3318954543
   ("" (GRIND-REALS)
    (("" (WRAP-FORMULA -1 "exp")
      (("1" (REWRITE "exp_ln" -1) (("1" (GRIND-REALS) NIL NIL)) NIL)
       ("2" (GRIND-REALS) NIL NIL))
      NIL))
    NIL)
   NIL NIL (|hathatln| SUBTYPE "ln_exp.ln(float.radix)" "nznum")))
 (|hathatln_TCC2| 0
  (|hathatln_TCC2-1| |nil| 3318954543 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ln| CONST-DECL "real" |ln_exp| |lnexp|)) NIL
   (|hathatln| SUBTYPE
    "((number_fields.-)((number_fields./(ln_exp.ln(float.r), ln_exp.ln(float.radix)))))"
    "{r: reals.real | booleans.OR(float.radix /= 0, r /= 0)}")))
 (|hathatln| 0
  (|hathatln-1| |nil| 3318954554
   ("" (SKEEP)
    (("" (EXPAND "^^")
      (("" (CASE "radix=0")
        (("1" (ASSERT) NIL NIL)
         ("2" (ASSERT)
          (("2" (CASE-REPLACE "-(ln(r) / ln(radix)) * ln(radix) = -ln(r)")
            (("1" (HIDE -1)
              (("1" (REWRITE "exp_neg") (("1" (REWRITE "exp_ln") NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((^^ CONST-DECL "nnreal" |expt| |lnexp|)
    (|exp_ln| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|exp_neg| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|))
   SHOSTAK))
 (|hathat_int_TCC1| 0
  (|hathat_int_TCC1-1| |nil| 3319195930 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hathat_int| SUBTYPE "float.e1"
    "{r: reals.real | booleans.OR(float.radix /= 0, r /= 0)}")))
 (|hathat_int_TCC2| 0
  (|hathat_int_TCC2-1| |nil| 3545651010 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|hathat_int| SUBTYPE "float.e1"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|hathat_int| 0
  (|hathat_int-1| |nil| 3319197088
   ("" (SKEEP)
    (("" (EXPAND "^")
      (("" (CASE "e1 >= 0")
        (("1" (GRIND-REALS)
          (("1" (REWRITE "hathat_nat")
            (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (GRIND-REALS)
          (("2" (LEMMA "hathat_diff")
            (("2" (INST -1 "radix" "-e1" "0")
              (("2" (CASE-REPLACE "0--e1=e1")
                (("1" (REWRITE -2)
                  (("1" (REWRITE "hathat_nat")
                    (("1" (EXPAND "^") (("1" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -1 2 3) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|hathat_to_0| FORMULA-DECL NIL |expt| |lnexp|)
    (|hathat_diff| FORMULA-DECL NIL |expt| |lnexp|)
    (|hathat_nat| FORMULA-DECL NIL |expt| |lnexp|))
   SHOSTAK))
 (|Fsucc_TCC1| 0
  (|Fsucc_TCC1-1| |nil| 3321636413
   ("" (SKEEP) (("" (LEMMA "radix_div_vNum") (("" (INST?) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|Fsucc| SUBTYPE "number_fields./(float.vNum(float.b), float.radix)"
    "int")))
 (|Fpred_TCC1| 0
  (|Fpred_TCC1-1| |nil| 3319211903
   ("" (SKEEP)
    (("" (CASE-REPLACE "-vNum(b) / radix = -(vNum(b)/radix)")
      (("1" (HIDE -1)
        (("1" (LEMMA "integers.closed_neg")
          (("1" (INST?)
            (("1" (HIDE 2)
              (("1" (LEMMA "radix_div_vNum") (("1" (INST -1 "b") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|Fpred| SUBTYPE
    "number_fields./((number_fields.-)(float.vNum(float.b)), float.radix)"
    "int")))
 (|Fnormalize_TCC1| 0
  (|Fnormalize_TCC1-1| |nil| 3318871237 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fnormalize| SUBTYPE
    "(number_fields.-)(float.vNum(float.b), real_defs.abs(Fnum(float.f)))"
    "naturalnumber")))
 (|Fnormalize_TCC2| 0
  (|Fnormalize_TCC2-1| |nil| 3318871237 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fnormalize| SUBTYPE
    "(# Fnum := 0, Fexp := (number_fields.-)(dExp(float.b)) #)"
    "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}")))
 (|Fnormalize_TCC3| 0
  (|Fnormalize_TCC3-1| |nil| 3318871237 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fnormalize| SUBTYPE "float.f"
    "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}")))
 (|Fnormalize_TCC4| 0
  (|Fnormalize_TCC4-1| |nil| 3318871237 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fnormalize| SUBTYPE
    "(# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #)"
    "(float.Fbounded?(float.b))")))
 (|Fnormalize_TCC5| 0
  (|Fnormalize_TCC5-2| "" 3790102642
   ("" (SKOSIMP)
    (("" (GRIND-REALS)
      (("" (EXPAND "abs" 4 2)
        (("" (BOTH-SIDES-F 2 "abs")
          (("1" (EXPAND "abs" 1 2)
            (("1" (CANCEL-BY 4 "abs(Fnum(f!1))") NIL NIL)) NIL)
           ("2" (EXPAND "abs" -1 2)
            (("2" (CANCEL-BY 4 "abs(Fnum(f!1))") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|Fnormalize| TERMINATION
    "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
    "NIL"))
  (|Fnormalize_TCC5-1| |nil| 3318871660
   ("" (SKOSIMP)
    (("" (GRIND-REALS)
      (("" (EXPAND "abs" 4 2)
        (("" (WRAP-FORMULA 2 "abs")
          (("" (EXPAND "abs" 1 2)
            (("" (CANCEL-BY 4 "abs(Fnum(f!1))")
              (("" (HIDE-ALL-BUT (-1 3)) (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|Fnormalize| TERMINATION
    "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
    "NIL")))
 (|Fnormalize_TCC6| 0
  (|Fnormalize_TCC6-2| "" 3790102643
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1"
        (TYPEPRED
         "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
        (("1" (REPLACES -2)
          (("1" (EXPAND "FtoR")
            (("1" (REWRITE "expt_div" :DIR RL) (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2"
        (TYPEPRED
         "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
        (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|Fnormalize| SUBTYPE
    "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
    "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}"))
  (|Fnormalize_TCC6-1| |nil| 3319287157
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1"
        (TYPEPRED
         "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
        (("1" (REPLACES -2)
          (("1" (EXPAND "FtoR")
            (("1" (REWRITE "expt_div" :DIR RL)
              (("1" (REWRITE "expt_x1") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2"
        (TYPEPRED
         "v!1(b!1)((# Fnum := radix * Fnum(f!1), Fexp := Fexp(f!1) - 1 #))")
        (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|Fnormalize| SUBTYPE
    "float.Fnormalize(float.b)((# Fnum := number_fields.*(float.radix, Fnum(float.f)), Fexp := (number_fields.-)(Fexp(float.f), 1) #))"
    "{x: (float.Fcanonic?(float.b)) | booleans.AND(float.FtoR(x) = float.FtoR(float.f), reals.<=(Fexp(x), Fexp(float.f)))}")))
 (|Fulp_TCC1| 0
  (|Fulp_TCC1-1| |nil| 3318887371 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fulp| SUBTYPE "(Fexp(float.Fnormalize(float.b)(float.f)))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|Fulp_posreal_j| 0
  (|Fulp_posreal_j-1| |nil| 3670176754 ("" (JUDGEMENT-TCC) NIL NIL) NIL NIL
   (|Fulp_posreal_j| SUBTYPE "float.Fulp(float.b)(float.f)" "posreal")))
 (|exact_rep_conservation_TCC1| 0
  (|exact_rep_conservation_TCC1-1| |nil| 3698090985 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|exact_rep_conservation| SUBTYPE "float.n"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|FoppBounded| 0
  (|FoppBounded-1| |nil| 3319899604
   ("" (SKEEP)
    (("" (EXPAND* "Fbounded?" "Fopp")
      (("" (FLATTEN)
        (("" (SPLIT)
          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)
           ("2" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|rounded_opp?_TCC1| 0
  (|rounded_opp?_TCC1-1| |nil| 3877716003
   ("" (SKEEP) (("" (REWRITE "FoppBounded") NIL NIL)) NIL) NIL NIL
   (|rounded_opp?| SUBTYPE "float.Fopp(float.p)"
    "(float.Fbounded?(float.b))")))
 (|FcanonicOpp| 0
  (|FcanonicOpp-2| "" 3790102647
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKOSIMP*)
        (("1" (EXPAND "Fcanonic?")
          (("1" (SPLIT)
            (("1" (CASE "Fnormal?(b)(Fopp(f))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fnormal?" "Fbounded?" "Fopp")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(-(Fnum(f)))=abs(Fnum(f))")
                        (("1" (HIDE -1 -2 -3 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL)
                       ("3"
                        (CASE-REPLACE
                         "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                        (("3" (HIDE -1 -2 -3 2)
                          (("3" (EXPAND "abs") (("3" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "Fsubnormal?(b)(Fopp(f))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fopp" "Fsubnormal?" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(-(Fnum(f)))=abs(Fnum(f))")
                        (("1" (HIDE -1 -2 -3 -4 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                       ("4"
                        (CASE-REPLACE
                         "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                        (("4" (HIDE -1 -2 -3 -4 2)
                          (("4" (EXPAND "abs") (("4" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "Fcanonic?")
          (("2" (SPLIT)
            (("1" (CASE "Fnormal?(b)(f)")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fnormal?" "Fopp" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(Fnum(f))=abs(-(Fnum(f)))")
                        (("1" (HIDE -1 -2 -3 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL)
                       ("3"
                        (CASE-REPLACE
                         "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                        (("3" (HIDE -1 -2 -3 2)
                          (("3" (EXPAND "abs") (("3" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE " Fsubnormal?(b)(f)")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fsubnormal?" "Fopp" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(Fnum(f))=abs(-(Fnum(f)))")
                        (("1" (HIDE -1 -2 -3 -4 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                       ("4"
                        (CASE-REPLACE
                         "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                        (("4" (HIDE -1 -2 -3 -4 2)
                          (("4" (EXPAND "abs") (("4" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FcanonicOpp-1| |nil| 3319221457
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKOSIMP*)
        (("1" (EXPAND "Fcanonic?")
          (("1" (SPLIT)
            (("1" (CASE "Fnormal?(b)(Fopp(f))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fnormal?" "Fbounded?" "Fopp")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(-(Fnum(f)))=abs(Fnum(f))")
                        (("1" (HIDE -1 -2 -3 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL)
                       ("3"
                        (CASE-REPLACE
                         "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                        (("3" (HIDE -1 -2 -3 2)
                          (("3" (EXPAND "abs")
                            (("3" (GRIND-REALS)
                              (("1" (CASE "-(radix * (Fnum(f))) > 0")
                                (("1" (GRIND-REALS) NIL NIL)
                                 ("2" (HIDE -1)
                                  (("2" (CANCEL-BY 1 "radix") NIL NIL)) NIL))
                                NIL)
                               ("2" (FLIP-INEQ 2)
                                (("2" (HIDE 2)
                                  (("2" (CANCEL-BY 1 "radix") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "Fsubnormal?(b)(Fopp(f))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fopp" "Fsubnormal?" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(-(Fnum(f)))=abs(Fnum(f))")
                        (("1" (HIDE -1 -2 -3 -4 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                       ("4"
                        (CASE-REPLACE
                         "abs(radix * -(Fnum(f)))=abs(radix * Fnum(f))")
                        (("4" (HIDE -1 -2 -3 -4 2)
                          (("4" (EXPAND "abs")
                            (("4" (GRIND-REALS)
                              (("1" (FLIP-INEQ -1)
                                (("1" (CANCEL-BY 1 "radix") NIL NIL)) NIL)
                               ("2" (FLIP-INEQ 2)
                                (("2" (HIDE 2)
                                  (("2" (CANCEL-BY 1 "radix") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "Fcanonic?")
          (("2" (SPLIT)
            (("1" (CASE "Fnormal?(b)(f)")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fnormal?" "Fopp" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(Fnum(f))=abs(-(Fnum(f)))")
                        (("1" (HIDE -1 -2 -3 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL)
                       ("3"
                        (CASE-REPLACE
                         "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                        (("3" (HIDE -1 -2 -3 2)
                          (("3" (EXPAND "abs")
                            (("3" (GRIND-REALS)
                              (("1" (FLIP-INEQ -2)
                                (("1" (CANCEL-BY 1 "radix") NIL NIL)) NIL)
                               ("2" (FLIP-INEQ 1)
                                (("2" (CANCEL-BY 1 "radix") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE " Fsubnormal?(b)(f)")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND* "Fsubnormal?" "Fopp" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (CASE-REPLACE "abs(Fnum(f))=abs(-(Fnum(f)))")
                        (("1" (HIDE -1 -2 -3 -4 2)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                       ("4"
                        (CASE-REPLACE
                         "abs(radix * (Fnum(f)))=abs(radix * -(Fnum(f)))")
                        (("4" (HIDE -1 -2 -3 -4 2)
                          (("4" (EXPAND "abs")
                            (("4" (GRIND-REALS)
                              (("1" (FLIP-INEQ -2)
                                (("1" (CANCEL-BY 1 "radix") NIL NIL)) NIL)
                               ("2" (FLIP-INEQ 1)
                                (("2" (CANCEL-BY 1 "radix") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FcanonicBounded| 0
  (|FcanonicBounded-1| |nil| 3319221336
   ("" (SKEEP)
    (("" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?")
      (("" (SPLIT) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|canonic_bounded_j| 0
  (|canonic_bounded_j-1| |nil| 3681643759
   ("" (SKEEP) (("" (USE "FcanonicBounded") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|canonic_bounded_j| SUBTYPE "float.x" "(float.Fbounded?(float.b))")))
 (|FpredCanonic| 0
  (|FpredCanonic-1| |nil| 3319212045
   ("" (SKEEP)
    (("" (EXPAND "Fpred")
      (("" (GRIND-REALS)
        (("1" (EXPAND "Fcanonic?" 1 1)
          (("1"
            (CASE
                "Fnormal?(b)((# Fnum := -(vNum(b) / radix), Fexp := 1 + Fexp(f) #))")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND* "Fnormal?" "Fbounded?")
                (("2" (SPLIT)
                  (("1" (EXPAND "abs" 1 1)
                    (("1" (LIFT-IF)
                      (("1" (SPLIT 1)
                        (("1" (FLATTEN)
                          (("1" (REAL-PROPS :SIMPLE? T)
                            (("1" (CANCEL-BY 1 "vNum(b)") NIL NIL)) NIL))
                          NIL)
                         ("2" (FLATTEN) (("2" (FIELD 2) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE -1 -2 2)
              (("3" (REWRITE "integers.closed_neg")
                (("3" (REWRITE "radix_div_vNum") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE -1 -2 1)
          (("2"
            (CASE
                "Fnormal?(b)((# Fnum := vNum(b) - 1, Fexp := Fexp(f) - 1 #))")
            (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND* "Fnormal?" "Fbounded?")
                (("2" (SPLIT)
                  (("1" (EXPAND "abs" 1 1) (("1" (GRIND-REALS) NIL NIL)) NIL)
                   ("2" (CASE "vNum(b) * radix - radix >=0")
                    (("1" (EXPAND "abs" 1 1)
                      (("1" (GRIND-REALS)
                        (("1" (ISOLATE 1 R 1)
                          (("1" (CASE "vNum(b) >= radix")
                            (("1" (CASE "vNum(b) + radix <= vNum(b) * 2")
                              (("1" (CASE "vNum(b) * 2 <= vNum(b) * radix")
                                (("1" (GRIND-REALS) NIL NIL)
                                 ("2" (HIDE -1 -2 -3 -4 2)
                                  (("2" (CANCEL-BY 1 "vNum(b)") NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE -2 -3 2)
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL)
                             ("2" (HIDE -1 -2 2)
                              (("2" (CASE "integer_pred(vNum(b) / radix)")
                                (("1" (CASE "vNum(b)>=1")
                                  (("1" (GRIND-REALS)
                                    (("1" (LEMMA "div_simple")
                                      (("1" (INST -1 "vNum(b)" "radix")
                                        (("1" (GRIND-REALS)
                                          (("1" (CANCEL-BY 1 "radix")
                                            (("1" (GRIND-REALS)
                                              (("1" (HIDE 1 -3 -2 -1)
                                                (("1"
                                                  (CASE "k!1 >= 1 OR k!1 <=0")
                                                  (("1" (SPLIT)
                                                    (("1" (PROPAX) NIL NIL)
                                                     ("2"
                                                      (CASE "k!1 * radix <= 0")
                                                      (("1" (GRIND-REALS) NIL
                                                        NIL)
                                                       ("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (REWRITE "radix_div_vNum") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1 2) (("2" (CANCEL-BY 1 "radix") NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (FLIP-INEQ 2)
          (("3"
            (CASE
                "abs(radix*(Fnum(f) - 1))< vNum(b) OR abs(radix*(Fnum(f) - 1)) >= vNum(b)")
            (("1" (SPLIT)
              (("1"
                (CASE
                    "Fsubnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (HIDE 2 3)
                  (("2" (EXPAND* "Fsubnormal?" "Fbounded?")
                    (("2" (SPLIT)
                      (("1" (MULT-BY 1 "radix")
                        (("1"
                          (CASE-REPLACE
                           "abs(Fnum(f) - 1) * radix=abs(radix * (Fnum(f) - 1))")
                          (("1" (CASE " vNum(b) <=vNum(b) * radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 -2 -3 -4 2)
                              (("2" (DIV-BY 1 "vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 -2 -3 2)
                            (("2" (REWRITE "abs_mult")
                              (("2" (EXPAND "abs" 1 2)
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "Fbounded?(b)(f)")
                        (("1" (EXPAND "Fbounded?") (("1" (FLATTEN) NIL NIL))
                          NIL)
                         ("2" (REWRITE "FcanonicBounded") NIL NIL))
                        NIL)
                       ("3" (CASE "Fbounded?(b)(f)")
                        (("1" (EXPAND "Fbounded?")
                          (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL)) NIL))
                          NIL)
                         ("2" (REWRITE "FcanonicBounded") NIL NIL))
                        NIL)
                       ("4" (GRIND-REALS) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (CASE
                    "Fnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (HIDE 3)
                  (("2" (EXPAND* "Fnormal?" "Fbounded?")
                    (("2" (SPLIT)
                      (("1" (CASE "Fbounded?(b)(f)")
                        (("1" (EXPAND "Fbounded?")
                          (("1" (FLATTEN)
                            (("1" (HIDE -2 -3 -4 -5)
                              (("1" (EXPAND* "abs")
                                (("1" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FcanonicBounded") NIL NIL))
                        NIL)
                       ("2" (CASE "Fbounded?(b)(f)")
                        (("1" (EXPAND "Fbounded?") (("1" (FLATTEN) NIL NIL))
                          NIL)
                         ("2" (REWRITE "FcanonicBounded") NIL NIL))
                        NIL)
                       ("3" (HIDE -2 -3 2) (("3" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -1 -2 2 3) (("2" (GRIND-REALS) NIL NIL)) NIL))
            NIL))
          NIL)
         ("4" (CASE "Fbounded?(b)(f)")
          (("1" (EXPAND "Fbounded?")
            (("1" (FLATTEN)
              (("1" (SPLIT-INEQ -2)
                (("1"
                  (CASE
                      "abs(radix*(Fnum(f) - 1))< vNum(b) OR abs(radix*(Fnum(f) - 1)) >= vNum(b)")
                  (("1" (SPLIT)
                    (("1"
                      (CASE
                          "Fsubnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                      (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (HIDE 4)
                        (("2" (EXPAND* "Fsubnormal?" "Fbounded?")
                          (("2" (SPLIT)
                            (("1"
                              (CASE
                                  " abs(Fnum(f) - 1) <= abs(radix * (Fnum(f) - 1))")
                              (("1" (GRIND-REALS) NIL NIL)
                               ("2" (REWRITE "abs_mult")
                                (("2" (EXPAND "abs" 1 2)
                                  (("2" (DIV-BY 1 "abs(Fnum(f) - 1)")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2"
                      (CASE
                          "Fnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                      (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (HIDE 4)
                        (("2" (EXPAND* "Fnormal?" "Fbounded?")
                          (("2" (SPLIT)
                            (("1" (HIDE -1 -2 -4 -4 3)
                              (("1" (EXPAND* "abs")
                                (("1" (GRIND-REALS) NIL NIL)) NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND-REALS) NIL NIL))
                  NIL)
                 ("2"
                  (CASE
                      "Fnormal?(b)((# Fnum := Fnum(f) - 1, Fexp := Fexp(f) #))")
                  (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE 5)
                    (("2" (CASE "Fnormal?(b)(f)")
                      (("1" (EXPAND* "Fnormal?" "Fbounded?")
                        (("1" (SPLIT)
                          (("1" (HIDE -1 -3 -4 2 4)
                            (("1" (EXPAND* "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -3 -4 2)
                            (("2" (EXPAND* "abs")
                              (("2" (GRIND-REALS)
                                (("1" (CASE "Fnum(f) <=0")
                                  (("1" (GRIND-REALS) NIL NIL)
                                   ("2" (CASE "Fnum(f) < 1")
                                    (("1" (GRIND-REALS) NIL NIL)
                                     ("2" (MULT-BY 1 "radix")
                                      (("2" (HIDE -2 2 3 4 5 6)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (CASE
                                      "vNum(b) = radix * Fnum(f) OR vNum(b) < radix * Fnum(f)")
                                  (("1" (SPLIT)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE -2 1 3 4 5)
                                      (("2" (DIV-BY -1 "radix")
                                        (("2" (DIV-BY 1 "radix")
                                          (("2"
                                            (CASE-REPLACE
                                             "(Fnum(f) * radix - radix) / radix=Fnum(f)-1")
                                            (("1" (HIDE -1)
                                              (("1" (LEMMA "div_simple")
                                                (("1"
                                                  (INST -1 "vNum(b)" "radix")
                                                  (("1"
                                                    (CASE
                                                        "(EXISTS (k:int): vNum(b) = k * radix)")
                                                    (("1" (SKOSIMP*)
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "vNum(b) / radix=k!1")
                                                        (("1" (HIDE -1 -2 -3)
                                                          (("1" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (GRIND-REALS)
                                                      (("2"
                                                        (REWRITE
                                                         "radix_div_vNum")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FIELD) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND-REALS) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 4 5)
                        (("2" (EXPAND "Fcanonic?")
                          (("2" (SPLIT)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (EXPAND "Fsubnormal?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FcanonicBounded") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_log_compute_TCC1| 0
  (|RND_log_compute_TCC1-1| |nil| 3543227658 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_log_compute| SUBTYPE
    "((number_fields.-)((number_fields.-)(dExp(float.b)), 1))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_log_compute_TCC2| 0
  (|RND_log_compute_TCC2-1| |nil| 3543227658
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (CASE "x*radix/vNum(b) > 0")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE 2)
          (("2" (CROSS-MULT 1)
            (("2" (LEMMA "posreal_times_posreal_is_posreal")
              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_log_compute| SUBTYPE
    "number_fields./(number_fields.*(float.x, float.radix), float.vNum(float.b))"
    "posreal")))
 (|RND_log_compute_TCC3| 0
  (|RND_log_compute_TCC3-1| |nil| 3543227658
   ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|RND_log_compute| SUBTYPE
    "((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_log_compute_TCC4| 0
  (|RND_log_compute_TCC4-2| "" 3790102657
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (REWRITE "expt_plus" :DIR RL)
        (("" (MULT-BY -1 "radix ^ (1 + dExp(b) - Prec(b))")
          (("" (REWRITE "expt_plus" :DIR RL) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|RND_log_compute| SUBTYPE
    "number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b))))))"
    "{x: reals.real | reals.>=(x, 1)}"))
  (|RND_log_compute_TCC4-1| |nil| 3543227658
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (REWRITE "expt_plus" :DIR RL)
        (("" (MULT-BY -1 "radix ^ (1 + dExp(b) - Prec(b))")
          (("" (REWRITE "expt_plus" :DIR RL)
            (("" (CASE "dExp(b) + -dExp(b) = 0")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (USE "expt_x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_log_compute| SUBTYPE
    "number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b))))))"
    "{x: reals.real | reals.>=(x, 1)}")))
 (|RND_log_compute| 0
  (|RND_log_compute-2| "" 3790102660
   (""
    (CASE "FORALL (b: Format, x: nnreal):
               x >= radix ^ (-dExp(b) - 1) * vNum(b) IMPLIES
                floor(ln(x * radix / vNum(b)) / ln(radix)) =
                 log_nat(x * radix ^ (1 + dExp(b) - Prec(b)), radix)`1 - dExp(b)")
    (("1" (SKEEP)
      (("1" (INST - "b" "x")
        (("1" (ASSERT) NIL NIL)
         ("2" (EXPAND "vNum")
          (("2" (TYPEPRED "radix^(Prec(b)-dExp(b)-1)")
            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "vNum")
          (("2" (REWRITE "expt_plus" :DIR RL)
            (("2" (NAME "yy" "x*radix^(dExp(b) - Prec(b) + 1)")
              (("2" (CASE "NOT yy>=1")
                (("1" (HIDE 2)
                  (("1" (EXPAND "yy" +)
                    (("1" (MULT-BY 1 "radix ^ (Prec(b) - 1 + -dExp(b))")
                      (("1" (LEMMA "expt_plus")
                        (("1"
                          (INST - "1 + dExp(b) - Prec(b)"
                           "Prec(b) - 1 + -dExp(b)" "radix")
                          (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "NOT x = yy*radix ^ (Prec(b) - 1 + -dExp(b))")
                  (("1" (HIDE 2)
                    (("1" (EXPAND "yy" +)
                      (("1" (REWRITE "expt_plus" :DIR RL)
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACE -1 +)
                    (("2" (REWRITE "ln_div")
                      (("1"
                        (CASE
                            "radix ^ (Prec(b) - 1 + -dExp(b)) * radix = radix ^ (Prec(b) + -dExp(b))")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (REWRITE "ln_mult")
                              (("1" (REWRITE "expt_plus" +)
                                (("1" (REWRITE "ln_mult")
                                  (("1" (ASSERT)
                                    (("1"
                                      (CASE
                                          "(ln(radix ^ -dExp(b)) + ln(yy)) / ln(radix) = (ln(yy)/ln(radix))-dExp(b)")
                                      (("1" (REPLACE -1)
                                        (("1" (HIDE -1)
                                          (("1" (LEMMA "floor_eq_log_nat_ge_1")
                                            (("1" (INST - "yy" "radix")
                                              (("1"
                                                (CASE
                                                    "floor((ln(yy) / ln(radix)) - dExp(b)) = floor(ln(yy) / ln(radix)) - dExp(b)")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE-ALL-BUT 1)
                                                  (("2"
                                                    (LEMMA "floor_plus_int")
                                                    (("2"
                                                      (INST - "-dExp(b)"
                                                       "ln(yy)/ln(radix)")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (CASE
                                            "ln(radix^(-dExp(b)))/ln(radix) = -dExp(b)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE (2 3))
                                          (("2" (CROSS-MULT 1)
                                            (("2" (REWRITE "ln_expt") NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (LEMMA "expt_plus")
                            (("2" (INST - "Prec(b)-1+-dExp(b)" "1" "radix")
                              (("2" (EXPAND "^" - 3)
                                (("2" (EXPAND "expt")
                                  (("2" (EXPAND "expt")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (LEMMA "posreal_times_posreal_is_posreal")
                          (("2" (INST?) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (EXPAND "vNum")
          (("3" (MULT-BY 1 "radix ^ (Prec(b) - 1 + -dExp(b))")
            (("3" (LEMMA "expt_plus")
              (("3"
                (INST - "1 + dExp(b) - Prec(b)" "Prec(b) - 1 + -dExp(b)"
                 "radix")
                (("3" (ASSERT)
                  (("3" (REPLACE -1 :DIR RL)
                    (("3" (LEMMA "expt_plus")
                      (("3" (INST - "Prec(b)" "-dExp(b)-1" "radix")
                        (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (ASSERT)
          (("5" (LEMMA "exp_ln")
            (("5" (INST?) (("5" (REPLACE -3) (("5" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (HIDE 2)
      (("6" (SKEEP)
        (("6" (CROSS-MULT 1)
          (("6" (ASSERT)
            (("6" (LEMMA "posreal_times_posreal_is_posreal")
              (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (HIDE 2) (("7" (SKEEP) (("7" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|exp_0| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|exp_ln| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_div| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_mult| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|floor_eq_log_nat_ge_1| FORMULA-DECL NIL |ln_approx| |lnexp|)
    (|ln_expt| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat|
     |reals|))
   SHOSTAK)
  (|RND_log_compute-1| |nil| 3543227662
   (""
    (CASE "FORALL (b: Format, x: nnreal):
               x >= radix ^ (-dExp(b) - 1) * vNum(b) IMPLIES
                floor(ln(x * radix / vNum(b)) / ln(radix)) =
                 log_nat(x * radix ^ (1 + dExp(b) - Prec(b)), radix)`1 - dExp(b)")
    (("1" (SKEEP)
      (("1" (INST - "b" "x")
        (("1" (ASSERT) NIL NIL)
         ("2" (EXPAND "vNum")
          (("2" (TYPEPRED "radix^(Prec(b)-dExp(b)-1)")
            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "vNum")
          (("2" (REWRITE "expt_plus" :DIR RL)
            (("2" (NAME "yy" "x*radix^(dExp(b) - Prec(b) + 1)")
              (("2" (CASE "NOT yy>=1")
                (("1" (HIDE 2)
                  (("1" (EXPAND "yy" +)
                    (("1" (MULT-BY 1 "radix ^ (Prec(b) - 1 + -dExp(b))")
                      (("1" (LEMMA "expt_plus")
                        (("1"
                          (INST - "1 + dExp(b) - Prec(b)"
                           "Prec(b) - 1 + -dExp(b)" "radix")
                          (("1" (ASSERT)
                            (("1" (REPLACE -1 :DIR RL :HIDE? T)
                              (("1" (CASE "dExp(b) + -dExp(b) = 0")
                                (("1" (REPLACE -1 :HIDE? T)
                                  (("1" (USE "expt_x0")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "NOT x = yy*radix ^ (Prec(b) - 1 + -dExp(b))")
                  (("1" (HIDE 2)
                    (("1" (EXPAND "yy" +)
                      (("1" (REWRITE "expt_plus" :DIR RL)
                        (("1" (ASSERT)
                          (("1" (CASE "dExp(b) + -dExp(b) = 0")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (USE "expt_x0") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACE -1 +)
                    (("2" (REWRITE "ln_div")
                      (("1"
                        (CASE
                            "radix ^ (Prec(b) - 1 + -dExp(b)) * radix = radix ^ (Prec(b) + -dExp(b))")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (REWRITE "ln_mult")
                              (("1" (REWRITE "expt_plus" +)
                                (("1" (REWRITE "ln_mult")
                                  (("1" (ASSERT)
                                    (("1"
                                      (CASE
                                          "(ln(radix ^ -dExp(b)) + ln(yy)) / ln(radix) = (ln(yy)/ln(radix))-dExp(b)")
                                      (("1" (REPLACE -1)
                                        (("1" (HIDE -1)
                                          (("1" (LEMMA "floor_eq_log_nat_ge_1")
                                            (("1" (INST - "yy" "radix")
                                              (("1"
                                                (CASE
                                                    "floor((ln(yy) / ln(radix)) - dExp(b)) = floor(ln(yy) / ln(radix)) - dExp(b)")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (HIDE-ALL-BUT 1)
                                                  (("2"
                                                    (LEMMA "floor_plus_int")
                                                    (("2"
                                                      (INST - "-dExp(b)"
                                                       "ln(yy)/ln(radix)")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (CASE
                                            "ln(radix^(-dExp(b)))/ln(radix) = -dExp(b)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE (2 3))
                                          (("2" (CROSS-MULT 1)
                                            (("2" (REWRITE "ln_expt") NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (LEMMA "expt_plus")
                            (("2" (INST - "Prec(b)-1+-dExp(b)" "1" "radix")
                              (("2" (EXPAND "^" - 3)
                                (("2" (EXPAND "expt")
                                  (("2" (EXPAND "expt")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (LEMMA "posreal_times_posreal_is_posreal")
                          (("2" (INST?) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (EXPAND "vNum")
          (("3" (MULT-BY 1 "radix ^ (Prec(b) - 1 + -dExp(b))")
            (("3" (LEMMA "expt_plus")
              (("3"
                (INST - "1 + dExp(b) - Prec(b)" "Prec(b) - 1 + -dExp(b)"
                 "radix")
                (("3" (ASSERT)
                  (("3" (REPLACE -1 :DIR RL)
                    (("3" (LEMMA "expt_plus")
                      (("3" (INST - "Prec(b)" "-dExp(b)-1" "radix")
                        (("3" (ASSERT)
                          (("3" (CASE "dExp(b) + -dExp(b) = 0")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (USE "expt_x0") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP)
        (("5" (ASSERT)
          (("5" (LEMMA "exp_ln")
            (("5" (INST?) (("5" (REPLACE -3) (("5" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (HIDE 2)
      (("6" (SKEEP)
        (("6" (CROSS-MULT 1)
          (("6" (ASSERT)
            (("6" (LEMMA "posreal_times_posreal_is_posreal")
              (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (HIDE 2) (("7" (SKEEP) (("7" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat|
     |reals|))
   NIL))
 (|RND_aux_TCC1| 0
  (|RND_aux_TCC1-1| |nil| 3318940757 ("" (SUBTYPE-TCC) NIL NIL)
   ((|hat_02n| FORMULA-DECL NIL |power_series| |series|)) NIL
   (|RND_aux| SUBTYPE "(dExp(float.b))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_TCC2| 0
  (|RND_aux_TCC2-2| "" 3790102662
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      ((""
        (CASE
            "Fsubnormal?(b) ((# Fnum := floor(x * radix ^ (dExp(b))), Fexp := -dExp(b) #))")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND* "Fsubnormal?")
            (("2" (CASE "abs(radix * floor(x * radix ^ (dExp(b)))) < vNum(b)")
              (("1" (EXPAND "Fbounded?")
                (("1" (SPLIT)
                  (("1" (REWRITE "abs_mult" -1)
                    (("1" (EXPAND "abs" -1 1)
                      (("1" (MULT-BY 1 "radix")
                        (("1"
                          (SWAP "abs(floor(x * radix ^ (dExp(b))))" * "radix")
                          (("1" (CASE "vNum(b)<=vNum(b) * radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 -2 2)
                              (("2" (DIV-BY 1 "vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "abs_mult")
                  (("2" (EXPAND "abs" 1 1)
                    (("2" (DIV-BY 1 "radix")
                      (("2" (CASE "floor(x * radix ^ (dExp(b))) >=0")
                        (("1" (EXPAND "abs" 1 1)
                          (("1"
                            (CASE "x * radix ^ (dExp(b)) < vNum(b) / radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 2)
                              (("2" (LEMMA "expt_inverse")
                                (("2" (INST -1 "dExp(b)+1" "radix")
                                  (("2"
                                    (CASE-REPLACE
                                     "-(dExp(b) + 1)=-dExp(b) - 1")
                                    (("1" (REWRITE -2 -3)
                                      (("1" (REWRITE "expt_plus" -3)
                                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 2) (("2" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|RND_aux| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(float.x, (exponentiation.^(float.radix, (dExp(float.b)))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
    "(float.Fcanonic?(float.b))"))
  (|RND_aux_TCC2-1| |nil| 3318940757
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      ((""
        (CASE "Fsubnormal?(b)
                                       ((# Fnum := floor(x * radix ^ (dExp(b))),
                                           Fexp := -dExp(b) #))")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND* "Fsubnormal?")
            (("2" (CASE "abs(radix * floor(x * radix ^ (dExp(b)))) < vNum(b)")
              (("1" (EXPAND "Fbounded?")
                (("1" (SPLIT)
                  (("1" (REWRITE "abs_mult" -1)
                    (("1" (EXPAND "abs" -1 1)
                      (("1" (MULT-BY 1 "radix")
                        (("1"
                          (SWAP "abs(floor(x * radix ^ (dExp(b))))" * "radix")
                          (("1" (CASE "vNum(b)<=vNum(b) * radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 -2 2)
                              (("2" (DIV-BY 1 "vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "abs_mult")
                  (("2" (EXPAND "abs" 1 1)
                    (("2" (DIV-BY 1 "radix")
                      (("2" (CASE "floor(x * radix ^ (dExp(b))) >=0")
                        (("1" (EXPAND "abs" 1 1)
                          (("1"
                            (CASE "x * radix ^ (dExp(b)) < vNum(b) / radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 2)
                              (("2" (LEMMA "expt_inverse")
                                (("2" (INST -1 "dExp(b)+1" "radix")
                                  (("2"
                                    (CASE-REPLACE
                                     "-(dExp(b) + 1)=-dExp(b) - 1")
                                    (("1" (REWRITE -2 -3)
                                      (("1" (REWRITE "expt_plus" -3)
                                        (("1" (GRIND-REALS)
                                          (("1" (USE "expt_x1")
                                            (("1" (REPLACE -1 :HIDE? T)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 2) (("2" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(float.x, (exponentiation.^(float.radix, (dExp(float.b)))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
    "(float.Fcanonic?(float.b))")))
 (|RND_aux_TCC3| 0
  (|RND_aux_TCC3-2| "" 3318950531 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL
   SHOSTAK
   (|RND_aux| SUBTYPE
    "((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}"))
  (|RND_aux_TCC3-1| |nil| 3318940757
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      ((""
        (CASE "Fsubnormal?(b)
                  ((# Fnum := floor(x * radix ^ (dExp(b))),
                      Fexp := -dExp(b) #))")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND* "Fsubnormal?")
            (("2" (CASE "abs(radix * floor(x * radix ^ (dExp(b)))) < vNum(b)")
              (("1" (EXPAND "Fbounded?")
                (("1" (SPLIT)
                  (("1" (REWRITE "abs_mult" -1)
                    (("1" (EXPAND "abs" -1 1)
                      (("1" (MULT-BY 1 "radix")
                        (("1"
                          (SWAP "abs(floor(x * radix ^ (dExp(b))))" * "radix")
                          (("1" (CASE "vNum(b)<=vNum(b) * radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 -2 2)
                              (("2" (DIV-BY 1 "vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "abs_mult")
                  (("2" (EXPAND "abs" 1 1)
                    (("2" (EXPAND "abs" 1 1)
                      (("2" (DIV-BY 1 "radix")
                        (("2" (CASE "x * radix ^ (dExp(b)) < vNum(b) / radix")
                          (("1" (GRIND-REALS)
                            (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (DIV-BY 1 "radix ^ (dExp(b))")
                              (("2"
                                (CASE
                                    "radix ^ (-dExp(b) - 1)=1/radix ^ (dExp(b)+1)")
                                (("1" (REWRITE -1 -2)
                                  (("1" (REWRITE "expt_plus")
                                    (("1" (REWRITE "expt_x1")
                                      (("1" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (GRIND-REALS) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux| SUBTYPE
    "((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b)))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_TCC4| 0
  (|RND_aux_TCC4-2| "" 3790102664
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (REWRITE "expt_plus" :DIR RL)
        (("" (MULT-BY 2 "radix ^ (Prec(b) - 1 + -dExp(b))")
          (("" (ASSERT)
            (("" (REWRITE "expt_plus" :DIR RL) (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|RND_aux| SUBTYPE
    "number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b))))))"
    "{x: reals.real | reals.>=(x, 1)}"))
  (|RND_aux_TCC4-1| |nil| 3318940757
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (REWRITE "expt_plus" :DIR RL)
        (("" (MULT-BY 2 "radix ^ (Prec(b) - 1 + -dExp(b))")
          (("" (ASSERT)
            (("" (REWRITE "expt_plus" :DIR RL)
              (("" (ASSERT)
                (("" (EXPAND ">=")
                  (("" (CASE "dExp(b) + -dExp(b) = 0")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (USE "expt_x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux| SUBTYPE
    "number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)(1, dExp(float.b)), Prec(float.b))))))"
    "{x: reals.real | reals.>=(x, 1)}")))
 (|RND_aux_TCC5| 0
  (|RND_aux_TCC5-1| |nil| 3318940757
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (REWRITE "expt_plus" :DIR RL)
        (("" (MULT-BY 1 "radix ^ (1 + dExp(b) - Prec(b))")
          (("" (REWRITE "expt_plus" :DIR RL) (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux| SUBTYPE "((number_fields.-)(float.e))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_TCC6| 0
  (|owre| "fix" 3399983082
   ("" (SKEEP)
    (("" (LEMMA "RND_log_compute")
      (("" (INST?)
        (("" (ASSERT)
          (("" (REPLACE -1 :DIR RL)
            (("" (HIDE -1)
              (("" (SKOSIMP)
                (("" (EXPAND "Fcanonic?")
                  (("" (ASSERT)
                    (("" (FLATTEN)
                      (("" (TYPEPRED "e!1")
                        (("" (REPLACE -2 :HIDE? T)
                          ((""
                            (NAME "AA"
                                  "floor(ln(x * radix / vNum(b)) / ln(radix))")
                            (("" (REPLACE -1)
                              (("" (EXPAND "Fnormal?")
                                (("" (EXPAND "Fbounded?")
                                  (("" (SPLIT)
                                    (("1" (CASE "0<= floor(x * radix ^ (-AA))")
                                      (("1" (EXPAND "abs" 1 1)
                                        (("1" (GRIND-REALS)
                                          (("1"
                                            (CASE
                                                "x * radix ^ (-AA) < vNum(b)")
                                            (("1" (GRIND-REALS) NIL NIL)
                                             ("2" (HIDE 2 -1)
                                              (("2"
                                                (CASE
                                                    "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                                (("1" (REPLACE -1)
                                                  (("1"
                                                    (CASE
                                                        "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                                    (("1"
                                                      (CASE
                                                          "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                                      (("1" (HIDE -3 -4)
                                                        (("1"
                                                          (NAME-REPLACE "WW"
                                                           "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2 -1 -2 -3)
                                                        (("2"
                                                          (CASE-REPLACE
                                                           "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                          (("1" (FIELD)
                                                            (("1"
                                                              (REWRITE
                                                               "hathatln")
                                                              (("1" (FIELD) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (REWRITE
                                                               "ln_div")
                                                              (("2"
                                                                (REWRITE
                                                                 "ln_div")
                                                                (("2"
                                                                  (REWRITE
                                                                   "ln_mult")
                                                                  (("2" (FIELD)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE -1 2)
                                                      (("2" (CANCEL-BY 1 "x")
                                                        (("2" (HIDE -1 2)
                                                          (("2" (EXPAND "^^")
                                                            (("2"
                                                              (LEMMA
                                                               "exp_strict_increasing")
                                                              (("2"
                                                                (EXPAND
                                                                 "strict_increasing?")
                                                                (("2"
                                                                  (REWRITE -1)
                                                                  (("2"
                                                                    (HIDE -1 2)
                                                                    (("2"
                                                                      (FIELD)
                                                                      (("2"
                                                                        (CASE
                                                                            "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "ln_div")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "ln_mult")
                                                                            (("1"
                                                                              (FIELD)
                                                                              (("1"
                                                                                (MULT-BY
                                                                                 -1
                                                                                 "ln(radix)")
                                                                                (("1"
                                                                                  (FIELD
                                                                                   -1)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "ln(radix) > 0")
                                                                                    (("1"
                                                                                      (SPLIT)
                                                                                      (("1"
                                                                                        (GRIND-REALS)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "ln_strict_increasing")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "strict_increasing?")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "1"
                                                                                             "radix")
                                                                                            (("2"
                                                                                              (GRIND-REALS)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -1
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (CASE
                                                                                  "x>0")
                                                                              (("1"
                                                                                (GRIND-REALS)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (GRIND-REALS)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (GRIND-REALS)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE -1 -2 2)
                                                  (("2" (REWRITE "hathat_int")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (CASE "0 <= x * radix ^ (-AA)")
                                        (("1" (HIDE -2 -3 2)
                                          (("1" (GRIND-REALS) NIL NIL)) NIL)
                                         ("2" (HIDE -1 -2 2 3)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (CASE
                                          "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                                      (("1" (GRIND-REALS) NIL NIL)
                                       ("2" (HIDE -2 2)
                                        (("2" (MULT-BY 1 "ln(radix)" +)
                                          (("1" (BOTH-SIDES-F 1 "exp")
                                            (("1"
                                              (CASE-REPLACE
                                               "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                              (("1" (REWRITE "exp_ln")
                                                (("1" (DIV-BY 1 "radix")
                                                  (("1" (MULT-BY 1 "vNum(b)")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                                      (("1" (FIELD)
                                                        (("1"
                                                          (REWRITE
                                                           "hathat_int")
                                                          (("1"
                                                            (DIV-BY 1 "radix")
                                                            (("1"
                                                              (HIDE -1 -2 -4)
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                                (("1"
                                                                  (HIDE -2 2)
                                                                  (("1"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE 2 -1
                                                                   -2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "expt_plus")
                                                                    (("2"
                                                                      (INST -1
                                                                       "-dExp(b)"
                                                                       "-1"
                                                                       "radix")
                                                                      (("2"
                                                                        (GRIND-REALS)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "^"
                                                                           1 2)
                                                                          (("2"
                                                                            (GRIND-REALS)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "expt_x1_aux")
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2 -1 -2)
                                                        (("2" (CROSS-MULT 1)
                                                          (("2"
                                                            (CASE
                                                                "radix^(-dExp(b)-1)*radix = radix^(-dExp(b)-1)*radix^1")
                                                            (("1" (REPLACE -1)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (REWRITE
                                                                   "expt_plus"
                                                                   :DIR RL)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND "^" 1)
                                                              (("2"
                                                                (EXPAND "expt"
                                                                        1)
                                                                (("2"
                                                                  (EXPAND
                                                                   "expt" 1)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -1 2)
                                                (("2" (EXPAND "^^")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (LEMMA "ln_increasing")
                                              (("2" (EXPAND "increasing?")
                                                (("2" (LEMMA "ln_exp")
                                                  (("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2 -1)
                                            (("2" (CASE "ln(radix) > 0")
                                              (("1" (SPLIT)
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (LEMMA
                                                   "ln_strict_increasing")
                                                  (("2"
                                                    (EXPAND
                                                     "strict_increasing?")
                                                    (("2" (INST -1 "1" "radix")
                                                      (("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (EXPAND "abs" 1 1)
                                      (("3" (GRIND-REALS)
                                        (("3" (CANCEL-BY 1 "radix")
                                          (("3" (HIDE -1 1)
                                            (("3"
                                              (CASE
                                                  "vNum(b) / radix <= x * radix ^ (-AA)")
                                              (("1"
                                                (CASE
                                                    "integer_pred(vNum(b) / radix)")
                                                (("1" (HIDE -3 -4)
                                                  (("1" (LEMMA "div_simple")
                                                    (("1"
                                                      (INST -1 "vNum(b)"
                                                       "radix")
                                                      (("1"
                                                        (CASE
                                                            "(EXISTS (k:int): vNum(b) = k * radix)")
                                                        (("1" (SKOSIMP*)
                                                          (("1"
                                                            (CASE-REPLACE
                                                             " vNum(b) / radix=k!1")
                                                            (("1" (GRIND-REALS)
                                                              NIL NIL)
                                                             ("2"
                                                              (HIDE -2 -3 -4 2)
                                                              (("2"
                                                                (GRIND-REALS)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE -3 2)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (HIDE-ALL-BUT 1)
                                                    (("2"
                                                      (REWRITE
                                                       "radix_div_vNum")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (CASE
                                                      "vNum(b) / radix <= x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                                  (("1"
                                                    (CASE
                                                        "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                                    (("1"
                                                      (NAME-REPLACE "A1"
                                                       "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                                      (("1"
                                                        (NAME-REPLACE "A2"
                                                         "vNum(b) / radix")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE 2 -1)
                                                      (("2" (CANCEL-BY 1 "x")
                                                        (("2" (HIDE -1 1)
                                                          (("2"
                                                            (CASE-REPLACE
                                                             "radix ^ (-AA)=radix ^^ (-AA)")
                                                            (("1" (EXPAND "^^")
                                                              (("1"
                                                                (LEMMA
                                                                 "exp_increasing")
                                                                (("1"
                                                                  (EXPAND
                                                                   "increasing?")
                                                                  (("1"
                                                                    (REWRITE
                                                                     -1)
                                                                    (("1"
                                                                      (HIDE -1
                                                                       -2 -3 2)
                                                                      (("1"
                                                                        (DIV-BY
                                                                         1
                                                                         "-ln(radix)"
                                                                         -)
                                                                        (("1"
                                                                          (FIELD)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (CASE
                                                                              "ln(radix)>0")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -1
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "ln_strict_increasing")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "strict_increasing?")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "1"
                                                                                   "radix")
                                                                                  (("2"
                                                                                    (GRIND-REALS)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (HIDE -1 -2 2)
                                                              (("2"
                                                                (REWRITE
                                                                 "hathat_int")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -1 -2 2)
                                                    (("2" (REWRITE "hathatln")
                                                      (("2" (FIELD) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exp_increasing| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_increasing| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_exp| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|exp_ln| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|)
    (|exp_strict_increasing| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_1| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_strict_increasing| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|ln_div| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (|ln_mult| FORMULA-DECL NIL |ln_exp| |lnexp|)
    (^^ CONST-DECL "nnreal" |expt| |lnexp|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|))
   SHOSTAK
   (|RND_aux| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)(float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))"))
  (|RND_aux_TCC6-2| |nil| 3399983047
   (";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6" (SKEEP)
    ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6" (SKOSIMP)
      ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
        (EXPAND "Fcanonic?")
        ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6" (ASSERT)
          ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6" (FLATTEN)
            ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
              (TYPEPRED "e!1")
              ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                (REPLACE -3 :HIDE? T)
                ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                  (NAME "AA" "floor(ln(x * radix / vNum(b)) / ln(radix))")
                  ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                    (REPLACE -1)
                    ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                      (EXPAND "Fnormal?")
                      ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                        (EXPAND "Fbounded?")
                        ((";;; Proof RND_aux_TCC6-2 for formula float.RND_aux_TCC6"
                          (SPLIT)
                          (("1" (CASE "0<= floor(x * radix ^ (-AA))")
                            (("1" (EXPAND "abs" 1 1)
                              (("1" (GRIND-REALS)
                                (("1" (CASE "x * radix ^ (-AA) < vNum(b)")
                                  (("1" (GRIND-REALS) NIL)
                                   ("2" (HIDE 2 -1)
                                    (("2"
                                      (CASE
                                          "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                      (("1" (REPLACE -1)
                                        (("1"
                                          (CASE
                                              "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                          (("1"
                                            (CASE
                                                "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                            (("1" (HIDE -3 -4)
                                              (("1"
                                                (NAME-REPLACE "WW"
                                                 "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                (("1" (ASSERT) NIL)))))
                                             ("2" (HIDE 2 -1 -2 -3)
                                              (("2"
                                                (CASE-REPLACE
                                                 "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                (("1" (FIELD)
                                                  (("1" (REWRITE "hathatln")
                                                    (("1" (FIELD) NIL)))))
                                                 ("2" (HIDE 2)
                                                  (("2" (REWRITE "ln_div")
                                                    (("2" (REWRITE "ln_div")
                                                      (("2" (REWRITE "ln_mult")
                                                        (("2" (FIELD)
                                                          NIL)))))))))))))))
                                           ("2" (HIDE -1 2)
                                            (("2" (CANCEL-BY 1 "x")
                                              (("2" (HIDE -1 2)
                                                (("2" (EXPAND "^^")
                                                  (("2"
                                                    (LEMMA
                                                     "exp_strict_increasing")
                                                    (("2"
                                                      (EXPAND
                                                       "strict_increasing?")
                                                      (("2" (REWRITE -1)
                                                        (("2" (HIDE -1 2)
                                                          (("2" (FIELD)
                                                            (("2"
                                                              (CASE
                                                                  "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                              (("1"
                                                                (REWRITE
                                                                 "ln_div")
                                                                (("1"
                                                                  (REWRITE
                                                                   "ln_mult")
                                                                  (("1" (FIELD)
                                                                    (("1"
                                                                      (MULT-BY
                                                                       -1
                                                                       "ln(radix)")
                                                                      (("1"
                                                                        (FIELD
                                                                         -1)
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         -1 -2
                                                                         2)
                                                                        (("2"
                                                                          (CASE
                                                                              "ln(radix) > 0")
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (GRIND-REALS)
                                                                              NIL)
                                                                             ("2"
                                                                              (PROPAX)
                                                                              NIL)))
                                                                           ("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "ln_strict_increasing")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "strict_increasing?")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "1"
                                                                                   "radix")
                                                                                  (("2"
                                                                                    (GRIND-REALS)
                                                                                    NIL)))))))))))))))))))
                                                                 ("2"
                                                                  (HIDE -1 -2
                                                                   2)
                                                                  (("2"
                                                                    (CASE
                                                                        "x>0")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (GRIND-REALS)
                                                                        NIL)))))))))
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (GRIND-REALS)
                                                                  NIL)))))))))))))))))))))))))))
                                       ("2" (HIDE -1 -2 2)
                                        (("2" (REWRITE "hathat_int")
                                          NIL)))))))))))))
                             ("2" (CASE "0 <= x * radix ^ (-AA)")
                              (("1" (HIDE -2 -3 2) (("1" (GRIND-REALS) NIL)))
                               ("2" (HIDE -1 -2 2 3)
                                (("2" (GRIND-REALS) NIL)))))))
                           ("2"
                            (CASE
                                "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                            (("1" (GRIND-REALS) NIL)
                             ("2" (HIDE -2 2)
                              (("2" (MULT-BY 1 "ln(radix)" +)
                                (("1" (WRAP-FORMULA 1 "exp")
                                  (("1"
                                    (CASE-REPLACE
                                     "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                    (("1" (REWRITE "exp_ln")
                                      (("1" (DIV-BY 1 "radix")
                                        (("1" (MULT-BY 1 "vNum(b)")
                                          (("1"
                                            (CASE-REPLACE
                                             " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                            (("1" (FIELD)
                                              (("1" (REWRITE "hathat_int")
                                                (("1" (DIV-BY 1 "radix")
                                                  (("1" (HIDE -1 -2 -4)
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                      (("1" (HIDE -2 2)
                                                        (("1" (GRIND-REALS)
                                                          NIL)))
                                                       ("2" (HIDE 2 -1 -2)
                                                        (("2"
                                                          (LEMMA "expt_plus")
                                                          (("2"
                                                            (INST -1 "-dExp(b)"
                                                             "-1" "radix")
                                                            (("2" (GRIND-REALS)
                                                              (("2"
                                                                (EXPAND "^" 1
                                                                        2)
                                                                (("2"
                                                                  (GRIND-REALS)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "expt_x1_aux")
                                                                    NIL)))))))))))))))))))))))
                                             ("2" (HIDE 2 -1 -2)
                                              (("2" (LEMMA "expt_plus")
                                                (("2"
                                                  (INST -1 "-dExp(b)" "-1"
                                                   "radix")
                                                  (("2" (GRIND-REALS)
                                                    (("2" (EXPAND "^" 1 2)
                                                      (("2" (GRIND-REALS)
                                                        (("2"
                                                          (REWRITE
                                                           "expt_x1_aux")
                                                          NIL)))))))))))))))))))))
                                     ("2" (HIDE -1 2)
                                      (("2" (EXPAND "^^")
                                        (("2" (PROPAX) NIL)))))))
                                   ("2" (LEMMA "ln_increasing")
                                    (("2" (EXPAND "increasing?")
                                      (("2" (LEMMA "ln_exp")
                                        (("2" (GRIND-REALS) NIL)))))))))
                                 ("2" (HIDE 2 -1)
                                  (("2" (CASE "ln(radix) > 0")
                                    (("1" (SPLIT)
                                      (("1" (ASSERT) NIL) ("2" (PROPAX) NIL)))
                                     ("2" (HIDE 2)
                                      (("2" (LEMMA "ln_strict_increasing")
                                        (("2" (EXPAND "strict_increasing?")
                                          (("2" (INST -1 "1" "radix")
                                            (("2" (GRIND-REALS)
                                              NIL)))))))))))))))))))
                           ("3" (EXPAND "abs" 1 1)
                            (("3" (GRIND-REALS)
                              (("3" (CANCEL-BY 1 "radix")
                                (("3" (HIDE -1 1)
                                  (("3"
                                    (CASE
                                        "vNum(b) / radix <= x * radix ^ (-AA)")
                                    (("1"
                                      (CASE "integer_pred(vNum(b) / radix)")
                                      (("1" (HIDE -3 -4)
                                        (("1" (LEMMA "div_simple")
                                          (("1" (INST -1 "vNum(b)" "radix")
                                            (("1"
                                              (CASE
                                                  "(EXISTS (k:int): vNum(b) = k * radix)")
                                              (("1" (SKOSIMP*)
                                                (("1"
                                                  (CASE-REPLACE
                                                   " vNum(b) / radix=k!1")
                                                  (("1" (GRIND-REALS) NIL)
                                                   ("2" (HIDE -2 -3 -4 2)
                                                    (("2" (GRIND-REALS)
                                                      NIL)))))))
                                               ("2" (HIDE -3 2)
                                                (("2" (ASSERT) NIL)))))))))))
                                       ("2" (ASSERT)
                                        (("2" (HIDE-ALL-BUT 1)
                                          (("2" (REWRITE "radix_div_vNum")
                                            NIL)))))))
                                     ("2" (HIDE 2)
                                      (("2"
                                        (CASE
                                            "vNum(b) / radix <=  x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                        (("1"
                                          (CASE
                                              "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                          (("1" (ASSERT) NIL)
                                           ("2" (HIDE 2 -1)
                                            (("2" (CANCEL-BY 1 "x")
                                              (("2" (HIDE -1 1)
                                                (("2"
                                                  (CASE-REPLACE
                                                   "radix ^ (-AA)=radix ^^ (-AA)")
                                                  (("1" (EXPAND "^^")
                                                    (("1"
                                                      (LEMMA "exp_increasing")
                                                      (("1"
                                                        (EXPAND "increasing?")
                                                        (("1" (REWRITE -1)
                                                          (("1"
                                                            (HIDE -1 -2 -3 2)
                                                            (("1"
                                                              (DIV-BY 1
                                                               "-ln(radix)" -)
                                                              (("1" (FIELD)
                                                                NIL)
                                                               ("2"
                                                                (CASE
                                                                    "ln(radix)>0")
                                                                (("1" (ASSERT)
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE -1 2 3)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "ln_strict_increasing")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "strict_increasing?")
                                                                      (("2"
                                                                        (INST
                                                                         -1 "1"
                                                                         "radix")
                                                                        (("2"
                                                                          (GRIND-REALS)
                                                                          NIL)))))))))))))))))))))))
                                                   ("2" (HIDE -1 -2 2)
                                                    (("2"
                                                      (REWRITE "hathat_int")
                                                      NIL)))))))))))))
                                         ("2" (HIDE -1 -2 2)
                                          (("2" (REWRITE "hathatln")
                                            (("2" (FIELD)
                                              NIL))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   ((|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|))
   NIL
   (|RND_aux| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)(float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))"))
  (|RND_aux_TCC6-1| |nil| 3318940757
   ("" (SKEEP)
    ((""
      (CASE "Fnormal?(b)
                                   ((# Fnum
                                         := floor(x *
                                                   radix ^
                                                    (-floor(ln(x * radix / vNum(b))
                                                            /
                                                            ln(radix)))),
                                       Fexp := floor(ln(x * radix / vNum(b)) / ln(radix)) #))")
      (("1" (EXPAND "Fcanonic?") (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE 3)
        (("2" (NAME "AA" "floor(ln(x * radix / vNum(b)) / ln(radix))")
          (("2" (REPLACE -1 1)
            (("2" (CASE "radix ^ (-dExp(b) - 1) * vNum(b) <= x")
              (("1" (HIDE 2)
                (("1" (EXPAND* "Fnormal?" "Fbounded?")
                  (("1" (SPLIT)
                    (("1" (CASE "0<= floor(x * radix ^ (-AA))")
                      (("1" (EXPAND "abs" 1 1)
                        (("1" (GRIND-REALS)
                          (("1" (CASE "x * radix ^ (-AA) < vNum(b)")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE 2 -1)
                              (("2"
                                (CASE "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                (("1" (REPLACE -1)
                                  (("1"
                                    (CASE
                                        "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                    (("1"
                                      (CASE
                                          "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                      (("1" (HIDE -3 -4)
                                        (("1"
                                          (NAME-REPLACE "WW"
                                           "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (HIDE 2 -1 -2 -3)
                                        (("2"
                                          (CASE-REPLACE
                                           "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                          (("1" (FIELD)
                                            (("1" (REWRITE "hathatln")
                                              (("1" (FIELD) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (REWRITE "ln_div")
                                              (("2" (REWRITE "ln_div")
                                                (("2" (REWRITE "ln_mult")
                                                  (("2" (FIELD) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 2)
                                      (("2" (CANCEL-BY 1 "x")
                                        (("2" (HIDE -1 2)
                                          (("2" (EXPAND "^^")
                                            (("2"
                                              (LEMMA "exp_strict_increasing")
                                              (("2"
                                                (EXPAND "strict_increasing?")
                                                (("2" (REWRITE -1)
                                                  (("2" (HIDE -1 2)
                                                    (("2" (FIELD)
                                                      (("2"
                                                        (CASE
                                                            "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                        (("1"
                                                          (REWRITE "ln_div")
                                                          (("1"
                                                            (REWRITE "ln_mult")
                                                            (("1" (FIELD)
                                                              (("1"
                                                                (MULT-BY -1
                                                                 "ln(radix)")
                                                                (("1"
                                                                  (FIELD -1)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE -1 -2
                                                                   2)
                                                                  (("2"
                                                                    (CASE
                                                                        "ln(radix) > 0")
                                                                    (("1"
                                                                      (SPLIT)
                                                                      (("1"
                                                                        (GRIND-REALS)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE 2)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "ln_strict_increasing")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "strict_increasing?")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "1"
                                                                             "radix")
                                                                            (("2"
                                                                              (GRIND-REALS)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE -1 -2 2)
                                                            (("2" (CASE "x>0")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL)
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE 2)
                                                          (("2" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1 -2 2)
                                  (("2" (REWRITE "hathat_int") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "0 <= x * radix ^ (-AA)")
                        (("1" (HIDE -2 -3 2) (("1" (GRIND-REALS) NIL NIL)) NIL)
                         ("2" (HIDE -1 -2 2 3) (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2"
                      (CASE "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                      (("1" (GRIND-REALS) NIL NIL)
                       ("2" (HIDE -2 2)
                        (("2" (MULT-BY 1 "ln(radix)" +)
                          (("1" (WRAP-FORMULA 1 "exp")
                            (("1"
                              (CASE-REPLACE
                               "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                              (("1" (REWRITE "exp_ln")
                                (("1" (DIV-BY 1 "radix")
                                  (("1" (MULT-BY 1 "vNum(b)")
                                    (("1"
                                      (CASE-REPLACE
                                       " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                      (("1" (FIELD)
                                        (("1" (REWRITE "hathat_int")
                                          (("1" (DIV-BY 1 "radix")
                                            (("1" (HIDE -1 -2 -4)
                                              (("1"
                                                (CASE-REPLACE
                                                 "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                (("1" (HIDE -2 2)
                                                  (("1" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2 -1 -2)
                                        (("2" (LEMMA "expt_plus")
                                          (("2"
                                            (INST -1 "-dExp(b)" "-1" "radix")
                                            (("2" (GRIND-REALS)
                                              (("2" (EXPAND "^" 1 2)
                                                (("2" (GRIND-REALS)
                                                  (("2" (REWRITE "expt_x1_aux")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -1 2)
                                (("2" (EXPAND "^^") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "ln_increasing")
                              (("2" (EXPAND "increasing?")
                                (("2" (LEMMA "ln_exp")
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2 -1)
                            (("2" (CASE "ln(radix) > 0")
                              (("1" (SPLIT)
                                (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (LEMMA "ln_strict_increasing")
                                  (("2" (EXPAND "strict_increasing?")
                                    (("2" (INST -1 "1" "radix")
                                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "abs" 1 1)
                      (("3" (GRIND-REALS)
                        (("3" (CANCEL-BY 1 "radix")
                          (("3" (HIDE -1 1)
                            (("3" (CASE "vNum(b) / radix <= x * radix ^ (-AA)")
                              (("1" (CASE "integer_pred(vNum(b) / radix)")
                                (("1" (HIDE -3 -4)
                                  (("1" (LEMMA "div_simple")
                                    (("1" (INST -1 "vNum(b)" "radix")
                                      (("1"
                                        (CASE
                                            "(EXISTS (k:int): vNum(b) = k * radix)")
                                        (("1" (SKOSIMP*)
                                          (("1"
                                            (CASE-REPLACE
                                             " vNum(b) / radix=k!1")
                                            (("1" (GRIND-REALS) NIL NIL)
                                             ("2" (HIDE -2 -3 -4 2)
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE -3 2)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (HIDE-ALL-BUT 1)
                                    (("2" (REWRITE "radix_div_vNum") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2"
                                  (CASE
                                      "vNum(b) / radix <=  x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                  (("1"
                                    (CASE
                                        "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE 2 -1)
                                      (("2" (CANCEL-BY 1 "x")
                                        (("2" (HIDE -1 1)
                                          (("2"
                                            (CASE-REPLACE
                                             "radix ^ (-AA)=radix ^^ (-AA)")
                                            (("1" (EXPAND "^^")
                                              (("1" (LEMMA "exp_increasing")
                                                (("1" (EXPAND "increasing?")
                                                  (("1" (REWRITE -1)
                                                    (("1" (HIDE -1 -2 -3 2)
                                                      (("1"
                                                        (DIV-BY 1 "-ln(radix)"
                                                         -)
                                                        (("1" (FIELD) NIL NIL)
                                                         ("2"
                                                          (CASE "ln(radix)>0")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE -1 2 3)
                                                            (("2"
                                                              (LEMMA
                                                               "ln_strict_increasing")
                                                              (("2"
                                                                (EXPAND
                                                                 "strict_increasing?")
                                                                (("2"
                                                                  (INST -1 "1"
                                                                   "radix")
                                                                  (("2"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE -1 -2 2)
                                              (("2" (REWRITE "hathat_int") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE -1 -2 2)
                                    (("2" (REWRITE "hathatln")
                                      (("2" (FIELD) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (HIDE 2 3) (("3" (GRIND-REALS) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|))
   NIL
   (|RND_aux| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)(float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))")))
 (|RND_aux_alt_TCC1| 0
  (|RND_aux_alt_TCC1-1| |nil| 3544343150
   ("" (SKEEP)
    (("" (CASE "x>=0") (("1" (SPLIT-INEQ -1) NIL NIL) ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux_alt| SUBTYPE
    "number_fields./(number_fields.*(float.x, float.radix), float.vNum(float.b))"
    "posreal")))
 (|RND_aux_alt_TCC2| 0
  (|RND_aux_alt_TCC2-2| "" 3790102683
   ("" (SKOSIMP*)
    (("" (CASE "radix = 1")
      (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|RND_aux_alt| SUBTYPE "((number_fields.-)(float.e))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}"))
  (|RND_aux_alt_TCC2-1| |nil| 3544343150
   ("" (SKOSIMP*)
    (("" (CASE "radix = 1")
      (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (ASSERT)
        (("2" (LEMMA "ln_eq_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux_alt| SUBTYPE "((number_fields.-)(float.e))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_alt_TCC3| 0
  (|RND_aux_alt_TCC3-1| |nil| 3544343150
   ("" (SKEEP)
    (("" (LEMMA "RND_aux_TCC6")
      (("" (INST?)
        (("" (ASSERT)
          (("" (SKOSIMP*)
            (("" (INST - "e!1")
              (("" (GROUND)
                (("" (LEMMA "RND_log_compute")
                  (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ln| CONST-DECL "real" |ln_exp| |lnexp|)) NIL
   (|RND_aux_alt| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(float.x, (exponentiation.^(float.radix, ((number_fields.-)(float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))")))
 (|RND_aux_alt_def| 0
  (|RND_aux_alt_def-1| |nil| 3544343151
   ("" (DECOMPOSE-EQUALITY)
    (("" (DECOMPOSE-EQUALITY)
      (("" (EXPAND "RND_aux")
        (("" (EXPAND "RND_aux_alt")
          (("" (LIFT-IF)
            (("" (GROUND)
              (("" (LEMMA "RND_log_compute")
                (("" (INST - "x!1" "x!2") (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_Min_TCC1| 0
  (|RND_Min_TCC1-1| |nil| 3319384410 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_Min| SUBTYPE "float.x" "nonneg_real")))
 (|RND_Min_TCC2| 0
  (|RND_Min_TCC2-1| |nil| 3319384410 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_Min| SUBTYPE "(number_fields.-)(float.x)" "nonneg_real")))
 (|RND_Min_TCC3| 0
  (|RND_Min_TCC3-1| |nil| 3319384410
   ("" (SKEEP*)
    (("" (REPLACE -1 :HIDE? T)
      (("" (LEMMA "FcanonicOpp")
        (("" (INST -1 "b" "RND_aux(b)(-x)")
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL (|RND_Min| SUBTYPE "float.ofmx" "(float.Fcanonic?(float.b))")))
 (|RND_Min_TCC4| 0
  (|RND_Min_TCC4-1| |nil| 3319384410
   ("" (SKEEP*)
    (("" (REPLACE -1 :HIDE? T)
      (("" (REWRITE "FpredCanonic")
        (("" (LEMMA "FcanonicOpp")
          (("" (INST -1 "b" "RND_aux(b)(-x)") (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_Min| SUBTYPE "float.Fpred(float.b)(float.ofmx)"
    "(float.Fcanonic?(float.b))")))
 (|RND_Max_TCC1| 0
  (|RND_Max_TCC1-1| |nil| 3319894713
   ("" (SKEEP)
    (("" (LEMMA "FcanonicOpp")
      (("" (INST -1 "b" "RND_Min(b)(-x)") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   NIL NIL
   (|RND_Max| SUBTYPE
    "float.Fopp(float.RND_Min(float.b)((number_fields.-)(float.x)))"
    "(float.Fcanonic?(float.b))")))
 (|Exp_incr_1_TCC1| 0
  (|Exp_incr_1_TCC1-1| |nil| 3318763952 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Exp_incr_1| SUBTYPE "float.e2"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|Exp_incr_1| 0
  (|Exp_incr_1-1| |nil| 3318763991
   ("" (SKEEP)
    (("" (USE "both_sides_expt_gt1_lt")
      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|Exp_incr_2| 0
  (|Exp_incr_2-1| |nil| 3318865674
   ("" (SKEEP)
    (("" (USE " both_sides_expt_gt1_lt")
      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|Exp_increq_1_TCC1| 0
  (|Exp_increq_1_TCC1-1| |nil| 3318783146 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Exp_increq_1| SUBTYPE "float.e2"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|Exp_increq_1| 0
  (|Exp_increq_1-1| |nil| 3318865769
   ("" (SKEEP)
    (("" (USE "both_sides_expt_gt1_le")
      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|Exp_increq_2| 0
  (|Exp_increq_2-1| |nil| 3318865818
   ("" (SKEEP)
    (("" (USE "both_sides_expt_gt1_le")
      (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|Exp_1| 0
  (|Exp_1-2| "" 3790102692
   ("" (SKEEP)
    (("" (CASE "0 <= e1")
      (("1" (CASE "e1 <= 0")
        (("1" (GRIND) NIL NIL) ("2" (REWRITE "Exp_increq_2") NIL NIL)) NIL)
       ("2" (REWRITE "Exp_increq_2") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|Exp_1-1| |nil| 3318698220
   ("" (SKEEP)
    (("" (CASE "0 <= e1")
      (("1" (CASE "e1 <= 0")
        (("1" (GRIND) NIL NIL)
         ("2" (REWRITE "Exp_increq_2")
          (("2" (REWRITE "expt_x0") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (REWRITE "Exp_increq_2")
        (("2" (REWRITE "expt_x0") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EqExpEq| 0
  (|EqExpEq-1| |nil| 3318696278
   ("" (SKEEP)
    (("" (CASE "e1 <= e2")
      (("1" (CASE "e2 <= e1")
        (("1" (GRIND) NIL NIL) ("2" (REWRITE "Exp_increq_2") NIL NIL)) NIL)
       ("2" (REWRITE "Exp_increq_2") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|expt_odd_TCC1| 0
  (|expt_odd_TCC1-1| |nil| 3319544683 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|expt_odd| SUBTYPE "((number_fields.+)(float.n, 1))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|expt_odd| 0
  (|expt_odd-2| "" 3790102694
   ("" (INDUCT "n")
    (("1" (GRIND-REALS) NIL NIL)
     ("2" (REWRITE "expt_x1") (("2" (GRIND-REALS) NIL NIL)) NIL)
     ("3" (SKEEP)
      (("3" (SPLIT 1)
        (("1" (SKOSIMP*)
          (("1" (REWRITE "expt_plus")
            (("1" (GRIND-REALS)
              (("1" (REWRITE "odd_times_odd_is_odd") NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (REWRITE "expt_plus")
            (("2" (LEMMA "even_or_odd")
              (("2" (INST -1 "radix")
                (("2" (FLATTEN)
                  (("2" (CASE "even?(radix)")
                    (("1" (HIDE -2 -3 1)
                      (("1" (LEMMA "even_iff_not_odd")
                        (("1" (INST -1 "(radix ^ (1 + j)) * radix")
                          (("1" (FLATTEN)
                            (("1" (CASE "even?((radix ^ (1 + j)) * radix)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (REWRITE "int_times_even_is_even") NIL
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|expt_odd-1| |nil| 3319544683
   ("" (INDUCT "n")
    (("1" (GRIND-REALS) (("1" (REWRITE "expt_x1") NIL NIL)) NIL)
     ("2" (REWRITE "expt_x1") (("2" (GRIND-REALS) NIL NIL)) NIL)
     ("3" (SKEEP)
      (("3" (SPLIT 1)
        (("1" (SKOSIMP*)
          (("1" (REWRITE "expt_plus")
            (("1" (REWRITE "expt_x1")
              (("1" (GRIND-REALS)
                (("1" (REWRITE "odd_times_odd_is_odd") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (REWRITE "expt_plus")
            (("2" (REWRITE "expt_x1")
              (("2" (LEMMA "even_or_odd")
                (("2" (INST -1 "radix")
                  (("2" (FLATTEN)
                    (("2" (CASE "even?(radix)")
                      (("1" (HIDE -2 -3 1)
                        (("1" (LEMMA "even_iff_not_odd")
                          (("1" (INST -1 "(radix ^ (1 + j)) * radix")
                            (("1" (FLATTEN)
                              (("1" (CASE "even?((radix ^ (1 + j)) * radix)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (REWRITE "int_times_even_is_even") NIL
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|expt_even| 0
  (|expt_even-2| "" 3790102696
   ("" (INDUCT "n")
    (("1" (GRIND-REALS) NIL NIL) ("2" (GRIND-REALS) NIL NIL)
     ("3" (SKEEP)
      (("3" (REWRITE 1 "expt_plus")
        (("1" (REWRITE "expt_plus" :SUBST ("n0x" "radix" "i" "j+1" "j" "1"))
          (("1" (SPLIT 1)
            (("1" (SKOSIMP*)
              (("1" (SPLIT -2)
                (("1" (REWRITE "even_times_int_is_even") NIL NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (CASE-REPLACE "1+j=j+1")
                (("1" (HIDE -1)
                  (("1"
                    (CASE-REPLACE
                     "even?((radix ^ (j + 1)) * radix)=NOT odd?((radix ^ (1 + j)) * radix)")
                    (("1" (CASE-REPLACE "even?(radix)=NOT odd?(radix)")
                      (("1" (REWRITE "odd_times_odd_is_odd")
                        (("1"
                          (LEMMA "odd_or_even_int" :SUBST
                           ("x" "radix ^ (1 + j)"))
                          (("1" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "radix"))
                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL)
                     ("2" (CASE-REPLACE "1+j=j+1")
                      (("1"
                        (LEMMA "even_iff_not_odd" :SUBST
                         ("x" "((radix ^ (j + 1)) * radix)"))
                        (("1" (GRIND-REALS) NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (HIDE 2)
            (("2" (CASE-REPLACE "even?(radix)=NOT odd?(radix)")
              (("1" (CASE-REPLACE "even?(radix^(1+j))=NOT odd?(radix^(1+j))")
                (("1" (CASE "odd?(radix ^ (1 + j))")
                  (("1"
                    (CASE-REPLACE "even?(radix^(2+j))=NOT odd?(radix^(2+j))")
                    (("1" (CASE-REPLACE "2+j=1+(1+j)")
                      (("1" (REWRITE "expt_plus")
                        (("1" (REWRITE "odd_times_odd_is_odd") NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL)
                     ("2"
                      (LEMMA "even_iff_not_odd" :SUBST ("x" "radix ^ (2 + j)"))
                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "radix ^ (1 + j)"))
                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL)
               ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "radix"))
                (("2" (GRIND-REALS) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|expt_even-1| |nil| 3319562624
   ("" (INDUCT "n")
    (("1" (GRIND-REALS) (("1" (REWRITE "expt_x1") NIL NIL)) NIL)
     ("2" (GRIND-REALS) (("2" (REWRITE "expt_x1") NIL NIL)) NIL)
     ("3" (SKEEP)
      (("3" (REWRITE 1 "expt_plus")
        (("1" (REWRITE "expt_plus" :SUBST ("n0x" "radix" "i" "j+1" "j" "1"))
          (("1" (REWRITE "expt_x1")
            (("1" (SPLIT 1)
              (("1" (SKOSIMP*)
                (("1" (SPLIT -2)
                  (("1" (REWRITE "even_times_int_is_even") NIL NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (CASE-REPLACE "1+j=j+1")
                  (("1" (HIDE -1)
                    (("1"
                      (CASE-REPLACE
                       "even?((radix ^ (j + 1)) * radix)=NOT odd?((radix ^ (1 + j)) * radix)")
                      (("1" (CASE-REPLACE "even?(radix)=NOT odd?(radix)")
                        (("1" (REWRITE "odd_times_odd_is_odd")
                          (("1"
                            (LEMMA "odd_or_even_int" :SUBST
                             ("x" "radix ^ (1 + j)"))
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "radix"))
                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                        NIL)
                       ("2" (CASE-REPLACE "1+j=j+1")
                        (("1"
                          (LEMMA "even_iff_not_odd" :SUBST
                           ("x" "((radix ^ (j + 1)) * radix)"))
                          (("1" (GRIND-REALS) NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (HIDE 2)
            (("2" (CASE-REPLACE "even?(radix)=NOT odd?(radix)")
              (("1" (CASE-REPLACE "even?(radix^(1+j))=NOT odd?(radix^(1+j))")
                (("1" (CASE "odd?(radix ^ (1 + j))")
                  (("1"
                    (CASE-REPLACE "even?(radix^(2+j))=NOT odd?(radix^(2+j))")
                    (("1" (CASE-REPLACE "2+j=1+(1+j)")
                      (("1" (REWRITE "expt_plus")
                        (("1" (REWRITE "expt_x1")
                          (("1" (REWRITE "odd_times_odd_is_odd") NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL)
                     ("2"
                      (LEMMA "even_iff_not_odd" :SUBST ("x" "radix ^ (2 + j)"))
                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "radix ^ (1 + j)"))
                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL)
               ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "radix"))
                (("2" (GRIND-REALS) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FoppCorrect| 0
  (|FoppCorrect-1| |nil| 3319368570
   ("" (SKEEP) (("" (EXPAND* "FtoR" "Fopp") (("" (GRIND-REALS) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|FoppFopp| 0
  (|FoppFopp-1| |nil| 3545043329
   ("" (GRIND) (("" (DECOMPOSE-EQUALITY) NIL NIL)) NIL) NIL SHOSTAK))
 (|Fopp_mult_left| 0
  (|Fopp_mult_left-1| |nil| 3545043536 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   NIL SHOSTAK))
 (|Fopp_mult_right| 0
  (|Fopp_mult_right-1| |nil| 3545043574 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|FabsCorrect| 0
  (|FabsCorrect-1| |nil| 3319889181
   ("" (SKEEP)
    (("" (EXPAND* "Fabs" "FtoR")
      (("" (REWRITE "abs_mult")
        (("" (EXPAND "abs" 1 3) (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FplusCorrect| 0
  (|FplusCorrect-1| |nil| 3319889234
   ("" (SKEEP)
    (("" (EXPAND* "Fplus" "FtoR")
      (("" (REWRITE "expt_div" :DIR RL)
        (("" (REWRITE "expt_div" :DIR RL) (("" (FIELD) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FplusAssociative| 0
  (|FplusAssociative-2| "" 3790102702
   ("" (EXPAND "associative?")
    (("" (SKEEP)
      (("" (EXPAND "Fplus" + 2)
        (("" (ASSERT)
          (("" (EXPAND "min")
            (("" (ASSERT)
              (("" (LIFT-IF)
                (("" (GROUND)
                  (("1" (EXPAND "Fplus" + 3)
                    (("1" (EXPAND "min")
                      (("1" (LIFT-IF)
                        (("1" (SPLIT +)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "Fplus" + 1)
                                (("1" (EXPAND "min")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "Fplus" + 1)
                                      (("1" (EXPAND "min")
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "expt_plus")
                                            (("1"
                                              (INST - "Fexp(x)-Fexp(y)"
                                               "Fexp(y)-Fexp(z)" "radix")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (EXPAND "Fplus" 2 1)
                                (("2" (EXPAND "min")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "Fplus" 2 1)
                                      (("2" (EXPAND "min")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "Fplus" 2 3)
                    (("2" (EXPAND "min")
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (EXPAND "Fplus" 1 1)
                            (("1" (EXPAND "min")
                              (("1" (LIFT-IF)
                                (("1" (GROUND)
                                  (("1" (EXPAND "Fplus")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "min")
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "expt_plus")
                                            (("1"
                                              (INST - "Fexp(x)-Fexp(z)"
                                               "Fexp(y)-Fexp(x)" "radix")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "Fplus")
                                      (("2" (EXPAND "min")
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "expt_plus")
                                            (("2"
                                              (INST - "Fexp(y)-Fexp(z)"
                                               "Fexp(z)-Fexp(x)" "radix")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "Fplus" 2 1)
                            (("2" (EXPAND "min")
                              (("2" (ASSERT)
                                (("2" (EXPAND "Fplus" 2 1)
                                  (("2" (EXPAND "min")
                                    (("2" (ASSERT)
                                      (("2" (LEMMA "expt_plus")
                                        (("2"
                                          (INST - "Fexp(y)-Fexp(x)"
                                           "Fexp(z)-Fexp(y)" "radix")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FplusAssociative-1| |nil| 3545564973
   ("" (EXPAND "associative?")
    (("" (SKEEP)
      (("" (EXPAND "Fplus" + 2)
        (("" (ASSERT)
          (("" (EXPAND "min")
            (("" (ASSERT)
              (("" (LIFT-IF)
                (("" (GROUND)
                  (("1" (EXPAND "Fplus" + 3)
                    (("1" (EXPAND "min")
                      (("1" (LIFT-IF)
                        (("1" (SPLIT +)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "Fplus" + 1)
                                (("1" (EXPAND "min")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "Fplus" + 1)
                                      (("1" (EXPAND "min")
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "expt_plus")
                                            (("1"
                                              (INST - "Fexp(x)-Fexp(y)"
                                               "Fexp(y)-Fexp(z)" "radix")
                                              (("1" (ASSERT)
                                                (("1" (USE "expt_x0")
                                                  (("1" (REPLACE -1 :HIDE? T)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (EXPAND "Fplus" 2 1)
                                (("2" (EXPAND "min")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "Fplus" 2 1)
                                      (("2" (EXPAND "min")
                                        (("2" (ASSERT)
                                          (("2" (USE "expt_x0")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "Fplus" 2 3)
                    (("2" (EXPAND "min")
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (EXPAND "Fplus" 1 1)
                            (("1" (EXPAND "min")
                              (("1" (LIFT-IF)
                                (("1" (GROUND)
                                  (("1" (EXPAND "Fplus")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "min")
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "expt_plus")
                                            (("1"
                                              (INST - "Fexp(x)-Fexp(z)"
                                               "Fexp(y)-Fexp(x)" "radix")
                                              (("1" (ASSERT)
                                                (("1" (USE "expt_x0")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (EXPAND "Fplus")
                                      (("2" (EXPAND "min")
                                        (("2" (ASSERT)
                                          (("2" (LEMMA "expt_plus")
                                            (("2"
                                              (INST - "Fexp(y)-Fexp(z)"
                                               "Fexp(z)-Fexp(x)" "radix")
                                              (("2" (ASSERT)
                                                (("2" (USE "expt_x0")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "Fplus" 2 1)
                            (("2" (EXPAND "min")
                              (("2" (ASSERT)
                                (("2" (EXPAND "Fplus" 2 1)
                                  (("2" (EXPAND "min")
                                    (("2" (ASSERT)
                                      (("2" (LEMMA "expt_plus")
                                        (("2"
                                          (INST - "Fexp(y)-Fexp(x)"
                                           "Fexp(z)-Fexp(y)" "radix")
                                          (("2" (ASSERT)
                                            (("2" (USE "expt_x0")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FmultAssociative| 0
  (|FmultAssociative-1| |nil| 3545572260 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|FminusCorrect| 0
  (|FminusCorrect-1| |nil| 3319889348
   ("" (SKEEP)
    (("" (EXPAND* "Fminus" "FtoR")
      (("" (REWRITE "expt_div" :DIR RL)
        (("" (REWRITE "expt_div" :DIR RL) (("" (FIELD) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FmultCorrect| 0
  (|FmultCorrect-1| |nil| 3319889392
   ("" (SKEEP)
    (("" (EXPAND* "Fmult" "FtoR")
      (("" (REWRITE "expt_plus") (("" (FIELD) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|Fmult_1_r| 0
  (|Fmult_1_r-2| "" 3790102704
   ("" (GRIND) (("" (DECOMPOSE-EQUALITY) NIL NIL)) NIL) NIL SHOSTAK)
  (|Fmult_1_r-1| |nil| 3545401225
   ("" (GRIND)
    (("" (DECOMPOSE-EQUALITY)
      (("" (EXPAND "divides")
        (("" (EXPAND "divides") (("" (INST + "1") (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fmult_1_l| 0
  (|Fmult_1_l-1| |nil| 3545401264
   ("" (GRIND) (("" (DECOMPOSE-EQUALITY) NIL NIL)) NIL) NIL NIL))
 (|Fmult_2_r| 0
  (|Fmult_2_r-1| |nil| 3545401333 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|Fmult_2_l| 0
  (|Fmult_2_l-1| |nil| 3545401340 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|FDivKexpt_TCC1| 0
  (|FDivKexpt_TCC1-1| |nil| 3545654182 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|FDivKexpt| SUBTYPE "float.i"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|FDivKexpt_TCC2| 0
  (|FDivKexpt_TCC2-1| |nil| 3545654182 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|FDivKexpt| SUBTYPE "float.i"
    "{i: integers.int | booleans.OR(float.k /= 0, reals.>=(i, 0))}")))
 (|FDivKexpt_TCC3| 0
  (|FDivKexpt_TCC3-2| |nil| 3697725215
   ("" (SKEEP)
    (("" (CASE "FORALL (ik,jk:int): integer_pred(ik*jk)")
      (("1" (INST?)
        (("1" (HIDE 2)
          (("1" (CASE "FORALL (rp:nat): integer_pred((radix^rp)/(k^rp))")
            (("1" (INST?) NIL NIL)
             ("2" (HIDE 2)
              (("2" (INDUCT "rp")
                (("1" (GRIND) NIL NIL)
                 ("2" (SKEEP)
                  (("2" (CASE "FORALL (ik,jk:int): integer_pred(ik*jk)")
                    (("1"
                      (CASE
                          "(radix^(j+1))/(k^(j+1)) = (radix/k)*((radix^j/k^j))")
                      (("1" (REPLACES -1)
                        (("1" (INST?)
                          (("1" (HIDE 2)
                            (("1" (TYPEPRED "k")
                              (("1" (EXPAND "mod")
                                (("1" (CASE "floor(radix/k) = radix/k")
                                  (("1" (REPLACE -1 :DIR RL)
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "^" +)
                        (("2" (EXPAND "expt" + 1)
                          (("2" (EXPAND "expt" + 2) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|FDivKexpt| SUBTYPE
    "number_fields.*(Fnum(float.f), (number_fields./((exponentiation.^(float.radix, float.i)), (exponentiation.^(float.k, float.i)))))"
    "int"))
  (|FDivKexpt_TCC3-1| |nil| 3697724945 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|FDivKexpt| SUBTYPE
    "number_fields.*(Fnum(float.f), (number_fields./((exponentiation.^(float.radix, float.i)), (exponentiation.^(float.k, float.i)))))"
    "int")))
 (|FDivKexpt_def| 0
  (|FDivKexpt_def-1| |nil| 3545651846
   ("" (INDUCT "i")
    (("1" (ASSERT)
      (("1" (SKEEP)
        (("1" (EXPAND "FDivKexpt")
          (("1" (ASSERT)
            (("1" (EXPAND "FtoR")
              (("1" (USE "expt_x0") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2"
          (CASE
              "NOT FORALL (zd:nat): integer_pred((radix ^ (zd)) / (k ^ (zd)))")
          (("1" (HIDE (-1 2))
            (("1" (INDUCT "zd")
              (("1" (GRIND) NIL NIL)
               ("2" (SKOLEM 1 "rk")
                (("2" (FLATTEN)
                  (("2" (CASE "FORALL (ik,jk:int): integer_pred(ik*jk)")
                    (("1" (INST - "(radix ^ rk) / (k ^ rk)" "radix/k")
                      (("1" (EXPAND "^")
                        (("1" (EXPAND "expt" +) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (TYPEPRED "k")
                          (("2" (EXPAND "mod")
                            (("2" (CASE "floor(radix/k) = radix/k")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 :DIR RL)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LABEL "hyp1" -1)
            (("2" (HIDE "hyp1")
              (("2" (INST - "f" "k")
                (("2" (EXPAND "FDivKexpt")
                  (("2" (MULT-BY 1 "k")
                    (("1" (CASE "FtoR(f) / k ^ (1 + j) * k = FtoR(f)/k^j")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1)
                          (("1" (REPLACE -1 :DIR RL)
                            (("1" (HIDE -1)
                              (("1" (LEMMA "float_int_def")
                                (("1" (INST - "k")
                                  (("1"
                                    (CASE
                                        "FORALL (aa:real): aa*k = aa*FtoR(float_int(k))")
                                    (("1" (REWRITE -1)
                                      (("1" (HIDE -1)
                                        (("1" (LEMMA "FmultCorrect")
                                          (("1" (REWRITE -1 :DIR RL)
                                            (("1" (HIDE -1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "FtoR")
                                                  (("1" (EXPAND "Fmult")
                                                    (("1" (REAL-PROPS)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "float_int")
                                                          (("1"
                                                            (CASE
                                                                "k^(1+j) = k*(k^j)")
                                                            (("1" (REPLACE -1)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (LEMMA
                                                                   "expt_plus")
                                                                  (("1"
                                                                    (INST-CP -
                                                                     "1+j"
                                                                     "Fexp(f)-1-j"
                                                                     "radix")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (MULT-BY
                                                                         -2
                                                                         "Fnum(f) * (k ^ j)")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :DIR
                                                                           RL)
                                                                          (("1"
                                                                            (HIDE
                                                                             -1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (INST
                                                                                 -
                                                                                 "Fexp(f)-j"
                                                                                 "j"
                                                                                 "radix")
                                                                                (("1"
                                                                                  (MULT-BY
                                                                                   -1
                                                                                   "Fnum(f) * (k ^ j)")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     :DIR
                                                                                     RL)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (HIDE-ALL-BUT 1)
                                                              (("2"
                                                                (EXPAND "^")
                                                                (("2"
                                                                  (EXPAND
                                                                   "expt" + 1)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (REVEAL "hyp1")
                                              (("2" (INST?)
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (CASE
                                                        "FORALL (ik,jk:int): integer_pred(ik*jk)")
                                                    (("1" (INST?) NIL NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REVEAL "hyp1")
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2"
                                              (CASE
                                                  "FORALL (ik,jk:int): integer_pred(ik*jk)")
                                              (("1" (INST?) NIL NIL)
                                               ("2" (HIDE-ALL-BUT 1)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKEEP)
                                      (("2" (LEMMA "float_int_def")
                                        (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "^")
                        (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REVEAL "hyp1")
                      (("2" (INST?)
                        (("2" (ASSERT)
                          (("2"
                            (CASE "FORALL (ik,jk:int): integer_pred(ik*jk)")
                            (("1" (INST?) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|FabsBounded| 0
  (|FabsBounded-1| |nil| 3320082424
   ("" (SKEEP)
    (("" (EXPAND* "Fbounded?" "Fabs")
      (("" (FLATTEN)
        (("" (SPLIT) (("1" (GRIND-REALS) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FabsCanonic| 0
  (|FabsCanonic-1| |nil| 3320082549
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      (("" (SPLIT)
        (("1" (CASE "Fnormal?(b)(Fabs(f))")
          (("1" (ASSERT) NIL NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "Fnormal?")
              (("2" (FLATTEN)
                (("2" (SPLIT)
                  (("1" (REWRITE "FabsBounded") NIL NIL)
                   ("2" (EXPAND "Fabs")
                    (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "Fsubnormal?(b)(Fabs(f))")
          (("1" (ASSERT) NIL NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "Fsubnormal?")
              (("2" (FLATTEN)
                (("2" (SPLIT)
                  (("1" (REWRITE "FabsBounded") NIL NIL)
                   ("2" (EXPAND "Fabs") (("2" (PROPAX) NIL NIL)) NIL)
                   ("3" (EXPAND "Fabs")
                    (("3" (EXPAND "abs") (("3" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|LeR0Fnum| 0
  (|LeR0Fnum-1| |nil| 3318679671
   ("" (SKEEP) (("" (EXPAND "FtoR") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL) NIL
   SHOSTAK))
 (|LeFnumZERO| 0
  (|LeFnumZERO-1| |nil| 3318680805
   ("" (SKOSIMP*) (("" (EXPAND "FtoR") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL)
   NIL SHOSTAK))
 (|Lt0RFnum| 0
  (|Lt0RFnum-1| |nil| 3806169258
   ("" (SKOSIMP*) (("" (EXPAND "FtoR") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL)
   NIL SHOSTAK))
 (|LtZEROFnum| 0
  (|LtZEROFnum-1| |nil| 3806169271
   ("" (SKOSIMP*) (("" (EXPAND "FtoR") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL)
   NIL SHOSTAK))
 (|GtR0Fnum| 0
  (|GtR0Fnum-1| |nil| 3806673049
   ("" (SKEEP) (("" (EXPAND "FtoR") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL) NIL
   SHOSTAK))
 (|GtFnumZERO| 0
  (|GtFnumZERO-1| |nil| 3806673069
   ("" (SKEEP) (("" (EXPAND "FtoR") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL) NIL
   SHOSTAK))
 (|FleCorrect| 0
  (|FleCorrect-1| |nil| 3319904574
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKOSIMP*)
        (("1" (EXPAND "Fle?")
          (("1" (CASE "FtoR(p) - FtoR(q) <= 0")
            (("1" (ASSERT) NIL NIL)
             ("2" (REWRITE "FminusCorrect" :DIR RL)
              (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "Fle?")
          (("2" (CASE "FtoR(Fminus(p, q)) <= 0")
            (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL)) NIL)
             ("2" (REWRITE "FminusCorrect") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FtoR_monotonic| 0
  (|FtoR_monotonic-1| |nil| 3877613699
   ("" (SKEEP) (("" (EXPAND "<=" 1 1) (("" (USE "FleCorrect") NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|rndf_monotone| 0
  (|rndf_monotone-1| |nil| 3681058028
   ("" (SKEEP)
    (("" (CASE "x=y")
      (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "round::(monotone?(b))")
        (("2" (EXPAND "<=")
          (("2" (ASSERT)
            (("2" (EXPAND "monotone?")
              (("2" (INST?)
                (("2" (INST -1 "RtoF(x)" "RtoF(y)")
                  (("2" (SPLIT -1)
                    (("1" (USE "FleCorrect") (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (PROPAX) NIL NIL)
                     ("3" (TYPEPRED "RtoF") (("3" (INST?) NIL NIL)) NIL)
                     ("4" (TYPEPRED "RtoF") (("4" (INST?) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FltCorrect| 0
  (|FltCorrect-1| |nil| 3319904922
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKOSIMP*)
        (("1" (EXPAND "Flt?")
          (("1" (CASE "FtoR(Fminus(p, q)) < 0")
            (("1" (REWRITE "FminusCorrect") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (CASE "FtoR(Fminus(p, q)) < 0")
          (("1" (EXPAND "FtoR")
            (("1" (EXPAND "Flt?") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
           ("2" (REWRITE "FminusCorrect") (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fle_transitive| 0
  (|Fle_transitive-1| |nil| 3747655310
   ("" (EXPAND "transitive?")
    (("" (SKEEP)
      (("" (EXPAND "<=")
        (("" (REWRITE "FleCorrect")
          (("" (REWRITE "FleCorrect")
            (("" (REWRITE "FleCorrect") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Flt_transitive| 0
  (|Flt_transitive-1| |nil| 3747666724
   ("" (EXPAND "transitive?")
    (("" (SKEEP)
      (("" (EXPAND "<")
        (("" (REWRITE "FltCorrect")
          (("" (REWRITE "FltCorrect")
            (("" (REWRITE "FltCorrect") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fle_neg_Flt| 0
  (|Fle_neg_Flt-1| |nil| 3747667012
   ("" (SKEEP)
    (("" (EXPAND "<")
      (("" (EXPAND "<=")
        (("" (REWRITE "FleCorrect")
          (("" (REWRITE "FltCorrect") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Flt_Fle_Flt| 0
  (|Flt_Fle_Flt-1| |nil| 3747667064
   ("" (SKEEP)
    (("" (EXPAND "<")
      (("" (EXPAND "<=")
        (("" (REWRITE* "FleCorrect")
          (("" (REWRITE* "FltCorrect") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|FminCorrect| 0
  (|FminCorrect-1| |nil| 3877711641
   ("" (SKEEP)
    (("" (EXPAND "Fmin")
      (("" (LEMMA "FleCorrect")
        (("" (INST -1 "p" "q")
          (("" (REWRITE -1)
            (("" (EXPAND "min") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|FmaxCorrect| 0
  (|FmaxCorrect-1| |nil| 3320169183
   ("" (SKEEP)
    (("" (EXPAND "Fmax")
      (("" (LEMMA "FleCorrect" :SUBST ("p" "p" "q" "q"))
        (("" (REWRITE -1)
          (("" (EXPAND "max") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsubnormalUnique| 0
  (|FsubnormalUnique-1| |nil| 3318681540
   ("" (SKOSIMP*)
    (("" (EXPAND "FtoR")
      (("" (EXPAND "Fsubnormal?")
        (("" (FLATTEN)
          (("" (DECOMPOSE-EQUALITY) (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FnormalUnique| 0
  (|FnormalUnique-1| |nil| 3318683813
   ("" (SKEEP)
    (("" (EXPAND* "Fnormal?" "Fbounded?" "FtoR")
      (("" (FLATTEN)
        (("" (CASE-REPLACE "Fexp(p)=Fexp(q)")
          (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND-REALS) NIL NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (CASE "Fexp(p)<Fexp(q)+1")
              (("1" (CASE "Fexp(q)<Fexp(p)+1")
                (("1" (HIDE -3 -4 -5 -6 -7 -8 -9) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (HIDE -1 2)
                  (("2" (REWRITE "Exp_incr_2")
                    (("2" (HIDE 2)
                      (("2" (MULT-BY 1 "abs(Fnum(q))")
                        (("2"
                          (CASE-REPLACE
                           "abs(Fnum(q)) * radix ^ Fexp(q)=abs(Fnum(p)) * radix ^ Fexp(p)")
                          (("1" (REWRITE "expt_plus")
                            (("1" (CANCEL-BY 1 "radix ^ Fexp(p)")
                              (("1" (REWRITE "abs_mult" -8)
                                (("1" (EXPAND "abs" -8 1)
                                  (("1" (USE "expt_x1")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2 -1 -2 -3 -4 -5 -6)
                            (("2" (BOTH-SIDES-F -1 "abs")
                              (("2" (REWRITE* ("abs_mult"))
                                (("2" (EXPAND "abs" -1 (2 4))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "Exp_incr_2")
                  (("2" (HIDE 2)
                    (("2" (MULT-BY 1 "abs(Fnum(p))")
                      (("2"
                        (CASE-REPLACE
                         "abs(Fnum(p)) * radix ^ Fexp(p)=abs(Fnum(q)) * radix ^ Fexp(q)")
                        (("1" (REWRITE "expt_plus")
                          (("1" (CANCEL-BY 1 "radix ^ Fexp(q)")
                            (("1" (REWRITE "abs_mult" -5)
                              (("1" (EXPAND "abs" -5 1)
                                (("1" (USE "expt_x1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT (-7 1))
                          (("2" (BOTH-SIDES-F -1 "abs")
                            (("2" (REWRITE* ("abs_mult"))
                              (("2" (EXPAND "abs" -1 (2 4))
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|NormalAndSubNormalNotEq| 0
  (|NormalAndSubNormalNotEq-1| |nil| 3318856796
   ("" (SKEEP)
    (("" (CASE "abs(FtoR(q)) < abs (FtoR(p))")
      (("1" (ASSERT) NIL NIL)
       ("2" (EXPAND* "FtoR" "Fnormal?" "Fsubnormal?")
        (("2" (FLATTEN)
          (("2" (HIDE -6)
            (("2" (REWRITE "abs_mult")
              (("2" (EXPAND "abs" 1 2)
                (("2" (REWRITE "abs_mult")
                  (("2" (EXPAND "abs" 1 3)
                    (("2" (MULT-BY 1 "radix")
                      (("2"
                        (SWAP-GROUP "abs(Fnum(q))" * "radix ^ (Fexp(q))"
                         "radix" R)
                        (("2"
                          (SWAP-GROUP "abs(Fnum(p))" * "radix ^ (Fexp(p))"
                           "radix" R)
                          (("2"
                            (CASE "abs(Fnum(q)) * radix < abs(Fnum(p)) * radix"
                              "radix ^ Fexp(q) <= radix ^ Fexp(p)")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 2)
                              (("2" (EXPAND "Fbounded?")
                                (("2" (FLATTEN)
                                  (("2" (REWRITE -6)
                                    (("2" (REWRITE "Exp_increq_1") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (HIDE 2)
                              (("3" (REWRITE "abs_mult" -2)
                                (("3" (REWRITE "abs_mult" -5)
                                  (("3" (EXPAND "abs" -2 1)
                                    (("3" (EXPAND "abs" -5 1)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FcanonicUnique| 0
  (|FcanonicUnique-1| |nil| 3318616280
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      (("" (SPLIT)
        (("1" (SPLIT)
          (("1" (USE "FnormalUnique") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (USE "NormalAndSubNormalNotEq") (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (SPLIT)
          (("1" (LEMMA "NormalAndSubNormalNotEq")
            (("1" (INST -1 "b" "q" "p") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (USE "FsubnormalUnique") (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fle_definition| 0
  (|Fle_definition-1| |nil| 3747667139
   ("" (SKEEP)
    (("" (EXPAND "<")
      (("" (EXPAND "<=")
        (("" (REWRITE* "FleCorrect")
          (("" (REWRITE* "FltCorrect")
            (("" (IFF)
              (("" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (EXPAND "<=")
                    (("1" (ASSERT)
                      (("1" (USE "FcanonicUnique") (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|FnormalizeCorrect| 0
  (|FnormalizeCorrect-1| |nil| 3319283991
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK))
 (|FnormalizeCanonicFnum_TCC1| 0
  (|FnormalizeCanonicFnum_TCC1-1| |nil| 3698095010
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      (("" (EXPAND "Fnormal?")
        (("" (EXPAND "Fsubnormal?") (("" (GROUND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|FnormalizeCanonicFnum| SUBTYPE "float.p" "(float.Fbounded?(float.b))")))
 (|FnormalizeCanonicFnum| 0
  (|FnormalizeCanonicFnum-1| |nil| 3675512267
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      (("" (SPLIT -1)
        (("1" (EXPAND "Fnormal?")
          (("1" (FLATTEN)
            (("1" (EXPAND "Fnormalize")
              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "Fsubnormal?")
          (("2" (FLATTEN)
            (("2" (EXPAND "Fnormalize")
              (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpCanonic| 0
  (|FulpCanonic-1| |nil| 3319375218
   ("" (SKEEP)
    (("" (EXPAND "Fulp")
      (("" (CASE-REPLACE "Fnormalize(b)(p)=p")
        (("" (HIDE 2)
          (("" (LEMMA "FcanonicUnique")
            (("" (INST -1 "b" "Fnormalize(b)(p)" "p")
              (("" (REWRITE -1) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fulp_min| 0
  (|Fulp_min-1| |nil| 3683129470
   ("" (SKEEP)
    (("" (EXPAND "Fulp")
      (("" (TYPEPRED "Fnormalize(b)(f)")
        (("" (NAME-REPLACE "f_norm" "Fnormalize(b)(f)")
          (("" (USE "FcanonicBounded")
            (("" (ASSERT)
              (("" (EXPAND "Fbounded?")
                (("" (EXPAND "min_Fulp")
                  (("" (FLATTEN)
                    (("" (USE "both_sides_expt_gt1_le") (("" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Lexico| 0
  (|Lexico-2| "" 3790102742
   ("" (SKEEP)
    (("" (CASE "0<= Fnum(p)")
      (("1" (CASE "0<= Fnum(q)")
        (("1" (EXPAND "Fcanonic?")
          (("1" (SPLIT)
            (("1" (SPLIT)
              (("1" (CASE "Fexp(p) < Fexp(q)+1")
                (("1" (GRIND-REALS) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND* "Fnormal?" "Fbounded?")
                    (("2" (FLATTEN)
                      (("2" (HIDE -2 -3 -4 -5)
                        (("2" (REWRITE "abs_mult" -2)
                          (("2" (EXPAND* "abs")
                            (("2" (GRIND-REALS)
                              (("2" (REWRITE "Exp_incr_2")
                                (("2" (HIDE 2)
                                  (("2" (MULT-BY 1 "Fnum(p)")
                                    (("2"
                                      (CASE-REPLACE
                                       "radix ^ Fexp(p) * Fnum(p)= FtoR(p)")
                                      (("1"
                                        (CASE
                                            "FtoR(q)<radix ^ (1 + Fexp(q)) * Fnum(p)")
                                        (("1" (GRIND-REALS) NIL NIL)
                                         ("2" (HIDE 2)
                                          (("2" (EXPAND "FtoR")
                                            (("2" (REWRITE "expt_plus")
                                              (("2"
                                                (DIV-BY 1 "radix ^ (Fexp(q))")
                                                (("2"
                                                  (CASE-REPLACE
                                                   "radix * radix ^ Fexp(q) * Fnum(p) / radix ^ (Fexp(q))=radix * Fnum(p)")
                                                  (("1" (GRIND-REALS) NIL NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (FIELD) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "FtoR")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND* "Fnormal?" "Fsubnormal?" "Fbounded?")
                (("2" (FLATTEN)
                  (("2" (REWRITE "abs_mult")
                    (("2" (REWRITE "abs_mult")
                      (("2" (EXPAND* "abs")
                        (("2" (GRIND-REALS)
                          (("2" (FLIP-INEQ -11)
                            (("2" (HIDE 2)
                              (("2" (CASE "FtoR(q) < FtoR(p)")
                                (("1" (GRIND-REALS) NIL NIL)
                                 ("2" (HIDE 2 -10)
                                  (("2" (EXPAND "FtoR")
                                    (("2"
                                      (CASE
                                          "Fnum(q) * radix ^ (Fexp(q)) <= Fnum(q) * radix ^ (Fexp(p))")
                                      (("1"
                                        (CASE
                                            "Fnum(q) * radix ^ (Fexp(p)) < Fnum(p) * radix ^ (Fexp(p))")
                                        (("1" (HIDE-ALL-BUT (-1 -2 1))
                                          (("1"
                                            (NAME-REPLACE "AA"
                                             "Fnum(q) * radix ^ (Fexp(q))")
                                            (("1"
                                              (NAME-REPLACE "BB"
                                               "Fnum(q) * radix ^ (Fexp(p))")
                                              (("1" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2"
                                            (CANCEL-BY 1 "radix ^ (Fexp(p))")
                                            (("2" (MULT-BY 1 "radix")
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (CANCEL-BY 1 "Fnum(q)")
                                        (("2" (REWRITE "Exp_increq_1") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND* "Fsubnormal?" "Fnormal?" "Fbounded?")
              (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (HIDE -1 -2 -3 2)
          (("2" (MULT-BY 1 "radix^Fexp(q)")
            (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL)) NIL)
             ("2" (GRIND-REALS) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE -1 -2 -4 2)
        (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|Lexico-1| |nil| 3319234645
   ("" (SKEEP)
    (("" (CASE "0<= Fnum(p)")
      (("1" (CASE "0<= Fnum(q)")
        (("1" (EXPAND "Fcanonic?")
          (("1" (SPLIT)
            (("1" (SPLIT)
              (("1" (CASE "Fexp(p) < Fexp(q)+1")
                (("1" (GRIND-REALS) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (EXPAND* "Fnormal?" "Fbounded?")
                    (("2" (FLATTEN)
                      (("2" (HIDE -2 -3 -4 -5)
                        (("2" (REWRITE "abs_mult" -2)
                          (("2" (EXPAND* "abs")
                            (("2" (GRIND-REALS)
                              (("2" (REWRITE "Exp_incr_2")
                                (("2" (HIDE 2)
                                  (("2" (MULT-BY 1 "Fnum(p)")
                                    (("2"
                                      (CASE-REPLACE
                                       "radix ^ Fexp(p) * Fnum(p)= FtoR(p)")
                                      (("1"
                                        (CASE
                                            "FtoR(q)<radix ^ (1 + Fexp(q)) * Fnum(p)")
                                        (("1" (GRIND-REALS) NIL NIL)
                                         ("2" (HIDE 2)
                                          (("2" (EXPAND "FtoR")
                                            (("2" (REWRITE "expt_plus")
                                              (("2" (REWRITE "expt_x1")
                                                (("2"
                                                  (DIV-BY 1
                                                   "radix ^ (Fexp(q))")
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "radix * radix ^ Fexp(q) * Fnum(p) / radix ^ (Fexp(q))=radix * Fnum(p)")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (FIELD) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "FtoR")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND* "Fnormal?" "Fsubnormal?" "Fbounded?")
                (("2" (FLATTEN)
                  (("2" (REWRITE "abs_mult")
                    (("2" (REWRITE "abs_mult")
                      (("2" (EXPAND* "abs")
                        (("2" (GRIND-REALS)
                          (("2" (FLIP-INEQ -11)
                            (("2" (HIDE 2)
                              (("2" (CASE "FtoR(q) < FtoR(p)")
                                (("1" (GRIND-REALS) NIL NIL)
                                 ("2" (HIDE 2 -10)
                                  (("2" (EXPAND "FtoR")
                                    (("2"
                                      (CASE
                                          "Fnum(q) * radix ^ (Fexp(q)) <= Fnum(q) * radix ^ (Fexp(p))")
                                      (("1"
                                        (CASE
                                            "Fnum(q) * radix ^ (Fexp(p)) < Fnum(p) * radix ^ (Fexp(p))")
                                        (("1" (HIDE-ALL-BUT (-1 -2 1))
                                          (("1"
                                            (NAME-REPLACE "AA"
                                             "Fnum(q) * radix ^ (Fexp(q))")
                                            (("1"
                                              (NAME-REPLACE "BB"
                                               "Fnum(q) * radix ^ (Fexp(p))")
                                              (("1" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2"
                                            (CANCEL-BY 1 "radix ^ (Fexp(p))")
                                            (("2" (MULT-BY 1 "radix")
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (CANCEL-BY 1 "Fnum(q)")
                                        (("2" (REWRITE "Exp_increq_1") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND* "Fsubnormal?" "Fnormal?" "Fbounded?")
              (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (HIDE -1 -2 -3 2)
          (("2" (MULT-BY 1 "radix^Fexp(q)")
            (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL)) NIL)
             ("2" (GRIND-REALS) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE -1 -2 -4 2)
        (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|CanonicLeastExp| 0
  (|CanonicLeastExp-1| |nil| 3319282878
   ("" (SKEEP)
    (("" (CASE-REPLACE "p=Fnormalize(b)(q)")
      (("1" (HIDE -1 -2 -4) (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "FcanonicUnique")
          (("2" (INST -1 "b" "p" "Fnormalize(b)(q)")
            (("2" (REWRITE -1) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fast_canonic| 0
  (|Fast_canonic-1| |nil| 3319890253
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (CASE "vNum(b) <= abs(radix * Fnum(p))")
        (("1" (EXPAND* "Fcanonic?" "Fnormal?") (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (EXPAND* "Fcanonic?" "Fsubnormal?") (("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (EXPAND* "Fcanonic?" "Fnormal?") (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpOpp_TCC1| 0
  (|FulpOpp_TCC1-1| |nil| 3319817879
   ("" (SKEEP) (("" (REWRITE "FoppBounded") NIL NIL)) NIL) NIL NIL
   (|FulpOpp| SUBTYPE "float.Fopp(float.f)" "(float.Fbounded?(float.b))")))
 (|FulpOpp| 0
  (|FulpOpp-1| |nil| 3319817880
   ("" (SKEEP)
    (("" (EXPAND "Fulp")
      (("" (CASE "Fnormalize(b)(Fopp(f))=Fopp(Fnormalize(b)(f))")
        (("1" (REWRITE -1) (("1" (EXPAND "Fopp") (("1" (PROPAX) NIL NIL)) NIL))
          NIL)
         ("2" (REWRITE "FcanonicUnique" :SUBST ("b" "b"))
          (("1" (CASE "FtoR(Fnormalize(b)(Fopp(f)))= FtoR(Fopp(f))")
            (("1" (REWRITE -1)
              (("1" (REWRITE "FoppCorrect")
                (("1" (REWRITE "FoppCorrect") (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL)
           ("2" (LEMMA "FcanonicOpp")
            (("2" (INST -1 "b" "Fnormalize(b)(f)") (("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpAbs_TCC1| 0
  (|FulpAbs_TCC1-1| |nil| 3320082088
   ("" (SKEEP) (("" (REWRITE "FabsBounded") NIL NIL)) NIL) NIL NIL
   (|FulpAbs| SUBTYPE "float.Fabs(float.f)" "(float.Fbounded?(float.b))")))
 (|FulpAbs| 0
  (|FulpAbs-1| |nil| 3320082088
   ("" (SKEEP)
    (("" (EXPAND "Fabs")
      (("" (EXPAND "abs")
        (("" (GRIND-REALS)
          (("1"
            (CASE-REPLACE "(# Fnum := -Fnum(f), Fexp := Fexp(f) #)=Fopp(f)")
            (("1" (REWRITE "FulpOpp") NIL NIL)
             ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL))
            NIL)
           ("2" (CASE-REPLACE "(# Fnum := Fnum(f), Fexp := Fexp(f) #)=f")
            (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpMonotone| 0
  (|FulpMonotone-1| |nil| 3320081916
   ("" (SKEEP)
    (("" (EXPAND "Fulp")
      (("" (REWRITE "Exp_increq_1")
        (("" (REWRITE "Lexico" :SUBST ("b" "b")) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpMonotoneAbs| 0
  (|FulpMonotoneAbs-1| |nil| 3320082046
   ("" (SKEEP)
    (("" (REWRITE "FulpAbs" :DIR RL)
      (("" (REWRITE "FulpAbs" :DIR RL :SUBST ("f" "q"))
        (("" (REWRITE "FulpMonotone")
          (("1" (REWRITE "FabsCorrect") (("1" (REWRITE "FabsCorrect") NIL NIL))
            NIL)
           ("2" (REWRITE "FabsCorrect") (("2" (ASSERT) NIL NIL)) NIL)
           ("3" (REWRITE "FabsBounded") NIL NIL)
           ("4" (REWRITE "FabsBounded") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FloatPlusUlpBounded| 0
  (|FloatPlusUlpBounded-2| "" 3790102750
   ("" (SKEEP)
    ((""
      (CASE "FORALL (b: Format, p: float):
        Fcanonic?(b)(p) =>
         (EXISTS (f: (Fbounded?(b))): FtoR(f) = FtoR(p) + Fulp(b)(p))")
      (("1" (INST -1 "b" "Fnormalize(b)(p)")
        (("1" (SPLIT)
          (("1" (SKOSIMP*)
            (("1" (INST 1 "f!1")
              (("1" (CASE "FtoR(Fnormalize(b)(p))=FtoR(p)")
                (("1" (CASE " Fulp(b)(Fnormalize(b)(p))=Fulp(b)(p)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE -1 -2 2)
                    (("2" (EXPAND "Fulp")
                      (("2"
                        (REWRITE "FcanonicUnique" :SUBST
                         ("b" "b" "p" "Fnormalize(b)(Fnormalize(b)(p))" "q"
                          "Fnormalize(b)(p)"))
                        NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (HIDE 2 -1)
        (("2" (SKOSIMP*)
          (("2" (CASE "Fnum(p!1) = vNum(b!1)-1 OR Fnum(p!1) <= vNum(b!1)-2")
            (("1" (SPLIT)
              (("1" (INST 1 "(# Fnum:=vNum(b!1)/radix, Fexp:=Fexp(p!1)+1 #)")
                (("1" (REWRITE "FulpCanonic")
                  (("1" (EXPAND "FtoR")
                    (("1" (REWRITE "expt_plus") (("1" (FIELD) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "Fbounded?")
                  (("2" (CASE "Fbounded?(b!1)(p!1)")
                    (("1" (EXPAND "Fbounded?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (EXPAND "abs")
                            (("1" (GRIND-REALS)
                              (("1" (DIV-BY 1 "vNum(b!1)")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "FcanonicBounded") NIL NIL))
                    NIL))
                  NIL)
                 ("3" (LEMMA "radix_div_vNum") (("3" (INST -1 "b!1") NIL NIL))
                  NIL))
                NIL)
               ("2" (INST 1 "(# Fnum:=Fnum(p!1)+1, Fexp:=Fexp(p!1) #)")
                (("1" (REWRITE "FulpCanonic")
                  (("1" (EXPAND "FtoR") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                 ("2" (EXPAND "Fbounded?")
                  (("2" (CASE "Fbounded?(b!1)(p!1)")
                    (("1" (EXPAND "Fbounded?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "FcanonicBounded") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "Fbounded?(b!1)(p!1)")
              (("1" (EXPAND "Fbounded?")
                (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("2" (REWRITE "FcanonicBounded") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (SKOSIMP*) (("3" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FloatPlusUlpBounded-1| |nil| 3319810465
   ("" (SKEEP)
    ((""
      (CASE "FORALL (b: Format, p: float):
        Fcanonic?(b)(p) =>
         (EXISTS (f: (Fbounded?(b))): FtoR(f) = FtoR(p) + Fulp(b)(p))")
      (("1" (INST -1 "b" "Fnormalize(b)(p)")
        (("1" (SPLIT)
          (("1" (SKOSIMP*)
            (("1" (INST 1 "f!1")
              (("1" (CASE "FtoR(Fnormalize(b)(p))=FtoR(p)")
                (("1" (CASE " Fulp(b)(Fnormalize(b)(p))=Fulp(b)(p)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE -1 -2 2)
                    (("2" (EXPAND "Fulp")
                      (("2"
                        (REWRITE "FcanonicUnique" :SUBST
                         ("b" "b" "p" "Fnormalize(b)(Fnormalize(b)(p))" "q"
                          "Fnormalize(b)(p)"))
                        NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (HIDE 2 -1)
        (("2" (SKOSIMP*)
          (("2" (CASE "Fnum(p!1) = vNum(b!1)-1 OR Fnum(p!1) <= vNum(b!1)-2")
            (("1" (SPLIT)
              (("1" (INST 1 "(# Fnum:=vNum(b!1)/radix, Fexp:=Fexp(p!1)+1 #)")
                (("1" (REWRITE "FulpCanonic")
                  (("1" (EXPAND "FtoR")
                    (("1" (REWRITE "expt_plus")
                      (("1" (REWRITE "expt_x1") (("1" (FIELD) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "Fbounded?")
                  (("2" (CASE "Fbounded?(b!1)(p!1)")
                    (("1" (EXPAND "Fbounded?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (EXPAND "abs")
                            (("1" (GRIND-REALS)
                              (("1" (DIV-BY 1 "vNum(b!1)")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "FcanonicBounded") NIL NIL))
                    NIL))
                  NIL)
                 ("3" (LEMMA "radix_div_vNum") (("3" (INST -1 "b!1") NIL NIL))
                  NIL))
                NIL)
               ("2" (INST 1 "(# Fnum:=Fnum(p!1)+1, Fexp:=Fexp(p!1) #)")
                (("1" (REWRITE "FulpCanonic")
                  (("1" (EXPAND "FtoR") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                 ("2" (EXPAND "Fbounded?")
                  (("2" (CASE "Fbounded?(b!1)(p!1)")
                    (("1" (EXPAND "Fbounded?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "FcanonicBounded") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "Fbounded?(b!1)(p!1)")
              (("1" (EXPAND "Fbounded?")
                (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("2" (REWRITE "FcanonicBounded") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (SKOSIMP*) (("3" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FloatMinusUlpBounded| 0
  (|FloatMinusUlpBounded-1| |nil| 3319814672
   ("" (SKEEP)
    (("" (LEMMA "FloatPlusUlpBounded")
      (("" (INST -1 "b" "Fopp(p)")
        (("" (SPLIT)
          (("1" (SKOSIMP*)
            (("1" (INST 1 "Fopp(f!1)")
              (("1" (REWRITE "FoppCorrect")
                (("1" (REWRITE "FoppCorrect")
                  (("1" (REWRITE -1)
                    (("1" (CASE "Fulp(b)(Fopp(p))=Fulp(b)(p)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE -1 2)
                        (("2" (EXPAND "Fulp")
                          (("2"
                            (CASE
                                "Fnormalize(b)(Fopp(p))=Fopp(Fnormalize(b)(p))")
                            (("1" (REWRITE -1)
                              (("1" (EXPAND "Fopp") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (REWRITE "FcanonicUnique" :SUBST ("b" "b"))
                                (("1"
                                  (CASE
                                      "FtoR(Fnormalize(b)(Fopp(p)))=FtoR(Fopp(p))")
                                  (("1" (REWRITE -1)
                                    (("1" (REWRITE "FoppCorrect")
                                      (("1" (REWRITE "FoppCorrect")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (LEMMA "FcanonicOpp")
                                  (("2" (INST -1 "b" "Fnormalize(b)(p)")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "FoppBounded") NIL NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FoppBounded") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredFoppFsucc| 0
  (|FpredFoppFsucc-1| |nil| 3319211967
   ("" (SKEEP)
    (("" (EXPAND* "Fpred" "Fopp" "Fsucc") (("" (GRIND-REALS) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccFoppFpred| 0
  (|FsuccFoppFpred-1| |nil| 3319212016
   ("" (SKEEP)
    (("" (EXPAND* "Fsucc" "Fopp" "Fpred") (("" (GRIND-REALS) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccFpred| 0
  (|FsuccFpred-2| "" 3790102758
   ("" (SKEEP)
    (("" (EXPAND* "Fpred" "Fsucc")
      (("" (GRIND-REALS)
        (("1" (LEMMA "radix_less_vNum" :SUBST ("b" "b"))
          (("1" (HIDE -2 -3) (("1" (FIELD -2) NIL NIL)) NIL)) NIL)
         ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)
         ("3" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?") NIL
          NIL)
         ("4" (DECOMPOSE-EQUALITY 2)
          (("1" (GRIND) NIL NIL)
           ("2" (REPLACE -2 :DIR RL :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("5" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?")
          (("5" (REWRITE -2) (("5" (GRIND-REALS) NIL NIL)) NIL)) NIL)
         ("6" (DECOMPOSE-EQUALITY 3) NIL NIL)
         ("7" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?")
          (("7" (REWRITE -2) (("7" (GRIND-REALS) NIL NIL)) NIL)) NIL)
         ("8" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?")
          (("8" (FLATTEN)
            (("8" (CASE-REPLACE "Fnum(f)=1-(vNum(b) / radix)")
              (("1" (HIDE-ALL-BUT -3)
                (("1" (REWRITE "abs_mult")
                  (("1" (EXPAND "abs")
                    (("1" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum" :SUBST ("b" "b"))
                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("9" (DECOMPOSE-EQUALITY 3) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FsuccFpred-1| |nil| 3319298166
   ("" (SKEEP)
    (("" (EXPAND* "Fpred" "Fsucc")
      (("" (GRIND-REALS)
        (("1" (LEMMA "radix_less_vNum" :SUBST ("b" "b"))
          (("1" (HIDE -2 -3) (("1" (FIELD -2) NIL NIL)) NIL)) NIL)
         ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)
         ("3" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?") NIL
          NIL)
         ("4" (DECOMPOSE-EQUALITY 2)
          (("1" (REWRITE "div_cancel4") (("1" (GRIND) NIL NIL)) NIL)
           ("2" (REWRITE "div_cancel4")
            (("2" (REPLACE -2 :DIR RL :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("5" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?")
          (("5" (REWRITE -2) (("5" (GRIND-REALS) NIL NIL)) NIL)) NIL)
         ("6" (DECOMPOSE-EQUALITY 3) NIL NIL)
         ("7" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?")
          (("7" (REWRITE -2) (("7" (GRIND-REALS) NIL NIL)) NIL)) NIL)
         ("8" (EXPAND* "Fcanonic?" "Fnormal?" "Fsubnormal?" "Fbounded?")
          (("8" (FLATTEN)
            (("8" (CASE-REPLACE "Fnum(f)=1-(vNum(b) / radix)")
              (("1" (HIDE-ALL-BUT -3)
                (("1" (REWRITE "abs_mult")
                  (("1" (EXPAND "abs")
                    (("1" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum" :SUBST ("b" "b"))
                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("9" (DECOMPOSE-EQUALITY 3) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredFsucc| 0
  (|FpredFsucc-1| |nil| 3319299927
   ("" (SKEEP)
    (("" (CASE "f=Fopp(Fopp(f))")
      (("1" (REWRITE -1 :TARGET-FNUMS 1)
        (("1" (REWRITE "FsuccFoppFpred")
          (("1" (REWRITE "FpredFoppFsucc" :SUBST ("f" "(Fpred(b)(Fopp(f)))"))
            (("1" (REWRITE "FsuccFpred")
              (("1" (LEMMA "FcanonicOpp") (("1" (GRIND-REALS) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE -1 2)
        (("2" (EXPAND "Fopp") (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredBounded| 0
  (|FpredBounded-1| |nil| 3320428258
   ("" (SKEEP)
    (("" (EXPAND* "Fbounded?" "Fpred")
      (("" (GRIND-REALS)
        (("1" (EXPAND "abs" 1)
          (("1" (FIELD 1)
            (("1" (DIV-BY 1 "vNum(b)") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (EXPAND "abs" 2) (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (EXPAND "abs") (("3" (GRIND-REALS) NIL NIL)) NIL)
         ("4" (EXPAND "abs") (("4" (GRIND-REALS) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccBounded| 0
  (|FsuccBounded-1| |nil| 3320428394
   ("" (SKEEP)
    (("" (CASE-REPLACE "Fsucc(b)(f)=Fopp(Fopp(Fsucc(b)(f)))")
      (("1" (REWRITE "FoppBounded")
        (("1" (REWRITE "FpredFoppFsucc" :DIR RL)
          (("1" (REWRITE "FpredBounded")
            (("1" (REWRITE "FoppBounded") NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (EXPAND "Fopp") (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccCanonic| 0
  (|FsuccCanonic-1| |nil| 3319233185
   ("" (SKEEP)
    (("" (LEMMA "FcanonicOpp")
      (("" (INST-CP -1 "b" "Fsucc(b)(f)")
        (("" (FLATTEN)
          (("" (REWRITE -3)
            (("" (HIDE -2 -3 2)
              (("" (LEMMA "FpredFoppFsucc")
                (("" (INST -1 "b" "f")
                  (("" (CASE "Fcanonic?(b)(Fpred(b)(Fopp(f)))")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REWRITE "FpredCanonic")
                      (("2" (HIDE 2 3 -1)
                        (("2" (INST -1 "b" "f") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredPos| 0
  (|FpredPos-1| |nil| 3319306101
   ("" (SKEEP)
    (("" (EXPAND "FtoR")
      (("" (DIV-BY -2 "radix ^ (Fexp(p))")
        (("" (CASE-REPLACE "0 / radix ^ (Fexp(p))=0")
          (("1" (HIDE -1)
            (("1" (EXPAND "Fpred") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
           ("2" (GRIND-REALS) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccPos| 0
  (|FsuccPos-1| |nil| 3319462089
   ("" (SKEEP)
    (("" (CASE "0 <=Fnum(p)")
      (("1" (CASE "0 < Fnum(Fsucc(b)(p))")
        (("1" (EXPAND "FtoR" 1) (("1" (GRIND-REALS) NIL NIL)) NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND "Fsucc")
            (("2" (LIFT-IF)
              (("2" (SPLIT +)
                (("1" (FLATTEN) (("1" (CROSS-MULT 1) NIL NIL)) NIL)
                 ("2" (FLATTEN)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "FtoR" -2) (("2" (GRIND-REALS) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredDiff_TCC1| 0
  (|FpredDiff_TCC1-1| |nil| 3319375218
   ("" (SKEEP)
    (("" (REWRITE "FcanonicBounded") (("" (REWRITE "FpredCanonic") NIL NIL))
      NIL))
    NIL)
   NIL NIL
   (|FpredDiff| SUBTYPE "float.Fpred(float.b)(float.f)"
    "(float.Fbounded?(float.b))")))
 (|FpredDiff| 0
  (|FpredDiff-2| "" 3790102766
   ("" (SKEEP)
    (("" (REWRITE "FulpCanonic")
      (("1" (EXPAND* "FtoR" "Fpred")
        (("1" (GRIND-REALS)
          (("1" (REWRITE "expt_div" :DIR RL) (("1" (GRIND-REALS) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (REWRITE "FpredCanonic") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FpredDiff-1| |nil| 3319375376
   ("" (SKEEP)
    (("" (REWRITE "FulpCanonic")
      (("1" (EXPAND* "FtoR" "Fpred")
        (("1" (GRIND-REALS)
          (("1" (REWRITE "expt_div" :DIR RL)
            (("1" (REWRITE "expt_x1") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (REWRITE "FpredCanonic") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccDiff| 0
  (|FsuccDiff-1| |nil| 3319461787
   ("" (SKEEP)
    (("" (CASE "f=Fpred(b)(Fsucc(b)(f))")
      (("1" (CASE-REPLACE "FtoR(f)=FtoR(Fpred(b)(Fsucc(b)(f)))")
        (("1" (CASE-REPLACE "Fulp(b)(f)=Fulp(b)(Fpred(b)(Fsucc(b)(f)))")
          (("1" (REWRITE "FpredDiff")
            (("1" (HIDE -1 -2 2) (("1" (REWRITE "FsuccPos") NIL NIL)) NIL)
             ("2" (REWRITE "FsuccCanonic") NIL NIL))
            NIL)
           ("2" (GRIND-REALS) NIL NIL)
           ("3" (REWRITE -2 :DIR RL)
            (("3" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
          NIL)
         ("2" (GRIND-REALS) NIL NIL))
        NIL)
       ("2" (REWRITE "FpredFsucc") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredLt| 0
  (|FpredLt-2| "" 3790102768
   ("" (SKEEP)
    (("" (EXPAND "Fpred")
      (("" (GRIND-REALS)
        (("1" (EXPAND "FtoR")
          (("1" (REWRITE "expt_plus")
            (("1" (REWRITE -1) (("1" (FIELD) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (EXPAND "FtoR")
          (("2" (CASE-REPLACE "radix ^ (Fexp(f) - 1)=radix ^ (Fexp(f))/radix")
            (("1" (HIDE -1 -3 1) (("1" (FIELD) NIL NIL)) NIL)
             ("2" (HIDE -1 -2 2 3)
              (("2" (LEMMA "expt_div")
                (("2" (INST -1 "Fexp(f)" "1" "radix")
                  (("2" (REWRITE "expt_x1" -1) (("2" (GRIND-REALS) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 1 2)
          (("3" (EXPAND "FtoR") (("3" (GRIND-REALS) NIL NIL)) NIL)) NIL)
         ("4" (EXPAND "FtoR")
          (("4" (HIDE 1 2) (("4" (GRIND-REALS) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FpredLt-1| |nil| 3319233508
   ("" (SKEEP)
    (("" (EXPAND "Fpred")
      (("" (GRIND-REALS)
        (("1" (EXPAND "FtoR")
          (("1" (REWRITE "expt_plus")
            (("1" (REWRITE "expt_x1")
              (("1" (REWRITE -1) (("1" (FIELD) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "FtoR")
          (("2" (CASE-REPLACE "radix ^ (Fexp(f) - 1)=radix ^ (Fexp(f))/radix")
            (("1" (HIDE -1 -3 1)
              (("1" (FIELD) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
             ("2" (HIDE -1 -2 2 3)
              (("2" (LEMMA "expt_div")
                (("2" (INST -1 "Fexp(f)" "1" "radix")
                  (("2" (REWRITE "expt_x1" -1) (("2" (GRIND-REALS) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 1 2)
          (("3" (EXPAND "FtoR") (("3" (GRIND-REALS) NIL NIL)) NIL)) NIL)
         ("4" (EXPAND "FtoR")
          (("4" (HIDE 1 2) (("4" (GRIND-REALS) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredLe_aux| 0
  (|FpredLe_aux-2| "" 3790102794
   ("" (SKEEP)
    (("" (CASE-REPLACE "FtoR(Fpred(b)(p))=FtoR(p)-Fulp(b)(Fpred(b)(p))")
      (("1" (CASE-REPLACE "FtoR(Fpred(b)(q))=FtoR(q)-Fulp(b)(Fpred(b)(q))")
        (("1" (REWRITE "FulpCanonic")
          (("1" (REWRITE "FulpCanonic")
            (("1" (HIDE -1 -2)
              (("1" (CASE "0<Fnum(p)")
                (("1" (CASE "0<Fnum(q)")
                  (("1" (CASE "Fexp(p) <= Fexp(q)")
                    (("1" (EXPAND "Fpred")
                      (("1" (GRIND-REALS)
                        (("1" (EXPAND* "FtoR")
                          (("1" (REWRITE "expt_div" :DIR RL)
                            (("1" (REWRITE "expt_div" :DIR RL)
                              (("1" (FIELD)
                                (("1" (DIV-BY 1 "vNum(b)-1")
                                  (("1" (CASE-REPLACE "Fnum(p)=vNum(b)/radix")
                                    (("1"
                                      (CASE-REPLACE "Fnum(q)=vNum(b)/radix")
                                      (("1"
                                        (CASE-REPLACE
                                         "(vNum(b) / radix * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))) /
                                                                         (vNum(b) - 1)=radix ^ Fexp(p)")
                                        (("1"
                                          (CASE-REPLACE
                                           "(vNum(b) / radix * (radix ^ Fexp(q)) * radix - (radix ^ Fexp(q))) /
                                                                                (vNum(b) - 1)=radix ^ Fexp(q)")
                                          (("1" (REWRITE "Exp_increq_1") NIL
                                            NIL)
                                           ("2" (FIELD) NIL NIL))
                                          NIL)
                                         ("2" (FIELD 1) NIL NIL))
                                        NIL)
                                       ("2" (GRIND-REALS) NIL NIL))
                                      NIL)
                                     ("2" (EXPAND "Fcanonic?")
                                      (("2" (SPLIT)
                                        (("1" (EXPAND "Fnormal?")
                                          (("1" (FLATTEN)
                                            (("1" (REWRITE "abs_mult" -2)
                                              (("1" (EXPAND "abs" -2)
                                                (("1" (MULT-BY 2 "radix")
                                                  (("1" (FIELD 2) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (CASE-REPLACE
                                           " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                                               = (vNum(b)-1)*radix ^ Fexp(p)")
                                          (("1"
                                            (CASE
                                                "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                            (("1"
                                              (CASE
                                                  "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                              (("1" (GRIND-REALS) NIL NIL)
                                               ("2"
                                                (CANCEL-BY 1 "radix ^ Fexp(q)")
                                                NIL NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-5 2 3))
                                              (("2"
                                                (CASE
                                                    "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                (("1" (SPLIT)
                                                  (("1" (GRIND-REALS) NIL NIL)
                                                   ("2"
                                                    (LEMMA "radix_div_vNum")
                                                    (("2" (INST -1 "b")
                                                      (("2"
                                                        (REWRITE "div_simple"
                                                         -1 :DIR RL)
                                                        (("2" (SKOSIMP*)
                                                          (("2"
                                                            (DIV-BY -2 "radix")
                                                            (("2"
                                                              (CASE-REPLACE
                                                               "vNum(b) / radix=k!1")
                                                              (("1"
                                                                (CASE
                                                                    "k!1 <= Fnum(q)-1")
                                                                (("1"
                                                                  (MULT-BY -1
                                                                   "radix")
                                                                  (("1"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2"
                                                                (GRIND-REALS)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (DIV-BY 1 "vNum(b) - 1")
                                            (("2" (GRIND-REALS) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "Fcanonic?" -5)
                          (("2" (SPLIT)
                            (("1" (EXPAND "Fnormal?")
                              (("1" (FLATTEN)
                                (("1" (REWRITE "abs_mult" -2)
                                  (("1" (EXPAND "abs" -2)
                                    (("1" (EXPAND "FtoR" 2)
                                      (("1" (REWRITE "expt_div" :DIR RL)
                                        (("1" (MULT-BY 2 "radix")
                                          (("1" (FIELD 2)
                                            (("1"
                                              (CASE-REPLACE
                                               " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                           = (vNum(b)-1)*radix ^ Fexp(p)")
                                              (("1"
                                                (CASE
                                                    "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                                (("1"
                                                  (CASE
                                                      "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                  (("1" (GRIND-REALS) NIL NIL)
                                                   ("2"
                                                    (CANCEL-BY 1
                                                     "radix ^ Fexp(q)")
                                                    (("2"
                                                      (HIDE-ALL-BUT (-5 2 3))
                                                      (("2"
                                                        (CASE
                                                            "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                        (("1" (SPLIT)
                                                          (("1" (GRIND-REALS)
                                                            NIL NIL)
                                                           ("2"
                                                            (LEMMA
                                                             "radix_div_vNum")
                                                            (("2" (INST -1 "b")
                                                              (("2"
                                                                (REWRITE
                                                                 "div_simple"
                                                                 -1 :DIR RL)
                                                                (("2"
                                                                  (SKOSIMP*)
                                                                  (("2"
                                                                    (DIV-BY -2
                                                                     "radix")
                                                                    (("2"
                                                                      (CASE-REPLACE
                                                                       "vNum(b) / radix=k!1")
                                                                      (("1"
                                                                        (CASE
                                                                            "k!1 <= Fnum(q)-1")
                                                                        (("1"
                                                                          (MULT-BY
                                                                           -1
                                                                           "radix")
                                                                          (("1"
                                                                            (GRIND-REALS)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (GRIND-REALS)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (GRIND-REALS)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (DIV-BY 1 "vNum(b) - 1")
                                                  (("2"
                                                    (REWRITE "Exp_increq_1")
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "Fsubnormal?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (CASE "Fbounded?(b)(p)")
                          (("1" (EXPAND "Fbounded?")
                            (("1" (FLATTEN)
                              (("1" (CASE "-dExp(b) = Fexp(p)")
                                (("1" (EXPAND "abs" -2)
                                  (("1" (EXPAND "FtoR" 2)
                                    (("1"
                                      (CASE
                                          "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                      (("1"
                                        (CASE
                                            "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                        (("1" (GRIND-REALS) NIL NIL)
                                         ("2" (DIV-BY 1 "radix ^ (Fexp(p))")
                                          (("2"
                                            (CASE-REPLACE
                                             "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ (Fexp(p))
                           = Fnum(p)-1")
                                            (("1" (GRIND-REALS) NIL NIL)
                                             ("2" (FIELD 1) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2 3)
                                        (("2"
                                          (CASE
                                              "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                          (("1"
                                            (CASE
                                                "(vNum(b) - 2) * radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                            (("1" (GRIND-REALS) NIL NIL)
                                             ("2" (DIV-BY 1 "vNum(b) - 2")
                                              (("2" (REWRITE "Exp_increq_1")
                                                NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (REWRITE "expt_div" :DIR RL)
                                              (("2" (FIELD 1) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FcanonicBounded") NIL NIL))
                          NIL)
                         ("4" (CASE " Fexp(p)=-dExp(b)")
                          (("1" (CASE " Fexp(q)=-dExp(b)")
                            (("1" (HIDE 1 2 -3)
                              (("1" (EXPAND* "FtoR")
                                (("1" (REPLACE -2)
                                  (("1" (REPLACE -1)
                                    (("1" (HIDE -4)
                                      (("1" (DIV-BY -6 "radix ^ -dExp(b)")
                                        (("1" (DIV-BY 1 "radix ^ -dExp(b)")
                                          (("1"
                                            (CASE-REPLACE
                                             "(Fnum(p) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                       = Fnum(p)-1")
                                            (("1"
                                              (CASE-REPLACE
                                               "(Fnum(q) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                         = Fnum(q)-1")
                                              (("1" (GRIND-REALS) NIL NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL)
                                             ("2" (FIELD 1) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (CASE "Fbounded?(b)(p)")
                            (("1" (EXPAND "Fbounded?") (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (REWRITE "FcanonicBounded") NIL NIL))
                            NIL))
                          NIL)
                         ("5" (CASE "Fexp(p) = -dExp(b)")
                          (("1" (HIDE 1)
                            (("1" (SPLIT-INEQ -2)
                              (("1" (CASE "Fexp(p) < Fexp(q)")
                                (("1" (HIDE 1)
                                  (("1" (CASE "Fbounded?(b)(p)")
                                    (("1" (EXPAND "Fbounded?")
                                      (("1" (EXPAND "abs" -1)
                                        (("1" (EXPAND "Fcanonic?" -8)
                                          (("1"
                                            (EXPAND* "Fnormal?" "Fsubnormal?")
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE "abs_mult" -9)
                                                (("1" (EXPAND "abs" -9)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "FtoR" 2)
                                                      (("1"
                                                        (CASE
                                                            "(vNum(b)-2)* radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                        (("1"
                                                          (CASE
                                                              "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2"
                                                            (DIV-BY 1
                                                             "radix ^ Fexp(p)")
                                                            (("2"
                                                              (CASE-REPLACE
                                                               "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)
                             = Fnum(p)-1")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE 3)
                                                          (("2"
                                                            (CASE
                                                                "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                            (("1"
                                                              (CASE
                                                                  "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (DIV-BY 1
                                                                 "vNum(b) - 2")
                                                                (("2"
                                                                  (REWRITE
                                                                   "Exp_increq_1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (REWRITE
                                                                 "expt_div"
                                                                 :DIR RL)
                                                                (("2"
                                                                  (DIV-BY 1
                                                                   "radix ^ Fexp(q)")
                                                                  (("2"
                                                                    (CASE-REPLACE
                                                                     "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                             = (vNum(b) - 2) / radix")
                                                                    (("1"
                                                                      (CASE-REPLACE
                                                                       "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                               = Fnum(q)-1")
                                                                      (("1"
                                                                        (GRIND-REALS)
                                                                        (("1"
                                                                          (CASE
                                                                              "vNum(b)/radix +1 <= Fnum(q)")
                                                                          (("1"
                                                                            (HIDE-ALL-BUT
                                                                             (-1
                                                                              1))
                                                                            (("1"
                                                                              (LEMMA
                                                                               "radix_less_vNum")
                                                                              (("1"
                                                                                (INST
                                                                                 -1
                                                                                 "b")
                                                                                (("1"
                                                                                  (MULT-BY
                                                                                   -2
                                                                                   "radix")
                                                                                  (("1"
                                                                                    (FIELD
                                                                                     -1)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "radix_div_vNum")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "b")
                                                                              (("2"
                                                                                (REWRITE
                                                                                 "div_simple"
                                                                                 :DIR
                                                                                 RL)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -2)
                                                                                  (("2"
                                                                                    (SKOSIMP*)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "k!1 < Fnum(q)")
                                                                                      (("1"
                                                                                        (GRIND-REALS)
                                                                                        (("1"
                                                                                          (FIELD
                                                                                           1)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (GRIND-REALS)
                                                                                        (("2"
                                                                                          (DIV-BY
                                                                                           -10
                                                                                           "radix")
                                                                                          (("2"
                                                                                            (DIV-BY
                                                                                             4
                                                                                             "radix")
                                                                                            (("2"
                                                                                              (GRIND-REALS)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FIELD
                                                                         1)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FIELD 1)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE "Fbounded?(b)(p)")
                            (("1" (EXPAND "Fbounded?")
                              (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FcanonicBounded") NIL NIL))
                            NIL))
                          NIL)
                         ("6" (SPLIT-INEQ -1)
                          (("1" (EXPAND "FtoR" -8)
                            (("1" (EXPAND "Fcanonic?" -6)
                              (("1" (EXPAND* "Fnormal?" "Fsubnormal?")
                                (("1" (FLATTEN)
                                  (("1" (REWRITE "abs_mult" -7)
                                    (("1" (EXPAND "abs" -7)
                                      (("1" (REPLACES -1 -9)
                                        (("1"
                                          (EXPAND* "Fcanonic?" "Fnormal?"
                                           "Fsubnormal?")
                                          (("1" (FLATTEN)
                                            (("1" (REWRITE "abs_mult" -5)
                                              (("1" (EXPAND "abs" -5)
                                                (("1"
                                                  (DIV-BY -9
                                                   "radix ^ (Fexp(q))")
                                                  (("1" (MULT-BY -9 "radix")
                                                    (("1" (REWRITE -10)
                                                      (("1"
                                                        (HIDE-ALL-BUT
                                                         (-1 -6 1))
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE " Fexp(p) < Fexp(q)")
                            (("1" (HIDE -2 1)
                              (("1" (HIDE 1 -7)
                                (("1" (EXPAND "FtoR")
                                  (("1"
                                    (CASE
                                        "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                    (("1"
                                      (CASE
                                          "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ Fexp(p)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (DIV-BY 1 "radix ^ Fexp(p)")
                                        (("2"
                                          (CASE-REPLACE
                                           "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                          (("1" (CASE "Fbounded?(b)(p)")
                                            (("1" (EXPAND "Fbounded?")
                                              (("1" (FLATTEN)
                                                (("1" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (REWRITE "FcanonicBounded")
                                              NIL NIL))
                                            NIL)
                                           ("2" (FIELD) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (CASE
                                          "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                    Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                      (("1"
                                        (CASE
                                            "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (DIV-BY 1 "(vNum(b) - 2)")
                                          (("1" (REWRITE "Exp_increq_1") NIL
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (LEMMA "radix_less_vNum")
                                              (("2" (INST -1 "b")
                                                (("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2 3)
                                        (("2" (REWRITE "expt_div" :DIR RL)
                                          (("2" (DIV-BY 1 "radix ^ Fexp(q)")
                                            (("2"
                                              (CASE-REPLACE
                                               "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                            = (vNum(b) - 2)/radix")
                                              (("1"
                                                (CASE-REPLACE
                                                 "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q) / radix) /
                                    radix ^ Fexp(q)=Fnum(q) -1/radix")
                                                (("1" (FIELD 1) NIL NIL)
                                                 ("2" (FIELD 1) NIL NIL))
                                                NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL)
                         ("7" (EXPAND* "FtoR")
                          (("7" (CASE-REPLACE "Fexp(q)=-dExp(b)")
                            (("1" (CASE-REPLACE "Fexp(p)=-dExp(b)")
                              (("1" (GRIND-REALS) NIL NIL)
                               ("2" (CASE "Fbounded?(b)(p)")
                                (("1" (EXPAND "Fbounded?")
                                  (("1" (PROPAX) NIL NIL)) NIL)
                                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "Fbounded?(b)(q)")
                              (("1" (EXPAND "Fbounded?")
                                (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FcanonicBounded") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("8" (SPLIT-INEQ -1)
                          (("8" (CASE "Fexp(p) < Fexp(q)")
                            (("1" (HIDE -2 1)
                              (("1" (EXPAND "FtoR" 3)
                                (("1"
                                  (CASE
                                      "(vNum(b)-2)*radix ^ Fexp(p)<= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                  (("1"
                                    (CASE
                                        "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (DIV-BY 1 "radix ^ Fexp(p)")
                                      (("2"
                                        (CASE-REPLACE
                                         "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                        (("1" (CASE "Fbounded?(b)(p)")
                                          (("1" (EXPAND "Fbounded?")
                                            (("1" (FLATTEN)
                                              (("1" (EXPAND "abs" -1)
                                                (("1" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REWRITE "FcanonicBounded") NIL
                                            NIL))
                                          NIL)
                                         ("2" (FIELD) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (CASE
                                        "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                  Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                    (("1"
                                      (CASE
                                          "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (DIV-BY 1 "vNum(b) - 2")
                                        (("1" (REWRITE "Exp_increq_1") NIL NIL)
                                         ("2" (LEMMA "radix_less_vNum")
                                          (("2" (INST -1 "b")
                                            (("2" (GRIND-REALS) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2 5)
                                      (("2" (REWRITE "expt_div" :DIR RL)
                                        (("2" (DIV-BY 1 "radix ^ Fexp(q)")
                                          (("2"
                                            (CASE-REPLACE
                                             "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                          = (vNum(b) - 2)/radix")
                                            (("1"
                                              (CASE-REPLACE
                                               "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                           = Fnum(q)-1")
                                              (("1"
                                                (CASE
                                                    "vNum(b)/radix +1 <= Fnum(q)")
                                                (("1" (MULT-BY -1 "radix")
                                                  (("1" (MULT-BY 1 "radix")
                                                    (("1" (FIELD) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (LEMMA "radix_div_vNum")
                                                  (("2" (INST -1 "b")
                                                    (("2"
                                                      (REWRITE "div_simple"
                                                       :DIR RL)
                                                      (("2" (SKOSIMP*)
                                                        (("2"
                                                          (CASE
                                                              "k!1 < Fnum(q)")
                                                          (("1" (GRIND-REALS)
                                                            NIL NIL)
                                                           ("2"
                                                            (HIDE -2 -3 2 3)
                                                            (("2"
                                                              (EXPAND
                                                               "Fcanonic?" -6)
                                                              (("2"
                                                                (EXPAND*
                                                                 "Fnormal?"
                                                                 "Fsubnormal?")
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (REWRITE
                                                                       "abs_mult"
                                                                       -2)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs"
                                                                         -2)
                                                                        (("1"
                                                                          (HIDE-ALL-BUT
                                                                           (-2
                                                                            -3
                                                                            1
                                                                            3))
                                                                          (("1"
                                                                            (REWRITE
                                                                             -2)
                                                                            (("1"
                                                                              (DIV-BY
                                                                               -1
                                                                               "radix")
                                                                              (("1"
                                                                                (DIV-BY
                                                                                 2
                                                                                 "radix")
                                                                                (("1"
                                                                                  (GRIND-REALS)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (CASE
                                                                          "Fbounded?(b)(p)")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "Fbounded?")
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (GRIND-REALS)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (REWRITE
                                                                         "FcanonicBounded")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL)
                                             ("2" (FIELD 1) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (LEMMA "Lexico")
                        (("2" (INST -1 "b" "p" "q") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE "0<FtoR(q)")
                    (("1" (EXPAND "FtoR" -1) (("1" (GRIND-REALS) NIL NIL)) NIL)
                     ("2" (GRIND-REALS) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "FtoR" -3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (REWRITE "FpredCanonic") NIL NIL))
            NIL)
           ("2" (REWRITE "FpredCanonic") NIL NIL))
          NIL)
         ("2" (REWRITE "FpredDiff" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (REWRITE "FcanonicBounded")
          (("3" (REWRITE "FpredCanonic") NIL NIL)) NIL))
        NIL)
       ("2" (REWRITE "FpredDiff" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)
       ("3" (REWRITE "FcanonicBounded")
        (("3" (REWRITE "FpredCanonic") NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FpredLe_aux-1| |nil| 3319391212
   ("" (SKEEP)
    (("" (CASE-REPLACE "FtoR(Fpred(b)(p))=FtoR(p)-Fulp(b)(Fpred(b)(p))")
      (("1" (CASE-REPLACE "FtoR(Fpred(b)(q))=FtoR(q)-Fulp(b)(Fpred(b)(q))")
        (("1" (REWRITE "FulpCanonic")
          (("1" (REWRITE "FulpCanonic")
            (("1" (HIDE -1 -2)
              (("1" (CASE "0<Fnum(p)")
                (("1" (CASE "0<Fnum(q)")
                  (("1" (CASE "Fexp(p) <= Fexp(q)")
                    (("1" (EXPAND "Fpred")
                      (("1" (GRIND-REALS)
                        (("1" (EXPAND* "FtoR")
                          (("1" (REWRITE "expt_div" :DIR RL)
                            (("1" (REWRITE "expt_div" :DIR RL)
                              (("1" (REWRITE "expt_x1")
                                (("1" (FIELD)
                                  (("1" (DIV-BY 1 "vNum(b)-1")
                                    (("1"
                                      (CASE-REPLACE "Fnum(p)=vNum(b)/radix")
                                      (("1"
                                        (CASE-REPLACE "Fnum(q)=vNum(b)/radix")
                                        (("1"
                                          (CASE-REPLACE
                                           "(vNum(b) / radix * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))) /
                                                                         (vNum(b) - 1)=radix ^ Fexp(p)")
                                          (("1"
                                            (CASE-REPLACE
                                             "(vNum(b) / radix * (radix ^ Fexp(q)) * radix - (radix ^ Fexp(q))) /
                                                                                (vNum(b) - 1)=radix ^ Fexp(q)")
                                            (("1" (REWRITE "Exp_increq_1") NIL
                                              NIL)
                                             ("2" (FIELD) NIL NIL))
                                            NIL)
                                           ("2" (FIELD 1) NIL NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (EXPAND "Fcanonic?")
                                        (("2" (SPLIT)
                                          (("1" (EXPAND "Fnormal?")
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE "abs_mult" -2)
                                                (("1" (EXPAND "abs" -2)
                                                  (("1" (MULT-BY 2 "radix")
                                                    (("1" (FIELD 2) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (CASE-REPLACE
                                             " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                                               = (vNum(b)-1)*radix ^ Fexp(p)")
                                            (("1"
                                              (CASE
                                                  "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                              (("1"
                                                (CASE
                                                    "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                (("1" (GRIND-REALS) NIL NIL)
                                                 ("2"
                                                  (CANCEL-BY 1
                                                   "radix ^ Fexp(q)")
                                                  NIL NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT (-5 2 3))
                                                (("2"
                                                  (CASE
                                                      "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                  (("1" (SPLIT)
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL)
                                                     ("2"
                                                      (LEMMA "radix_div_vNum")
                                                      (("2" (INST -1 "b")
                                                        (("2"
                                                          (REWRITE "div_simple"
                                                           -1 :DIR RL)
                                                          (("2" (SKOSIMP*)
                                                            (("2"
                                                              (DIV-BY -2
                                                               "radix")
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "vNum(b) / radix=k!1")
                                                                (("1"
                                                                  (CASE
                                                                      "k!1 <= Fnum(q)-1")
                                                                  (("1"
                                                                    (MULT-BY -1
                                                                     "radix")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DIV-BY 1 "vNum(b) - 1")
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "Fcanonic?" -5)
                          (("2" (SPLIT)
                            (("1" (EXPAND "Fnormal?")
                              (("1" (FLATTEN)
                                (("1" (REWRITE "abs_mult" -2)
                                  (("1" (EXPAND "abs" -2)
                                    (("1" (EXPAND "FtoR" 2)
                                      (("1" (REWRITE "expt_div" :DIR RL)
                                        (("1" (REWRITE "expt_x1")
                                          (("1" (MULT-BY 2 "radix")
                                            (("1" (FIELD 2)
                                              (("1"
                                                (CASE-REPLACE
                                                 " Fnum(p) * (radix ^ Fexp(p)) * radix - (radix ^ Fexp(p))
                                           = (vNum(b)-1)*radix ^ Fexp(p)")
                                                (("1"
                                                  (CASE
                                                      "(vNum(b) - 1) * radix ^ Fexp(p) <= (vNum(b) - 1) * radix ^ Fexp(q)")
                                                  (("1"
                                                    (CASE
                                                        "(vNum(b) - 1) * radix ^ Fexp(q) <=  Fnum(q) * radix ^ (Fexp(q)) * radix - radix ^ Fexp(q) * radix")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL)
                                                     ("2"
                                                      (CANCEL-BY 1
                                                       "radix ^ Fexp(q)")
                                                      (("2"
                                                        (HIDE-ALL-BUT (-5 2 3))
                                                        (("2"
                                                          (CASE
                                                              "vNum(b) = radix * Fnum(q) OR vNum(b) < radix * Fnum(q)")
                                                          (("1" (SPLIT)
                                                            (("1" (GRIND-REALS)
                                                              NIL NIL)
                                                             ("2"
                                                              (LEMMA
                                                               "radix_div_vNum")
                                                              (("2"
                                                                (INST -1 "b")
                                                                (("2"
                                                                  (REWRITE
                                                                   "div_simple"
                                                                   -1 :DIR RL)
                                                                  (("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (DIV-BY
                                                                       -2
                                                                       "radix")
                                                                      (("2"
                                                                        (CASE-REPLACE
                                                                         "vNum(b) / radix=k!1")
                                                                        (("1"
                                                                          (CASE
                                                                              "k!1 <= Fnum(q)-1")
                                                                          (("1"
                                                                            (MULT-BY
                                                                             -1
                                                                             "radix")
                                                                            (("1"
                                                                              (GRIND-REALS)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (GRIND-REALS)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (GRIND-REALS)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (DIV-BY 1 "vNum(b) - 1")
                                                    (("2"
                                                      (REWRITE "Exp_increq_1")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "Fsubnormal?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (CASE "Fbounded?(b)(p)")
                          (("1" (EXPAND "Fbounded?")
                            (("1" (FLATTEN)
                              (("1" (CASE "-dExp(b) = Fexp(p)")
                                (("1" (EXPAND "abs" -2)
                                  (("1" (EXPAND "FtoR" 2)
                                    (("1"
                                      (CASE
                                          "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                      (("1"
                                        (CASE
                                            "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                        (("1" (GRIND-REALS) NIL NIL)
                                         ("2" (DIV-BY 1 "radix ^ (Fexp(p))")
                                          (("2"
                                            (CASE-REPLACE
                                             "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ (Fexp(p))
                           = Fnum(p)-1")
                                            (("1" (GRIND-REALS) NIL NIL)
                                             ("2" (FIELD 1) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2 3)
                                        (("2"
                                          (CASE
                                              "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                          (("1"
                                            (CASE
                                                "(vNum(b) - 2) * radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                            (("1" (GRIND-REALS) NIL NIL)
                                             ("2" (DIV-BY 1 "vNum(b) - 2")
                                              (("2" (REWRITE "Exp_increq_1")
                                                NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (REWRITE "expt_div" :DIR RL)
                                              (("2" (REWRITE "expt_x1")
                                                (("2" (FIELD 1) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FcanonicBounded") NIL NIL))
                          NIL)
                         ("4" (CASE " Fexp(p)=-dExp(b)")
                          (("1" (CASE " Fexp(q)=-dExp(b)")
                            (("1" (HIDE 1 2 -3)
                              (("1" (EXPAND* "FtoR")
                                (("1" (REPLACE -2)
                                  (("1" (REPLACE -1)
                                    (("1" (HIDE -4)
                                      (("1" (DIV-BY -6 "radix ^ -dExp(b)")
                                        (("1" (DIV-BY 1 "radix ^ -dExp(b)")
                                          (("1"
                                            (CASE-REPLACE
                                             "(Fnum(p) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                       = Fnum(p)-1")
                                            (("1"
                                              (CASE-REPLACE
                                               "(Fnum(q) * radix ^ -dExp(b) - radix ^ -dExp(b)) / radix ^ -dExp(b)
                         = Fnum(q)-1")
                                              (("1" (GRIND-REALS) NIL NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL)
                                             ("2" (FIELD 1) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (CASE "Fbounded?(b)(p)")
                            (("1" (EXPAND "Fbounded?") (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (REWRITE "FcanonicBounded") NIL NIL))
                            NIL))
                          NIL)
                         ("5" (CASE "Fexp(p) = -dExp(b)")
                          (("1" (HIDE 1)
                            (("1" (SPLIT-INEQ -2)
                              (("1" (CASE "Fexp(p) < Fexp(q)")
                                (("1" (HIDE 1)
                                  (("1" (CASE "Fbounded?(b)(p)")
                                    (("1" (EXPAND "Fbounded?")
                                      (("1" (EXPAND "abs" -1)
                                        (("1" (EXPAND "Fcanonic?" -8)
                                          (("1"
                                            (EXPAND* "Fnormal?" "Fsubnormal?")
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE "abs_mult" -9)
                                                (("1" (EXPAND "abs" -9)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "FtoR" 2)
                                                      (("1"
                                                        (CASE
                                                            "(vNum(b)-2)* radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                        (("1"
                                                          (CASE
                                                              "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2"
                                                            (DIV-BY 1
                                                             "radix ^ Fexp(p)")
                                                            (("2"
                                                              (CASE-REPLACE
                                                               "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)
                             = Fnum(p)-1")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE 3)
                                                          (("2"
                                                            (CASE
                                                                "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                                            (("1"
                                                              (CASE
                                                                  "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (DIV-BY 1
                                                                 "vNum(b) - 2")
                                                                (("2"
                                                                  (REWRITE
                                                                   "Exp_increq_1")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (REWRITE
                                                                 "expt_div"
                                                                 :DIR RL)
                                                                (("2"
                                                                  (REWRITE
                                                                   "expt_x1")
                                                                  (("2"
                                                                    (DIV-BY 1
                                                                     "radix ^ Fexp(q)")
                                                                    (("2"
                                                                      (CASE-REPLACE
                                                                       "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                             = (vNum(b) - 2) / radix")
                                                                      (("1"
                                                                        (CASE-REPLACE
                                                                         "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                               = Fnum(q)-1")
                                                                        (("1"
                                                                          (GRIND-REALS)
                                                                          (("1"
                                                                            (CASE
                                                                                "vNum(b)/radix +1 <= Fnum(q)")
                                                                            (("1"
                                                                              (HIDE-ALL-BUT
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "radix_less_vNum")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "b")
                                                                                  (("1"
                                                                                    (MULT-BY
                                                                                     -2
                                                                                     "radix")
                                                                                    (("1"
                                                                                      (FIELD
                                                                                       -1)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (LEMMA
                                                                               "radix_div_vNum")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "b")
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "div_simple"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (HIDE
                                                                                     -2)
                                                                                    (("2"
                                                                                      (SKOSIMP*)
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "k!1 < Fnum(q)")
                                                                                        (("1"
                                                                                          (GRIND-REALS)
                                                                                          (("1"
                                                                                            (FIELD
                                                                                             1)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (GRIND-REALS)
                                                                                          (("2"
                                                                                            (DIV-BY
                                                                                             -10
                                                                                             "radix")
                                                                                            (("2"
                                                                                              (DIV-BY
                                                                                               4
                                                                                               "radix")
                                                                                              (("2"
                                                                                                (GRIND-REALS)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (FIELD
                                                                           1)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FIELD
                                                                         1)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE "Fbounded?(b)(p)")
                            (("1" (EXPAND "Fbounded?")
                              (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FcanonicBounded") NIL NIL))
                            NIL))
                          NIL)
                         ("6" (SPLIT-INEQ -1)
                          (("1" (EXPAND "FtoR" -8)
                            (("1" (EXPAND "Fcanonic?" -6)
                              (("1" (EXPAND* "Fnormal?" "Fsubnormal?")
                                (("1" (FLATTEN)
                                  (("1" (REWRITE "abs_mult" -7)
                                    (("1" (EXPAND "abs" -7)
                                      (("1" (REPLACES -1 -9)
                                        (("1"
                                          (EXPAND* "Fcanonic?" "Fnormal?"
                                           "Fsubnormal?")
                                          (("1" (FLATTEN)
                                            (("1" (REWRITE "abs_mult" -5)
                                              (("1" (EXPAND "abs" -5)
                                                (("1"
                                                  (DIV-BY -9
                                                   "radix ^ (Fexp(q))")
                                                  (("1" (MULT-BY -9 "radix")
                                                    (("1" (REWRITE -10)
                                                      (("1"
                                                        (HIDE-ALL-BUT
                                                         (-1 -6 1))
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (CASE " Fexp(p) < Fexp(q)")
                            (("1" (HIDE -2 1)
                              (("1" (HIDE 1 -7)
                                (("1" (EXPAND "FtoR")
                                  (("1"
                                    (CASE
                                        "(vNum(b)-2)*radix ^ Fexp(p) <= Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                    (("1"
                                      (CASE
                                          "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <=(vNum(b) - 2) * radix ^ Fexp(p)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (DIV-BY 1 "radix ^ Fexp(p)")
                                        (("2"
                                          (CASE-REPLACE
                                           "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                          (("1" (CASE "Fbounded?(b)(p)")
                                            (("1" (EXPAND "Fbounded?")
                                              (("1" (FLATTEN)
                                                (("1" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (REWRITE "FcanonicBounded")
                                              NIL NIL))
                                            NIL)
                                           ("2" (FIELD) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (CASE
                                          "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                    Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q) - 1)")
                                      (("1"
                                        (CASE
                                            "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (DIV-BY 1 "(vNum(b) - 2)")
                                          (("1" (REWRITE "Exp_increq_1") NIL
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (LEMMA "radix_less_vNum")
                                              (("2" (INST -1 "b")
                                                (("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 2 3)
                                        (("2" (REWRITE "expt_div" :DIR RL)
                                          (("2" (REWRITE "expt_x1")
                                            (("2" (DIV-BY 1 "radix ^ Fexp(q)")
                                              (("2"
                                                (CASE-REPLACE
                                                 "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                            = (vNum(b) - 2)/radix")
                                                (("1"
                                                  (CASE-REPLACE
                                                   "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q) / radix) /
                                    radix ^ Fexp(q)=Fnum(q) -1/radix")
                                                  (("1" (FIELD 1) NIL NIL)
                                                   ("2" (FIELD 1) NIL NIL))
                                                  NIL)
                                                 ("2" (FIELD 1) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL)
                         ("7" (EXPAND* "FtoR")
                          (("7" (CASE-REPLACE "Fexp(q)=-dExp(b)")
                            (("1" (CASE-REPLACE "Fexp(p)=-dExp(b)")
                              (("1" (GRIND-REALS) NIL NIL)
                               ("2" (CASE "Fbounded?(b)(p)")
                                (("1" (EXPAND "Fbounded?")
                                  (("1" (PROPAX) NIL NIL)) NIL)
                                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "Fbounded?(b)(q)")
                              (("1" (EXPAND "Fbounded?")
                                (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FcanonicBounded") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("8" (SPLIT-INEQ -1)
                          (("8" (CASE "Fexp(p) < Fexp(q)")
                            (("1" (HIDE -2 1)
                              (("1" (EXPAND "FtoR" 3)
                                (("1"
                                  (CASE
                                      "(vNum(b)-2)*radix ^ Fexp(p)<= Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                  (("1"
                                    (CASE
                                        "Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ Fexp(p)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (DIV-BY 1 "radix ^ Fexp(p)")
                                      (("2"
                                        (CASE-REPLACE
                                         "(Fnum(p) * radix ^ (Fexp(p)) - radix ^ Fexp(p)) / radix ^ Fexp(p)=Fnum(p)-1")
                                        (("1" (CASE "Fbounded?(b)(p)")
                                          (("1" (EXPAND "Fbounded?")
                                            (("1" (FLATTEN)
                                              (("1" (EXPAND "abs" -1)
                                                (("1" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REWRITE "FcanonicBounded") NIL
                                            NIL))
                                          NIL)
                                         ("2" (FIELD) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (CASE
                                        "(vNum(b) - 2) * radix ^ (Fexp(q)-1) <=
                                  Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)")
                                    (("1"
                                      (CASE
                                          "(vNum(b) - 2) * radix ^ Fexp(p) <= (vNum(b) - 2) * radix ^ (Fexp(q) - 1)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (DIV-BY 1 "vNum(b) - 2")
                                        (("1" (REWRITE "Exp_increq_1") NIL NIL)
                                         ("2" (LEMMA "radix_less_vNum")
                                          (("2" (INST -1 "b")
                                            (("2" (GRIND-REALS) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2 5)
                                      (("2" (REWRITE "expt_div" :DIR RL)
                                        (("2" (REWRITE "expt_x1")
                                          (("2" (DIV-BY 1 "radix ^ Fexp(q)")
                                            (("2"
                                              (CASE-REPLACE
                                               "(vNum(b) - 2) * (radix ^ Fexp(q) / radix) / radix ^ Fexp(q)
                          = (vNum(b) - 2)/radix")
                                              (("1"
                                                (CASE-REPLACE
                                                 "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ Fexp(q)) / radix ^ Fexp(q)
                           = Fnum(q)-1")
                                                (("1"
                                                  (CASE
                                                      "vNum(b)/radix +1 <= Fnum(q)")
                                                  (("1" (MULT-BY -1 "radix")
                                                    (("1" (MULT-BY 1 "radix")
                                                      (("1" (FIELD) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (LEMMA "radix_div_vNum")
                                                    (("2" (INST -1 "b")
                                                      (("2"
                                                        (REWRITE "div_simple"
                                                         :DIR RL)
                                                        (("2" (SKOSIMP*)
                                                          (("2"
                                                            (CASE
                                                                "k!1 < Fnum(q)")
                                                            (("1" (GRIND-REALS)
                                                              NIL NIL)
                                                             ("2"
                                                              (HIDE -2 -3 2 3)
                                                              (("2"
                                                                (EXPAND
                                                                 "Fcanonic?"
                                                                 -6)
                                                                (("2"
                                                                  (EXPAND*
                                                                   "Fnormal?"
                                                                   "Fsubnormal?")
                                                                  (("2" (SPLIT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (REWRITE
                                                                         "abs_mult"
                                                                         -2)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "abs"
                                                                           -2)
                                                                          (("1"
                                                                            (HIDE-ALL-BUT
                                                                             (-2
                                                                              -3
                                                                              1
                                                                              3))
                                                                            (("1"
                                                                              (REWRITE
                                                                               -2)
                                                                              (("1"
                                                                                (DIV-BY
                                                                                 -1
                                                                                 "radix")
                                                                                (("1"
                                                                                  (DIV-BY
                                                                                   2
                                                                                   "radix")
                                                                                  (("1"
                                                                                    (GRIND-REALS)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (CASE
                                                                            "Fbounded?(b)(p)")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "Fbounded?")
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (GRIND-REALS)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REWRITE
                                                                           "FcanonicBounded")
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FIELD 1) NIL NIL))
                                                NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (LEMMA "Lexico")
                        (("2" (INST -1 "b" "p" "q") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE "0<FtoR(q)")
                    (("1" (EXPAND "FtoR" -1) (("1" (GRIND-REALS) NIL NIL)) NIL)
                     ("2" (GRIND-REALS) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "FtoR" -3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (REWRITE "FpredCanonic") NIL NIL))
            NIL)
           ("2" (REWRITE "FpredCanonic") NIL NIL))
          NIL)
         ("2" (REWRITE "FpredDiff" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (REWRITE "FcanonicBounded")
          (("3" (REWRITE "FpredCanonic") NIL NIL)) NIL))
        NIL)
       ("2" (REWRITE "FpredDiff" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)
       ("3" (REWRITE "FcanonicBounded")
        (("3" (REWRITE "FpredCanonic") NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredLe_aux2| 0
  (|FpredLe_aux2-1| |nil| 3319461303
   ("" (SKEEP)
    (("" (CASE-REPLACE "FtoR(Fsucc(b)(p))=FtoR(p)+Fulp(b)(p)")
      (("1" (CASE-REPLACE "FtoR(Fsucc(b)(q))=FtoR(q)+Fulp(b)(q)")
        (("1" (CASE "Fulp(b)(p) <=Fulp(b)(q)")
          (("1" (GRIND-REALS) NIL NIL)
           ("2" (HIDE -1 -2 2)
            (("2" (REWRITE "FulpCanonic")
              (("2" (REWRITE "FulpCanonic")
                (("2" (REWRITE "Exp_increq_1")
                  (("2" (LEMMA "Lexico")
                    (("2" (INST -1 "b" "p" "q") (("2" (REWRITE -1) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "FsuccDiff" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (REWRITE "FcanonicBounded") NIL NIL))
        NIL)
       ("2" (REWRITE "FsuccDiff" :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)
       ("3" (REWRITE "FcanonicBounded") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredLe| 0
  (|FpredLe-1| |nil| 3319368741
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKOSIMP)
        (("1" (CASE "0 < FtoR(p)")
          (("1" (REWRITE "FpredLe_aux") NIL NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (CASE "FtoR(q)<=0")
              (("1" (NEG-FORMULA 1)
                (("1" (REWRITE "FoppCorrect" :DIR RL)
                  (("1" (REWRITE "FoppCorrect" :DIR RL)
                    (("1" (REWRITE "FsuccFoppFpred" :DIR RL)
                      (("1" (REWRITE "FsuccFoppFpred" :DIR RL)
                        (("1" (REWRITE "FpredLe_aux2")
                          (("1" (REWRITE "FoppCorrect")
                            (("1" (REWRITE "FoppCorrect")
                              (("1" (GRIND-REALS) NIL NIL)) NIL))
                            NIL)
                           ("2" (REWRITE "FoppCorrect")
                            (("2" (GRIND-REALS) NIL NIL)) NIL)
                           ("3" (LEMMA "FcanonicOpp")
                            (("3" (INST -1 "b" "p") (("3" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("4" (LEMMA "FcanonicOpp")
                            (("4" (INST -1 "b" "q") (("4" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLIP-INEQ 1)
                (("2" (CASE "0 <= FtoR(Fpred(b)(q))")
                  (("1" (GRIND-REALS)
                    (("1" (CASE "FtoR(Fpred(b)(p)) <= FtoR(p)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (LEMMA "FpredLt")
                        (("2" (INST -1 "b" "p") (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "FpredPos") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP)
        (("2" (CASE "0 <= FtoR(Fpred(b)(p))")
          (("1" (CASE-REPLACE "FtoR(q)=FtoR(Fsucc(b)(Fpred(b)(q)))")
            (("1" (CASE-REPLACE "FtoR(p)=FtoR(Fsucc(b)(Fpred(b)(p)))")
              (("1" (REWRITE "FpredLe_aux2")
                (("1" (REWRITE "FpredCanonic") NIL NIL)
                 ("2" (REWRITE "FpredCanonic") NIL NIL))
                NIL)
               ("2" (REWRITE "FsuccFpred") NIL NIL))
              NIL)
             ("2" (REWRITE "FsuccFpred") NIL NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (CASE "0 <= FtoR(Fpred(b)(q))")
              (("1" (CASE "FtoR(p) <= 0")
                (("1" (CASE "FtoR(Fpred(b)(q))<= FtoR(q)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (LEMMA "FpredLt")
                    (("2" (INST -1 "b" "q") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (FLIP-INEQ -2)
                  (("2" (FLIP-INEQ 2) (("2" (REWRITE "FpredPos") NIL NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLIP-INEQ 1)
                (("2" (NEG-FORMULA 1)
                  (("2" (REWRITE "FoppCorrect" :DIR RL)
                    (("2" (REWRITE "FoppCorrect" :DIR RL)
                      (("2"
                        (CASE-REPLACE "Fopp(q)=Fpred(b)(Fsucc(b)(Fopp(q)))")
                        (("1"
                          (CASE-REPLACE "Fopp(p)=Fpred(b)(Fsucc(b)(Fopp(p)))")
                          (("1" (REWRITE "FsuccFoppFpred")
                            (("1" (REWRITE "FsuccFoppFpred")
                              (("1" (LEMMA "FpredLe_aux")
                                (("1"
                                  (INST -1 "b" "Fopp(Fpred(b)(q))"
                                   "Fopp(Fpred(b)(p))")
                                  (("1" (REWRITE -1)
                                    (("1" (REWRITE "FoppCorrect")
                                      (("1" (REWRITE "FoppCorrect")
                                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (REWRITE "FoppCorrect")
                                      (("2" (GRIND-REALS) NIL NIL)) NIL)
                                     ("3" (LEMMA "FcanonicOpp")
                                      (("3" (INST -1 "b" "Fpred(b)(p)")
                                        (("3" (FLATTEN)
                                          (("3" (REWRITE -1)
                                            (("3" (REWRITE "FpredCanonic") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("4" (LEMMA "FcanonicOpp")
                                      (("4" (INST -1 "b" "Fpred(b)(q)")
                                        (("4" (FLATTEN)
                                          (("4" (REWRITE -1)
                                            (("4" (REWRITE "FpredCanonic") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FpredFsucc")
                            (("2" (LEMMA "FcanonicOpp")
                              (("2" (INST -1 "b" "p") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FpredFsucc")
                          (("2" (LEMMA "FcanonicOpp")
                            (("2" (INST -1 "b" "q") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccLe| 0
  (|FsuccLe-1| |nil| 3319371174
   ("" (SKEEP)
    (("" (LEMMA "FpredLe")
      (("" (INST -1 "b" "Fsucc(b)(p)" "Fsucc(b)(q)")
        (("" (REWRITE "FpredFsucc")
          (("" (REWRITE "FpredFsucc")
            (("" (REWRITE -1)
              (("1" (ASSERT) NIL NIL) ("2" (REWRITE "FsuccCanonic") NIL NIL)
               ("3" (REWRITE "FsuccCanonic") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredProp_aux| 0
  (|FpredProp_aux-2| "" 3790102806
   ("" (SKEEP)
    (("" (CASE "Fexp(p) = Fexp(q) OR Fexp(p) < Fexp(q)")
      (("1" (SPLIT)
        (("1" (EXPAND "FtoR" -5)
          (("1" (CASE-REPLACE "Fexp(p) = Fexp(q)")
            (("1" (DIV-BY -5 "radix ^ Fexp(q)")
              (("1" (CASE "(Fnum(q)-1)*radix^(Fexp(q)) <= FtoR(Fpred(b)(q))")
                (("1" (CASE " FtoR(p) <= (Fnum(q) - 1) * radix ^ (Fexp(q))")
                  (("1" (GRIND-REALS) NIL NIL)
                   ("2" (EXPAND "FtoR" 1)
                    (("2" (REPLACES -2 1)
                      (("2" (DIV-BY 1 "radix ^ Fexp(q)")
                        (("2"
                          (CASE-REPLACE
                           "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q))) / radix ^ Fexp(q)=Fnum(q)-1")
                          (("1" (GRIND-REALS) NIL NIL)
                           ("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (CASE "0<Fnum(q)")
                    (("1" (EXPAND "Fpred")
                      (("1" (GRIND-REALS)
                        (("1" (EXPAND "FtoR")
                          (("1" (REWRITE "expt_div" :DIR RL)
                            (("1" (REWRITE -2 :DIR RL)
                              (("1" (GRIND-REALS)
                                (("1" (DIV-BY 1 "radix ^ Fexp(q)")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL))
                          NIL)
                         ("3" (EXPAND "FtoR") (("3" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "0 <= Fnum(p)")
                      (("1" (GRIND-REALS) NIL NIL)
                       ("2" (EXPAND "FtoR" -4) (("2" (GRIND-REALS) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (GRIND-REALS) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "(vNum(b)-1)*radix^(Fexp(q)-1) <= FtoR(Fpred(b)(q))")
          (("1" (CASE "FtoR(p) <= (vNum(b) - 1) * radix ^ (Fexp(q) - 1)")
            (("1" (GRIND-REALS) NIL NIL)
             ("2" (HIDE -1 -4 -6 2)
              (("2" (EXPAND "FtoR" 1)
                (("2"
                  (CASE
                      "Fnum(p) * radix ^ (Fexp(p)) <= Fnum(p) * radix ^ (Fexp(q)-1)")
                  (("1"
                    (CASE
                        "Fnum(p) * radix ^ (Fexp(q) - 1) <= vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)")
                    (("1" (GRIND-REALS) NIL NIL)
                     ("2" (HIDE 2 -1 -4)
                      (("2" (DIV-BY 1 "radix ^ (Fexp(q) - 1)")
                        (("2"
                          (CASE-REPLACE
                           "(vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)) /
        radix ^ (Fexp(q) - 1)=vNum(b)-1")
                          (("1" (CASE "Fbounded?(b)(p)")
                            (("1" (EXPAND "Fbounded?")
                              (("1" (FLATTEN)
                                (("1" (HIDE -2 -3 -4 -5)
                                  (("1" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FcanonicBounded") NIL NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1) (("2" (FIELD) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -2 2)
                    (("2" (CASE "0 <= Fnum(p)")
                      (("1" (CANCEL-BY 1 "Fnum(p)")
                        (("1" (REWRITE "Exp_increq_1") NIL NIL)) NIL)
                       ("2" (HIDE -1 2)
                        (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (CASE "0<Fnum(q)")
              (("1" (EXPAND* "FtoR" "Fpred")
                (("1" (GRIND-REALS)
                  (("1" (HIDE 2)
                    (("1" (CASE "Fbounded?(b)(p)")
                      (("1" (EXPAND "Fbounded?") (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (REWRITE "FcanonicBounded") NIL NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "expt_div" :DIR RL)
                    (("2" (DIV-BY 2 "radix ^ Fexp(q)")
                      (("2"
                        (CASE-REPLACE
                         "(vNum(b) * (radix ^ Fexp(q) / radix) - radix ^ Fexp(q) / radix) /
       radix ^ Fexp(q)=(vNum(b)-1)/radix")
                        (("1"
                          (CASE-REPLACE
                           "(Fnum(q) * radix ^ Fexp(q) - radix ^ Fexp(q)) / radix ^ Fexp(q)
= Fnum(q)-1")
                          (("1" (HIDE -1 -2)
                            (("1" (EXPAND "Fcanonic?" -4)
                              (("1" (SPLIT)
                                (("1" (EXPAND "Fnormal?")
                                  (("1" (FLATTEN)
                                    (("1" (REWRITE "abs_mult" -2)
                                      (("1" (EXPAND "abs" -2)
                                        (("1" (HIDE -1 -4 -5 -6 -7)
                                          (("1"
                                            (CASE "vNum(b) < radix * Fnum(q)")
                                            (("1"
                                              (CASE
                                                  "integer_pred(vNum(b) / radix)")
                                              (("1" (DIV-BY -2 "radix")
                                                (("1"
                                                  (CASE
                                                      "(vNum(b) - 1) / radix <= vNum(b) / radix")
                                                  (("1"
                                                    (CASE
                                                        "vNum(b) / radix <= Fnum(q) - 1")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL)
                                                     ("2" (HIDE -1 -4 -5 2 3)
                                                      (("2"
                                                        (LEMMA "div_simple")
                                                        (("2"
                                                          (CASE
                                                              "(EXISTS (k:int): vNum(b) = k * radix)")
                                                          (("1" (SKOSIMP*)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "vNum(b) / radix=k!1")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL)
                                                               ("2"
                                                                (GRIND-REALS)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (GRIND-REALS)
                                                (("2"
                                                  (REWRITE "radix_div_vNum")
                                                  NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (GRIND-REALS) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "Fsubnormal?")
                                  (("2" (FLATTEN)
                                    (("2" (CASE "Fbounded?(b)(p)")
                                      (("1" (EXPAND "Fbounded?" -1)
                                        (("1" (FLATTEN)
                                          (("1" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (REWRITE "FcanonicBounded") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FIELD) NIL NIL))
                          NIL)
                         ("2" (FIELD) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (MULT-BY 1 "radix ^ (Fexp(q))")
                (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (GRIND-REALS) NIL NIL))
          NIL))
        NIL)
       ("2" (CASE "Fexp(p) <= Fexp(q)")
        (("1" (GRIND-REALS) NIL NIL)
         ("2" (HIDE 2 3)
          (("2" (LEMMA "Lexico")
            (("2" (INST -1 "b" "p" "q") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FpredProp_aux-1| |nil| 3319301588
   ("" (SKEEP)
    (("" (CASE "Fexp(p) = Fexp(q) OR Fexp(p) < Fexp(q)")
      (("1" (SPLIT)
        (("1" (EXPAND "FtoR" -5)
          (("1" (CASE-REPLACE "Fexp(p) = Fexp(q)")
            (("1" (DIV-BY -5 "radix ^ Fexp(q)")
              (("1" (CASE "(Fnum(q)-1)*radix^(Fexp(q)) <= FtoR(Fpred(b)(q))")
                (("1" (CASE " FtoR(p) <= (Fnum(q) - 1) * radix ^ (Fexp(q))")
                  (("1" (GRIND-REALS) NIL NIL)
                   ("2" (EXPAND "FtoR" 1)
                    (("2" (REPLACES -2 1)
                      (("2" (DIV-BY 1 "radix ^ Fexp(q)")
                        (("2"
                          (CASE-REPLACE
                           "(Fnum(q) * radix ^ (Fexp(q)) - radix ^ (Fexp(q))) / radix ^ Fexp(q)=Fnum(q)-1")
                          (("1" (GRIND-REALS) NIL NIL)
                           ("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (CASE "0<Fnum(q)")
                    (("1" (EXPAND "Fpred")
                      (("1" (GRIND-REALS)
                        (("1" (EXPAND "FtoR")
                          (("1" (REWRITE "expt_div" :DIR RL)
                            (("1" (REWRITE "expt_x1")
                              (("1" (REWRITE -2 :DIR RL)
                                (("1" (GRIND-REALS)
                                  (("1" (DIV-BY 1 "radix ^ Fexp(q)")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL))
                          NIL)
                         ("3" (EXPAND "FtoR") (("3" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "0 <= Fnum(p)")
                      (("1" (GRIND-REALS) NIL NIL)
                       ("2" (EXPAND "FtoR" -4) (("2" (GRIND-REALS) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (GRIND-REALS) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "(vNum(b)-1)*radix^(Fexp(q)-1) <= FtoR(Fpred(b)(q))")
          (("1" (CASE "FtoR(p) <= (vNum(b) - 1) * radix ^ (Fexp(q) - 1)")
            (("1" (GRIND-REALS) NIL NIL)
             ("2" (HIDE -1 -4 -6 2)
              (("2" (EXPAND "FtoR" 1)
                (("2"
                  (CASE
                      "Fnum(p) * radix ^ (Fexp(p)) <= Fnum(p) * radix ^ (Fexp(q)-1)")
                  (("1"
                    (CASE
                        "Fnum(p) * radix ^ (Fexp(q) - 1) <= vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)")
                    (("1" (GRIND-REALS) NIL NIL)
                     ("2" (HIDE 2 -1 -4)
                      (("2" (DIV-BY 1 "radix ^ (Fexp(q) - 1)")
                        (("2"
                          (CASE-REPLACE
                           "(vNum(b) * radix ^ (Fexp(q) - 1) - radix ^ (Fexp(q) - 1)) /
        radix ^ (Fexp(q) - 1)=vNum(b)-1")
                          (("1" (CASE "Fbounded?(b)(p)")
                            (("1" (EXPAND "Fbounded?")
                              (("1" (FLATTEN)
                                (("1" (HIDE -2 -3 -4 -5)
                                  (("1" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FcanonicBounded") NIL NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1) (("2" (FIELD) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -2 2)
                    (("2" (CASE "0 <= Fnum(p)")
                      (("1" (CANCEL-BY 1 "Fnum(p)")
                        (("1" (REWRITE "Exp_increq_1") NIL NIL)) NIL)
                       ("2" (HIDE -1 2)
                        (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (CASE "0<Fnum(q)")
              (("1" (EXPAND* "FtoR" "Fpred")
                (("1" (GRIND-REALS)
                  (("1" (HIDE 2)
                    (("1" (CASE "Fbounded?(b)(p)")
                      (("1" (EXPAND "Fbounded?") (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (REWRITE "FcanonicBounded") NIL NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "expt_div" :DIR RL)
                    (("2" (REWRITE "expt_x1")
                      (("2" (DIV-BY 2 "radix ^ Fexp(q)")
                        (("2"
                          (CASE-REPLACE
                           "(vNum(b) * (radix ^ Fexp(q) / radix) - radix ^ Fexp(q) / radix) /
       radix ^ Fexp(q)=(vNum(b)-1)/radix")
                          (("1"
                            (CASE-REPLACE
                             "(Fnum(q) * radix ^ Fexp(q) - radix ^ Fexp(q)) / radix ^ Fexp(q)
= Fnum(q)-1")
                            (("1" (HIDE -1 -2)
                              (("1" (EXPAND "Fcanonic?" -4)
                                (("1" (SPLIT)
                                  (("1" (EXPAND "Fnormal?")
                                    (("1" (FLATTEN)
                                      (("1" (REWRITE "abs_mult" -2)
                                        (("1" (EXPAND "abs" -2)
                                          (("1" (HIDE -1 -4 -5 -6 -7)
                                            (("1"
                                              (CASE
                                                  "vNum(b) < radix * Fnum(q)")
                                              (("1"
                                                (CASE
                                                    "integer_pred(vNum(b) / radix)")
                                                (("1" (DIV-BY -2 "radix")
                                                  (("1"
                                                    (CASE
                                                        "(vNum(b) - 1) / radix <= vNum(b) / radix")
                                                    (("1"
                                                      (CASE
                                                          "vNum(b) / radix <= Fnum(q) - 1")
                                                      (("1" (GRIND-REALS) NIL
                                                        NIL)
                                                       ("2" (HIDE -1 -4 -5 2 3)
                                                        (("2"
                                                          (LEMMA "div_simple")
                                                          (("2"
                                                            (CASE
                                                                "(EXISTS (k:int): vNum(b) = k * radix)")
                                                            (("1" (SKOSIMP*)
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "vNum(b) / radix=k!1")
                                                                (("1"
                                                                  (GRIND-REALS)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (GRIND-REALS)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (GRIND-REALS) NIL
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (GRIND-REALS)
                                                  (("2"
                                                    (REWRITE "radix_div_vNum")
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "Fsubnormal?")
                                    (("2" (FLATTEN)
                                      (("2" (CASE "Fbounded?(b)(p)")
                                        (("1" (EXPAND "Fbounded?" -1)
                                          (("1" (FLATTEN)
                                            (("1" (GRIND-REALS) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (REWRITE "FcanonicBounded") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FIELD) NIL NIL))
                            NIL)
                           ("2" (FIELD) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (MULT-BY 1 "radix ^ (Fexp(q))")
                (("2" (EXPAND "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (GRIND-REALS) NIL NIL))
          NIL))
        NIL)
       ("2" (CASE "Fexp(p) <= Fexp(q)")
        (("1" (GRIND-REALS) NIL NIL)
         ("2" (HIDE 2 3)
          (("2" (LEMMA "Lexico")
            (("2" (INST -1 "b" "p" "q") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FpredProp| 0
  (|FpredProp-1| |nil| 3319214315
   ("" (SKEEP)
    (("" (CASE "0 <= FtoR(p)")
      (("1" (REWRITE "FpredProp_aux") NIL NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (CASE "0 < FtoR(q)")
          (("1" (CASE "0 <=  FtoR(Fpred(b)(q))")
            (("1" (GRIND-REALS) NIL NIL) ("2" (REWRITE "FpredPos") NIL NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (LEMMA "FsuccLe")
              (("2" (INST -1 "b" "p" "Fpred(b)(q)")
                (("2" (CASE "FtoR(Fsucc(b)(p)) <= FtoR(Fsucc(b)(Fpred(b)(q)))")
                  (("1" (ASSERT) (("1" (REWRITE "FpredCanonic") NIL NIL)) NIL)
                   ("2" (HIDE -1 2)
                    (("2" (REWRITE "FsuccFpred")
                      (("2" (NEG-FORMULA 1)
                        (("2" (REWRITE "FoppCorrect" :DIR RL)
                          (("2" (REWRITE "FoppCorrect" :DIR RL)
                            (("2" (REWRITE "FpredFoppFsucc" :DIR RL)
                              (("2" (REWRITE "FpredProp_aux")
                                (("1" (REWRITE "FoppCorrect")
                                  (("1" (REWRITE "FoppCorrect")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (REWRITE "FoppCorrect")
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (LEMMA "FcanonicOpp")
                                  (("3" (INST -1 "b" "p")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("4" (LEMMA "FcanonicOpp")
                                  (("4" (INST -1 "b" "q")
                                    (("4" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccLt| 0
  (|FsuccLt-2| |nil| 3566430744
   ("" (SKEEP)
    (("" (NEG-FORMULA 1)
      (("" (REWRITE "FoppCorrect" :DIR RL)
        (("" (REWRITE "FoppCorrect" :DIR RL)
          (("" (REWRITE "FpredFoppFsucc" :DIR RL)
            (("" (REWRITE "FpredLt") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL)
  (|FsuccLt-1| |nil| 3319467246
   ("" (SKEEP)
    (("" (MULT-BY 1 "-1" -)
      (("" (FIELD)
        (("" (REWRITE "FoppCorrect" :DIR RL)
          (("" (REWRITE "FoppCorrect" :DIR RL)
            (("" (REWRITE "FpredFoppFsucc" :DIR RL)
              (("" (REWRITE "FpredLt") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccProp| 0
  (|FsuccProp-1| |nil| 3319467325
   ("" (SKEEP)
    (("" (CASE "q=Fpred(b)(Fsucc(b)(q))")
      (("1" (REPLACE -1 1)
        (("1" (REWRITE "FpredProp")
          (("1" (HIDE 2)
            (("1" (FLIP-INEQ 1)
              (("1" (FLIP-INEQ -5)
                (("1" (LEMMA "FsuccLe")
                  (("1" (INST -1 "b" "q" "p") (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FsuccCanonic") NIL NIL)
           ("3" (REWRITE "FsuccCanonic") NIL NIL))
          NIL))
        NIL)
       ("2" (REWRITE "FpredFsucc") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FsuccZleEq_aux| 0
  (|FsuccZleEq_aux-1| |nil| 3319976732 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   NIL SHOSTAK))
 (|FsuccZleEq| 0
  (|FsuccZleEq-2| "" 3790102812
   ("" (SKEEP)
    (("" (EXPAND "Fsucc")
      (("" (GRIND-REALS)
        (("1" (EXPAND "FtoR")
          (("1" (DIV-BY 1 "radix ^ (Fexp(p))")
            (("1" (DIV-BY -1 "radix ^ (Fexp(p))")
              (("1" (DIV-BY -3 "radix ^ (Fexp(p))")
                (("1" (REWRITE "expt_plus")
                  (("1"
                    (CASE-REPLACE
                     " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))= Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                    (("1" (HIDE -1)
                      (("1"
                        (CASE-REPLACE
                         " vNum(b) / radix * (radix * radix ^ Fexp(p)) / radix ^ (Fexp(p))=vNum(b)")
                        (("1" (HIDE -1)
                          (("1" (COPY -3)
                            (("1" (REWRITE -3)
                              (("1" (REWRITE "FsuccZleEq_aux")
                                (("1" (LEMMA "int_expt")
                                  (("1" (INST -1 "Fexp(q) - Fexp(p)" "radix")
                                    (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FIELD 1) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "expt_div" :DIR RL)
                      (("2" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 1)
          (("2" (EXPAND "FtoR")
            (("2" (REWRITES -2)
              (("2" (DIV-BY -1 "radix ^ (Fexp(p))")
                (("2" (DIV-BY -3 "radix ^ (Fexp(p))")
                  (("2" (DIV-BY 1 "radix ^ (Fexp(p))")
                    (("2"
                      (CASE-REPLACE
                       "Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                      (("1" (HIDE -1)
                        (("1" (REWRITE "expt_div" :DIR RL :SUBST ("j" "1"))
                          (("1"
                            (CASE-REPLACE
                             "-(vNum(b) - 1) * (radix ^ Fexp(p) / radix) / radix ^ (Fexp(p))=(-vNum(b)+1)/radix")
                            (("1" (HIDE -1)
                              (("1" (FIELD -3)
                                (("1" (REWRITE "FsuccZleEq_aux")
                                  (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL))
                                    NIL)
                                   ("2" (MULT-BY 1 "radix")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FIELD 1) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "expt_div" :DIR RL)
                        (("2" (FIELD 1) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 1 2)
          (("3" (EXPAND "FtoR")
            (("3" (DIV-BY 1 "radix ^ (Fexp(p))")
              (("3" (DIV-BY -1 "radix ^ (Fexp(p))")
                (("3" (DIV-BY -2 "radix ^ (Fexp(p))")
                  (("3"
                    (CASE-REPLACE
                     " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                    (("1" (HIDE -1)
                      (("1"
                        (CASE-REPLACE
                         "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                                 Fnum(p)+1")
                        (("1" (HIDE -1)
                          (("1" (REWRITE "FsuccZleEq_aux")
                            (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (FIELD 1) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "expt_div" :DIR RL)
                      (("2" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 1 2)
          (("4" (EXPAND "FtoR")
            (("4" (DIV-BY 1 "radix ^ (Fexp(p))")
              (("4" (DIV-BY -1 "radix ^ (Fexp(p))")
                (("4" (DIV-BY -2 "radix ^ (Fexp(p))")
                  (("4"
                    (CASE-REPLACE
                     "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                       Fnum(p)+1")
                    (("1"
                      (CASE-REPLACE
                       " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                      (("1" (HIDE -1 -2)
                        (("1" (REWRITE "FsuccZleEq_aux")
                          (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "expt_div" :DIR RL)
                        (("2" (FIELD 1) NIL NIL)) NIL))
                      NIL)
                     ("2" (FIELD 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FsuccZleEq-1| |nil| 3319973480
   ("" (SKEEP)
    (("" (EXPAND "Fsucc")
      (("" (GRIND-REALS)
        (("1" (EXPAND "FtoR")
          (("1" (DIV-BY 1 "radix ^ (Fexp(p))")
            (("1" (DIV-BY -1 "radix ^ (Fexp(p))")
              (("1" (DIV-BY -3 "radix ^ (Fexp(p))")
                (("1" (REWRITE "expt_plus")
                  (("1"
                    (CASE-REPLACE
                     " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))= Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                    (("1" (HIDE -1)
                      (("1"
                        (CASE-REPLACE
                         " vNum(b) / radix * (radix * radix ^ Fexp(p)) / radix ^ (Fexp(p))=vNum(b)")
                        (("1" (HIDE -1)
                          (("1" (COPY -3)
                            (("1" (REWRITE -3)
                              (("1" (REWRITE "FsuccZleEq_aux")
                                (("1" (LEMMA "int_expt")
                                  (("1" (INST -1 "Fexp(q) - Fexp(p)" "radix")
                                    (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "expt_x1")
                                  (("2" (REPLACE -1 :HIDE? T)
                                    (("2"
                                      (DIV-BY -1 "(radix * radix ^ Fexp(p))")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FIELD 1) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "expt_div" :DIR RL)
                      (("2" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 1)
          (("2" (EXPAND "FtoR")
            (("2" (REWRITES -2)
              (("2" (DIV-BY -1 "radix ^ (Fexp(p))")
                (("2" (DIV-BY -3 "radix ^ (Fexp(p))")
                  (("2" (DIV-BY 1 "radix ^ (Fexp(p))")
                    (("2"
                      (CASE-REPLACE
                       "Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                      (("1" (HIDE -1)
                        (("1" (REWRITE "expt_div" :DIR RL :SUBST ("j" "1"))
                          (("1"
                            (CASE-REPLACE
                             "-(vNum(b) - 1) * (radix ^ Fexp(p) / radix) / radix ^ (Fexp(p))=(-vNum(b)+1)/radix")
                            (("1" (HIDE -1)
                              (("1" (FIELD -3)
                                (("1" (REWRITE "FsuccZleEq_aux")
                                  (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL))
                                    NIL)
                                   ("2" (MULT-BY 1 "radix")
                                    (("2" (ASSERT)
                                      (("2" (USE "expt_x1")
                                        (("2" (REPLACE -1 :HIDE? T)
                                          (("2" (DIV-BY -3 "(radix ^ Fexp(p))")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FIELD 1) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "expt_div" :DIR RL)
                        (("2" (FIELD 1) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE 1 2)
          (("3" (EXPAND "FtoR")
            (("3" (DIV-BY 1 "radix ^ (Fexp(p))")
              (("3" (DIV-BY -1 "radix ^ (Fexp(p))")
                (("3" (DIV-BY -2 "radix ^ (Fexp(p))")
                  (("3"
                    (CASE-REPLACE
                     " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                    (("1" (HIDE -1)
                      (("1"
                        (CASE-REPLACE
                         "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                                 Fnum(p)+1")
                        (("1" (HIDE -1)
                          (("1" (REWRITE "FsuccZleEq_aux")
                            (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (FIELD 1) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "expt_div" :DIR RL)
                      (("2" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 1 2)
          (("4" (EXPAND "FtoR")
            (("4" (DIV-BY 1 "radix ^ (Fexp(p))")
              (("4" (DIV-BY -1 "radix ^ (Fexp(p))")
                (("4" (DIV-BY -2 "radix ^ (Fexp(p))")
                  (("4"
                    (CASE-REPLACE
                     "(radix ^ Fexp(p) + Fnum(p) * radix ^ Fexp(p)) / radix ^ (Fexp(p))=
                       Fnum(p)+1")
                    (("1"
                      (CASE-REPLACE
                       " Fnum(q) * radix ^ (Fexp(q)) / radix ^ (Fexp(p))=Fnum(q) * radix ^ (Fexp(q)-Fexp(p))")
                      (("1" (HIDE -1 -2)
                        (("1" (REWRITE "FsuccZleEq_aux")
                          (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "expt_div" :DIR RL)
                        (("2" (FIELD 1) NIL NIL)) NIL))
                      NIL)
                     ("2" (FIELD 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenFsuccOdd_aux_TCC1| 0
  (|EvenFsuccOdd_aux_TCC1-1| |nil| 3321636413
   ("" (SKEEP) (("" (LEMMA "radix_div_vNum") (("" (INST?) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|EvenFsuccOdd_aux| SUBTYPE
    "number_fields./(float.vNum(float.b), float.radix)" "int")))
 (|EvenFsuccOdd_aux| 0
  (|EvenFsuccOdd_aux-2| "" 3790102814
   ("" (SKEEP)
    (("" (CASE "vNum(b)=radix^Prec(b)")
      (("1" (REPLACE -1)
        (("1" (LEMMA "expt_odd")
          (("1" (INST-CP -1 "Prec(b)-2")
            (("1" (FLATTEN)
              (("1"
                (CASE-REPLACE
                 "radix ^ Prec(b) / radix=radix ^ (Prec(b) - 2 + 1)")
                (("1" (ASSERT)
                  (("1" (HIDE -3)
                    (("1" (LEMMA "expt_odd")
                      (("1" (INST -1 "Prec(b)-1")
                        (("1" (FLATTEN)
                          (("1" (LEMMA "even_iff_odd_succ")
                            (("1" (INST -1 "radix ^ Prec(b) - 1")
                              (("1" (GRIND-REALS) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) (("2" (REWRITE "expt_div" :DIR RL) NIL NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL)) NIL)
       ("3" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|EvenFsuccOdd_aux-1| |nil| 3319547273
   ("" (SKEEP)
    (("" (CASE "vNum(b)=radix^Prec(b)")
      (("1" (REPLACE -1)
        (("1" (LEMMA "expt_odd")
          (("1" (INST-CP -1 "Prec(b)-2")
            (("1" (FLATTEN)
              (("1"
                (CASE-REPLACE
                 "radix ^ Prec(b) / radix=radix ^ (Prec(b) - 2 + 1)")
                (("1" (ASSERT)
                  (("1" (HIDE -3)
                    (("1" (LEMMA "expt_odd")
                      (("1" (INST -1 "Prec(b)-1")
                        (("1" (FLATTEN)
                          (("1" (LEMMA "even_iff_odd_succ")
                            (("1" (INST -1 "radix ^ Prec(b) - 1")
                              (("1" (GRIND-REALS) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (REWRITE "expt_div" :DIR RL)
                    (("2" (REWRITE "expt_x1") NIL NIL)) NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL)) NIL)
       ("3" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenFsuccOdd| 0
  (|EvenFsuccOdd-1| |nil| 3319544211
   ("" (SKEEP)
    (("" (EXPAND "Fsucc")
      (("" (GRIND-REALS)
        (("1" (REWRITE "EvenFsuccOdd_aux") NIL NIL)
         ("2" (REWRITE "minus_odd_is_odd")
          (("2" (HIDE 2 3)
            (("2" (LEMMA "EvenFsuccOdd_aux")
              (("2" (INST -1 "b")
                (("2" (LEMMA "odd_iff_not_even")
                  (("2" (INST -1 "vNum(b) - 1")
                    (("2" (CASE "NOT even?(vNum(b) - 1)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (CASE "odd?(vNum(b) / radix)")
                        (("1" (CASE "even?(vNum(b) / radix)")
                          (("1" (HIDE-ALL-BUT (-1 -2))
                            (("1" (LEMMA "even_or_odd")
                              (("1" (INST -1 "vNum(b) / radix")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (LEMMA "radix_div_vNum")
                                  (("2" (INST -1 "b") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (DIV-BY -7 "radix")
                            (("2" (REPLACE -7 -6)
                              (("2" (HIDE-ALL-BUT (-6 1))
                                (("2" (LEMMA "minus_even_is_even")
                                  (("2"
                                    (CASE
                                        "vNum(b) / radix=-(-(vNum(b) / radix))")
                                    (("1" (REPLACES -1 1)
                                      (("1" (REWRITE -1)
                                        (("1" (ASSERT)
                                          (("1" (LEMMA "radix_div_vNum")
                                            (("1" (INST -1 "b")
                                              (("1"
                                                (REWRITE "integers.closed_neg")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL)
                         ("3" (LEMMA "radix_div_vNum")
                          (("3" (INST -1 "b") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (LEMMA "even_iff_odd_succ")
          (("3" (INST -1 " Fnum(p)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)
         ("4" (LEMMA "even_iff_odd_succ")
          (("4" (INST -1 " Fnum(p)") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|OddFsuccEven_aux_TCC1| 0
  (|OddFsuccEven_aux_TCC1-1| |nil| 3321636413
   ("" (SKEEP) (("" (LEMMA "radix_div_vNum") (("" (INST?) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|OddFsuccEven_aux| SUBTYPE
    "number_fields./(float.vNum(float.b), float.radix)" "int")))
 (|OddFsuccEven_aux| 0
  (|OddFsuccEven_aux-2| "" 3790102816
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (CASE-REPLACE "radix ^ Prec(b) / radix=radix ^ (Prec(b)-1)")
        (("1" (CASE "even?(radix ^ Prec(b))")
          (("1" (LEMMA "expt_even")
            (("1" (INST-CP -1 "Prec(b)-2")
              (("1" (INST -1 "Prec(b)-1")
                (("1" (GRIND-REALS) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL)
           ("2" (LEMMA "odd_iff_even_succ")
            (("2" (INST -1 "radix ^ Prec(b) - 1") (("2" (GRIND-REALS) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "expt_div" :DIR RL) NIL NIL) ("3" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|OddFsuccEven_aux-1| |nil| 3319564626
   ("" (SKEEP)
    (("" (EXPAND "vNum")
      (("" (CASE-REPLACE "radix ^ Prec(b) / radix=radix ^ (Prec(b)-1)")
        (("1" (CASE "even?(radix ^ Prec(b))")
          (("1" (LEMMA "expt_even")
            (("1" (INST-CP -1 "Prec(b)-2")
              (("1" (INST -1 "Prec(b)-1")
                (("1" (GRIND-REALS) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL)
           ("2" (LEMMA "odd_iff_even_succ")
            (("2" (INST -1 "radix ^ Prec(b) - 1") (("2" (GRIND-REALS) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "expt_div" :DIR RL) (("2" (REWRITE "expt_x1") NIL NIL))
          NIL)
         ("3" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|OddFsuccEven| 0
  (|OddFsuccEven-1| |nil| 3319562322
   ("" (SKEEP)
    (("" (EXPAND "Fsucc")
      (("" (GRIND-REALS)
        (("1" (REWRITE "OddFsuccEven_aux") NIL NIL)
         ("2" (LEMMA "OddFsuccEven_aux")
          (("2" (REWRITE "minus_even_is_even")
            (("2" (CASE "odd?((vNum(b) / radix))")
              (("1" (HIDE -4 2 3)
                (("1"
                  (CASE-REPLACE
                   "even?((vNum(b) - 1))= NOT odd?((vNum(b) - 1))")
                  (("1"
                    (CASE-REPLACE
                     "odd?((vNum(b) / radix))=NOT even?((vNum(b) / radix))")
                    (("1" (INST? -4) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2"
                      (LEMMA "odd_iff_not_even" :SUBST
                       ("x" "(vNum(b) / radix)"))
                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                    NIL)
                   ("2" (LEMMA "even_iff_not_odd" :SUBST ("x" "(vNum(b) - 1)"))
                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (DIV-BY -4 "radix")
                (("2" (REPLACE -4 -3)
                  (("2" (HIDE-ALL-BUT (-3 1))
                    (("2" (CASE "(vNum(b) / radix)=-(-(vNum(b) / radix))")
                      (("1" (REPLACES -1 1)
                        (("1" (REWRITE "minus_odd_is_odd")
                          (("1" (REWRITE "integers.closed_neg") NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (LEMMA "radix_div_vNum") (("3" (INST -1 "b") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (LEMMA "odd_iff_even_succ" :SUBST ("x" "Fnum(p)"))
          (("3" (ASSERT) NIL NIL)) NIL)
         ("4" (LEMMA "odd_iff_even_succ" :SUBST ("x" "Fnum(p)"))
          (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|MinOppMax| 0
  (|MinOppMax-1| |nil| 3319384478
   ("" (EXPAND* "isMin?" "isMax?")
    (("" (SKEEP)
      (("" (REWRITE "FoppCorrect")
        (("" (SPLIT)
          (("1" (GRIND-REALS) NIL NIL)
           ("2" (SKOSIMP*)
            (("2" (CASE "FtoR(Fopp(f!1)) <= FtoR(p)")
              (("1" (REWRITE "FoppCorrect") (("1" (GRIND-REALS) NIL NIL)) NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE -4)
                  (("1" (REWRITE "FoppCorrect") (("1" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("2" (REWRITE "FoppBounded") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|MaxOppMin| 0
  (|MaxOppMin-1| |nil| 3319384878
   ("" (EXPAND* "isMin?" "isMax?")
    (("" (SKEEP)
      (("" (REWRITE "FoppCorrect")
        (("" (SPLIT)
          (("1" (GRIND-REALS) NIL NIL)
           ("2" (SKOSIMP*)
            (("2" (CASE "FtoR(p) <= FtoR(Fopp(f!1))")
              (("1" (REWRITE "FoppCorrect") (("1" (GRIND-REALS) NIL NIL)) NIL)
               ("2" (REWRITE -4)
                (("1" (REWRITE "FoppCorrect") (("1" (GRIND-REALS) NIL NIL))
                  NIL)
                 ("2" (REWRITE "FoppBounded") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ToZeroFopp| 0
  (|ToZeroFopp-1| |nil| 3877758521
   ("" (EXPAND "rounded_opp?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "ToZero?")
          (("" (CASE "r=0")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (ASSERT)
                (("1" (EXPAND "isMin?")
                  (("1" (REWRITE "FoppCorrect")
                    (("1" (FLATTEN)
                      (("1" (INST -2 "(# Fnum := 0 , Fexp := 1 #)")
                        (("1" (CASE "FtoR((# Fnum := 0, Fexp := 1 #))=0")
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (ASSERT)
                              (("1" (CASE "FtoR(p)=0")
                                (("1" (REPLACE -1 :HIDE? T)
                                  (("1" (GRIND) NIL NIL)) NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (EXPAND "FtoR") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "Fbounded?") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GROUND)
              (("1" (USE "MinOppMax") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (USE "MaxOppMin") (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ClosestFopp| 0
  (|ClosestFopp-1| |nil| 3319817491
   ("" (SKEEP)
    (("" (EXPAND "Closest?")
      (("" (SKOSIMP*)
        (("" (INST -2 "Fopp(f!1)")
          (("1" (REWRITE "FoppCorrect")
            (("1" (REWRITE "FoppCorrect")
              (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (REWRITE "FoppBounded") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosestFopp_TCC1| 0
  (|EvenClosestFopp_TCC1-1| |nil| 3675510650
   ("" (SKEEP)
    (("" (USE "FcanonicOpp")
      (("" (REPLACE -1 :HIDE? T)
        (("" (USE "FcanonicBounded") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|EvenClosestFopp| SUBTYPE "float.Fopp(float.p)"
    "(float.Fbounded?(float.b))")))
 (|EvenClosestFopp| 0
  (|EvenClosestFopp-1| |nil| 3675497929
   ("" (SKEEP)
    (("" (EXPAND "EvenClosest?")
      (("" (SPLIT 1)
        (("1" (USE "ClosestFopp")
          (("1" (SPLIT -1)
            (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)
             ("3" (EXPAND "Fcanonic?")
              (("3" (EXPAND "Fnormal?")
                (("3" (EXPAND "Fsubnormal?") (("3" (GROUND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (CASE "even?(Fnum(Fnormalize(b)(p)))")
            (("1" (HIDE-ALL-BUT (-1 -2 1))
              (("1" (USE "FnormalizeCanonicFnum")
                (("1" (ASSERT)
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1" (USE "FcanonicOpp")
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (USE "FnormalizeCanonicFnum")
                          (("1" (ASSERT)
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (EXPAND "even?")
                                (("1" (SKEEP)
                                  (("1" (INST 1 "-j")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "Fopp")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (USE "FoppCorrect")
                (("2" (REPLACE -1 :HIDE? T)
                  (("2" (SKEEP)
                    (("2" (INST -4 "Fopp(f)")
                      (("1" (SPLIT -4)
                        (("1" (USE "FoppCorrect") (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (HIDE-ALL-BUT (1 -1))
                          (("2" (EXPAND "Closest?")
                            (("2" (SKOLEM 1 "g")
                              (("2" (USE "FoppCorrect")
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (INST -1 "Fopp(g)")
                                    (("1" (USE "FoppCorrect")
                                      (("1" (REPLACE -1 :HIDE? T)
                                        (("1"
                                          (CASE
                                              "FORALL(x,y:real): abs(-x - -y) = abs(x - y)")
                                          (("1" (INST-CP -1 "FtoR(f)" "-r")
                                            (("1" (REPLACE -2 :HIDE? T :DIR RL)
                                              (("1" (INST -1 "FtoR(g)" "r")
                                                (("1" (REPLACE -1 :HIDE? T)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (USE "FoppBounded")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (USE "FoppBounded") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RleRoundedR0| 0
  (|RleRoundedR0-1| |nil| 3319477344
   ("" (SKOSIMP*)
    (("" (EXPAND "RoundedMode?")
      (("" (EXPAND "MinOrMax?")
        (("" (FLATTEN)
          (("" (INST -4 "r!1" "f!1")
            (("" (SPLIT)
              (("1" (EXPAND "isMin?")
                (("1" (FLATTEN)
                  (("1" (INST -2 "(# Fnum:=0, Fexp:=0 #)")
                    (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL)) NIL)
                     ("2" (EXPAND "Fbounded?")
                      (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "isMax?")
                (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("3" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|rle_rounded_r0| 0
  (|rle_rounded_r0-1| |nil| 3681746559
   ("" (SKEEP)
    (("" (EXPAND "rounded_mode?")
      (("" (EXPAND "min_or_max?")
        (("" (FLATTEN)
          (("" (INST -4 "r" "f")
            (("" (SPLIT)
              (("1" (EXPAND "isMin?")
                (("1" (FLATTEN)
                  (("1" (INST -2 "(# Fnum:=0, Fexp:=0 #)")
                    (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL)) NIL)
                     ("2" (EXPAND "Fbounded?")
                      (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "isMax?")
                (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("3" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RleRoundedLessR0| 0
  (|RleRoundedLessR0-1| |nil| 3319477534
   ("" (SKOSIMP*)
    (("" (EXPAND "RoundedMode?")
      (("" (EXPAND "MinOrMax?")
        (("" (FLATTEN)
          (("" (INST -4 "r!1" "f!1")
            (("" (SPLIT)
              (("1" (EXPAND "isMin?")
                (("1" (FLATTEN) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("2" (EXPAND "isMax?")
                (("2" (FLATTEN)
                  (("2" (INST -2 "(# Fnum:=0, Fexp:=0 #)")
                    (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL)) NIL)
                     ("2" (EXPAND "Fbounded?")
                      (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ulp_generic_monotone| 0
  (|ulp_generic_monotone-1| |nil| 3877710026
   (""
    (THEN (SKEEP) (EXPAND "ulp") (USE "FulpMonotone") (ASSERT)
     (SPREAD (SPLIT -1)
      ((THEN (HIDE 2) (USE "FleCorrect") (REPLACE -1 :HIDE? T :DIR RL)
        (LEMMA "rndf_monotone") (INST? -1 :WHERE -3)
        (SPREAD (INST?)
         ((THEN (ASSERT) (EXPAND "<=") (PROPAX))
          (THEN (TYPEPRED "round") (EXPAND "rounded_mode?") (FLATTEN)))))
       (THEN (LEMMA "rle_rounded_r0") (INST? -1 :WHERE -2) (INST? -1 :WHERE 1)
        (INST?) (INST?)
        (SPREAD (SPLIT -1)
         ((THEN (PROPAX))
          (THEN (TYPEPRED "r::RNDF(b,round)") (INST -1 "x") (ASSERT))
          (THEN (ASSERT)) (THEN (TYPEPRED "r::RNDF(b,round)") (INST -1 "x"))
          (THEN (PROPAX))))))))
    NIL NIL)
   NIL SHOSTAK))
 (|RND_aux_le| 0
  (|RND_aux_le-1| |nil| 3319375968
   ("" (SKEEP)
    (("" (REWRITE "RND_aux_alt_def")
      (("" (EXPAND "RND_aux_alt")
        (("" (GRIND-REALS)
          (("1" (EXPAND "FtoR")
            (("1"
              (CASE
                  "floor(x * radix ^ (dExp(b))) * radix ^ -dExp(b) <= (x * radix ^ (dExp(b))) * radix ^ -dExp(b)")
              (("1" (CASE "(x * radix ^ (dExp(b))) * radix ^ -dExp(b) <= x")
                (("1" (GRIND-REALS) NIL NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (REWRITE "expt_inverse") (("2" (FIELD) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (DIV-BY 1 "radix ^ -dExp(b)")
                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (EXPAND "FtoR")
              (("2"
                (CASE
                    "floor(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))) * radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)) <= (x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))) * radix ^ floor(ln(x * radix / vNum(b)) / ln(radix))")
                (("1"
                  (CASE
                      "(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))) * radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)) <= x")
                  (("1" (GRIND-REALS) NIL NIL)
                   ("2" (HIDE 2 -1)
                    (("2" (REWRITE "expt_inverse") (("2" (FIELD) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2"
                    (DIV-BY 1
                     "radix ^ floor(ln(x * radix / vNum(b)) / ln(radix))")
                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ln| CONST-DECL "real" |ln_exp| |lnexp|)) SHOSTAK))
 (|RND_aux_ge| 0
  (|RND_aux_ge-2| "" 3790102831
   ("" (SKEEP)
    (("" (REWRITE "RND_aux_alt_def")
      (("" (EXPAND "RND_aux_alt")
        (("" (LIFT-IF)
          (("" (SPLIT +)
            (("1" (FLATTEN)
              (("1" (EXPAND "Fsucc")
                (("1" (LIFT-IF)
                  (("1" (SPLIT +)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "FtoR")
                        (("1"
                          (CASE-REPLACE
                           "vNum(b) / radix * radix ^ (1 - dExp(b))=radix*(radix ^ (-dExp(b) - 1) * vNum(b))")
                          (("1"
                            (CASE
                                "radix ^ (-dExp(b) - 1) * vNum(b) <= radix * (radix ^ (-dExp(b) - 1) * vNum(b))")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (DIV-BY 1 "radix ^ (-dExp(b) - 1)*vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (REWRITE "expt_div" :DIR RL)
                              (("2" (REWRITE "expt_div" :DIR RL)
                                (("2" (REWRITE "expt_inverse")
                                  (("2" (USE "expt_x1")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "FtoR")
                        (("2" (REWRITE "expt_inverse")
                          (("2"
                            (CASE-REPLACE
                             "1 / (radix ^ dExp(b)) = 1 / exponentiation.^(radix, dExp(b))")
                            (("2" (FIELD 2) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (FLIP-INEQ 1)
                (("2" (EXPAND "Fsucc")
                  (("2" (LIFT-IF)
                    (("2" (SPLIT +)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "FtoR")
                          (("1" (REWRITE "expt_plus")
                            (("1" (USE "expt_x1")
                              (("1" (FIELD 1)
                                (("1"
                                  (MULT-BY 1
                                   "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                  (("1"
                                    (CASE-REPLACE
                                     "(vNum(b) * (radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)))) *
                                            radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))=vNum(b)")
                                    (("1" (GRIND-REALS) NIL NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (REWRITE "expt_inverse")
                                        (("2" (FIELD) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND "FtoR")
                              (("2"
                                (MULT-BY 2
                                 "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                (("2"
                                  (INVOKE
                                   (CASE-REPLACE
                                    "%1 = floor(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix))))+1")
                                   (! 1 R))
                                  (("1" (GRIND-REALS) NIL NIL)
                                   ("2" (HIDE-ALL-BUT 2)
                                    (("2" (REWRITE "expt_inverse")
                                      (("2" (FIELD) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|RND_aux_alt| CONST-DECL "(Fcanonic?(b))" |float| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|Fsucc| CONST-DECL "float" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_div| FORMULA-DECL NIL |exponentiation| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|RND_aux_alt_def| FORMULA-DECL NIL |float| NIL))
   SHOSTAK)
  (|RND_aux_ge-1| |nil| 3319376479
   ("" (SKEEP)
    (("" (REWRITE "RND_aux_alt_def")
      (("" (EXPAND "RND_aux_alt")
        (("" (LIFT-IF)
          (("" (SPLIT +)
            (("1" (FLATTEN)
              (("1" (EXPAND "Fsucc")
                (("1" (LIFT-IF)
                  (("1" (SPLIT +)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "FtoR")
                        (("1"
                          (CASE-REPLACE
                           "vNum(b) / radix * radix ^ (1 - dExp(b))=radix*(radix ^ (-dExp(b) - 1) * vNum(b))")
                          (("1"
                            (CASE
                                "radix ^ (-dExp(b) - 1) * vNum(b) <= radix * (radix ^ (-dExp(b) - 1) * vNum(b))")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (DIV-BY 1 "radix ^ (-dExp(b) - 1)*vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (REWRITE "expt_div" :DIR RL)
                              (("2" (REWRITE "expt_div" :DIR RL)
                                (("2" (REWRITE "expt_inverse")
                                  (("2" (USE "expt_x1")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "FtoR")
                        (("2" (REWRITE "expt_inverse")
                          (("2" (FIELD 2) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (FLIP-INEQ 1)
                (("2" (EXPAND "Fsucc")
                  (("2" (LIFT-IF)
                    (("2" (SPLIT +)
                      (("1" (FLATTEN)
                        (("1" (EXPAND "FtoR")
                          (("1" (REWRITE "expt_plus")
                            (("1" (USE "expt_x1")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (FIELD 1)
                                  (("1"
                                    (MULT-BY 1
                                     "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                    (("1"
                                      (CASE-REPLACE
                                       "(vNum(b) * (radix ^ floor(ln(x * radix / vNum(b)) / ln(radix)))) *
                                            radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))=vNum(b)")
                                      (("1" (GRIND-REALS) NIL NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2" (REWRITE "expt_inverse")
                                          (("2" (FIELD) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (SPLIT 2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "FtoR") (("1" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND "FtoR")
                              (("2"
                                (MULT-BY 2
                                 "radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix)))")
                                (("2"
                                  (INVOKE
                                   (CASE-REPLACE
                                    "%1 = floor(x * radix ^ (-floor(ln(x * radix / vNum(b)) / ln(radix))))+1")
                                   (! 1 R))
                                  (("1" (GRIND-REALS) NIL NIL)
                                   ("2" (HIDE-ALL-BUT 2)
                                    (("2" (REWRITE "expt_inverse")
                                      (("2" (FIELD) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_Min_isMin| 0
  (|RND_Min_isMin-1| |nil| 3319384996
   ("" (SKEEP)
    (("" (EXPAND "RND_Min")
      (("" (GRIND-REALS)
        (("1" (EXPAND "isMin?")
          (("1" (SPLIT)
            (("1" (REWRITE "RND_aux_le") NIL NIL)
             ("2" (SKOSIMP*)
              (("2" (CASE-REPLACE "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                (("1"
                  (CASE-REPLACE
                   "RND_aux(b)(r)=Fpred(b)(Fsucc(b)(RND_aux(b)(r)))")
                  (("1" (REWRITE "FpredProp")
                    (("1" (CASE "r < FtoR(Fsucc(b)(RND_aux(b)(r)))")
                      (("1" (GRIND-REALS) NIL NIL)
                       ("2" (REWRITE "RND_aux_ge") NIL NIL))
                      NIL)
                     ("2" (REWRITE "FsuccCanonic") NIL NIL))
                    NIL)
                   ("2" (REWRITE "FpredFsucc") NIL NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLIP-INEQ 1)
          (("2" (EXPAND "isMin?")
            (("2" (SKOSIMP*) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
          NIL)
         ("3" (EXPAND "isMin?")
          (("3" (FLIP-INEQ 1)
            (("3" (REWRITE "FpredFoppFsucc")
              (("3" (REWRITE "FoppCorrect")
                (("3" (REWRITE "FoppCorrect")
                  (("3" (SPLIT)
                    (("1" (CASE "-r < FtoR(Fsucc(b)(RND_aux(b)(-r)))")
                      (("1" (GRIND-REALS) NIL NIL)
                       ("2" (REWRITE "RND_aux_ge") NIL NIL))
                      NIL)
                     ("2" (SKOSIMP*)
                      (("2" (CASE-REPLACE "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                        (("1"
                          (CASE
                              "FtoR(Fsucc(b)(RND_aux(b)(-r))) <= FtoR(Fopp(Fnormalize(b)(f!1)))")
                          (("1" (REWRITE "FoppCorrect")
                            (("1" (GRIND-REALS) NIL NIL)) NIL)
                           ("2" (REWRITE "FsuccProp")
                            (("1" (CASE "-r <= FtoR(Fopp(Fnormalize(b)(f!1)))")
                              (("1" (CASE "FtoR(RND_aux(b)(-r)) < -r")
                                (("1" (GRIND-REALS) NIL NIL)
                                 ("2" (CASE "FtoR(RND_aux(b)(-r)) <= -r")
                                  (("1" (GRIND-REALS) NIL NIL)
                                   ("2" (REWRITE "RND_aux_le") NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FoppCorrect")
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL)
                             ("2" (LEMMA "FcanonicOpp")
                              (("2" (INST -1 "b" "Fnormalize(b)(f!1)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_Max_isMax| 0
  (|RND_Max_isMax-1| |nil| 3319899789
   ("" (SKEEP)
    (("" (EXPAND "RND_Max")
      (("" (CASE-REPLACE "r=--r")
        (("1" (REWRITE "MinOppMax")
          (("1" (REWRITE -1 :DIR RL) (("1" (REWRITE "RND_Min_isMin") NIL NIL))
            NIL)
           ("2" (REWRITE "FcanonicBounded") NIL NIL))
          NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_ToZero_ToZero| 0
  (|RND_ToZero_ToZero-1| |nil| 3877760357
   ("" (SKEEP)
    (("" (EXPAND "RND_ToZero")
      (("" (EXPAND "ToZero?")
        (("" (SPLIT)
          (("1" (FLATTEN) (("1" (USE "RND_Min_isMin") NIL NIL)) NIL)
           ("2" (FLATTEN) (("2" (USE "RND_Max_isMax") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_aux_float_TCC1| 0
  (|RND_aux_float_TCC1-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_aux_float| SUBTYPE
    "((number_fields.-)((number_fields.-)((number_fields.-)(Prec(float.b), Fexp(float.f)), dExp(float.b)), 1))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_float_TCC2| 0
  (|RND_aux_float_TCC2-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_aux_float| SUBTYPE "((number_fields.+)(dExp(float.b), Fexp(float.f)))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_float_TCC3| 0
  (|RND_aux_float_TCC3-2| |nil| 3544978082
   ("" (SKEEP)
    (("" (EXPAND "Fcanonic?")
      ((""
        (CASE
            "Fsubnormal?(b) ((# Fnum := floor(Fnum(f) * radix ^ (dExp(b) + Fexp(f))), Fexp := -dExp(b) #))")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE 2)
          (("2" (EXPAND* "Fsubnormal?")
            (("2"
              (CASE
                  "abs(radix * floor(Fnum(f) * radix ^ (dExp(b) + Fexp(f)))) < vNum(b)")
              (("1" (ASSERT)
                (("1" (EXPAND "Fbounded?")
                  (("1" (REWRITE "abs_mult" -1)
                    (("1" (EXPAND "abs" -1 1)
                      (("1" (MULT-BY 1 "radix")
                        (("1"
                          (SWAP
                           "abs(floor(Fnum(f) * radix ^ (dExp(b)+Fexp(f))))" *
                           "radix")
                          (("1" (CASE "vNum(b)<=vNum(b) * radix")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (HIDE -1 -2 2)
                              (("2" (DIV-BY 1 "vNum(b)")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (REWRITE "abs_mult")
                  (("2" (EXPAND "abs" 1 1)
                    (("2" (DIV-BY 1 "radix")
                      (("2"
                        (CASE "floor(Fnum(f) * radix ^ (dExp(b)+Fexp(f))) >=0")
                        (("1" (EXPAND "abs" 1 1)
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "Fnum(f) * radix ^ (dExp(b)+Fexp(f)) < vNum(b) / radix")
                              (("1" (GRIND-REALS) NIL NIL)
                               ("2" (HIDE -1 2)
                                (("2" (CROSS-MULT 1)
                                  (("2" (EXPAND "vNum")
                                    (("2"
                                      (CASE
                                          "radix ^ (Prec(b) - 1 - dExp(b) - Fexp(f)) = radix ^ Prec(b) * ( 1/ radix^(dExp(b) + Fexp(f)) ) * 1/radix")
                                      (("1" (REPLACE -1 :HIDE? T)
                                        (("1" (GRIND-REALS) NIL NIL)) NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2"
                                          (CASE
                                              "Prec(b) - 1 - dExp(b) - Fexp(f) = Prec(b) + (- 1 - dExp(b) - Fexp(f))")
                                          (("1" (REPLACE -1 :HIDE? T)
                                            (("1" (LEMMA "expt_plus")
                                              (("1" (INST? -1 :WHERE 1)
                                                (("1" (REPLACE -1 :HIDE? T)
                                                  (("1"
                                                    (CASE
                                                        "(-1 - dExp(b) - Fexp(f)) = (-1 + -(dExp(b) +Fexp(f)))")
                                                    (("1" (REPLACE -1 :HIDE? T)
                                                      (("1" (LEMMA "expt_plus")
                                                        (("1"
                                                          (INST? -1 :WHERE 1)
                                                          (("1"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("1"
                                                              (USE
                                                               "expt_inverse")
                                                              (("1"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("1"
                                                                  (USE
                                                                   "expt_inverse")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             :HIDE?
                                                                             T)
                                                                    (("1"
                                                                      (USE
                                                                       "expt_x1")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1
                                                                         :HIDE?
                                                                         T)
                                                                        (("1"
                                                                          (GRIND-REALS)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (LEMMA "nnreal_times_nnreal_is_nnreal")
                            (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux_float| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.+)(dExp(float.b), Fexp(float.f))))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
    "(float.Fcanonic?(float.b))"))
  (|RND_aux_float_TCC3-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_aux_float| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.+)(dExp(float.b), Fexp(float.f))))))), Fexp := (number_fields.-)(dExp(float.b)) #)"
    "(float.Fcanonic?(float.b))")))
 (|RND_aux_float_TCC4| 0
  (|RND_aux_float_TCC4-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_aux_float| SUBTYPE
    "((number_fields.-)((number_fields.+)((number_fields.+)(Fexp(float.f), 1), dExp(float.b)), Prec(float.b)))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_float_TCC5| 0
  (|RND_aux_float_TCC5-1| |nil| 3544890397
   ("" (SKEEP)
    (("" (MULT-BY 1 "radix ^ (Fexp(f) + 1 + dExp(b) - Prec(b))")
      (("" (REWRITE "expt_plus" :DIR RL)
        (("" (USE "expt_x0") (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux_float| SUBTYPE
    "number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.-)((number_fields.+)((number_fields.+)(Fexp(float.f), 1), dExp(float.b)), Prec(float.b))))))"
    "{x: reals.real | reals.>=(x, 1)}")))
 (|RND_aux_float_TCC6| 0
  (|RND_aux_float_TCC6-1| |nil| 3544890397
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL NIL
   (|RND_aux_float| SUBTYPE "((number_fields.-)(Fexp(float.f), float.e))"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|RND_aux_float_TCC7| 0
  (|RND_aux_float_TCC7-3| |nil| 3544978679
   ("" (SKEEP)
    (("" (SKOSIMP*)
      (("" (LEMMA "RND_log_compute")
        (("" (INST?)
          (("" (EXPAND "vNum" -1 1)
            (("" (REWRITE "expt_plus" :DIR RL)
              (("" (INST - "FtoR(f)")
                (("" (EXPAND "FtoR" -1 1)
                  (("" (SPLIT -)
                    (("1" (EXPAND "FtoR")
                      (("1" (LEMMA "expt_plus")
                        (("1" (INST - "Fexp(f)" "1+dExp(b)-Prec(b)" "radix")
                          (("1" (MULT-BY -1 "Fnum(f)")
                            (("1" (REPLACE -1 :DIR RL)
                              (("1" (HIDE -1)
                                (("1" (REPLACE -1 :DIR RL)
                                  (("1" (LEMMA "RND_aux_TCC6")
                                    (("1" (INST - "b" "FtoR(f)")
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -)
                                          (("1" (INST - "e!1")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -)
                                                (("1" (HIDE-ALL-BUT (-1 2))
                                                  (("1" (EXPAND "FtoR")
                                                    (("1" (LEMMA "expt_plus")
                                                      (("1"
                                                        (INST - "Fexp(f)"
                                                         "-e!1" "radix")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (MULT-BY -1
                                                             "Fnum(f)")
                                                            (("1"
                                                              (REPLACE -1 :DIR
                                                                       RL)
                                                              (("1" (ASSERT)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (GRIND
                                                                     :EXCLUDE
                                                                     "Fcanonic?")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (EXPAND "FtoR" +)
                                                    (("2" (LEMMA "expt_plus")
                                                      (("2"
                                                        (INST - "Fexp(f)"
                                                         "1+dExp(b)-Prec(b)"
                                                         "radix")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE (-2 2))
                                            (("2" (EXPAND "FtoR")
                                              (("2" (MULT-BY 1 "radix^Fexp(f)")
                                                (("2"
                                                  (REWRITE "expt_plus" :DIR RL)
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "vNum")
                                                      (("2"
                                                        (REWRITE "expt_plus"
                                                         :DIR RL)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "FtoR")
                                        (("2" (CASE "Fnum(f)>=0")
                                          (("1" (MULT-BY -1 "radix^Fexp(f)")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (MULT-BY 2 "radix^Fexp(f)")
                      (("2" (REWRITE "expt_plus" :DIR RL)
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_aux_float| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))"))
  (|RND_aux_float_TCC7-2| |nil| 3544978645
   ("" (SKEEP)
    (("" (LEMMA "RND_log_compute")
      (("" (INST?)
        (("" (ASSERT)
          (("" (REPLACE -1 :DIR RL)
            (("" (HIDE -1)
              (("" (SKOSIMP)
                (("" (EXPAND "Fcanonic?")
                  (("" (ASSERT)
                    (("" (FLATTEN)
                      (("" (TYPEPRED "e!1")
                        (("" (REPLACE -2 :HIDE? T)
                          ((""
                            (NAME "AA"
                                  "floor(ln(x * radix / vNum(b)) / ln(radix))")
                            (("" (REPLACE -1)
                              (("" (EXPAND "Fnormal?")
                                (("" (EXPAND "Fbounded?")
                                  (("" (SPLIT)
                                    (("1" (CASE "0<= floor(x * radix ^ (-AA))")
                                      (("1" (EXPAND "abs" 1 1)
                                        (("1" (GRIND-REALS)
                                          (("1"
                                            (CASE
                                                "x * radix ^ (-AA) < vNum(b)")
                                            (("1" (GRIND-REALS) NIL)
                                             ("2" (HIDE 2 -1)
                                              (("2"
                                                (CASE
                                                    "x * radix ^ (-AA)=x * radix ^^ (-AA)")
                                                (("1" (REPLACE -1)
                                                  (("1"
                                                    (CASE
                                                        "x * radix ^^ (-AA) < x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)-1))")
                                                    (("1"
                                                      (CASE
                                                          "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1)) <= vNum(b)")
                                                      (("1" (HIDE -3 -4)
                                                        (("1"
                                                          (NAME-REPLACE "WW"
                                                           "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix) - 1))")
                                                          (("1" (ASSERT)
                                                            NIL)))))
                                                       ("2" (HIDE 2 -1 -2 -3)
                                                        (("2"
                                                          (CASE-REPLACE
                                                           "(ln(x * radix / vNum(b)) / ln(radix) - 1)=ln(x / vNum(b)) / ln(radix)")
                                                          (("1" (FIELD)
                                                            (("1"
                                                              (REWRITE
                                                               "hathatln")
                                                              (("1" (FIELD)
                                                                NIL)))))
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (REWRITE
                                                               "ln_div")
                                                              (("2"
                                                                (REWRITE
                                                                 "ln_div")
                                                                (("2"
                                                                  (REWRITE
                                                                   "ln_mult")
                                                                  (("2" (FIELD)
                                                                    NIL)))))))))))))))
                                                     ("2" (HIDE -1 2)
                                                      (("2" (CANCEL-BY 1 "x")
                                                        (("2" (HIDE -1 2)
                                                          (("2" (EXPAND "^^")
                                                            (("2"
                                                              (LEMMA
                                                               "exp_strict_increasing")
                                                              (("2"
                                                                (EXPAND
                                                                 "strict_increasing?")
                                                                (("2"
                                                                  (REWRITE -1)
                                                                  (("2"
                                                                    (HIDE -1 2)
                                                                    (("2"
                                                                      (FIELD)
                                                                      (("2"
                                                                        (CASE
                                                                            "(ln(x * radix / vNum(b)) / ln(radix) - 1) < AA")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "ln_div")
                                                                          (("1"
                                                                            (REWRITE
                                                                             "ln_mult")
                                                                            (("1"
                                                                              (FIELD)
                                                                              (("1"
                                                                                (MULT-BY
                                                                                 -1
                                                                                 "ln(radix)")
                                                                                (("1"
                                                                                  (FIELD
                                                                                   -1)
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "ln(radix) > 0")
                                                                                    (("1"
                                                                                      (SPLIT)
                                                                                      (("1"
                                                                                        (GRIND-REALS)
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL)))
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "ln_strict_increasing")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "strict_increasing?")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "1"
                                                                                             "radix")
                                                                                            (("2"
                                                                                              (GRIND-REALS)
                                                                                              NIL)))))))))))))))))))
                                                                           ("2"
                                                                            (HIDE
                                                                             -1
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (CASE
                                                                                  "x>0")
                                                                              (("1"
                                                                                (GRIND-REALS)
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (GRIND-REALS)
                                                                                  NIL)))))))))
                                                                         ("2"
                                                                          (HIDE
                                                                           2)
                                                                          (("2"
                                                                            (GRIND-REALS)
                                                                            NIL)))))))))))))))))))))))))))
                                                 ("2" (HIDE -1 -2 2)
                                                  (("2" (REWRITE "hathat_int")
                                                    NIL)))))))))))))
                                       ("2" (CASE "0 <= x * radix ^ (-AA)")
                                        (("1" (HIDE -2 -3 2)
                                          (("1" (GRIND-REALS) NIL)))
                                         ("2" (HIDE -1 -2 2 3)
                                          (("2" (GRIND-REALS) NIL)))))))
                                     ("2"
                                      (CASE
                                          "-dExp(b) <= ln(x * radix / vNum(b)) / ln(radix)")
                                      (("1" (GRIND-REALS) NIL)
                                       ("2" (HIDE -2 2)
                                        (("2" (MULT-BY 1 "ln(radix)" +)
                                          (("1" (WRAP-FORMULA 1 "exp")
                                            (("1"
                                              (CASE-REPLACE
                                               "exp(-dExp(b) * ln(radix))=radix^^(-dExp(b))")
                                              (("1" (REWRITE "exp_ln")
                                                (("1" (DIV-BY 1 "radix")
                                                  (("1" (MULT-BY 1 "vNum(b)")
                                                    (("1"
                                                      (CASE-REPLACE
                                                       " radix ^ (-dExp(b)) / radix=radix ^ (-dExp(b) - 1)")
                                                      (("1" (FIELD)
                                                        (("1"
                                                          (REWRITE
                                                           "hathat_int")
                                                          (("1"
                                                            (DIV-BY 1 "radix")
                                                            (("1"
                                                              (HIDE -1 -2 -4)
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "(vNum(b) * radix ^ (-dExp(b))) / radix =radix ^ (-dExp(b) - 1) * vNum(b)")
                                                                (("1"
                                                                  (HIDE -2 2)
                                                                  (("1"
                                                                    (GRIND-REALS)
                                                                    NIL)))
                                                                 ("2"
                                                                  (HIDE 2 -1
                                                                   -2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "expt_plus")
                                                                    (("2"
                                                                      (INST -1
                                                                       "-dExp(b)"
                                                                       "-1"
                                                                       "radix")
                                                                      (("2"
                                                                        (GRIND-REALS)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "^"
                                                                           1 2)
                                                                          (("2"
                                                                            (GRIND-REALS)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "expt_x1_aux")
                                                                              NIL)))))))))))))))))))))))
                                                       ("2" (HIDE 2 -1 -2)
                                                        (("2" (CROSS-MULT 1)
                                                          (("2"
                                                            (CASE
                                                                "radix^(-dExp(b)-1)*radix = radix^(-dExp(b)-1)*radix^1")
                                                            (("1" (REPLACE -1)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (REWRITE
                                                                   "expt_plus"
                                                                   :DIR RL)
                                                                  NIL)))))
                                                             ("2"
                                                              (EXPAND "^" 1)
                                                              (("2"
                                                                (EXPAND "expt"
                                                                        1)
                                                                (("2"
                                                                  (EXPAND
                                                                   "expt" 1)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL)))))))))))))))))))))
                                               ("2" (HIDE -1 2)
                                                (("2" (EXPAND "^^")
                                                  (("2" (PROPAX) NIL)))))))
                                             ("2" (LEMMA "ln_increasing")
                                              (("2" (EXPAND "increasing?")
                                                (("2" (LEMMA "ln_exp")
                                                  (("2" (GRIND-REALS)
                                                    NIL)))))))))
                                           ("2" (HIDE 2 -1)
                                            (("2" (CASE "ln(radix) > 0")
                                              (("1" (SPLIT)
                                                (("1" (ASSERT) NIL)
                                                 ("2" (PROPAX) NIL)))
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (LEMMA
                                                   "ln_strict_increasing")
                                                  (("2"
                                                    (EXPAND
                                                     "strict_increasing?")
                                                    (("2" (INST -1 "1" "radix")
                                                      (("2" (GRIND-REALS)
                                                        NIL)))))))))))))))))))
                                     ("3" (EXPAND "abs" 1 1)
                                      (("3" (GRIND-REALS)
                                        (("3" (CANCEL-BY 1 "radix")
                                          (("3" (HIDE -1 1)
                                            (("3"
                                              (CASE
                                                  "vNum(b) / radix <= x * radix ^ (-AA)")
                                              (("1"
                                                (CASE
                                                    "integer_pred(vNum(b) / radix)")
                                                (("1" (HIDE -3 -4)
                                                  (("1" (LEMMA "div_simple")
                                                    (("1"
                                                      (INST -1 "vNum(b)"
                                                       "radix")
                                                      (("1"
                                                        (CASE
                                                            "(EXISTS (k:int): vNum(b) = k * radix)")
                                                        (("1" (SKOSIMP*)
                                                          (("1"
                                                            (CASE-REPLACE
                                                             " vNum(b) / radix=k!1")
                                                            (("1" (GRIND-REALS)
                                                              NIL)
                                                             ("2"
                                                              (HIDE -2 -3 -4 2)
                                                              (("2"
                                                                (GRIND-REALS)
                                                                NIL)))))))
                                                         ("2" (HIDE -3 2)
                                                          (("2" (ASSERT)
                                                            NIL)))))))))))
                                                 ("2" (ASSERT)
                                                  (("2" (HIDE-ALL-BUT 1)
                                                    (("2"
                                                      (REWRITE
                                                       "radix_div_vNum")
                                                      NIL)))))))
                                               ("2" (HIDE 2)
                                                (("2"
                                                  (CASE
                                                      "vNum(b) / radix <=  x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix)))")
                                                  (("1"
                                                    (CASE
                                                        "x * radix ^^ (-(ln(x * radix / vNum(b)) / ln(radix))) <= x * radix ^ (-AA)")
                                                    (("1" (ASSERT) NIL)
                                                     ("2" (HIDE 2 -1)
                                                      (("2" (CANCEL-BY 1 "x")
                                                        (("2" (HIDE -1 1)
                                                          (("2"
                                                            (CASE-REPLACE
                                                             "radix ^ (-AA)=radix ^^ (-AA)")
                                                            (("1" (EXPAND "^^")
                                                              (("1"
                                                                (LEMMA
                                                                 "exp_increasing")
                                                                (("1"
                                                                  (EXPAND
                                                                   "increasing?")
                                                                  (("1"
                                                                    (REWRITE
                                                                     -1)
                                                                    (("1"
                                                                      (HIDE -1
                                                                       -2 -3 2)
                                                                      (("1"
                                                                        (DIV-BY
                                                                         1
                                                                         "-ln(radix)"
                                                                         -)
                                                                        (("1"
                                                                          (FIELD)
                                                                          (("1"
                                                                            (FIELD)
                                                                            NIL)))
                                                                         ("2"
                                                                          (CASE
                                                                              "ln(radix)>0")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -1
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "ln_strict_increasing")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "strict_increasing?")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "1"
                                                                                   "radix")
                                                                                  (("2"
                                                                                    (GRIND-REALS)
                                                                                    NIL)))))))))))))))))))))))
                                                             ("2"
                                                              (HIDE -1 -2 2)
                                                              (("2"
                                                                (REWRITE
                                                                 "hathat_int")
                                                                NIL)))))))))))))
                                                   ("2" (HIDE -1 -2 2)
                                                    (("2" (REWRITE "hathatln")
                                                      (("2" (FIELD)
                                                        NIL))))))))))))))))))))))))))))))))))))))))))))))))))))
    NIL)
   NIL NIL
   (|RND_aux_float| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))"))
  (|RND_aux_float_TCC7-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_aux_float| SUBTYPE
    "(# Fnum := floor_ceil.floor(number_fields.*(Fnum(float.f), (exponentiation.^(float.radix, ((number_fields.-)(Fexp(float.f), float.e)))))), Fexp := float.e #)"
    "(float.Fcanonic?(float.b))")))
 (|RND_aux_float_def_TCC1| 0
  (|RND_aux_float_def_TCC1-1| |nil| 3544890397
   ("" (SKEEP)
    (("" (EXPAND "FtoR")
      (("" (MULT-BY -1 "radix^Fexp(f)") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   NIL NIL (|RND_aux_float_def| SUBTYPE "float.FtoR(float.f)" "nonneg_real")))
 (|RND_aux_float_def| 0
  (|RND_aux_float_def-1| |nil| 3544890402
   ("" (SKEEP)
    (("" (EXPAND "RND_aux_float")
      (("" (EXPAND "RND_aux")
        (("" (LIFT-IF)
          (("" (LIFT-IF)
            (("" (LIFT-IF)
              (("" (ASSERT)
                (("" (GROUND)
                  (("1" (EXPAND "FtoR")
                    (("1" (LEMMA "expt_plus")
                      (("1" (INST - "dExp(b)" "Fexp(f)" "radix")
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 1)
                    (("2" (EXPAND "FtoR")
                      (("2" (MULT-BY -1 "radix^Fexp(f)")
                        (("2" (REWRITE "expt_plus" :DIR RL)
                          (("2" (EXPAND "vNum")
                            (("2" (REWRITE "expt_plus" :DIR RL)
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (HIDE 1)
                    (("3" (EXPAND "FtoR")
                      (("3" (EXPAND "vNum")
                        (("3" (REWRITE "expt_plus" :DIR RL)
                          (("3" (MULT-BY -1 "radix^Fexp(f)")
                            (("3" (REWRITE "expt_plus" :DIR RL)
                              (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (HIDE 1)
                    (("4" (EXPAND "FtoR")
                      (("4" (EXPAND "vNum")
                        (("4" (REWRITE "expt_plus" :DIR RL)
                          (("4" (MULT-BY 1 "radix^Fexp(f)")
                            (("4" (REWRITE "expt_plus" :DIR RL)
                              (("4" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("5" (HIDE 1)
                    (("5" (EXPAND "FtoR")
                      (("5" (EXPAND "vNum")
                        (("5" (REWRITE "expt_plus" :DIR RL)
                          (("5" (MULT-BY 1 "radix^Fexp(f)")
                            (("5" (REWRITE "expt_plus" :DIR RL)
                              (("5" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("6"
                    (CASE
                        "FORALL (eg1:real,eg2:real): eg1 = eg2 IMPLIES floor(eg1) = floor(eg2)")
                    (("1" (INST?)
                      (("1" (GROUND)
                        (("1" (HIDE 2)
                          (("1" (EXPAND "FtoR")
                            (("1"
                              (INVOKE (CASE "%1 = %2 * (%3)") (! 1 1 2)
                               (! 1 2 2) (! 1 2 3))
                              (("1" (ASSERT) NIL NIL)
                               ("2" (HIDE 2)
                                (("2" (REWRITE "expt_plus" :DIR RL)
                                  (("2" (ASSERT)
                                    (("2"
                                      (CASE
                                          "Fnum(f) * radix ^ (1 + dExp(b) + Fexp(f) - Prec(b)) = Fnum(f) * radix ^ (Fexp(f)) * radix ^ (1 + dExp(b) - Prec(b))")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE 2)
                                        (("2"
                                          (INVOKE (CASE "%1 = %2 * (%3)")
                                           (! 1 1 2) (! 1 2 2) (! 1 2 3))
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (REWRITE "expt_plus" :DIR RL)
                                              NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("7" (HIDE 2)
                    (("7" (EXPAND "FtoR")
                      (("7" (LEMMA "expt_plus")
                        (("7" (INST - "Fexp(f)" "1+dExp(b)-Prec(b)" "radix")
                          (("7" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat|
     |reals|))
   SHOSTAK))
 (|RND_float_Min_TCC1| 0
  (|RND_float_Min_TCC1-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_float_Min| SUBTYPE "float.f" "{f | reals.>=(Fnum(float.f), 0)}")))
 (|RND_float_Min_TCC2| 0
  (|RND_float_Min_TCC2-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_float_Min| SUBTYPE "(float.-)(float.f)"
    "{f | reals.>=(Fnum(float.f), 0)}")))
 (|RND_float_Min_TCC3| 0
  (|RND_float_Min_TCC3-1| |nil| 3544890397
   ("" (SKEEP)
    (("" (LEMMA "FcanonicOpp")
      (("" (INST -1 "b" "RND_aux_float(b)(-f)")
        (("1" (ASSERT) NIL NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "-")
            (("2" (EXPAND "Fopp") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_float_Min| SUBTYPE
    "float.Fopp(float.RND_aux_float(float.b)((float.-)(float.f)))"
    "(float.Fcanonic?(float.b))")))
 (|RND_float_Min_TCC4| 0
  (|RND_float_Min_TCC4-2| |nil| 3545038497
   ("" (SKEEP)
    (("" (REWRITE "FpredCanonic")
      (("1" (LEMMA "FcanonicOpp")
        (("1" (REWRITE "FpredCanonic")
          (("1" (LEMMA "FcanonicOpp")
            (("1" (INST -1 "b" "RND_aux_float(b)(-f)")
              (("1" (ASSERT) NIL NIL)
               ("2" (EXPAND "-")
                (("2" (EXPAND "Fopp") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (EXPAND "-")
            (("2" (EXPAND "Fopp") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (EXPAND "-") (("2" (EXPAND "Fopp") (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_float_Min| SUBTYPE
    "float.Fpred(float.b)(float.Fopp(float.RND_aux_float(float.b)((float.-)(float.f))))"
    "(float.Fcanonic?(float.b))"))
  (|RND_float_Min_TCC4-1| |nil| 3544890397 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_float_Min| SUBTYPE
    "float.Fpred(float.b)(float.Fopp(float.RND_aux_float(float.b)((float.-)(float.f))))"
    "(float.Fcanonic?(float.b))")))
 (|RND_float_Min_def| 0
  (|RND_float_Min_def-1| |nil| 3544891290
   ("" (SKEEP)
    (("" (EXPAND "RND_float_Min")
      (("" (EXPAND "RND_Min")
        (("" (ASSERT)
          (("" (LIFT-IF)
            (("" (LIFT-IF)
              (("" (LIFT-IF)
                (("" (LIFT-IF)
                  (("" (GROUND)
                    (("1" (REWRITE "RND_aux_float_def") NIL NIL)
                     ("2" (EXPAND "FtoR")
                      (("2" (MULT-BY -2 "radix^(Fexp(f))")
                        (("2" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("3" (EXPAND "FtoR")
                      (("3" (MULT-BY -1 "radix^(Fexp(f))")
                        (("3" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("4" (EXPAND "FtoR")
                      (("4" (MULT-BY 2 "radix^(Fexp(f))")
                        (("4" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("5" (CASE "-FtoR(f) = FtoR(-f)")
                      (("1" (REPLACE -1)
                        (("1" (REWRITE "RND_aux_float_def" +)
                          (("1" (HIDE -)
                            (("1" (HIDE 2)
                              (("1" (EXPAND "-")
                                (("1" (EXPAND "Fopp") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("6" (CASE "-FtoR(f) = FtoR(-f)")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1)
                          (("1" (REWRITE "RND_aux_float_def" -)
                            (("1" (HIDE-ALL-BUT (1 5)) (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("7" (EXPAND "FtoR")
                      (("7" (MULT-BY 3 "radix^(Fexp(f))")
                        (("7" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("8" (CASE "-FtoR(f) = FtoR(-f)")
                      (("1" (REPLACE -1)
                        (("1" (LEMMA "RND_aux_float_def")
                          (("1" (INST - "b" "-f")
                            (("1" (ASSERT)
                              (("1" (HIDE-ALL-BUT (1 5))
                                (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("9" (CASE "-FtoR(f) = FtoR(-f)")
                      (("1" (REPLACES -1)
                        (("1" (REWRITE "RND_aux_float_def" +)
                          (("1" (HIDE-ALL-BUT (1 6)) (("1" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_float_Max_TCC1| 0
  (|RND_float_Max_TCC1-2| |nil| 3545038630
   ("" (SKEEP)
    (("" (LEMMA "FcanonicOpp")
      (("" (INST -1 "b" "RND_float_Min(b)(-f)") (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|RND_float_Max| SUBTYPE
    "float.Fopp(float.RND_float_Min(float.b)((float.-)(float.f)))"
    "(float.Fcanonic?(float.b))"))
  (|RND_float_Max_TCC1-1| |nil| 3544891797 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|RND_float_Max| SUBTYPE
    "float.Fopp(float.RND_float_Min(float.b)((float.-)(float.f)))"
    "(float.Fcanonic?(float.b))")))
 (|RND_float_Max_def| 0
  (|RND_float_Max_def-1| |nil| 3544891798
   ("" (SKEEP)
    (("" (EXPAND "RND_Max")
      (("" (EXPAND "RND_float_Max")
        (("" (REWRITE "RND_float_Min_def")
          (("" (CASE "-FtoR(f) = FtoR(-f)")
            (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_float_Min_ge_canonic| 0
  (|RND_float_Min_ge_canonic-1| |nil| 3544958511
   ("" (SKEEP)
    (("" (GROUND)
      (("1" (EXPAND ">=" -1)
        (("1" (REWRITE "FleCorrect")
          (("1" (REWRITE "RND_float_Min_def")
            (("1" (LEMMA "RND_Min_isMin")
              (("1" (INST?)
                (("1" (EXPAND "isMin?")
                  (("1" (FLATTEN)
                    (("1" (EXPAND ">=" +)
                      (("1" (REWRITE "FleCorrect") (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND ">=")
        (("2" (REWRITE "FleCorrect")
          (("2" (REWRITE "FleCorrect")
            (("2" (REWRITE "RND_float_Min_def")
              (("2" (LEMMA "RND_Min_isMin")
                (("2" (INST?)
                  (("2" (EXPAND "isMin?")
                    (("2" (FLATTEN)
                      (("2" (INST - "g")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (EXPAND "Fcanonic?")
                          (("2" (GROUND)
                            (("1" (EXPAND "Fnormal?") (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (EXPAND "Fsubnormal?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Max_le_canonic| 0
  (|RND_float_Max_le_canonic-1| |nil| 3544958528
   ("" (SKEEP)
    (("" (GROUND)
      (("1" (EXPAND "<=" -1)
        (("1" (REWRITE "FleCorrect")
          (("1" (REWRITE "RND_float_Max_def")
            (("1" (LEMMA "RND_Max_isMax")
              (("1" (INST?)
                (("1" (EXPAND "isMax?")
                  (("1" (FLATTEN)
                    (("1" (EXPAND "<=" +)
                      (("1" (REWRITE "FleCorrect") (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "<=")
        (("2" (REWRITE "FleCorrect")
          (("2" (REWRITE "FleCorrect")
            (("2" (REWRITE "RND_float_Max_def")
              (("2" (LEMMA "RND_Max_isMax")
                (("2" (INST?)
                  (("2" (EXPAND "isMax?")
                    (("2" (FLATTEN)
                      (("2" (INST - "g")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (EXPAND "Fcanonic?")
                          (("2" (GROUND)
                            (("1" (EXPAND "Fnormal?") (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (EXPAND "Fsubnormal?")
                              (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Min_canonic| 0
  (|RND_float_Min_canonic-1| |nil| 3545555881
   ("" (SKEEP)
    (("" (LEMMA "FcanonicUnique")
      (("" (INST?)
        (("" (INST - "b")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (LEMMA "RND_float_Min_ge_canonic")
                (("" (INST?)
                  (("" (INST - "f")
                    (("" (ASSERT)
                      (("" (EXPAND ">=")
                        (("" (REWRITE "FleCorrect")
                          (("" (REWRITE "FleCorrect")
                            (("" (ASSERT)
                              ((""
                                (CASE "FtoR(RND_float_Min(b)(f)) <= FtoR(f)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REWRITE "RND_float_Min_def" +)
                                    (("2" (LEMMA "RND_Min_isMin")
                                      (("2" (INST?)
                                        (("2" (EXPAND "isMin?")
                                          (("2" (GROUND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_float_Max_canonic| 0
  (|RND_float_Max_canonic-1| |nil| 3545556181
   ("" (SKEEP)
    (("" (LEMMA "FcanonicUnique")
      (("" (INST?)
        (("" (INST - "b")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (LEMMA "RND_float_Max_le_canonic")
                (("" (INST?)
                  (("" (INST - "f")
                    (("" (ASSERT)
                      (("" (EXPAND "<=")
                        (("" (REWRITE "FleCorrect")
                          (("" (REWRITE "FleCorrect")
                            (("" (ASSERT)
                              ((""
                                (CASE "FtoR(RND_float_Max(b)(f)) >= FtoR(f)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REWRITE "RND_float_Max_def" +)
                                    (("2" (LEMMA "RND_Max_isMax")
                                      (("2" (INST?)
                                        (("2" (EXPAND "isMax?")
                                          (("2" (GROUND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Min_ge| 0
  (|RND_float_Min_ge-1| |nil| 3544958600
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Min_ge_canonic")
      (("" (INST - "b" "f" "RND_float_Min(b)(g)")
        (("" (ASSERT)
          (("" (HIDE 2)
            (("" (EXPAND ">=")
              (("" (REWRITE "FleCorrect")
                (("" (REWRITE "FleCorrect")
                  (("" (REWRITE "RND_float_Min_def")
                    (("" (LEMMA "RND_Min_isMin")
                      (("" (INST?)
                        (("" (EXPAND "isMin?") (("" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_float_Min_le| 0
  (|RND_float_Min_le-1| |nil| 3544958730
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Min_ge_canonic")
      (("" (INST - "b" "g" "RND_float_Min(b)(f)")
        (("" (ASSERT)
          (("" (GROUND)
            (("1" (EXPAND ">=")
              (("1" (EXPAND "<=") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
             ("2" (HIDE (2 3))
              (("2" (EXPAND ">=")
                (("2" (EXPAND "<=")
                  (("2" (REWRITE "FleCorrect")
                    (("2" (REWRITE "FleCorrect")
                      (("2" (REWRITE "RND_float_Min_def")
                        (("2" (LEMMA "RND_Min_isMin")
                          (("2" (INST?)
                            (("2" (EXPAND "isMin?") (("2" (GROUND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Max_ge| 0
  (|RND_float_Max_ge-1| |nil| 3544962250
   ("" (SKEEP)
    (("" (EXPAND "RND_float_Max")
      (("" (LEMMA "RND_float_Min_le")
        (("" (INST - "b" "-f" "-g")
          (("" (SPLIT -)
            (("1" (EXPAND "<=")
              (("1" (EXPAND ">=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (REWRITE "FleCorrect")
                      (("1" (REWRITE "FoppCorrect")
                        (("1" (REWRITE "FoppCorrect") (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Max_le| 0
  (|RND_float_Max_le-1| |nil| 3544962448
   ("" (SKEEP)
    (("" (EXPAND "RND_float_Max")
      (("" (LEMMA "RND_float_Min_ge")
        (("" (INST - "b" "-f" "-g")
          (("" (SPLIT -)
            (("1" (EXPAND "<=")
              (("1" (EXPAND ">=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (REWRITE "FleCorrect")
                      (("1" (REWRITE "FoppCorrect")
                        (("1" (REWRITE "FoppCorrect") (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Min_lt_canonic| 0
  (|RND_float_Min_lt_canonic-1| |nil| 3544975201
   ("" (SKEEP)
    (("" (GROUND)
      (("1" (LEMMA "RND_float_Min_ge")
        (("1" (INST - "b" "f" "g")
          (("1" (SPLIT -)
            (("1" (CASE "FtoR(g) = FtoR(RND_float_Min(b)(g))")
              (("1" (EXPAND ">=")
                (("1" (EXPAND "<")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (REWRITE "FltCorrect") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE (-1 -2))
                (("2" (REWRITE "RND_float_Min_def")
                  (("2" (LEMMA "RND_Min_isMin")
                    (("2" (INST?)
                      (("2" (EXPAND "isMin?")
                        (("2" (FLATTEN)
                          (("2" (INST - "g")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (EXPAND "Fcanonic?")
                              (("2" (EXPAND "Fnormal?")
                                (("2" (EXPAND "Fsubnormal?")
                                  (("2" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -)
              (("2" (EXPAND ">=")
                (("2" (EXPAND "<")
                  (("2" (REWRITE "FleCorrect")
                    (("2" (REWRITE "FltCorrect") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "<")
        (("2" (REWRITE "FltCorrect")
          (("2" (REWRITE "FltCorrect")
            (("2" (REWRITE "RND_float_Min_def")
              (("2" (LEMMA "RND_Min_isMin")
                (("2" (INST?)
                  (("2" (EXPAND "isMin?") (("2" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Min_gt_canonic| 0
  (|RND_float_Min_gt_canonic-1| |nil| 3544976459
   ("" (SKEEP)
    (("" (GROUND)
      (("1" (LEMMA "RND_float_Max_le")
        (("1" (INST - "b" "f" "g")
          (("1" (SPLIT -)
            (("1" (CASE "FtoR(g) = FtoR(RND_float_Max(b)(g))")
              (("1" (EXPAND "<=")
                (("1" (EXPAND ">")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (REWRITE "FltCorrect") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE (-1 -2))
                (("2" (REWRITE "RND_float_Max_def")
                  (("2" (LEMMA "RND_Max_isMax")
                    (("2" (INST?)
                      (("2" (EXPAND "isMax?")
                        (("2" (FLATTEN)
                          (("2" (INST - "g")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (EXPAND "Fcanonic?")
                              (("2" (EXPAND "Fnormal?")
                                (("2" (EXPAND "Fsubnormal?")
                                  (("2" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -)
              (("2" (EXPAND "<=")
                (("2" (EXPAND ">")
                  (("2" (REWRITE "FleCorrect")
                    (("2" (REWRITE "FltCorrect") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND ">")
        (("2" (REWRITE "FltCorrect")
          (("2" (REWRITE "FltCorrect")
            (("2" (REWRITE "RND_float_Max_def")
              (("2" (LEMMA "RND_Max_isMax")
                (("2" (INST?)
                  (("2" (EXPAND "isMax?") (("2" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Min_ge_0| 0
  (|RND_float_Min_ge_0-1| |nil| 3544958916
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Min_ge")
      (("" (INST - "b" "f" "float_int(0)")
        (("" (ASSERT)
          (("" (CASE "FtoR(RND_float_Min(b)(float_int(0))) = 0")
            (("1" (EXPAND ">=")
              (("1" (EXPAND ">=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (ASSERT)
                      (("1" (REWRITE "RND_float_Min_def")
                        (("1" (REWRITE "RND_float_Min_def")
                          (("1" (LEMMA "RND_Min_isMin")
                            (("1" (INST-CP - "b" "FtoR(float_int(0))")
                              (("1" (INST - "b" "FtoR(f)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "isMin?")
                                    (("1" (GROUND)
                                      (("1" (INST - "float_int(0)")
                                        (("1" (GROUND)
                                          (("1" (EXPAND "FtoR" + 1)
                                            (("1" (EXPAND "float_int" 1)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "Fbounded?" 1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "float_int" 1)
                                              (("2" (ASSERT)
                                                (("2" (CASE "abs(0) = 0")
                                                  (("1" (REPLACE -1 :HIDE? T)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (TYPEPRED "dExp(b)")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (EXPAND "abs")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "float_int")
                (("2" (EXPAND "RND_float_Min")
                  (("2" (EXPAND "RND_aux_float")
                    (("2" (LIFT-IF)
                      (("2" (GROUND)
                        (("2" (REWRITE "floor_int")
                          (("2" (EXPAND "FtoR") (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_float_Min_lt_0| 0
  (|RND_float_Min_lt_0-1| |nil| 3544976537
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Min_lt_canonic")
      (("" (INST - "b" "f" "RND_float_Min(b)(float_int(0))")
        (("" (ASSERT)
          (("" (EXPAND "<")
            (("" (REWRITE "FltCorrect")
              (("" (REWRITE "FltCorrect")
                (("" (CASE "FtoR(RND_float_Min(b)(float_int(0))) = 0")
                  (("1" (REPLACES -1) NIL NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (REWRITE "RND_float_Min_def")
                      (("2" (CASE "FtoR(float_int(0)) = 0")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (EXPAND "RND_Min")
                              (("1" (EXPAND "RND_aux")
                                (("1" (ASSERT)
                                  (("1" (LIFT-IF)
                                    (("1" (GROUND)
                                      (("1" (REWRITE "floor_int")
                                        (("1" (EXPAND "FtoR")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|RND_float_Max_le_0| 0
  (|RND_float_Max_le_0-6| |nil| 3544965375
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Max_le")
      (("" (INST - "b" "f" "float_int(0)")
        (("" (ASSERT)
          (("" (CASE "FtoR(RND_float_Max(b)(float_int(0))) = 0")
            (("1" (EXPAND "<=")
              (("1" (EXPAND "<=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (ASSERT)
                      (("1" (REWRITE "RND_float_Max_def")
                        (("1" (REWRITE "RND_float_Max_def")
                          (("1" (LEMMA "RND_Max_isMax")
                            (("1" (INST-CP - "b" "FtoR(float_int(0))")
                              (("1" (INST - "b" "FtoR(f)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "isMax?")
                                    (("1" (GROUND)
                                      (("1" (INST - "float_int(0)")
                                        (("1" (GROUND)
                                          (("1" (EXPAND "FtoR" + 1)
                                            (("1" (EXPAND "float_int" 1)
                                              (("1" (EXPAND "FtoR" 1)
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "FtoR" -1)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (EXPAND "Fbounded?" 1)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "float_int" 1)
                                                (("2" (ASSERT)
                                                  (("2" (TYPEPRED "dExp(b)")
                                                    (("2" (ASSERT)
                                                      (("2" (CASE "abs(0) = 0")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2" (EXPAND "abs")
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REPLACE -1)
                                        (("2" (HIDE-ALL-BUT 2)
                                          (("2" (EXPAND "RND_Max")
                                            (("2" (EXPAND "RND_Min")
                                              (("2" (EXPAND "RND_aux")
                                                (("2" (ASSERT)
                                                  (("2" (GROUND)
                                                    (("2" (EXPAND "Fopp")
                                                      (("2"
                                                        (REWRITE "floor_int")
                                                        (("2" (ASSERT)
                                                          (("2" (EXPAND "FtoR")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "RND_float_Max")
                (("2" (EXPAND "RND_float_Min")
                  (("2" (LIFT-IF)
                    (("2" (GROUND)
                      (("1" (EXPAND "RND_aux_float")
                        (("1" (LIFT-IF)
                          (("1" (GROUND)
                            (("1" (EXPAND "float_int")
                              (("1" (HIDE -)
                                (("1" (REWRITE "floor_int")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 2) (("2" (GRIND) NIL NIL)) NIL)
                       ("3" (HIDE-ALL-BUT 3) (("3" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL)
  (|RND_float_Max_le_0-5| |nil| 3544962611
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Max_le")
      (("" (INST - "b" "f" "float_int(0)")
        (("" (ASSERT)
          (("" (CASE "FtoR(RND_float_Max(b)(float_int(0))) = 0")
            (("1" (EXPAND "<=")
              (("1" (EXPAND "<=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (ASSERT)
                      (("1" (REWRITE "RND_float_Max_def")
                        (("1" (REWRITE "RND_float_Max_def")
                          (("1" (LEMMA "RND_Max_isMax")
                            (("1" (INST-CP - "b" "FtoR(float_int(0))")
                              (("1" (INST - "b" "FtoR(f)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "isMax?")
                                    (("1" (GROUND)
                                      (("1" (INST - "float_int(0)")
                                        (("1" (GROUND)
                                          (("1" (EXPAND "FtoR" + 1)
                                            (("1" (EXPAND "float_int" 1)
                                              (("1" (ASSERT) NIL)))))))
                                         ("2" (EXPAND "Fbounded?" 1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "float_int" 1)
                                              (("2" (ASSERT)
                                                (("2" (REWRITE "abs_0")
                                                  (("2" (ASSERT)
                                                    (("2" (TYPEPRED "dExp(b)")
                                                      (("2" (ASSERT)
                                                        NIL)))))))))))))))))))))))))))))))))))))))))))
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "float_int")
                (("2" (EXPAND "RND_float_Max")
                  (("2" (EXPAND "RND_aux_float")
                    (("2" (LIFT-IF)
                      (("2" (GROUND)
                        (("2" (REWRITE "floor_int")
                          (("2" (ASSERT)
                            (("2" (EXPAND "FtoR")
                              (("2" (PROPAX) NIL))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|RND_float_Max_le_0-4| |nil| 3544962502
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Min_ge")
      (("" (INST - "b" "f" "float_int(0)")
        (("" (ASSERT)
          (("" (CASE "FtoR(RND_float_Min(b)(float_int(0))) = 0")
            (("1" (EXPAND ">=")
              (("1" (EXPAND ">=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (ASSERT)
                      (("1" (REWRITE "RND_float_Min_def")
                        (("1" (REWRITE "RND_float_Min_def")
                          (("1" (LEMMA "RND_Min_isMin")
                            (("1" (INST-CP - "b" "FtoR(float_int(0))")
                              (("1" (INST - "b" "FtoR(f)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "isMin?")
                                    (("1" (GROUND)
                                      (("1" (INST - "float_int(0)")
                                        (("1" (GROUND)
                                          (("1" (EXPAND "FtoR" + 1)
                                            (("1" (EXPAND "float_int" 1)
                                              (("1" (ASSERT) NIL)))))))
                                         ("2" (EXPAND "Fbounded?" 1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "float_int" 1)
                                              (("2" (ASSERT)
                                                (("2" (REWRITE "abs_0")
                                                  (("2" (ASSERT)
                                                    (("2" (TYPEPRED "dExp(b)")
                                                      (("2" (ASSERT)
                                                        NIL)))))))))))))))))))))))))))))))))))))))))))
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "float_int")
                (("2" (EXPAND "RND_float_Min")
                  (("2" (EXPAND "RND_aux_float")
                    (("2" (LIFT-IF)
                      (("2" (GROUND)
                        (("2" (REWRITE "floor_int")
                          (("2" (ASSERT)
                            (("2" (EXPAND "FtoR")
                              (("2" (PROPAX) NIL))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|RND_float_Max_le_0-3| |nil| 3544962139
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Max_le")
      (("" (INST - "b" "f" "float_int(0)")
        (("" (ASSERT)
          (("" (CASE "FtoR(RND_float_Max(b)(float_int(0))) = 0")
            (("1" (EXPAND "<=")
              (("1" (EXPAND "<=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (ASSERT)
                      (("1" (REWRITE "RND_float_Max_def")
                        (("1" (REWRITE "RND_float_Max_def")
                          (("1" (LEMMA "RND_Max_isMax")
                            (("1" (INST-CP - "b" "FtoR(float_int(0))")
                              (("1" (INST - "b" "FtoR(f)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "isMax?")
                                    (("1" (GROUND)
                                      (("1" (INST - "float_int(0)")
                                        (("1" (GROUND)
                                          (("1" (EXPAND "FtoR" + 1)
                                            (("1" (EXPAND "float_int" 1)
                                              (("1" (ASSERT) NIL)))))))
                                         ("2" (EXPAND "Fbounded?" 1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "float_int" 1)
                                              (("2" (ASSERT)
                                                (("2" (REWRITE "abs_0")
                                                  (("2" (ASSERT)
                                                    (("2" (TYPEPRED "dExp(b)")
                                                      (("2" (ASSERT)
                                                        NIL)))))))))))))))))))))))))))))))))))))))))))
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "float_int")
                (("2" (EXPAND "RND_float_Max")
                  (("2" (EXPAND "RND_aux_float")
                    (("2" (LIFT-IF)
                      (("2" (GROUND)
                        (("2" (REWRITE "floor_int")
                          (("2" (ASSERT)
                            (("2" (EXPAND "FtoR")
                              (("2" (PROPAX) NIL))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|RND_float_Max_le_0-2| |nil| 3544962107
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Max_ge")
      (("" (INST - "b" "f" "float_int(0)")
        (("" (ASSERT)
          (("" (CASE "FtoR(RND_float_Max(b)(float_int(0))) = 0")
            (("1" (EXPAND "<=")
              (("1" (EXPAND "<=")
                (("1" (REWRITE "FleCorrect")
                  (("1" (REWRITE "FleCorrect")
                    (("1" (ASSERT)
                      (("1" (REWRITE "RND_float_Max_def")
                        (("1" (REWRITE "RND_float_Max_def")
                          (("1" (LEMMA "RND_Max_isMax")
                            (("1" (INST-CP - "b" "FtoR(float_int(0))")
                              (("1" (INST - "b" "FtoR(f)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "isMax?")
                                    (("1" (GROUND)
                                      (("1" (INST - "float_int(0)")
                                        (("1" (GROUND)
                                          (("1" (EXPAND "FtoR" + 1)
                                            (("1" (EXPAND "float_int" 1)
                                              (("1" (ASSERT) NIL)))))))
                                         ("2" (EXPAND "Fbounded?" 1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "float_int" 1)
                                              (("2" (ASSERT)
                                                (("2" (REWRITE "abs_0")
                                                  (("2" (ASSERT)
                                                    (("2" (TYPEPRED "dExp(b)")
                                                      (("2" (ASSERT)
                                                        NIL)))))))))))))))))))))))))))))))))))))))))))
             ("2" (HIDE-ALL-BUT 1)
              (("2" (EXPAND "float_int")
                (("2" (EXPAND "RND_float_Max")
                  (("2" (EXPAND "RND_aux_float")
                    (("2" (LIFT-IF)
                      (("2" (GROUND)
                        (("2" (REWRITE "floor_int")
                          (("2" (ASSERT)
                            (("2" (EXPAND "FtoR")
                              (("2" (PROPAX) NIL))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|RND_float_Max_le_0-1| |nil| 3544962078 ("" (POSTPONE) NIL NIL) NIL
   SHOSTAK))
 (|RND_float_Max_gt_0| 0
  (|RND_float_Max_gt_0-1| |nil| 3544976824
   ("" (SKEEP)
    (("" (LEMMA "RND_float_Min_gt_canonic")
      (("" (INST - "b" "f" "RND_float_Min(b)(float_int(0))")
        (("" (ASSERT)
          (("" (EXPAND ">")
            (("" (REWRITE "FltCorrect")
              (("" (REWRITE "FltCorrect")
                (("" (CASE "FtoR(RND_float_Min(b)(float_int(0))) = 0")
                  (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (REWRITE "RND_float_Min_def")
                      (("2" (CASE "FtoR(float_int(0)) = 0")
                        (("1" (REPLACE -1)
                          (("1" (HIDE -1)
                            (("1" (EXPAND "RND_Min")
                              (("1" (EXPAND "RND_aux")
                                (("1" (ASSERT)
                                  (("1" (LIFT-IF)
                                    (("1" (GROUND)
                                      (("1" (REWRITE "floor_int")
                                        (("1" (EXPAND "FtoR")
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|Fmult_canonic_id_Min_TCC1| 0
  (|Fmult_canonic_id_Min_TCC1-1| |nil| 3545491200
   ("" (SKEEP)
    (("" (EXPAND "float_int")
      (("" (EXPAND "Fbounded?")
        (("" (EXPAND "vNum")
          (("" (ASSERT)
            (("" (TYPEPRED "dExp(b)")
              (("" (ASSERT)
                (("" (EXPAND "abs")
                  (("" (LEMMA "increasing_expt_aux")
                    (("" (INST - "radix" "Prec(b)-2")
                      (("" (ASSERT)
                        (("" (EXPAND "^") (("" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|Fmult_canonic_id_Min| SUBTYPE "float.float_int(1)"
    "(float.Fbounded?(float.b))")))
 (|Fmult_canonic_id_Min| 0
  (|Fmult_canonic_id_Min-1| |nil| 3545491201
   ("" (LEMMA "FcanonicUnique")
    (("" (SKEEP)
      (("" (INST?)
        (("" (INST - "b")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (REWRITE "RND_float_Min_def")
                (("" (EXPAND "*")
                  (("" (REWRITE "FmultCorrect")
                    (("" (TYPEPRED "Fnormalize(b)(float_int(1))")
                      (("" (REPLACE -2)
                        (("" (REWRITE "float_int_def" +)
                          (("" (ASSERT)
                            (("" (REWRITE "RND_float_Min_def" :DIR RL)
                              (("" (LEMMA "RND_float_Min_canonic")
                                (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fmult_canonic_id_Max| 0
  (|Fmult_canonic_id_Max-1| |nil| 3545556316
   ("" (LEMMA "FcanonicUnique")
    (("" (SKEEP)
      (("" (INST?)
        (("" (INST - "b")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (REWRITE "RND_float_Max_def")
                (("" (EXPAND "*")
                  (("" (REWRITE "FmultCorrect")
                    (("" (TYPEPRED "Fnormalize(b)(float_int(1))")
                      (("" (REPLACE -2)
                        (("" (REWRITE "float_int_def" +)
                          (("" (ASSERT)
                            (("" (REWRITE "RND_float_Max_def" :DIR RL)
                              (("" (LEMMA "RND_float_Max_canonic")
                                (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|Fplus_canonic_id_Min_TCC1| 0
  (|Fplus_canonic_id_Min_TCC1-1| |nil| 3545563549 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|Fplus_canonic_id_Min| SUBTYPE "float.float_int(0)"
    "(float.Fbounded?(float.b))")))
 (|Fplus_canonic_id_Min| 0
  (|Fplus_canonic_id_Min-1| |nil| 3545563553
   ("" (LEMMA "FcanonicUnique")
    (("" (SKEEP)
      (("" (INST?)
        (("" (INST - "b")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (REWRITE "RND_float_Min_def")
                (("" (EXPAND "+")
                  (("" (REWRITE "FplusCorrect")
                    (("" (TYPEPRED "Fnormalize(b)(float_int(0))")
                      (("" (REPLACE -2)
                        (("" (REWRITE "float_int_def" +)
                          (("" (ASSERT)
                            (("" (REWRITE "RND_float_Min_def" :DIR RL)
                              (("" (LEMMA "RND_float_Min_canonic")
                                (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|Fplus_canonic_id_Max| 0
  (|Fplus_canonic_id_Max-1| |nil| 3545563562
   ("" (LEMMA "FcanonicUnique")
    (("" (SKEEP)
      (("" (INST?)
        (("" (INST - "b")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (REWRITE "RND_float_Max_def")
                (("" (EXPAND "+")
                  (("" (REWRITE "FplusCorrect")
                    (("" (TYPEPRED "Fnormalize(b)(float_int(0))")
                      (("" (REPLACE -2)
                        (("" (REWRITE "float_int_def" +)
                          (("" (ASSERT)
                            (("" (REWRITE "RND_float_Max_def" :DIR RL)
                              (("" (LEMMA "RND_float_Max_canonic")
                                (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|MaxSuccMin_TCC1| 0
  (|MaxSuccMin_TCC1-1| |nil| 3319555845
   ("" (SKEEP) (("" (REWRITE "FcanonicBounded") NIL NIL)) NIL) NIL NIL
   (|MaxSuccMin| SUBTYPE "float.q" "(float.Fbounded?(float.b))")))
 (|MaxSuccMin| 0
  (|MaxSuccMin-1| |nil| 3319555553
   ("" (SKEEP)
    (("" (LEMMA "FcanonicUnique")
      (("" (INST -1 "b" "q" "Fsucc(b)(p)")
        (("" (REWRITE -1)
          (("1" (HIDE -1 3)
            (("1" (EXPAND* "isMin?" "isMax?")
              (("1" (FLATTEN)
                (("1" (CASE "FtoR(Fsucc(b)(p)) <= FtoR(q)")
                  (("1" (CASE "FtoR(q) <= FtoR(Fsucc(b)(p))")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE -1 3)
                      (("2" (LEMMA "FpredLe")
                        (("2" (INST -1 "b" "q" "Fsucc(b)(p)")
                          (("2" (SPLIT -1)
                            (("1" (FLATTEN)
                              (("1" (REWRITE -2)
                                (("1" (REWRITE "FpredFsucc")
                                  (("1" (REWRITE -4)
                                    (("1" (FLIP-INEQ 1)
                                      (("1" (LEMMA "FpredLt")
                                        (("1" (INST -1 "b" "q")
                                          (("1" (FLIP-INEQ -1)
                                            (("1" (HIDE 2 3 4)
                                              (("1" (INST -7 "Fpred(b)(q)")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2"
                                                  (REWRITE "FcanonicBounded")
                                                  (("2"
                                                    (REWRITE "FpredCanonic")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "FcanonicBounded")
                                      (("2" (REWRITE "FpredCanonic") NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FsuccCanonic") NIL NIL)
                             ("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "FsuccProp") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FsuccCanonic") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|LeMinMaxClosest| 0
  (|LeMinMaxClosest-2| "" 3790102880
   ("" (SKEEP)
    (("" (EXPAND "Closest?")
      (("" (SKOSIMP*)
        (("" (EXPAND "abs" 1 2)
          (("" (GRIND-REALS)
            (("1" (EXPAND "isMin?")
              (("1" (FLATTEN)
                (("1" (INST -5 "f!1")
                  (("1" (HIDE (-1 -2 -3 -7))
                    (("1" (EXPAND "abs" +)
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (EXPAND "abs")
                            (("1" (LIFT-IF)
                              (("1" (SPLIT -)
                                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "abs" -3 1)
                            (("2" (CASE "abs(FtoR(p) - r) = r - FtoR(p)")
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-2 1))
                                (("2"
                                  (CASE "FORALL (xrp:nnreal): abs(-xrp)=xrp")
                                  (("1" (INST - "r-FtoR(p)")
                                    (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "abs" +)
              (("2" (LIFT-IF)
                (("2" (HIDE (-1 -2 -3 -4))
                  (("2" (EXPAND "isMax?")
                    (("2" (FLATTEN)
                      (("2" (INST - "f!1")
                        (("2" (GRIND :EXCLUDE "FtoR") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|LeMinMaxClosest-1| |nil| 3321095498
   ("" (SKEEP)
    (("" (EXPAND "Closest?")
      (("" (SKOSIMP*)
        (("" (EXPAND "abs" 1 2)
          (("" (GRIND-REALS)
            (("1" (EXPAND "isMin?")
              (("1" (FLATTEN)
                (("1" (INST -5 "f!1")
                  (("1" (HIDE (-1 -2 -3 -7))
                    (("1" (EXPAND "abs" +)
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (EXPAND "abs")
                            (("1" (ASSERT)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT -)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "abs" -3 1)
                            (("2" (CASE "abs(FtoR(p) - r) = r - FtoR(p)")
                              (("1" (REPLACES -1)
                                (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-2 1))
                                (("2"
                                  (CASE "FORALL (xrp:nnreal): abs(-xrp)=xrp")
                                  (("1" (INST - "r-FtoR(p)")
                                    (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "abs" +)
              (("2" (ASSERT)
                (("2" (LIFT-IF)
                  (("2" (HIDE (-1 -2 -3 -4))
                    (("2" (EXPAND "isMax?")
                      (("2" (FLATTEN)
                        (("2" (INST - "f!1")
                          (("2" (GRIND :EXCLUDE "FtoR") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMin_Total| 0
  (|isMin_Total-2| "" 3790102881
   ("" (SKEEP)
    (("" (EXPAND "Total?")
      (("" (SKEEP)
        (("" (INST 1 "RND_Min(b)(r)") (("" (REWRITE "RND_Min_isMin") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|isMin_Total-1| |nil| 3318936846
   ("" (SKEEP)
    (("" (EXPAND "Total?")
      (("" (SKEEP)
        (("" (INST 1 "RND_Min(b)(r)")
          (("1" (REWRITE "RND_Min_isMin") NIL NIL)
           ("2" (REWRITE "FcanonicBounded") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMin_Compatible| 0
  (|isMin_Compatible-1| |nil| 3318887445
   ("" (EXPAND* "Compatible?" "isMin?")
    (("" (SKOSIMP*)
      (("" (SPLIT)
        (("1" (GRIND-REALS) NIL NIL)
         ("2" (SKEEP) (("2" (INST? -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMin_Monotone| 0
  (|isMin_Monotone-1| |nil| 3318937046
   ("" (EXPAND* "Monotone?" "isMin?")
    (("" (SKOSIMP*) (("" (REWRITE -5) NIL NIL)) NIL)) NIL)
   NIL SHOSTAK))
 (|isMin_RoundedMode| 0
  (|isMin_RoundedMode-1| |nil| 3318937262
   ("" (EXPAND "RoundedMode?")
    (("" (SKEEP)
      (("" (SPLIT)
        (("1" (REWRITE "isMin_Total") NIL NIL)
         ("2" (REWRITE "isMin_Compatible") NIL NIL)
         ("3" (EXPAND "MinOrMax?") (("3" (SKEEP) NIL NIL)) NIL)
         ("4" (REWRITE "isMin_Monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMin_Unique| 0
  (|isMin_Unique-1| |nil| 3318937365
   ("" (EXPAND* "Unique?" "isMin?")
    (("" (SKOSIMP*)
      (("" (CASE "FtoR(f1!1) <= FtoR(f2!1)")
        (("1" (CASE "FtoR(f2!1) <= FtoR(f1!1)")
          (("1" (ASSERT) NIL NIL) ("2" (REWRITE -3) NIL NIL)) NIL)
         ("2" (REWRITE -4) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMax_Total| 0
  (|isMax_Total-1| |nil| 3319385838
   ("" (EXPAND "Total?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (INST 1 "Fopp(RND_Min(b)(-r))")
          (("1" (CASE-REPLACE "r=--r")
            (("1" (REWRITE "MinOppMax")
              (("1" (REWRITE "RND_Min_isMin") NIL NIL)
               ("2" (REWRITE "FcanonicBounded") NIL NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL)
           ("2" (REWRITE "FoppBounded")
            (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMax_Compatible| 0
  (|isMax_Compatible-1| |nil| 3318937526
   ("" (EXPAND* "Compatible?" "isMax?")
    (("" (SKOSIMP*)
      (("" (SPLIT)
        (("1" (GRIND-REALS) NIL NIL)
         ("2" (SKEEP) (("2" (GRIND-REALS) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMax_Monotone| 0
  (|isMax_Monotone-1| |nil| 3318937580
   ("" (EXPAND* "Monotone?" "isMax?")
    (("" (SKOSIMP*) (("" (GRIND-REALS) NIL NIL)) NIL)) NIL)
   NIL SHOSTAK))
 (|isMax_RoundedMode| 0
  (|isMax_RoundedMode-1| |nil| 3318937619
   ("" (EXPAND* "RoundedMode?")
    (("" (SKEEP)
      (("" (SPLIT)
        (("1" (REWRITE "isMax_Total") NIL NIL)
         ("2" (REWRITE "isMax_Compatible") NIL NIL)
         ("3" (EXPAND "MinOrMax?") (("3" (SKEEP) NIL NIL)) NIL)
         ("4" (REWRITE "isMax_Monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMax_Unique| 0
  (|isMax_Unique-1| |nil| 3318938203
   ("" (EXPAND* "Unique?" "isMax?")
    (("" (SKOSIMP*)
      (("" (CASE "FtoR(f1!1) <= FtoR(f2!1)")
        (("1" (CASE "FtoR(f2!1) <= FtoR(f1!1)")
          (("1" (ASSERT) NIL NIL) ("2" (GRIND-REALS) NIL NIL)) NIL)
         ("2" (GRIND-REALS) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ToZero_Total| 0
  (|ToZero_Total-1| |nil| 3319469754
   ("" (SKEEP)
    (("" (EXPAND "Total?")
      (("" (SKEEP)
        (("" (EXPAND "ToZero?")
          (("" (GRIND-REALS)
            (("" (CASE "0 <= r")
              (("1" (ASSERT)
                (("1" (LEMMA "isMin_Total")
                  (("1" (EXPAND "Total?") (("1" (INST -1 "b" "r") NIL NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (LEMMA "isMax_Total")
                  (("2" (EXPAND "Total?") (("2" (INST -1 "b" "r") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ToZero_Compatible| 0
  (|ToZero_Compatible-1| |nil| 3319470173
   ("" (EXPAND "Compatible?")
    (("" (SKOSIMP*)
      (("" (EXPAND "ToZero?")
        (("" (GRIND-REALS)
          (("1" (LEMMA "isMin_Compatible")
            (("1" (EXPAND "Compatible?")
              (("1" (INST -1 "b!1" "r1!1" "r2!1" "f1!1" "f2!1")
                (("1" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (LEMMA "isMax_Compatible")
            (("2" (EXPAND "Compatible?")
              (("2" (INST -1 "b!1" "r1!1" "r2!1" "f1!1" "f2!1")
                (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ToZero_MinOrMax| 0
  (|ToZero_MinOrMax-1| |nil| 3319470366
   ("" (EXPAND* "MinOrMax?" "ToZero?")
    (("" (SKEEP) (("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   NIL SHOSTAK))
 (|ToZero_Monotone| 0
  (|ToZero_Monotone-1| |nil| 3319470437
   ("" (EXPAND "Monotone?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "ToZero?")
          (("" (GRIND-REALS)
            (("1" (LEMMA "isMin_Monotone")
              (("1" (EXPAND "Monotone?")
                (("1" (INST -1 "b" "r1" "r2" "f1" "f2")
                  (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLIP-INEQ 1)
              (("2" (CASE " FtoR(f1) <=0")
                (("1" (CASE "0<= FtoR(f2)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE -1 -2 -3 -4 2)
                    (("2" (EXPAND "isMin?")
                      (("2" (FLATTEN)
                        (("2" (INST -3 "(# Fnum:=0, Fexp:=0#)")
                          (("1" (EXPAND* "FtoR") (("1" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (EXPAND "Fbounded?")
                            (("2" (GRIND-REALS)
                              (("2" (EXPAND "abs" 1)
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -2 -4 -5 2)
                  (("2" (EXPAND "isMax?")
                    (("2" (FLATTEN)
                      (("2" (INST -3 "(# Fnum:=0, Fexp:=0#)")
                        (("1" (EXPAND* "FtoR") (("1" (GRIND-REALS) NIL NIL))
                          NIL)
                         ("2" (EXPAND "Fbounded?")
                          (("2" (GRIND-REALS)
                            (("2" (EXPAND "abs" 1)
                              (("2" (GRIND-REALS) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (LEMMA "isMax_Monotone")
              (("3" (EXPAND "Monotone?")
                (("3" (INST -1 "b" "r1" "r2" "f1" "f2")
                  (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ToZero_RoundedMode| 0
  (|ToZero_RoundedMode-1| |nil| 3319471412
   ("" (SKEEP)
    (("" (EXPAND "RoundedMode?")
      (("" (SPLIT)
        (("1" (REWRITE "ToZero_Total") NIL NIL)
         ("2" (REWRITE "ToZero_Compatible") NIL NIL)
         ("3" (REWRITE "ToZero_MinOrMax") NIL NIL)
         ("4" (REWRITE "ToZero_Monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ToZero_Unique| 0
  (|ToZero_Unique-1| |nil| 3319471464
   ("" (EXPAND "Unique?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "ToZero?")
          (("" (GRIND-REALS)
            (("1" (LEMMA "isMin_Unique")
              (("1" (EXPAND "Unique?")
                (("1" (INST -1 "b" "r" "f1" "f2") (("1" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "isMax_Unique")
              (("2" (EXPAND "Unique?")
                (("2" (INST -1 "b" "r" "f1" "f2") (("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_Total| 0
  (|Closest_Total-1| |nil| 3319471553
   ("" (SKEEP)
    (("" (LEMMA "isMin_Total")
      (("" (LEMMA "isMax_Total")
        (("" (EXPAND "Total?")
          (("" (SKEEP)
            (("" (INST -1 "b" "r")
              (("" (INST -2 "b" "r")
                (("" (SKOSIMP*)
                  (("" (CASE "abs(FtoR(f!1)-r)<= abs(FtoR(f!2)-r)")
                    (("1" (INST 1 "f!1")
                      (("1" (EXPAND "Closest?")
                        (("1" (SKOSIMP*)
                          (("1" (EXPAND* "isMin?" "isMax?")
                            (("1" (FLATTEN)
                              (("1" (CASE " FtoR(f!3) <= r")
                                (("1" (EXPAND* "abs")
                                  (("1" (GRIND-REALS) NIL NIL)) NIL)
                                 ("2" (EXPAND* "abs")
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLIP-INEQ 1)
                      (("2" (INST 1 "f!2")
                        (("2" (EXPAND* "Closest?" "isMin?" "isMax?")
                          (("2" (FLATTEN)
                            (("2" (SKOSIMP*)
                              (("2" (CASE "FtoR(f!3) <= r")
                                (("1" (EXPAND* "abs")
                                  (("1" (GRIND-REALS) NIL NIL)) NIL)
                                 ("2" (EXPAND* "abs")
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_total| 0
  (|Closest_total-1| |nil| 3681747416
   ("" (SKEEP)
    (("" (LEMMA "isMin_Total")
      (("" (LEMMA "isMax_Total")
        (("" (EXPAND "Total?")
          (("" (EXPAND "total?")
            (("" (SKEEP)
              (("" (INST -1 "b" "r")
                (("" (INST -2 "b" "r")
                  (("" (SKOSIMP*)
                    (("" (CASE "abs(FtoR(f!1)-r)<= abs(FtoR(f!2)-r)")
                      (("1" (INST 1 "f!1")
                        (("1" (EXPAND "Closest?")
                          (("1" (SKOSIMP*)
                            (("1" (EXPAND* "isMin?" "isMax?")
                              (("1" (FLATTEN)
                                (("1" (CASE " FtoR(f!3) <= r")
                                  (("1" (EXPAND* "abs")
                                    (("1" (GRIND-REALS) NIL NIL)) NIL)
                                   ("2" (EXPAND* "abs")
                                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLIP-INEQ 1)
                        (("2" (INST 1 "f!2")
                          (("2" (EXPAND* "Closest?" "isMin?" "isMax?")
                            (("2" (FLATTEN)
                              (("2" (SKOSIMP*)
                                (("2" (CASE "FtoR(f!3) <= r")
                                  (("1" (EXPAND* "abs")
                                    (("1" (GRIND-REALS) NIL NIL)) NIL)
                                   ("2" (EXPAND* "abs")
                                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_Compatible| 0
  (|Closest_Compatible-1| |nil| 3319474184
   ("" (EXPAND "Compatible?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "Closest?")
          (("" (SKOSIMP*) (("" (INST -1 "f!1") (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_compatible| 0
  (|Closest_compatible-1| |nil| 3681747654
   ("" (SKEEP)
    (("" (EXPAND "compatible?")
      (("" (SKEEP)
        (("" (EXPAND "Closest?")
          (("" (SKOSIMP*) (("" (INST -1 "f!1") (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_MinOrMax| 0
  (|Closest_MinOrMax-1| |nil| 3319474295
   ("" (EXPAND "MinOrMax?")
    (("" (SKEEP)
      (("" (SKOSIMP*)
        (("" (CASE "r!1<= FtoR(f!1)")
          (("1" (HIDE 1)
            (("1" (EXPAND* "isMax?" "Closest?")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2" (SKOSIMP*)
                  (("2" (INST -3 "f!2")
                    (("2" (EXPAND "abs" -3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (HIDE 2)
              (("2" (EXPAND* "isMin?" "Closest?")
                (("2" (SPLIT)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (SKOSIMP*)
                    (("2" (INST -3 "f!2")
                      (("2" (EXPAND "abs" -3) (("2" (GRIND-REALS) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_min_or_max| 0
  (|Closest_min_or_max-1| |nil| 3681747767
   ("" (EXPAND "min_or_max?")
    (("" (SKEEP)
      (("" (SKOSIMP*)
        (("" (CASE "r!1<= FtoR(f!1)")
          (("1" (HIDE 1)
            (("1" (EXPAND* "isMax?" "Closest?")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2" (SKOSIMP*)
                  (("2" (INST -3 "f!2")
                    (("2" (EXPAND "abs" -3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (HIDE 2)
              (("2" (EXPAND* "isMin?" "Closest?")
                (("2" (SPLIT)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (SKOSIMP*)
                    (("2" (INST -3 "f!2")
                      (("2" (EXPAND "abs" -3) (("2" (GRIND-REALS) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_Monotone| 0
  (|Closest_Monotone-1| |nil| 3319474619
   ("" (EXPAND "Monotone?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "Closest?")
          (("" (INST -2 "f2")
            (("" (INST -3 "f1")
              (("" (EXPAND* "abs") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_monotone| 0
  (|Closest_monotone-1| |nil| 3681747846
   ("" (EXPAND "monotone?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "Closest?")
          (("" (INST -2 "f2")
            (("" (INST -3 "f1")
              (("" (EXPAND* "abs") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_RoundedMode| 0
  (|Closest_RoundedMode-1| |nil| 3319474736
   ("" (SKEEP)
    (("" (EXPAND "RoundedMode?")
      (("" (SPLIT)
        (("1" (REWRITE "Closest_Total") NIL NIL)
         ("2" (REWRITE "Closest_Compatible") NIL NIL)
         ("3" (REWRITE "Closest_MinOrMax") NIL NIL)
         ("4" (REWRITE "Closest_Monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_rounded_mode| 0
  (|Closest_rounded_mode-1| |nil| 3681744086
   ("" (SKEEP)
    (("" (EXPAND "rounded_mode?")
      (("" (SPLIT 1)
        (("1" (USE "Closest_total") NIL NIL)
         ("2" (USE "Closest_compatible") NIL NIL)
         ("3" (USE "Closest_min_or_max") NIL NIL)
         ("4" (USE "Closest_monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RND_EClosest_isEclosest| 0
  (|RND_EClosest_isEclosest-2| "" 3790102908
   ("" (SKEEP)
    (("" (EXPAND "RND_EClosest")
      (("" (GRIND-REALS)
        (("1" (EXPAND "EvenClosest?")
          (("1" (CASE "Closest?(b)(r, RND_Min(b)(r))")
            (("1" (SPLIT)
              (("1" (PROPAX) NIL NIL)
               ("2" (SKOSIMP*)
                (("2" (LEMMA "Closest_MinOrMax")
                  (("2" (EXPAND "MinOrMax?")
                    (("2" (INST -1 "b" "r" "f!1")
                      (("2" (SPLIT)
                        (("1" (LEMMA "isMin_Unique")
                          (("1" (EXPAND "Unique?")
                            (("1" (INST -1 "b" "r" "f!1" "RND_Min(b)(r)")
                              (("1" (ASSERT)
                                (("1" (REWRITE "RND_Min_isMin") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "Closest?" -2)
                          (("2" (INST -2 "RND_Min(b)(r)")
                            (("2" (FLIP-INEQ -2)
                              (("2"
                                (CASE-REPLACE
                                 "FtoR(f!1) = FtoR(RND_Max(b)(r))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (LEMMA "isMax_Unique")
                                  (("2" (EXPAND "Unique?")
                                    (("2"
                                      (INST -1 "b" "r" "f!1" "RND_Max(b)(r)")
                                      (("2" (ASSERT)
                                        (("2" (REWRITE "RND_Max_isMax") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                  (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                    (("2" (FLATTEN)
                      (("2" (SKOSIMP*)
                        (("2" (CASE "FtoR(f!1) <= r")
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 1)
          (("2" (EXPAND "EvenClosest?")
            (("2" (CASE "Closest?(b)(r, RND_Max(b)(r))")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2" (SKOSIMP*)
                  (("2" (LEMMA "Closest_MinOrMax")
                    (("2" (EXPAND "MinOrMax?")
                      (("2" (INST -1 "b" "r" "f!1")
                        (("2" (SPLIT)
                          (("1" (EXPAND "Closest?" -2)
                            (("1" (INST -2 "RND_Max(b)(r)")
                              (("1" (FLIP-INEQ -2)
                                (("1"
                                  (CASE-REPLACE
                                   "FtoR(f!1) = FtoR(RND_Min(b)(r))")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (LEMMA "isMin_Unique")
                                    (("2" (EXPAND "Unique?")
                                      (("2"
                                        (INST -1 "b" "r" "f!1" "RND_Min(b)(r)")
                                        (("2" (ASSERT)
                                          (("2" (REWRITE "RND_Min_isMin") NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "isMax_Unique")
                            (("2" (EXPAND "Unique?")
                              (("2" (INST -1 "b" "r" "f!1" "RND_Max(b)(r)")
                                (("2" (ASSERT)
                                  (("2" (REWRITE "RND_Max_isMax") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                  (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                    (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                      (("2" (FLATTEN)
                        (("2" (SKOSIMP*)
                          (("2" (CASE "FtoR(f!1) <= r")
                            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL)
                             ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (EXPAND "EvenClosest?")
          (("3" (SPLIT)
            (("1" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
              (("1" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                (("1" (EXPAND* "isMin?" "isMax?" "Closest?")
                  (("1" (FLATTEN)
                    (("1" (SKOSIMP*)
                      (("1" (CASE "FtoR(f!1) <= r")
                        (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)
                         ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (LEMMA "MaxSuccMin")
                (("2" (LEMMA "OddFsuccEven")
                  (("2" (INST -2 "b" "RND_Min(b)(r)" "RND_Max(b)(r)" "r")
                    (("2" (SPLIT)
                      (("1" (INST -2 "b" "RND_Min(b)(r)")
                        (("1" (SPLIT -2)
                          (("1"
                            (CASE-REPLACE
                             "Fnormalize(b)(RND_Max(b)(r))=RND_Max(b)(r)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (REWRITE "FcanonicUnique" :SUBST ("b" "b"))
                              NIL NIL))
                            NIL)
                           ("2"
                            (LEMMA "odd_or_even_int" :SUBST
                             ("x" "Fnum(RND_Min(b)(r))"))
                            (("2" (ASSERT) NIL NIL)) NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL)
                       ("3" (REWRITE "RND_Max_isMax") NIL NIL)
                       ("4" (REWRITE "RND_Min_isMin") NIL NIL)
                       ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 2)
          (("4" (EXPAND "EvenClosest?")
            (("4" (CASE "Closest?(b)(r, RND_Min(b)(r))")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2" (SKOSIMP*)
                  (("2" (LEMMA "Closest_MinOrMax")
                    (("2" (EXPAND "MinOrMax?")
                      (("2" (INST -1 "b" "r" "f!1")
                        (("2" (SPLIT)
                          (("1" (LEMMA "isMin_Unique")
                            (("1" (EXPAND "Unique?")
                              (("1" (INST -1 "b" "r" "f!1" "RND_Min(b)(r)")
                                (("1" (ASSERT)
                                  (("1" (REWRITE "RND_Min_isMin") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "isMax_Unique")
                            (("2" (EXPAND "Unique?")
                              (("2" (INST -1 "b" "r" "f!1" "RND_Max(b)(r)")
                                (("2" (ASSERT)
                                  (("2" (REWRITE "RND_Max_isMax") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                  (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                    (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                      (("2" (FLATTEN)
                        (("2" (SKOSIMP*)
                          (("2" (CASE "FtoR(f!1) <= r")
                            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL)
                             ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (FLIP-INEQ 2)
          (("5" (EXPAND "EvenClosest?")
            (("5" (CASE "Closest?(b)(r, RND_Min(b)(r))")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2"
                  (CASE-REPLACE "Fnormalize(b)(RND_Min(b)(r))=RND_Min(b)(r)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REWRITE "FcanonicUnique" :SUBST ("b" "b")) NIL NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                  (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                    (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                      (("2" (FLATTEN)
                        (("2" (SKOSIMP*)
                          (("2" (CASE "FtoR(f!1) <= r")
                            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL)
                             ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|RND_EClosest_isEclosest-1| |nil| 3319900439
   ("" (SKEEP)
    (("" (EXPAND "RND_EClosest")
      (("" (GRIND-REALS)
        (("1" (EXPAND "EvenClosest?")
          (("1" (CASE "Closest?(b)(r, RND_Min(b)(r))")
            (("1" (SPLIT)
              (("1" (PROPAX) NIL NIL)
               ("2" (SKOSIMP*)
                (("2" (LEMMA "Closest_MinOrMax")
                  (("2" (EXPAND "MinOrMax?")
                    (("2" (INST -1 "b" "r" "f!1")
                      (("2" (SPLIT)
                        (("1" (LEMMA "isMin_Unique")
                          (("1" (EXPAND "Unique?")
                            (("1" (INST -1 "b" "r" "f!1" "RND_Min(b)(r)")
                              (("1" (ASSERT)
                                (("1" (REWRITE "RND_Min_isMin") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "Closest?" -2)
                          (("2" (INST -2 "RND_Min(b)(r)")
                            (("2" (FLIP-INEQ -2)
                              (("2"
                                (CASE-REPLACE
                                 "FtoR(f!1) = FtoR(RND_Max(b)(r))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (LEMMA "isMax_Unique")
                                  (("2" (EXPAND "Unique?")
                                    (("2"
                                      (INST -1 "b" "r" "f!1" "RND_Max(b)(r)")
                                      (("1" (ASSERT)
                                        (("1" (REWRITE "RND_Max_isMax") NIL
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "FcanonicBounded") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                  (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                    (("2" (FLATTEN)
                      (("2" (SKOSIMP*)
                        (("2" (CASE "FtoR(f!1) <= r")
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (REWRITE "FcanonicBounded") NIL NIL))
            NIL))
          NIL)
         ("2" (HIDE 1)
          (("2" (EXPAND "EvenClosest?")
            (("2" (CASE "Closest?(b)(r, RND_Max(b)(r))")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2" (SKOSIMP*)
                  (("2" (LEMMA "Closest_MinOrMax")
                    (("2" (EXPAND "MinOrMax?")
                      (("2" (INST -1 "b" "r" "f!1")
                        (("2" (SPLIT)
                          (("1" (EXPAND "Closest?" -2)
                            (("1" (INST -2 "RND_Max(b)(r)")
                              (("1" (FLIP-INEQ -2)
                                (("1"
                                  (CASE-REPLACE
                                   "FtoR(f!1) = FtoR(RND_Min(b)(r))")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (LEMMA "isMin_Unique")
                                    (("2" (EXPAND "Unique?")
                                      (("2"
                                        (INST -1 "b" "r" "f!1" "RND_Min(b)(r)")
                                        (("1" (ASSERT)
                                          (("1" (REWRITE "RND_Min_isMin") NIL
                                            NIL))
                                          NIL)
                                         ("2" (REWRITE "FcanonicBounded") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "isMax_Unique")
                            (("2" (EXPAND "Unique?")
                              (("2" (INST -1 "b" "r" "f!1" "RND_Max(b)(r)")
                                (("2" (ASSERT)
                                  (("2" (REWRITE "RND_Max_isMax") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                  (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                    (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                      (("2" (FLATTEN)
                        (("2" (SKOSIMP*)
                          (("2" (CASE "FtoR(f!1) <= r")
                            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL)
                             ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (REWRITE "FcanonicBounded") NIL NIL))
              NIL))
            NIL))
          NIL)
         ("3" (EXPAND "EvenClosest?")
          (("3" (SPLIT)
            (("1" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
              (("1" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                (("1" (EXPAND* "isMin?" "isMax?" "Closest?")
                  (("1" (FLATTEN)
                    (("1" (SKOSIMP*)
                      (("1" (CASE "FtoR(f!1) <= r")
                        (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)
                         ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (LEMMA "MaxSuccMin")
                (("2" (LEMMA "OddFsuccEven")
                  (("2" (INST -2 "b" "RND_Min(b)(r)" "RND_Max(b)(r)" "r")
                    (("2" (SPLIT)
                      (("1" (INST -2 "b" "RND_Min(b)(r)")
                        (("1" (SPLIT -2)
                          (("1"
                            (CASE-REPLACE
                             "Fnormalize(b)(RND_Max(b)(r))=RND_Max(b)(r)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (REWRITE "FcanonicUnique" :SUBST ("b" "b"))
                              NIL NIL))
                            NIL)
                           ("2"
                            (LEMMA "odd_or_even_int" :SUBST
                             ("x" "Fnum(RND_Min(b)(r))"))
                            (("2" (ASSERT) NIL NIL)) NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL)
                       ("3" (REWRITE "RND_Max_isMax") NIL NIL)
                       ("4" (REWRITE "RND_Min_isMin") NIL NIL)
                       ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 2)
          (("4" (EXPAND "EvenClosest?")
            (("4" (CASE "Closest?(b)(r, RND_Min(b)(r))")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2" (SKOSIMP*)
                  (("2" (LEMMA "Closest_MinOrMax")
                    (("2" (EXPAND "MinOrMax?")
                      (("2" (INST -1 "b" "r" "f!1")
                        (("2" (SPLIT)
                          (("1" (LEMMA "isMin_Unique")
                            (("1" (EXPAND "Unique?")
                              (("1" (INST -1 "b" "r" "f!1" "RND_Min(b)(r)")
                                (("1" (ASSERT)
                                  (("1" (REWRITE "RND_Min_isMin") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "isMax_Unique")
                            (("2" (EXPAND "Unique?")
                              (("2" (INST -1 "b" "r" "f!1" "RND_Max(b)(r)")
                                (("1" (ASSERT)
                                  (("1" (REWRITE "RND_Max_isMax") NIL NIL))
                                  NIL)
                                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                  (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                    (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                      (("2" (FLATTEN)
                        (("2" (SKOSIMP*)
                          (("2" (CASE "FtoR(f!1) <= r")
                            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL)
                             ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (REWRITE "FcanonicBounded") NIL NIL))
              NIL))
            NIL))
          NIL)
         ("5" (FLIP-INEQ 2)
          (("5" (EXPAND "EvenClosest?")
            (("5" (CASE "Closest?(b)(r, RND_Min(b)(r))")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL)
                 ("2"
                  (CASE-REPLACE "Fnormalize(b)(RND_Min(b)(r))=RND_Min(b)(r)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REWRITE "FcanonicUnique" :SUBST ("b" "b")) NIL NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (LEMMA "RND_Min_isMin" :SUBST ("b" "b" "r" "r"))
                  (("2" (LEMMA "RND_Max_isMax" :SUBST ("b" "b" "r" "r"))
                    (("2" (EXPAND* "isMin?" "isMax?" "Closest?")
                      (("2" (FLATTEN)
                        (("2" (SKOSIMP*)
                          (("2" (CASE "FtoR(f!1) <= r")
                            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                              NIL)
                             ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (REWRITE "FcanonicBounded") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_bounded_exact_rep_TCC1| 0
  (|Closest_bounded_exact_rep_TCC1-1| |nil| 3698163284
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|hat_02n| FORMULA-DECL NIL |power_series| |series|)) NIL
   (|Closest_bounded_exact_rep| SUBTYPE "float.exp"
    "{i: integers.int | booleans.OR(float.radix /= 0, reals.>=(i, 0))}")))
 (|Closest_bounded_exact_rep| 0
  (|Closest_bounded_exact_rep-1| |nil| 3698163434
   ("" (SKEEP*)
    (("" (EXPAND "exactly_representable")
      (("" (TYPEPRED "RtoF")
        (("" (EXPAND "Closest?")
          (("" (INST -2 "x")
            (("" (INST -2 "float_pair(num,exp)")
              (("1" (HIDE -1)
                (("1" (EXPAND "FtoR" -1 2)
                  (("1" (EXPAND "float_pair")
                    (("1" (REPLACE -4 -1 :DIR RL)
                      (("1" (ASSERT)
                        (("1" (EXPAND "abs" -1 2) (("1" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "Fbounded?")
                (("2" (EXPAND "float_pair") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ClosestRtoF_exact_rep_conv| 0
  (|ClosestRtoF_exact_rep_conv-1| |nil| 3698165766
   ("" (SKEEP*)
    (("" (EXPAND "exact_rep_conservation")
      (("" (SKEEP*)
        (("" (USE "Closest_bounded_exact_rep")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (INST 1 "Fnum(f)" "n+Fexp(f)")
                (("" (EXPAND "FtoR")
                  (("" (TYPEPRED "f")
                    (("" (EXPAND "Fbounded?")
                      (("" (FLATTEN)
                        (("" (ASSERT)
                          (("" (USE "expt_plus") (("" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Closest_int_exact_rep| 0
  (|Closest_int_exact_rep-1| |nil| 3698097844
   ("" (SKEEP*)
    (("" (CASE "abs(z)=vNum(b)")
      (("1" (EXPAND "exactly_representable")
        (("1" (TYPEPRED "RtoF")
          (("1" (INST -2 "z")
            (("1" (EXPAND "Closest?")
              (("1" (EXPAND "abs" -3)
                (("1" (LIFT-IF -3)
                  (("1" (SPLIT -3)
                    (("1" (FLATTEN)
                      (("1" (INST -4 "float_pair(-vNum(b)/radix,1)")
                        (("1" (GRIND-REALS -4) NIL NIL)
                         ("2" (EXPAND "Fbounded?")
                          (("2" (SPLIT 1)
                            (("1" (EXPAND "float_pair")
                              (("1" (EXPAND "abs")
                                (("1" (LIFT-IF 1)
                                  (("1" (SPLIT 1)
                                    (("1" (FLATTEN)
                                      (("1"
                                        (CASE
                                            "-(-vNum(b) / radix) = vNum(b) / radix")
                                        (("1" (REPLACE -1 :HIDE? T)
                                          (("1" (TYPEPRED "radix")
                                            (("1" (LEMMA "lt_div_lt_pos1")
                                              (("1"
                                                (INST -1 "vNum(b)" "1" "radix"
                                                 "vNum(b)")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (GRIND-REALS 2) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "float_pair")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "vNum")
                          (("3"
                            (CASE
                                "-radix ^ Prec(b) / radix = - (radix^Prec(b)/radix)")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (LEMMA "expt_x1")
                                (("1"
                                  (CASE
                                      "radix ^ Prec(b) / radix = radix ^ (Prec(b)-1)")
                                  (("1" (REPLACE -1 :HIDE? T)
                                    (("1" (SUBTYPE-TCC) NIL NIL)) NIL)
                                   ("2" (LEMMA "expt_div")
                                    (("2" (INST -1 "Prec(b)" "1" "radix")
                                      (("2" (INST -2 "radix")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (REPLACE -1 :HIDE? T)
                        (("2" (INST -2 "float_pair(vNum(b)/radix,1)")
                          (("1" (GRIND-REALS -2) NIL NIL)
                           ("2" (EXPAND "float_pair")
                            (("2" (EXPAND "Fbounded?")
                              (("2" (SPLIT 1)
                                (("1"
                                  (CASE
                                      "abs(vNum(b) / radix) = vNum(b) / radix")
                                  (("1" (REPLACE -1 :HIDE? T)
                                    (("1" (LEMMA "lt_div_lt_pos1")
                                      (("1"
                                        (INST -1 "vNum(b)" "1" "radix"
                                         "vNum(b)")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "vNum")
                            (("3"
                              (CASE
                                  "radix ^ Prec(b) / radix = radix ^ (Prec(b)-1)")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (SUBTYPE-TCC) NIL NIL)) NIL)
                               ("2" (LEMMA "expt_div")
                                (("2" (INST -1 "Prec(b)" "1" "radix")
                                  (("2" (LEMMA "expt_x1")
                                    (("2" (INST -1 "radix")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (USE "Closest_bounded_exact_rep")
        (("2" (ASSERT)
          (("2" (HIDE 3)
            (("2" (INST 1 "z" "0") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ClosestRNDF_FtoR_inverse| 0
  (|ClosestRNDF_FtoR_inverse-1| |nil| 3698149233
   ("" (SKEEP*)
    (("" (EXPAND "FtoR_inverse")
      (("" (SKEEP)
        (("" (CASE "NOT FtoR(RtoF(FtoR(f))) = FtoR(f)")
          (("1" (HIDE 2)
            (("1" (TYPEPRED "RtoF")
              (("1" (TYPEPRED "round")
                (("1" (INST -2 "FtoR(f)")
                  (("1" (INST? -1 :WHERE -2)
                    (("1" (ASSERT)
                      (("1" (EXPAND "Closest?")
                        (("1" (INST -1 "f")
                          (("1" (ASSERT)
                            (("1" (EXPAND "abs" -1 2) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (USE "FcanonicUnique")
            (("2" (ASSERT)
              (("2" (HIDE-ALL-BUT 1)
                (("2" (TYPEPRED "RtoF") (("2" (INST? -2) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_Total| 0
  (|EvenClosest_Total-2| "" 3790102917
   ("" (SKEEP)
    (("" (EXPAND "Total?")
      (("" (SKEEP)
        (("" (INST 1 "RND_EClosest(b)(r)")
          (("" (REWRITE "RND_EClosest_isEclosest") NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|EvenClosest_Total-1| |nil| 3319540196
   ("" (SKEEP)
    (("" (EXPAND "Total?")
      (("" (SKEEP)
        (("" (INST 1 "RND_EClosest(b)(r)")
          (("1" (REWRITE "RND_EClosest_isEclosest") NIL NIL)
           ("2" (REWRITE "FcanonicBounded") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_total| 0
  (|EvenClosest_total-1| |nil| 3682165501
   ("" (SKEEP)
    (("" (EXPAND "total?")
      (("" (USE "EvenClosest_Total")
        (("" (EXPAND "Total?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_Compatible| 0
  (|EvenClosest_Compatible-1| |nil| 3319798879
   ("" (LEMMA "Closest_Compatible")
    (("" (EXPAND "Compatible?")
      (("" (SKEEP)
        (("" (SKEEP)
          (("" (EXPAND "EvenClosest?")
            (("" (SPLIT)
              (("1" (FLATTEN)
                (("1" (INST -1 "b" "r1" "r2" "f1" "f2")
                  (("1" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (SPLIT -3)
                  (("1" (CASE-REPLACE "Fnormalize(b)(f2)=Fnormalize(b)(f1)")
                    (("1" (REWRITE "FcanonicUnique" :SUBST ("b" "b")) NIL NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (INST -1 "f!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_compatible| 0
  (|EvenClosest_compatible-1| |nil| 3682165663
   ("" (LEMMA "EvenClosest_Compatible")
    (("" (EXPAND "compatible?")
      (("" (EXPAND "Compatible?")
        (("" (SKEEP)
          (("" (INST?)
            (("" (SKEEP)
              (("" (INST? -1 :WHERE 1)
                (("" (INST? -1 :WHERE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_MinOrMax| 0
  (|EvenClosest_MinOrMax-1| |nil| 3319799137
   ("" (LEMMA "Closest_MinOrMax")
    (("" (EXPAND "MinOrMax?")
      (("" (SKEEP)
        (("" (SKEEP)
          (("" (EXPAND "EvenClosest?")
            (("" (FLATTEN)
              (("" (INST -1 "b" "r" "f") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_min_or_max| 0
  (|EvenClosest_min_or_max-1| |nil| 3682165832
   ("" (SKEEP)
    (("" (EXPAND "min_or_max?")
      (("" (USE "EvenClosest_MinOrMax")
        (("" (EXPAND "MinOrMax?") (("" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_Monotone| 0
  (|EvenClosest_Monotone-1| |nil| 3319799211
   ("" (LEMMA "Closest_Monotone")
    (("" (EXPAND "Monotone?")
      (("" (SKEEP)
        (("" (SKEEP)
          (("" (EXPAND "EvenClosest?")
            (("" (FLATTEN)
              (("" (INST -1 "b" "r1" "r2" "f1" "f2") (("" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_monotone| 0
  (|EvenClosest_monotone-1| |nil| 3682166058
   ("" (SKEEP)
    (("" (EXPAND "monotone?")
      (("" (USE "EvenClosest_Monotone")
        (("" (EXPAND "Monotone?")
          (("" (SKEEP)
            (("" (INST? -1 :WHERE 1)
              (("" (INST? -1 :WHERE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_RoundedMode| 0
  (|EvenClosest_RoundedMode-1| |nil| 3319799281
   ("" (SKEEP)
    (("" (EXPAND "RoundedMode?")
      (("" (SPLIT)
        (("1" (REWRITE "EvenClosest_Total") NIL NIL)
         ("2" (REWRITE "EvenClosest_Compatible") NIL NIL)
         ("3" (REWRITE "EvenClosest_MinOrMax") NIL NIL)
         ("4" (REWRITE "EvenClosest_Monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_rounded_mode| 0
  (|EvenClosest_rounded_mode-1| |nil| 3682165606
   ("" (SKEEP)
    (("" (EXPAND "rounded_mode?")
      (("" (SPLIT 1)
        (("1" (USE "EvenClosest_total") NIL NIL)
         ("2" (USE "EvenClosest_compatible") NIL NIL)
         ("3" (USE "EvenClosest_min_or_max") NIL NIL)
         ("4" (USE "EvenClosest_monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|EvenClosest_Unique| 0
  (|EvenClosest_Unique-1| |nil| 3319801122
   ("" (EXPAND "Unique?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (LEMMA "EvenClosest_MinOrMax")
          (("" (EXPAND "MinOrMax?")
            (("" (INST-CP -1 "b" "r" "f1")
              (("" (SPLIT)
                (("1" (INST -2 "b" "r" "f2")
                  (("1" (SPLIT)
                    (("1" (LEMMA "isMin_Unique")
                      (("1" (EXPAND "Unique?")
                        (("1" (INST -1 "b" "r" "f1" "f2")
                          (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "EvenClosest?")
                      (("2" (FLATTEN)
                        (("2" (SPLIT)
                          (("1" (SPLIT)
                            (("1" (LEMMA "MaxSuccMin")
                              (("1"
                                (INST -1 "b" "Fnormalize(b)(f1)"
                                 "Fnormalize(b)(f2)" "r")
                                (("1" (SPLIT)
                                  (("1" (CASE "odd?(Fnum(Fnormalize(b)(f2)))")
                                    (("1" (LEMMA "odd_iff_not_even")
                                      (("1" (INST -1 "Fnum(Fnormalize(b)(f2))")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (REWRITE -1)
                                      (("2" (REWRITE "EvenFsuccOdd") NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3" (LEMMA "isMax_Compatible")
                                    (("3" (EXPAND "Compatible?")
                                      (("3"
                                        (INST -1 "b" "r" "r" "f2"
                                         "Fnormalize(b)(f2)")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("4" (LEMMA "isMin_Compatible")
                                    (("4" (EXPAND "Compatible?")
                                      (("4"
                                        (INST -1 "b" "r" "r" "f1"
                                         "Fnormalize(b)(f1)")
                                        (("4" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("5" (ASSERT) NIL NIL)
                                   ("6" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -1 "f1") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (INST -1 "f2") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (PROPAX) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (INST -2 "b" "r" "f2")
                  (("2" (SPLIT)
                    (("1" (EXPAND "EvenClosest?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1" (SPLIT)
                            (("1" (LEMMA "MaxSuccMin")
                              (("1"
                                (INST -1 "b" "Fnormalize(b)(f2)"
                                 "Fnormalize(b)(f1)" "r")
                                (("1" (SPLIT)
                                  (("1" (CASE "odd?(Fnum(Fnormalize(b)(f1)))")
                                    (("1" (LEMMA "odd_iff_not_even")
                                      (("1" (INST -1 "Fnum(Fnormalize(b)(f1))")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (COPY -2)
                                      (("2" (REWRITE -2)
                                        (("2" (REWRITE "EvenFsuccOdd") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3" (LEMMA "isMax_Compatible")
                                    (("3" (EXPAND "Compatible?")
                                      (("3"
                                        (INST -1 "b" "r" "r" "f1"
                                         "Fnormalize(b)(f1)")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("4" (LEMMA "isMin_Compatible")
                                    (("4" (EXPAND "Compatible?")
                                      (("4"
                                        (INST -1 "b" "r" "r" "f2"
                                         "Fnormalize(b)(f2)")
                                        (("4" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("5" (ASSERT) NIL NIL)
                                   ("6" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -1 "f1") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (INST -1 "f2") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "isMax_Unique")
                      (("2" (EXPAND "Unique?")
                        (("2" (INST -1 "b" "r" "f1" "f2")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("3" (PROPAX) NIL NIL))
                    NIL))
                  NIL)
                 ("3" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|AFZClosest_Total| 0
  (|AFZClosest_Total-1| |nil| 3321037213
   ("" (LEMMA "isMin_Total")
    (("" (LEMMA "isMax_Total")
      (("" (EXPAND "Total?")
        (("" (SKEEP)
          (("" (SKEEP)
            (("" (INST -1 "b" "r")
              (("" (INST -2 "b" "r")
                (("" (SKOSIMP*)
                  (("" (CASE "abs(FtoR(f!1)-r)<abs(FtoR(f!2)-r)")
                    (("1" (INST 1 "f!1")
                      (("1" (EXPAND "AFZClosest?")
                        (("1" (CASE "Closest?(b)(r, f!1)")
                          (("1" (SPLIT)
                            (("1" (PROPAX) NIL NIL)
                             ("2" (FLATTEN)
                              (("2" (HIDE 1)
                                (("2" (SKOSIMP*)
                                  (("2" (LEMMA "Closest_MinOrMax")
                                    (("2" (EXPAND "MinOrMax?")
                                      (("2" (INST -1 "b" "r" "f!3")
                                        (("2" (SPLIT)
                                          (("1" (EXPAND "Closest?" -2)
                                            (("1" (INST -2 "f!1")
                                              (("1" (FLIP-INEQ -2)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "FtoR(f!3)=FtoR(f!2)")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (LEMMA "isMin_Unique")
                                                    (("2" (EXPAND "Unique?")
                                                      (("2"
                                                        (INST -1 "b" "r" "f!3"
                                                         "f!2")
                                                        (("2" (SPLIT)
                                                          (("1" (PROPAX) NIL
                                                            NIL)
                                                           ("2" (PROPAX) NIL
                                                            NIL)
                                                           ("3" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (LEMMA "isMax_Unique")
                                            (("2" (EXPAND "Unique?")
                                              (("2"
                                                (INST -1 "b" "r" "f!3" "f!1")
                                                (("2" (SPLIT)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL)
                                                   ("3" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (LEMMA "LeMinMaxClosest")
                              (("2" (INST -1 "b" "f!1" "f!2" "f!1" "r")
                                (("2" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (GRIND-REALS) NIL NIL)
                                   ("3" (PROPAX) NIL NIL)
                                   ("4" (ASSERT) NIL NIL)
                                   ("5" (PROPAX) NIL NIL)
                                   ("6" (ASSERT) NIL NIL)
                                   ("7" (ASSERT) NIL NIL)
                                   ("8" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLIP-INEQ 1)
                      (("2" (SPLIT-INEQ -1)
                        (("1" (CASE "0 <= r")
                          (("1" (INST 1 "f!1")
                            (("1" (EXPAND "AFZClosest?")
                              (("1" (SPLIT)
                                (("1" (LEMMA "LeMinMaxClosest")
                                  (("1" (INST -1 "b" "f!1" "f!2" "f!1" "r")
                                    (("1" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (ASSERT) NIL NIL)
                                       ("3" (PROPAX) NIL NIL)
                                       ("4" (ASSERT) NIL NIL)
                                       ("5" (PROPAX) NIL NIL)
                                       ("6" (ASSERT) NIL NIL)
                                       ("7" (ASSERT) NIL NIL)
                                       ("8" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "isMax?")
                                    (("2" (FLATTEN)
                                      (("2" (EXPAND "abs" 1)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLIP-INEQ 1)
                            (("2" (INST 1 "f!2")
                              (("2" (EXPAND "AFZClosest?")
                                (("2" (SPLIT)
                                  (("1" (LEMMA "LeMinMaxClosest")
                                    (("1" (INST -1 "b" "f!2" "f!2" "f!1" "r")
                                      (("1" (SPLIT)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (ASSERT) NIL NIL)
                                         ("3" (PROPAX) NIL NIL)
                                         ("4" (ASSERT) NIL NIL)
                                         ("5" (PROPAX) NIL NIL)
                                         ("6" (ASSERT) NIL NIL)
                                         ("7" (ASSERT) NIL NIL)
                                         ("8" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (EXPAND "isMin?")
                                      (("2" (FLATTEN)
                                        (("2" (EXPAND "abs" 1)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CASE "abs(FtoR(f!2) - r) < abs(FtoR(f!1) - r)")
                          (("1" (HIDE -2 1)
                            (("1" (INST 1 "f!2")
                              (("1" (EXPAND "AFZClosest?")
                                (("1" (CASE "Closest?(b)(r, f!2)")
                                  (("1" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (FLATTEN)
                                      (("2" (HIDE 1)
                                        (("2" (SKOSIMP*)
                                          (("2" (LEMMA "Closest_MinOrMax")
                                            (("2" (EXPAND "MinOrMax?")
                                              (("2" (INST -1 "b" "r" "f!3")
                                                (("2" (SPLIT)
                                                  (("1" (LEMMA "isMin_Unique")
                                                    (("1" (EXPAND "Unique?")
                                                      (("1"
                                                        (INST -1 "b" "r" "f!3"
                                                         "f!2")
                                                        (("1" (SPLIT)
                                                          (("1" (PROPAX) NIL
                                                            NIL)
                                                           ("2" (PROPAX) NIL
                                                            NIL)
                                                           ("3" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "Closest?" -2)
                                                    (("2" (INST -2 "f!2")
                                                      (("2" (FLIP-INEQ -2)
                                                        (("2"
                                                          (CASE-REPLACE
                                                           "FtoR(f!3)=FtoR(f!1)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2"
                                                            (LEMMA
                                                             "isMax_Unique")
                                                            (("2"
                                                              (EXPAND
                                                               "Unique?")
                                                              (("2"
                                                                (INST -1 "b"
                                                                 "r" "f!3"
                                                                 "f!1")
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (PROPAX)
                                                                    NIL NIL)
                                                                   ("3"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (LEMMA "LeMinMaxClosest")
                                    (("2" (INST -1 "b" "f!2" "f!2" "f!1" "r")
                                      (("2" (SPLIT)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (ASSERT) NIL NIL)
                                         ("3" (PROPAX) NIL NIL)
                                         ("4" (ASSERT) NIL NIL)
                                         ("5" (PROPAX) NIL NIL)
                                         ("6" (ASSERT) NIL NIL)
                                         ("7" (ASSERT) NIL NIL)
                                         ("8" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|AFZClosest_Compatible| 0
  (|AFZClosest_Compatible-2| "" 3790102925
   ("" (SKEEP)
    (("" (LEMMA "Closest_Compatible")
      (("" (INST -1 "b")
        (("" (EXPAND "Compatible?")
          (("" (SKEEP)
            (("" (EXPAND "AFZClosest?")
              (("" (FLATTEN)
                (("" (SPLIT 1)
                  (("1" (INST -1 "r1" "r2" "f1" "f2")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (SPLIT)
                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE 1)
                        (("2" (SKOSIMP*)
                          (("2" (REWRITE -6 :DIR RL)
                            (("2" (REWRITE -1) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|AFZClosest_Compatible-1| |nil| 3321035712
   ("" (SKEEP)
    (("" (LEMMA "Closest_Compatible")
      (("" (INST -1 "b")
        (("" (EXPAND "Compatible?")
          (("" (SKEEP)
            (("" (EXPAND "AFZClosest?")
              (("" (FLATTEN)
                (("" (SPLIT 1)
                  (("1" (INST -1 "r1" "r2" "f1" "f2")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (SPLIT)
                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (FLATTEN)
                      (("2" (HIDE 1)
                        (("2" (SKOSIMP*)
                          (("2" (REWRITE -6 :DIR RL)
                            (("2" (REWRITE -6) (("2" (REWRITE -1) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|AFZClosest_MinOrMax| 0
  (|AFZClosest_MinOrMax-1| |nil| 3321035974
   ("" (LEMMA "Closest_MinOrMax")
    (("" (EXPAND "MinOrMax?")
      (("" (SKEEP)
        (("" (SKOSIMP*)
          (("" (INST -1 "b" "r!1" "f!1")
            (("" (SPLIT)
              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
               ("3" (EXPAND "AFZClosest?") (("3" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|AFZClosest_Monotone| 0
  (|AFZClosest_Monotone-1| |nil| 3321036075
   ("" (LEMMA "Closest_Monotone")
    (("" (EXPAND "Monotone?")
      (("" (SKEEP)
        (("" (SKEEP)
          (("" (EXPAND "AFZClosest?")
            (("" (FLATTEN)
              (("" (INST -1 "b" "r1" "r2" "f1" "f2")
                (("" (SPLIT)
                  (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                   ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|AFZClosest_RoundedMode| 0
  (|AFZClosest_RoundedMode-1| |nil| 3321036146
   ("" (SKEEP)
    (("" (EXPAND "RoundedMode?")
      (("" (SPLIT)
        (("1" (REWRITE "AFZClosest_Total") NIL NIL)
         ("2" (REWRITE "AFZClosest_Compatible") NIL NIL)
         ("3" (REWRITE "AFZClosest_MinOrMax") NIL NIL)
         ("4" (REWRITE "AFZClosest_Monotone") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|AFZClosest_Unique| 0
  (|AFZClosest_Unique-1| |nil| 3321036197
   ("" (EXPAND "Unique?")
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (EXPAND "AFZClosest?")
          (("" (FLATTEN)
            (("" (SPLIT)
              (("1" (SPLIT)
                (("1" (LEMMA "Closest_MinOrMax")
                  (("1" (EXPAND "MinOrMax?")
                    (("1" (INST-CP -1 "b" "r" "f1")
                      (("1" (INST -1 "b" "r" "f2")
                        (("1" (SPLIT)
                          (("1" (SPLIT)
                            (("1" (LEMMA "isMin_Unique")
                              (("1" (EXPAND "Unique?")
                                (("1" (ASSERT)
                                  (("1" (INST -1 "b" "r" "f1" "f2")
                                    (("1" (SPLIT)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (PROPAX) NIL NIL)
                                       ("3" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE "0<= r")
                              (("1" (CASE "0<= FtoR(f1)")
                                (("1" (CASE "0<= FtoR(f2)")
                                  (("1" (EXPAND "abs")
                                    (("1" (GRIND-REALS)
                                      (("1" (EXPAND* "isMin?" "isMax?")
                                        (("1" (FLATTEN)
                                          (("1" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (REWRITE "RleRoundedR0" :SUBST
                                     ("b" "b" "P" "isMin?" "r" "r" "f" "f2"))
                                    (("2" (REWRITE "isMin_RoundedMode") NIL
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (REWRITE "RleRoundedR0" :SUBST
                                   ("b" "b" "P" "isMax?" "r" "r" "f" "f1"))
                                  (("2" (REWRITE "isMax_RoundedMode") NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (FLIP-INEQ 1)
                                (("2" (CASE "FtoR(f2) <= 0")
                                  (("1" (CASE "FtoR(f1) <= 0")
                                    (("1" (EXPAND "abs")
                                      (("1" (GRIND-REALS)
                                        (("1" (EXPAND* "isMin?" "isMax?")
                                          (("1" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (REWRITE "RleRoundedLessR0" :SUBST
                                       ("b" "b" "P" "isMax?" "r" "r" "f" "f1"))
                                      (("2" (REWRITE "isMax_RoundedMode") NIL
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (REWRITE "RleRoundedLessR0" :SUBST
                                     ("b" "b" "P" "isMin?" "r" "r" "f" "f2"))
                                    (("2" (REWRITE "isMin_RoundedMode") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (PROPAX) NIL NIL))
                            NIL)
                           ("2" (SPLIT)
                            (("1" (CASE "0<=r")
                              (("1" (CASE "0<=FtoR(f1)")
                                (("1" (CASE "0<=FtoR(f2)")
                                  (("1" (EXPAND "abs")
                                    (("1" (GRIND-REALS)
                                      (("1" (EXPAND* "isMin?" "isMax?")
                                        (("1" (FLATTEN)
                                          (("1" (INST -6 "f1")
                                            (("1" (SPLIT)
                                              (("1" (GRIND-REALS) NIL NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (REWRITE "RleRoundedR0" :SUBST
                                     ("b" "b" "P" "isMax?" "r" "r" "f" "f2"))
                                    (("2" (REWRITE "isMax_RoundedMode") NIL
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2"
                                  (REWRITE "RleRoundedR0" :SUBST
                                   ("b" "b" "P" "isMin?" "r" "r" "f" "f1"))
                                  (("2" (REWRITE "isMin_RoundedMode") NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (FLIP-INEQ 1)
                                (("2" (CASE "FtoR(f2) <= 0")
                                  (("1" (CASE "FtoR(f1) <= 0")
                                    (("1" (EXPAND "abs")
                                      (("1" (GRIND-REALS)
                                        (("1" (EXPAND* "isMin?" "isMax?")
                                          (("1" (FLATTEN)
                                            (("1" (INST -4 "f2")
                                              (("1" (SPLIT)
                                                (("1" (GRIND-REALS) NIL NIL)
                                                 ("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (REWRITE "RleRoundedLessR0" :SUBST
                                       ("b" "b" "P" "isMin?" "r" "r" "f" "f1"))
                                      (("2" (REWRITE "isMin_RoundedMode") NIL
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (REWRITE "RleRoundedLessR0" :SUBST
                                     ("b" "b" "P" "isMax?" "r" "r" "f" "f2"))
                                    (("2" (REWRITE "isMax_RoundedMode") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "isMax_Unique")
                              (("2" (EXPAND "Unique?")
                                (("2" (INST -1 "b" "r" "f1" "f2")
                                  (("2" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (PROPAX) NIL NIL)
                                     ("3" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (PROPAX) NIL NIL))
                            NIL)
                           ("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REWRITE -1) NIL NIL))
                NIL)
               ("2" (REWRITE -1) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RoundedProjectorEq| 0
  (|RoundedProjectorEq-1| |nil| 3319475225
   ("" (SKOSIMP*)
    (("" (EXPAND* "RoundedMode?" "MinOrMax?")
      (("" (FLATTEN)
        (("" (INST -5 "FtoR(f!1)" "p!1")
          (("" (SPLIT)
            (("1" (EXPAND "isMin?")
              (("1" (FLATTEN)
                (("1" (INST -2 "f!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (EXPAND "isMax?")
              (("2" (FLATTEN)
                (("2" (INST -2 "f!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("3" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RoundedProjector| 0
  (|RoundedProjector-1| |nil| 3319475578
   ("" (SKOSIMP*)
    (("" (COPY -2)
      (("" (EXPAND "RoundedMode?" -1)
        (("" (FLATTEN)
          (("" (EXPAND "Total?")
            (("" (INST -1 "FtoR(f!1)")
              (("" (SKOSIMP*)
                (("" (EXPAND "Compatible?")
                  (("" (INST -2 "FtoR(f!1)" "FtoR(f!1)" "f!2" "f!1")
                    (("" (ASSERT)
                      (("" (LEMMA "RoundedProjectorEq")
                        (("" (INST -1 "P!1" "b!1" "f!1" "f!2")
                          (("" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|isMin_Rep| 0
  (|isMin_Rep-1| |nil| 3319971693
   ("" (SKEEP)
    (("" (CASE "Fexp(Fnormalize(b)(f)) <= Fexp(p)")
      (("1" (INST 1 "Fnum(p)")
        (("1" (CASE "FtoR(f) =FtoR(p)")
          (("1" (REWRITE -1)
            (("1" (EXPAND "FtoR") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
           ("2" (LEMMA "FsuccZleEq")
            (("2" (INST -1 "b" "Fnormalize(b)(f)" "p")
              (("2" (SPLIT)
                (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)
                 ("3" (HIDE 2 3)
                  (("3" (EXPAND "isMin?")
                    (("3" (FLATTEN)
                      (("3" (INST -4 "Fsucc(b)(Fnormalize(b)(f))")
                        (("1" (FLIP-INEQ 1)
                          (("1" (SPLIT)
                            (("1" (FLIP-INEQ -1)
                              (("1" (LEMMA "FsuccLt")
                                (("1" (INST -1 "b" "Fnormalize(b)(f)")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FcanonicBounded")
                          (("2" (REWRITE "FsuccCanonic") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (EXPAND "isMin?")
                  (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2"
          (INST 1
           "Fnum(Fnormalize(b)(f))*radix^(Fexp(Fnormalize(b)(f))-Fexp(p))")
          (("1" (REWRITE "FnormalizeCorrect" :DIR RL :SUBST ("b" "b" "p" "f"))
            (("1" (EXPAND "FtoR")
              (("1" (REWRITE "expt_div" :DIR RL) (("1" (FIELD 1) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "^") (("2" (GRIND-REALS) NIL NIL)) NIL)
           ("3" (GRIND-REALS) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RoundedModeRep| 0
  (|RoundedModeRep-1| |nil| 3319911557
   ("" (SKEEP)
    (("" (EXPAND* "RoundedMode?" "MinOrMax?")
      (("" (FLATTEN)
        (("" (INST -4 "FtoR(p)" "f")
          (("" (SPLIT)
            (("1" (LEMMA "isMin_Rep")
              (("1" (INST -1 "b" "f" "p")
                (("1" (SPLIT)
                  (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                   ("3" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "isMin_Rep")
              (("2" (INST -1 "b" "Fopp(f)" "Fopp(p)")
                (("2" (SPLIT)
                  (("1" (SKOSIMP*)
                    (("1" (INST 1 "-m!1")
                      (("1" (EXPAND* "FtoR" "Fopp") (("1" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "FoppCorrect")
                    (("2" (REWRITE "MaxOppMin") NIL NIL)) NIL)
                   ("3" (REWRITE "FoppBounded") NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RoundedModeUlp| 0
  (|RoundedModeUlp-1| |nil| 3319477842
   ("" (SKEEP)
    (("" (EXPAND "RoundedMode?")
      (("" (EXPAND "MinOrMax?")
        (("" (FLATTEN)
          (("" (INST -4 "r" "p")
            (("" (SPLIT)
              (("1" (EXPAND "isMin?")
                (("1" (FLATTEN)
                  (("1" (CASE-REPLACE "abs(FtoR(p) - r)=r-FtoR(p)")
                    (("1" (LEMMA "FloatPlusUlpBounded")
                      (("1" (INST -1 "b" "p")
                        (("1" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST -4 "f!1")
                              (("1" (SPLIT)
                                (("1" (FLIP-INEQ -1)
                                  (("1" (REWRITE -1)
                                    (("1" (HIDE-ALL-BUT 1)
                                      (("1" (EXPAND "Fulp")
                                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE -1)
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (1 -1))
                      (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "isMax?")
                (("2" (FLATTEN)
                  (("2" (CASE-REPLACE "abs(FtoR(p) - r)=FtoR(p)-r")
                    (("1" (LEMMA "FloatMinusUlpBounded")
                      (("1" (INST -1 "b" "p")
                        (("1" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST -4 "f!1")
                              (("1" (SPLIT)
                                (("1" (FLIP-INEQ -1)
                                  (("1" (REWRITE -1)
                                    (("1" (HIDE-ALL-BUT 1)
                                      (("1" (EXPAND "Fulp")
                                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE -1)
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (1 -1))
                      (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|rnd_tozero_is_tozero?_j| 0
  (|rnd_tozero_is_tozero?_j-1| |nil| 3877462011
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (USE "RND_ToZero_ToZero") NIL NIL)
       ("2" (SKEEP)
        (("2" (TYPEPRED "RND_ToZero(b)(x)") (("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|rnd_tozero_is_tozero?_j| SUBTYPE "float.RND_ToZero(float.b)"
    "CanonicRoundingFun(float.b, float.ToZero?(float.b))")))
 (|ulp_monotone| 0
  (|ulp_monotone-1| |nil| 3680964440
   ("" (SKEEP)
    (("" (EXPAND "ulp")
      (("" (EXPAND "ulp")
        (("" (USE "FulpMonotone")
          (("" (SPLIT)
            (("1" (PROPAX) NIL NIL)
             ("2" (HIDE 2)
              (("2" (USE "FtoR_monotonic")
                (("2" (ASSERT)
                  (("2" (HIDE 2)
                    (("2" (EXPAND "RND_ToZero")
                      (("2" (USE "RND_Min_isMin")
                        (("2" (LEMMA "RND_Min_isMin")
                          (("2" (INST -1 "b" "y")
                            (("2" (USE "isMin_Monotone")
                              (("2" (EXPAND "Monotone?")
                                (("2"
                                  (INST -1 "x" "y" "RND_Min(b)(x)"
                                   "RND_Min(b)(y)")
                                  (("2" (ASSERT)
                                    (("2" (USE "FtoR_monotonic")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (LEMMA "RleRoundedR0")
              (("3" (INST -1 "ToZero?" "b" "RND_ToZero(b)(x)" "x")
                (("3" (ASSERT)
                  (("3" (SPLIT)
                    (("1" (USE "rnd_tozero_is_tozero?_j")
                      (("1" (FLATTEN) (("1" (INSTEEP) NIL NIL)) NIL)) NIL)
                     ("2" (USE "ToZero_RoundedMode") NIL NIL)
                     ("3" (TYPEPRED "RND_ToZero(b)(x)")
                      (("3" (EXPAND "Fcanonic?")
                        (("3" (EXPAND "Fnormal?")
                          (("3" (EXPAND "Fsubnormal?") (("3" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (TYPEPRED "RND_ToZero(b)(y)")
              (("4" (EXPAND "Fcanonic?")
                (("4" (EXPAND "Fnormal?")
                  (("4" (EXPAND "Fsubnormal?") (("4" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("5" (TYPEPRED "RND_ToZero(b)(x)")
              (("5" (EXPAND "Fcanonic?")
                (("5" (EXPAND "Fnormal?")
                  (("5" (EXPAND "Fsubnormal?") (("5" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ClosestUlp| 0
  (|ClosestUlp-1| |nil| 3319816797
   (""
    (CASE
        "FORALL (b: Format, p: float, r: real): Fbounded?(b)(p) => 0 <= r => Closest?(b)(r, p) => abs(FtoR(p) - r) <= Fulp(b)(p) / 2")
    (("1" (SKEEP)
      (("1" (CASE "0 <= r")
        (("1" (INST -2 "b" "p" "r") (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (INST -1 "b" "Fopp(p)" "-r")
          (("2" (SPLIT)
            (("1" (REWRITE "FulpOpp")
              (("1" (CASE-REPLACE "abs(FtoR(p) - r)=abs(FtoR(Fopp(p)) - -r)")
                (("1" (REWRITE "FoppCorrect")
                  (("1" (HIDE-ALL-BUT 1)
                    (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REWRITE "ClosestFopp") NIL NIL) ("3" (GRIND-REALS) NIL NIL)
             ("4" (REWRITE "FoppBounded") NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (CASE "FtoR(p) <= r")
          (("1" (LEMMA "FloatPlusUlpBounded")
            (("1" (INST -1 "b" "p")
              (("1" (SPLIT)
                (("1" (SKOSIMP*)
                  (("1" (MULT-BY 1 "2")
                    (("1"
                      (CASE "abs(FtoR(p) - r) <= Fulp(b)(p)- abs(FtoR(p) - r)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2)
                        (("2"
                          (CASE
                              "abs(FtoR(f!1) - r) <= Fulp(b)(p) - abs(FtoR(p) - r)")
                          (("1" (CASE "abs(FtoR(p) - r) <= abs(FtoR(f!1) - r)")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE -1 2)
                              (("2" (EXPAND "Closest?")
                                (("2" (INST -5 "f!1") NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (REWRITE -1)
                              (("2" (CASE "abs(FtoR(p)-r) < Fulp(b)(p)")
                                (("1" (HIDE -2 -4 -6)
                                  (("1" (EXPAND "abs")
                                    (("1" (GRIND-REALS) NIL NIL)) NIL))
                                  NIL)
                                 ("2"
                                  (REWRITE "RoundedModeUlp" :SUBST
                                   ("b" "b" "P" "Closest?"))
                                  (("2" (REWRITE "Closest_RoundedMode") NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (LEMMA "FloatMinusUlpBounded")
              (("2" (INST -1 "b" "p")
                (("2" (SPLIT)
                  (("1" (SKOSIMP*)
                    (("1" (MULT-BY 1 "2")
                      (("1"
                        (CASE
                            "abs(FtoR(p) - r) <= Fulp(b)(p)- abs(FtoR(p) - r)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (HIDE 2)
                          (("2"
                            (CASE
                                "abs(FtoR(f!1) - r) <= Fulp(b)(p) - abs(FtoR(p) - r)")
                            (("1"
                              (CASE "abs(FtoR(p) - r) <= abs(FtoR(f!1) - r)")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "Closest?")
                                  (("2" (INST -6 "f!1") NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (COPY -2)
                                (("2" (REWRITE -2)
                                  (("2" (CASE "abs(FtoR(p)-r) < Fulp(b)(p)")
                                    (("1" (HIDE -3 -4 -6)
                                      (("1" (EXPAND "abs")
                                        (("1" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL)
                                     ("2"
                                      (REWRITE "RoundedModeUlp" :SUBST
                                       ("b" "b" "P" "Closest?"))
                                      (("2" (REWRITE "Closest_RoundedMode") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|away_to_closest_by_half_to_nearest_ulp| 0
  (|away_to_closest_by_half_to_nearest_ulp-1| |nil| 3877602902
   (""
    (THEN (SKEEP) (EXPAND "ulp")
     (SPREAD (CASE "Closest?(b)(r, RtoF(r))")
      ((THEN (LEMMA "ClosestUlp") (INST -1 "b" "RtoF(r)" "r") (ASSERT)
        (SPREAD (CASE "abs(FtoR(RtoF(r)) - r) = abs(FtoR(p) - r)")
         ((THEN (REPLACE -1 :HIDE? T) (PROPAX))
          (THEN (HIDE -1 2) (EXPAND "Closest?") (INST -1 "p")
           (INST -3 "RtoF(r)") (ASSERT)))))
       (THEN (TYPEPRED "RtoF") (INST?) (TYPEPRED "round") (INST?) (ASSERT)))))
    NIL NIL)
   NIL SHOSTAK))
 (|min_is_max_for_floats| 0
  (|min_is_max_for_floats-1| |nil| 3877704513
   ("" (SKEEP)
    (("" (REPLACE -1)
      (("" (USE "RND_float_Min_def")
        (("" (REPLACE -1 :DIR RL)
          (("" (USE "RND_float_Max_def")
            (("" (REPLACE -1 :DIR RL)
              (("" (USE "RND_float_Min_canonic")
                (("" (ASSERT)
                  (("" (REPLACE -1)
                    (("" (USE "RND_float_Max_canonic") (("" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|min_is_max_implies_ftor| 0
  (|min_is_max_implies_ftor-1| |nil| 3877709446
   ("" (SKEEP)
    (("" (USE "RND_Max_isMax")
      (("" (USE "RND_Min_isMin")
        (("" (REPLACE -3 :HIDE? T)
          (("" (EXPAND "isMin?")
            (("" (EXPAND "isMax?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|RoundedModeNonDecreasing| 0
  (|RoundedModeNonDecreasing-1| |nil| 3320428553
   ("" (SKEEP)
    (("" (SPLIT-INEQ -7)
      (("1" (EXPAND "Unique?")
        (("1" (INST -5 "z1" "p" "q") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
       ("2" (EXPAND* "RoundedMode?" "Monotone?")
        (("2" (FLATTEN)
          (("2" (INST -6 "z1" "z2" "p" "q") (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ClosestUlp2_TCC1| 0
  (|ClosestUlp2_TCC1-1| |nil| 3320427865
   ("" (SKEEP)
    (("" (REWRITE "FpredBounded")
      (("" (REWRITE "FabsBounded") (("" (REWRITE "FcanonicBounded") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|ClosestUlp2| SUBTYPE "float.Fpred(float.b)(float.Fabs(float.p))"
    "(float.Fbounded?(float.b))")))
 (|ClosestUlp2| 0
  (|ClosestUlp2-1| |nil| 3320428698
   (""
    (CASE
        "FORALL (b: Format, p: float, r: real): Fcanonic?(b)(p) => Closest?(b)(r, p) => 0 <= r => r <= FtoR(p) + Fulp(b)(Fpred(b)(p)) / 2 => abs(FtoR(p) - r) <= Fulp(b)(Fpred(b)(p)) / 2")
    (("1" (SKEEP)
      (("1" (CASE "0<=r")
        (("1" (INST -2 "b" "p" "r")
          (("1" (CASE "0<= FtoR(p)")
            (("1" (CASE "Fabs(p)=p")
              (("1" (SPLIT)
                (("1" (ASSERT) NIL NIL)
                 ("2" (EXPAND "abs" -6) (("2" (GRIND-REALS) NIL NIL)) NIL)
                 ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                 ("5" (PROPAX) NIL NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (1 -1))
                (("2" (EXPAND* "Fabs" "abs" "FtoR")
                  (("2" (GRIND-REALS) (("2" (DECOMPOSE-EQUALITY 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2"
              (REWRITE "RleRoundedR0" :SUBST ("b" "b" "P" "Closest?" "r" "r"))
              (("1" (REWRITE "Closest_RoundedMode") NIL NIL)
               ("2" (REWRITE "FcanonicBounded") NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLIP-INEQ 1)
          (("2" (INST -2 "b" "Fopp(p)" "-r")
            (("2" (CASE "FtoR(p) <= 0")
              (("1" (CASE "Fabs(p)=Fopp(p)")
                (("1" (SPLIT)
                  (("1"
                    (CASE-REPLACE "abs(FtoR(Fopp(p)) - -r)=abs(FtoR(p) - r)")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REWRITE "FoppCorrect")
                      (("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "abs" -6)
                    (("2" (GRIND-REALS)
                      (("1" (REWRITE "FoppCorrect") (("1" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (REWRITE "FoppCorrect") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (ASSERT) NIL NIL)
                   ("4" (REWRITE "ClosestFopp")
                    (("4" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                   ("5" (LEMMA "FcanonicOpp")
                    (("5" (INST -1 "b" "p") (("5" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT (1 -1))
                  (("2" (EXPAND* "Fabs" "Fopp" "abs" "FtoR")
                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2"
                (REWRITE "RleRoundedLessR0" :SUBST
                 ("b" "b" "P" "Closest?" "r" "r"))
                (("1" (REWRITE "Closest_RoundedMode") NIL NIL)
                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "abs" 1)
          (("2" (GRIND-REALS)
            (("2" (FLIP-INEQ 1)
              (("2" (COPY -3)
                (("2" (EXPAND "Closest?" -1)
                  (("2" (INST -1 "Fpred(b)(p)")
                    (("2" (CASE "FtoR(Fpred(b)(p)) - r <= 0")
                      (("1" (EXPAND "abs" -2)
                        (("1" (GRIND-REALS)
                          (("1"
                            (CASE
                                " FtoR(p) - r -(FtoR(Fpred(b)(p)) - r) <= Fulp(b)(Fpred(b)(p))")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (ASSERT)
                              (("2" (REWRITE "FpredDiff")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2)
                        (("2" (FLIP-INEQ 1)
                          (("2" (FLIP-INEQ -2)
                            (("2" (EXPAND "abs" 1)
                              (("2" (GRIND-REALS)
                                (("2" (LEMMA "FpredLt")
                                  (("2" (INST -1 "b" "p")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (SKEEP)
        (("3" (REWRITE "FpredBounded")
          (("3" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP)
        (("4" (REWRITE "FpredBounded")
          (("4" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP) (("5" (REWRITE "FcanonicBounded") NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|ClosestFabs| 0
  (|ClosestFabs-1| |nil| 3320750464
   ("" (SKEEP)
    (("" (EXPAND "abs")
      (("" (GRIND-REALS)
        (("1" (CASE-REPLACE "Fabs(p)=Fopp(p)")
          (("1" (REWRITE "ClosestFopp") NIL NIL)
           ("2" (EXPAND* "Fabs" "Fopp")
            (("2" (CASE "FtoR(p) <= 0")
              (("1" (EXPAND "FtoR")
                (("1" (EXPAND "abs" 1) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("2"
                (REWRITE "RleRoundedLessR0" :SUBST
                 ("b" "b" "P" "Closest?" "r" "r" "f" "p"))
                (("2" (REWRITE "Closest_RoundedMode") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE-REPLACE "Fabs(p)=p")
          (("2" (CASE "0 <= FtoR(p)")
            (("1" (EXPAND "FtoR")
              (("1" (EXPAND* "Fabs" "abs")
                (("1" (GRIND-REALS) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2"
              (REWRITE "RleRoundedR0" :SUBST
               ("b" "b" "P" "Closest?" "r" "r" "f" "p"))
              (("2" (REWRITE "Closest_RoundedMode") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|SterbenzAux| 0
  (|SterbenzAux-1| |nil| 3319905254
   ("" (SKEEP)
    (("" (EXPAND "Fbounded?" 1)
      (("" (SPLIT)
        (("1" (MULT-BY 1 "radix^Fexp(Fminus(q, p))")
          (("1"
            (CASE-REPLACE
             "abs(Fnum(Fminus(q, p))) * radix ^ Fexp(Fminus(q, p))=FtoR(q)-FtoR(p)")
            (("1" (HIDE -1)
              (("1" (EXPAND* "Fminus" "min")
                (("1" (GRIND-REALS)
                  (("1" (CASE "FtoR(q) - FtoR(p) <= FtoR(p)")
                    (("1" (CASE " FtoR(p)< vNum(b) * radix ^ Fexp(p)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (EXPAND "FtoR" 1)
                        (("2" (EXPAND "Fbounded?" -3)
                          (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("2" (FLIP-INEQ 1)
                    (("2" (CASE "FtoR(q) - FtoR(p) <= FtoR(q)")
                      (("1" (CASE "FtoR(q) < vNum(b) * radix ^ Fexp(q)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (EXPAND "Fbounded?" -4)
                          (("2" (FLATTEN)
                            (("2" (EXPAND "FtoR" 1)
                              (("2" (GRIND-REALS) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND-REALS) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (REWRITE "FminusCorrect" :DIR RL)
                (("2" (CASE "FtoR(Fminus(q, p))=abs(FtoR(Fminus(q, p)))")
                  (("1" (REWRITE -1)
                    (("1" (EXPAND "FtoR" 1)
                      (("1" (REWRITE "abs_mult")
                        (("1" (EXPAND "abs" 1 3) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (EXPAND "abs")
                      (("2" (GRIND-REALS)
                        (("2" (REWRITE "FminusCorrect")
                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL)
         ("2" (EXPAND* "Fminus" "Fbounded?")
          (("2" (FLATTEN)
            (("2" (EXPAND "min") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Sterbenz| 0
  (|Sterbenz-1| |nil| 3319906528
   ("" (SKEEP)
    (("" (CASE "FtoR(p) <= FtoR(q)")
      (("1" (REWRITE "SterbenzAux") NIL NIL)
       ("2" (CASE-REPLACE "Fminus(q, p)=Fopp(Fminus(p, q))")
        (("1" (REWRITE "FoppBounded") (("1" (REWRITE "SterbenzAux") NIL NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (EXPAND* "Fminus" "Fopp")
            (("2"
              (CASE-REPLACE "min(Fexp(q), Fexp(p)) = min(Fexp(p), Fexp(q))")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "min") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|errorBoundedPlus| 0
  (|errorBoundedPlus-1| |nil| 3319907549
   (""
    (CASE
        "FORALL (b: Format, f, p, q: float): Fbounded?(b)(p) => Fbounded?(b)(q) => Fbounded?(b)(f) => Fexp(p) <= Fexp(q) => Closest?(b)(FtoR(p) + FtoR(q), f) => (EXISTS (e: (Fbounded?(b))): FtoR(e) = FtoR(p) + FtoR(q) - FtoR(f) AND Fexp(e) = min(Fexp(p), Fexp(q)))")
    (("1" (SKEEP)
      (("1" (CASE "Fexp(p) <= Fexp(q)")
        (("1" (INST -2 "b" "f" "p" "q")
          (("1" (SPLIT)
            (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
             ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
             ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL))
            NIL))
          NIL)
         ("2" (INST -1 "b" "f" "q" "p")
          (("2" (SPLIT)
            (("1" (SKOSIMP*)
              (("1" (INST 2 "e!1")
                (("1" (SPLIT)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
             ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
             ("6" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (LEMMA "RoundedModeRep")
          (("2" (INST -1 "Closest?" "b" "f" "Fplus(p,q)")
            (("2" (SPLIT)
              (("1" (SKOSIMP*)
                (("1"
                  (CASE
                      "FtoR(Fminus(Fplus(p,q),(# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #)))=FtoR(p)+FtoR(q)-FtoR(f)")
                  (("1"
                    (CASE
                        "Fexp(Fminus(Fplus(p,q),(# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #)))=Fexp(p)")
                    (("1"
                      (INST 1
                       "(Fminus(Fplus(p, q), (# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #)))")
                      (("1" (SPLIT)
                        (("1" (PROPAX) NIL NIL)
                         ("2" (REWRITE -1)
                          (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "Fbounded?")
                        (("2" (SPLIT)
                          (("1" (MULT-BY 1 "radix^(Fexp(p))")
                            (("1"
                              (CASE-REPLACE
                               "abs(Fnum ((Fminus(Fplus(p, q), (# Fnum := m!1, Fexp := Fexp(Fplus(p, q)) #))))) * radix ^ (Fexp(p))=abs(FtoR(p) + FtoR(q) - FtoR(f))")
                              (("1" (EXPAND "Closest?")
                                (("1" (INST -9 "q")
                                  (("1"
                                    (CASE
                                        "abs(FtoR(q) - FtoR(p) - FtoR(q)) < vNum(b) * radix ^ (Fexp(p))")
                                    (("1"
                                      (CASE
                                          "abs(FtoR(p) + FtoR(q) - FtoR(f))=abs(FtoR(f) - FtoR(p) - FtoR(q))")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2" (EXPAND "abs")
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE -1 -2 -3 -4 -6 -7 -8 -9 2)
                                      (("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "FtoR")
                                            (("2" (REWRITE "abs_mult")
                                              (("2" (REWRITE "abs_mult")
                                                (("2" (EXPAND "abs" 1 1)
                                                  (("2" (EXPAND "abs" 1 2)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (REAL-PROPS :SIMPLE? T)
                                                        (("2" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "Fbounded?")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (REWRITE -2 :DIR RL)
                                  (("2" (EXPAND "FtoR")
                                    (("2" (REWRITE -1)
                                      (("2" (REWRITE "abs_mult")
                                        (("2" (EXPAND "abs" 1 3)
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (REWRITE -1) (("2" (FLATTEN) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND* "Fminus" "Fplus" "min")
                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (REWRITE "FminusCorrect")
                      (("2" (REWRITE "FplusCorrect") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "FplusCorrect") NIL NIL)
               ("3" (REWRITE "Closest_RoundedMode") NIL NIL)
               ("4" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|errorBoundedMult_aux| 0
  (|errorBoundedMult_aux-1| |nil| 3320160933
   ("" (SKEEP)
    (("" (LEMMA "RoundedModeRep")
      (("" (INST -1 "isMin?" "b" "f" "Fmult(p,q)")
        (("" (SPLIT)
          (("1" (SKOSIMP*)
            (("1"
              (CASE
                  "FtoR(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=FtoR(p) * FtoR(q) - FtoR(f)")
              (("1"
                (CASE
                    "Fexp(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=Fexp(p) + Fexp(q)")
                (("1"
                  (INST 1
                   "(Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))")
                  (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (EXPAND "Fbounded?" 1)
                    (("2" (SPLIT)
                      (("1" (MULT-BY 1 "radix^(Fexp(p) + Fexp(q))")
                        (("1"
                          (CASE
                              "abs(Fnum ((Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #))))) * radix ^ (Fexp(p) + Fexp(q))=abs(FtoR(p) * FtoR(q) - FtoR(f))")
                          (("1" (REWRITE -1)
                            (("1"
                              (CASE
                                  "Fulp(b)(f) <= vNum(b) * radix ^ (Fexp(p) + Fexp(q))")
                              (("1"
                                (CASE
                                    "abs(FtoR(p) * FtoR(q) - FtoR(f)) < Fulp(b)(f)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2 -1)
                                  (("2"
                                    (CASE-REPLACE
                                     "abs(FtoR(p) * FtoR(q) - FtoR(f))=abs(FtoR(f)-(FtoR(p)*FtoR(q)))")
                                    (("1"
                                      (REWRITE "RoundedModeUlp" :SUBST
                                       ("P" "isMin?"))
                                      (("1" (REWRITE "isMin_RoundedMode") NIL
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "abs")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -1 -2 -3 2)
                                (("2" (CASE "vNum(b)=radix^Prec(b)")
                                  (("1"
                                    (CASE
                                        "Fbounded?(b)((# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                    (("1"
                                      (CASE-REPLACE
                                       "vNum(b) * radix ^ (Fexp(p) + Fexp(q))= Fulp(b)( (# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                      (("1" (REWRITE "FulpMonotone")
                                        (("1" (EXPAND "isMin?")
                                          (("1" (FLATTEN)
                                            (("1"
                                              (CASE
                                                  "FtoR(p) * FtoR(q) <= FtoR((# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #))")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (HIDE 2 3 -1)
                                                (("2" (EXPAND "FtoR")
                                                  (("2" (REWRITE "expt_plus")
                                                    (("2" (REWRITE "expt_plus")
                                                      (("2"
                                                        (DIV-BY 1
                                                         "radix ^ (Fexp(q))*radix ^ (Fexp(p))")
                                                        (("2"
                                                          (CASE-REPLACE
                                                           "Fnum(p) * Fnum(q) * radix ^ (Fexp(p)) * radix ^ (Fexp(q)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))=Fnum(p) * Fnum(q)")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "vNum(b) = radix ^ Prec(b)")
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "(radix ^ Prec(b) * (radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) - radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))= (radix ^ Prec(b)-1)* radix ^ Prec(b)")
                                                              (("1"
                                                                (HIDE -1 -3 -4
                                                                 -7 -10 -11 -12
                                                                 -13)
                                                                (("1"
                                                                  (EXPAND
                                                                   "Fbounded?")
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "abs")
                                                                      (("1"
                                                                        (GRIND-REALS)
                                                                        (("1"
                                                                          (CASE
                                                                              "Fnum(p) * Fnum(q) <= (radix ^ Prec(b) - 1) * Fnum(q)")
                                                                          (("1"
                                                                            (CASE
                                                                                "(radix ^ Prec(b) - 1) * Fnum(q) <= (radix ^ Prec(b) - 1) * radix ^ Prec(b)")
                                                                            (("1"
                                                                              (GRIND-REALS)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (DIV-BY
                                                                               1
                                                                               "radix ^ Prec(b) - 1")
                                                                              (("2"
                                                                                (GRIND-REALS)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (DIV-BY
                                                                             1
                                                                             "Fnum(q)")
                                                                            (("2"
                                                                              (HIDE
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               2)
                                                                              (("2"
                                                                                (COPY
                                                                                 -2)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   -2
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (FLIP-INEQ
                                                                                     -1)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       -1)
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "forall (e1,e2:int): e1>= e2 OR e1 <= e2-1")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "Fnum(p)"
                                                                                           "vNum(b)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (SKOSIMP*)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FIELD 1) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "FulpCanonic")
                                        (("1" (REWRITE "expt_plus")
                                          (("1" (REWRITE "expt_plus")
                                            (("1" (REWRITE "expt_plus")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (CASE
                                              "Fnormal?(b)((# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #))")
                                          (("1" (EXPAND "Fcanonic?")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (HIDE 2 3 4)
                                            (("2" (EXPAND "Fnormal?")
                                              (("2" (LEMMA "radix_less_vNum")
                                                (("2" (INST -1 "b")
                                                  (("2"
                                                    (CASE
                                                        "vNum(b) <= vNum(b) * radix - radix")
                                                    (("1" (EXPAND "abs" 1)
                                                      (("1" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (HIDE 2 -2 -3 -4 -5 -6 -7
                                                       -8 -9 -10 -11)
                                                      (("2" (MOVE-TERMS 1 L 1)
                                                        (("2"
                                                          (MOVE-TERMS 1 R 2)
                                                          (("2"
                                                            (CASE
                                                                "vNum(b) <= vNum(b) * radix - vNum(b)")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (DIV-BY 1
                                                               "vNum(b)")
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "(vNum(b) * radix - vNum(b)) / vNum(b)=radix -1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2" (FIELD 1)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (HIDE -2 -3 -4 -5 -6 -7 -8 2)
                                        (("2" (EXPAND "Fbounded?")
                                          (("2" (LEMMA "radix_less_vNum")
                                            (("2" (INST -1 "b")
                                              (("2" (EXPAND "abs")
                                                (("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "vNum")
                                    (("2" (PROPAX) NIL NIL)) NIL)
                                   ("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE -2 :DIR RL)
                            (("2" (EXPAND "FtoR" 1)
                              (("2" (REWRITE -1)
                                (("2" (REWRITE "abs_mult")
                                  (("2" (EXPAND "abs" 1 3)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND* "Fmult" "Fminus" "min") NIL NIL))
                NIL)
               ("2" (REWRITE "FminusCorrect")
                (("2" (REWRITE "FmultCorrect") (("2" (REWRITE -1) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FmultCorrect") NIL NIL)
           ("3" (REWRITE "isMin_RoundedMode") NIL NIL) ("4" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|errorBoundedMult_aux2| 0
  (|errorBoundedMult_aux2-1| |nil| 3320163336
   ("" (SKEEP)
    (("" (LEMMA "RoundedModeRep")
      (("" (INST -1 "isMax?" "b" "f" "Fmult(p,q)")
        (("" (SPLIT)
          (("1" (SKOSIMP*)
            (("1"
              (CASE
                  "FtoR(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=FtoR(p) * FtoR(q) - FtoR(f)")
              (("1"
                (CASE
                    "Fexp(Fminus(Fmult(p,q),(# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))=Fexp(p) + Fexp(q)")
                (("1"
                  (INST 1
                   "(Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #)))")
                  (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (EXPAND "Fbounded?" 1)
                    (("2" (SPLIT)
                      (("1" (MULT-BY 1 "radix^(Fexp(p) + Fexp(q))")
                        (("1"
                          (CASE
                              "abs(Fnum ((Fminus(Fmult(p, q), (# Fnum := m!1, Fexp := Fexp(Fmult(p, q)) #))))) * radix ^ (Fexp(p) + Fexp(q))=abs(FtoR(p) * FtoR(q) - FtoR(f))")
                          (("1" (REWRITE -1)
                            (("1"
                              (CASE
                                  "Fulp(b)(f) <= vNum(b) * radix ^ (Fexp(p) + Fexp(q))")
                              (("1"
                                (CASE
                                    "abs(FtoR(p) * FtoR(q) - FtoR(f)) < Fulp(b)(f)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2 -1)
                                  (("2"
                                    (CASE-REPLACE
                                     "abs(FtoR(p) * FtoR(q) - FtoR(f))=abs(FtoR(f)-(FtoR(p)*FtoR(q)))")
                                    (("1"
                                      (REWRITE "RoundedModeUlp" :SUBST
                                       ("P" "isMax?"))
                                      (("1" (REWRITE "isMax_RoundedMode") NIL
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "abs")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -1 -2 -3 2)
                                (("2" (CASE "vNum(b)=radix^Prec(b)")
                                  (("1"
                                    (CASE
                                        "Fbounded?(b)((# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                    (("1"
                                      (CASE-REPLACE
                                       "vNum(b) * radix ^ (Fexp(p) + Fexp(q))= Fulp(b)( (# Fnum:=vNum(b)-1, Fexp:= Prec(b)+Fexp(p) + Fexp(q)#))")
                                      (("1" (REWRITE "FulpMonotone")
                                        (("1" (EXPAND "isMax?")
                                          (("1" (FLATTEN)
                                            (("1"
                                              (INST -11
                                               "(# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #)")
                                              (("1" (REWRITE -11)
                                                (("1" (HIDE 2 3 -1 -2 -3 -11)
                                                  (("1" (EXPAND "FtoR")
                                                    (("1" (REWRITE "expt_plus")
                                                      (("1"
                                                        (REWRITE "expt_plus")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           " vNum(b) = radix ^ Prec(b)")
                                                          (("1"
                                                            (DIV-BY 1
                                                             "radix ^ (Fexp(q))*radix ^ (Fexp(p))")
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "Fnum(p) * Fnum(q) * radix ^ (Fexp(p)) * radix ^ (Fexp(q)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))=Fnum(p) * Fnum(q)")
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "(radix ^ Prec(b) * (radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) - radix ^ Fexp(p) * radix ^ Fexp(q) * radix ^ Prec(b)) / (radix ^ (Fexp(q)) * radix ^ (Fexp(p)))= (radix ^ Prec(b)-1)* radix ^ Prec(b)")
                                                                (("1"
                                                                  (EXPAND
                                                                   "Fbounded?")
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (HIDE -1
                                                                       -2)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (GRIND-REALS)
                                                                          (("1"
                                                                            (CASE
                                                                                "Fnum(p) * Fnum(q) <= (radix ^ Prec(b) - 1) * Fnum(q)")
                                                                            (("1"
                                                                              (CASE
                                                                                  "(radix ^ Prec(b) - 1) * Fnum(q) <= (radix ^ Prec(b) - 1) * radix ^ Prec(b)")
                                                                              (("1"
                                                                                (GRIND-REALS)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (DIV-BY
                                                                                 1
                                                                                 "radix ^ Prec(b) - 1")
                                                                                (("2"
                                                                                  (GRIND-REALS)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (DIV-BY
                                                                               1
                                                                               "Fnum(q)")
                                                                              (("2"
                                                                                (HIDE
                                                                                 -3
                                                                                 -4
                                                                                 -5
                                                                                 -6
                                                                                 -7
                                                                                 -8
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 2)
                                                                                (("2"
                                                                                  (CASE-REPLACE
                                                                                   "radix ^ Prec(b)= vNum(b)")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLIP-INEQ
                                                                                       -2)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "forall (e1,e2:int): e1>= e2 OR e1 <= e2-1")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "Fnum(p)"
                                                                                           "vNum(b)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (SKOSIMP*)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FIELD 1)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FIELD 1) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "FulpCanonic")
                                        (("1" (REWRITE "expt_plus")
                                          (("1" (REWRITE "expt_plus")
                                            (("1" (REWRITE "expt_plus")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (CASE
                                              "Fnormal?(b)((# Fnum := vNum(b) - 1, Fexp := Fexp(p) + Fexp(q) + Prec(b) #))")
                                          (("1" (EXPAND "Fcanonic?")
                                            (("1" (ASSERT) NIL NIL)) NIL)
                                           ("2" (HIDE 2 3 4)
                                            (("2" (EXPAND "Fnormal?")
                                              (("2" (LEMMA "radix_less_vNum")
                                                (("2" (INST -1 "b")
                                                  (("2"
                                                    (CASE
                                                        "vNum(b) <= vNum(b) * radix - radix")
                                                    (("1" (EXPAND "abs")
                                                      (("1" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT (1 -1))
                                                      (("2" (MOVE-TERMS 1 L 1)
                                                        (("2"
                                                          (MOVE-TERMS 1 R 2)
                                                          (("2"
                                                            (CASE
                                                                "vNum(b) <= vNum(b) * radix - vNum(b)")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (DIV-BY 1
                                                               "vNum(b)")
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "(vNum(b) * radix - vNum(b)) / vNum(b)=radix -1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2" (FIELD 1)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "Fbounded?")
                                      (("2" (SPLIT)
                                        (("1" (LEMMA "radix_less_vNum")
                                          (("1" (INST -1 "b")
                                            (("1" (EXPAND "abs" 1)
                                              (("1" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (GRIND-REALS) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "vNum")
                                    (("2" (PROPAX) NIL NIL)) NIL)
                                   ("3" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE -2 :DIR RL)
                            (("2" (EXPAND "FtoR" 1)
                              (("2" (REWRITE -1)
                                (("2" (REWRITE "abs_mult")
                                  (("2" (EXPAND "abs" 1 3)
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND* "Fmult" "Fminus" "min") NIL NIL))
                NIL)
               ("2" (REWRITE "FminusCorrect")
                (("2" (REWRITE "FmultCorrect") (("2" (REWRITE -1) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FmultCorrect") NIL NIL)
           ("3" (REWRITE "isMax_RoundedMode") NIL NIL) ("4" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|errorBoundedMult| 0
  (|errorBoundedMult-1| |nil| 3320076840
   ("" (SKEEP)
    (("" (CASE "0 <= FtoR(p)")
      (("1" (CASE "0 <= FtoR(q)")
        (("1" (CASE "0 <= FtoR(f)")
          (("1" (EXPAND* "RoundedMode?" "MinOrMax?")
            (("1" (FLATTEN)
              (("1" (INST -9 "FtoR(p)*FtoR(q)" "f")
                (("1" (SPLIT)
                  (("1" (REWRITE "errorBoundedMult_aux") NIL NIL)
                   ("2" (REWRITE "errorBoundedMult_aux2") NIL NIL)
                   ("3" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2"
            (REWRITE "RleRoundedR0" :SUBST
             ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
            (("2" (GRIND-REALS) NIL NIL)) NIL))
          NIL)
         ("2" (FLIP-INEQ 1)
          (("2" (CASE "FtoR(f) <= 0")
            (("1" (EXPAND* "RoundedMode?" "MinOrMax?")
              (("1" (FLATTEN)
                (("1" (INST -9 "FtoR(p)*FtoR(q)" "f")
                  (("1" (SPLIT)
                    (("1" (LEMMA "errorBoundedMult_aux2")
                      (("1" (INST -1 "b" "Fopp(f)" "p" "Fopp(q)")
                        (("1" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST 1 "Fopp(e!1)")
                              (("1" (SPLIT)
                                (("1" (REWRITE "FoppCorrect")
                                  (("1" (REWRITE "FoppCorrect")
                                    (("1" (REWRITE "FoppCorrect")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FoppBounded") NIL NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL)
                           ("3"
                            (CASE-REPLACE
                             "FtoR(p) * FtoR(Fopp(q))=-(FtoR(p) * FtoR(q))")
                            (("1" (REWRITE "MinOppMax") NIL NIL)
                             ("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (REWRITE "FoppCorrect")
                            (("4" (ASSERT) NIL NIL)) NIL)
                           ("5" (REWRITE "FoppCorrect")
                            (("5" (ASSERT) NIL NIL)) NIL)
                           ("6" (PROPAX) NIL NIL)
                           ("7" (REWRITE "FoppBounded") NIL NIL)
                           ("8" (REWRITE "FoppBounded") NIL NIL)
                           ("9" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "errorBoundedMult_aux")
                      (("2" (INST -1 "b" "Fopp(f)" "p" "Fopp(q)")
                        (("2" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST 1 "Fopp(e!1)")
                              (("1" (SPLIT)
                                (("1" (REWRITE "FoppCorrect")
                                  (("1" (REWRITE "FoppCorrect")
                                    (("1" (REWRITE "FoppCorrect")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FoppBounded") NIL NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL)
                           ("3"
                            (CASE-REPLACE
                             "FtoR(p) * FtoR(Fopp(q))=-(FtoR(p) * FtoR(q))")
                            (("1" (REWRITE "MaxOppMin") NIL NIL)
                             ("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (REWRITE "FoppCorrect")
                            (("4" (ASSERT) NIL NIL)) NIL)
                           ("5" (REWRITE "FoppCorrect")
                            (("5" (ASSERT) NIL NIL)) NIL)
                           ("6" (PROPAX) NIL NIL)
                           ("7" (REWRITE "FoppBounded") NIL NIL)
                           ("8" (REWRITE "FoppBounded") NIL NIL)
                           ("9" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2"
              (REWRITE "RleRoundedLessR0" :SUBST
               ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
              (("2" (GRIND-REALS) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (CASE "0 <= FtoR(q)")
          (("1" (CASE "FtoR(f) <= 0")
            (("1" (EXPAND* "RoundedMode?" "MinOrMax?")
              (("1" (FLATTEN)
                (("1" (INST -9 "FtoR(p)*FtoR(q)" "f")
                  (("1" (SPLIT)
                    (("1" (LEMMA "errorBoundedMult_aux2")
                      (("1" (INST -1 "b" "Fopp(f)" "Fopp(p)" "q")
                        (("1" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST 1 "Fopp(e!1)")
                              (("1" (SPLIT)
                                (("1" (REWRITE "FoppCorrect")
                                  (("1" (REWRITE "FoppCorrect")
                                    (("1" (REWRITE "FoppCorrect")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FoppBounded") NIL NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL)
                           ("3"
                            (CASE-REPLACE
                             "FtoR(Fopp(p)) * FtoR(q)=-(FtoR(p) * FtoR(q))")
                            (("1" (REWRITE "MinOppMax") NIL NIL)
                             ("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (REWRITE "FoppCorrect")
                            (("4" (ASSERT) NIL NIL)) NIL)
                           ("5" (PROPAX) NIL NIL)
                           ("6" (REWRITE "FoppCorrect")
                            (("6" (ASSERT) NIL NIL)) NIL)
                           ("7" (REWRITE "FoppBounded") NIL NIL)
                           ("8" (PROPAX) NIL NIL)
                           ("9" (REWRITE "FoppBounded") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "errorBoundedMult_aux")
                      (("2" (INST -1 "b" "Fopp(f)" "Fopp(p)" "q")
                        (("2" (SPLIT)
                          (("1" (SKOSIMP*)
                            (("1" (INST 1 "Fopp(e!1)")
                              (("1" (SPLIT)
                                (("1" (REWRITE "FoppCorrect")
                                  (("1" (REWRITE "FoppCorrect")
                                    (("1" (REWRITE "FoppCorrect")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FoppBounded") NIL NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL)
                           ("3"
                            (CASE-REPLACE
                             "FtoR(Fopp(p)) * FtoR(q)=-(FtoR(p) * FtoR(q))")
                            (("1" (REWRITE "MaxOppMin") NIL NIL)
                             ("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (REWRITE "FoppCorrect")
                            (("4" (ASSERT) NIL NIL)) NIL)
                           ("5" (PROPAX) NIL NIL)
                           ("6" (REWRITE "FoppCorrect")
                            (("6" (ASSERT) NIL NIL)) NIL)
                           ("7" (REWRITE "FoppBounded") NIL NIL)
                           ("8" (PROPAX) NIL NIL)
                           ("9" (REWRITE "FoppBounded") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2"
              (REWRITE "RleRoundedLessR0" :SUBST
               ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
              (("2" (GRIND-REALS) NIL NIL)) NIL))
            NIL)
           ("2" (FLIP-INEQ 1)
            (("2" (CASE "0 <= FtoR(f)")
              (("1" (EXPAND* "RoundedMode?" "MinOrMax?")
                (("1" (FLATTEN)
                  (("1" (INST -9 "FtoR(p)*FtoR(q)" "f")
                    (("1" (SPLIT)
                      (("1"
                        (CASE-REPLACE
                         "FtoR(p) * FtoR(q)=FtoR(Fopp(p))*FtoR(Fopp(q))")
                        (("1"
                          (CASE-REPLACE
                           "Fexp(p) + Fexp(q)=Fexp(Fopp(p)) + Fexp(Fopp(q))")
                          (("1" (REWRITE "errorBoundedMult_aux")
                            (("1" (REWRITE "FoppCorrect")
                              (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL)
                             ("3" (REWRITE "FoppBounded") NIL NIL)
                             ("4" (REWRITE "FoppBounded") NIL NIL))
                            NIL)
                           ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("2" (REWRITE "FoppCorrect")
                          (("2" (REWRITE "FoppCorrect")
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2"
                        (CASE-REPLACE
                         "Fexp(p) + Fexp(q)=Fexp(Fopp(p)) + Fexp(Fopp(q))")
                        (("1"
                          (CASE-REPLACE
                           "FtoR(p) * FtoR(q)=FtoR(Fopp(p))*FtoR(Fopp(q))")
                          (("1" (REWRITE "errorBoundedMult_aux2")
                            (("1" (REWRITE "FoppCorrect")
                              (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL)
                             ("3" (REWRITE "FoppBounded") NIL NIL)
                             ("4" (REWRITE "FoppBounded") NIL NIL))
                            NIL)
                           ("2" (REWRITE "FoppCorrect")
                            (("2" (REWRITE "FoppCorrect")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "Fopp") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2"
                (REWRITE "RleRoundedR0" :SUBST
                 ("P" "P" "b" "b" "r" "FtoR(p)*FtoR(q)"))
                (("2" (GRIND-REALS) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpLeN_TCC1| 0
  (|FulpLeN_TCC1-1| |nil| 3698095010 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|FulpLeN| SUBTYPE "float.p" "(float.Fbounded?(float.b))")))
 (|FulpLeN| 0
  (|FulpLeN-1| |nil| 3320431414
   ("" (SKEEP)
    (("" (REWRITE "FulpCanonic")
      (("1" (EXPAND "FtoR")
        (("1" (REWRITE "abs_mult")
          (("1" (EXPAND "abs" 1 2)
            (("1" (EXPAND "Fnormal?")
              (("1" (FLATTEN)
                (("1" (REWRITE "abs_mult")
                  (("1" (EXPAND "abs" -2 1)
                    (("1" (DIV-BY 1 " radix ^ (Fexp(p))")
                      (("1" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "Fcanonic?") (("2" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpGe_TCC1| 0
  (|FulpGe_TCC1-1| |nil| 3320431414
   ("" (SKEEP)
    (("" (LEMMA "radix_less_vNum")
      (("" (INST -1 "b") (("" (GRIND-REALS) NIL NIL)) NIL)) NIL))
    NIL)
   NIL NIL
   (|FulpGe| SUBTYPE "((number_fields.-)(float.vNum(float.b), 1))" "nznum")))
 (|FulpGe| 0
  (|FulpGe-1| |nil| 3320431633
   ("" (SKEEP)
    (("" (CASE-REPLACE "FtoR(p)=FtoR(Fnormalize(b)(p))")
      (("1" (EXPAND "FtoR" 1)
        (("1" (REWRITE "abs_mult")
          (("1" (EXPAND "abs" 1 2)
            (("1" (EXPAND "Fulp")
              (("1" (DIV-BY 1 " radix ^ (Fexp(Fnormalize(b)(p)))")
                (("1"
                  (CASE-REPLACE
                   "abs(Fnum(Fnormalize(b)(p))) * radix ^ (Fexp(Fnormalize(b)(p))) / (vNum(b) - 1)/ radix ^ (Fexp(Fnormalize(b)(p)))= abs(Fnum(Fnormalize(b)(p)))/(vNum(b) - 1)")
                  (("1" (REWRITE "div_cancel4")
                    (("1" (FIELD 1)
                      (("1" (CASE "Fbounded?(b)(Fnormalize(b)(p))")
                        (("1" (EXPAND "Fbounded?")
                          (("1" (FLATTEN)
                            (("1" (HIDE-ALL-BUT (-1 1))
                              (("1" (NAME-REPLACE "AA" "vNum(b)")
                                (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FcanonicBounded") NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FIELD 1) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpLe| 0
  (|FulpLe-2| "" 3790102975
   ("" (SKEEP)
    (("" (CASE "Fcanonic?(b)(Fnormalize(b)(p))")
      (("1" (EXPAND "Fcanonic?")
        (("1" (SPLIT)
          (("1" (CASE "Fulp(b)(p) <= abs(FtoR(p)) * radix/vNum(b)")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (CASE-REPLACE "FtoR(p)=FtoR(Fnormalize(b)(p))")
                (("1" (CASE-REPLACE "Fulp(b)(p)=Fulp(b)(Fnormalize(b)(p))")
                  (("1" (REWRITE "FulpLeN") NIL NIL)
                   ("2" (EXPAND "Fulp")
                    (("2"
                      (REWRITE "FcanonicUnique" :SUBST
                       ("b" "b" "p" "Fnormalize(b)(Fnormalize(b)(p))" "q"
                        "Fnormalize(b)(p)"))
                      NIL NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "Fulp(b)(p) = radix ^ (-dExp(b))")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND* "Fulp" "Fsubnormal?")
                (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FulpLe-1| |nil| 3320432430
   ("" (SKEEP)
    (("" (CASE "Fcanonic?(b)(Fnormalize(b)(p))")
      (("1" (EXPAND "Fcanonic?")
        (("1" (SPLIT)
          (("1" (CASE "Fulp(b)(p) <= abs(FtoR(p)) * radix/vNum(b)")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (CASE-REPLACE "FtoR(p)=FtoR(Fnormalize(b)(p))")
                (("1" (CASE-REPLACE "Fulp(b)(p)=Fulp(b)(Fnormalize(b)(p))")
                  (("1" (REWRITE "FulpLeN") NIL NIL)
                   ("2" (EXPAND "Fulp")
                    (("2"
                      (REWRITE "FcanonicUnique" :SUBST
                       ("b" "b" "p" "Fnormalize(b)(Fnormalize(b)(p))" "q"
                        "Fnormalize(b)(p)"))
                      NIL NIL))
                    NIL)
                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "Fulp(b)(p) = radix ^ (-dExp(b))")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2)
              (("2" (EXPAND* "Fulp" "Fsubnormal?")
                (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpFpred1_TCC1| 0
  (|FulpFpred1_TCC1-1| |nil| 3320433306
   ("" (SKEEP)
    (("" (REWRITE "FpredBounded") (("" (REWRITE "FcanonicBounded") NIL NIL))
      NIL))
    NIL)
   NIL NIL
   (|FulpFpred1| SUBTYPE "float.Fpred(float.b)(float.p)"
    "(float.Fbounded?(float.b))")))
 (|FulpFpred1| 0
  (|FulpFpred1-1| |nil| 3320490788
   ("" (SKEEP)
    (("" (REWRITE "FulpCanonic")
      (("1" (REWRITE "FulpCanonic")
        (("1" (REWRITE "Exp_increq_1")
          (("1" (REWRITE "Lexico" :SUBST ("b" "b"))
            (("1" (LEMMA "FpredLt" :SUBST ("b" "b" "f" "p"))
              (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (SPLIT-INEQ -2)
              (("1" (CASE-REPLACE "p=(# Fnum:=0, Fexp:=-dExp(b)#)")
                (("1" (HIDE-ALL-BUT 2)
                  (("1" (EXPAND "Fpred")
                    (("1" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum" :SUBST ("b" "b"))
                        (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2"
                  (REWRITE "FcanonicUnique" :SUBST
                   ("b" "b" "p" "p" "q" "(# Fnum := 0, Fexp := -dExp(b) #)"))
                  (("1" (REWRITE -1 :DIR RL)
                    (("1" (EXPAND "FtoR" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND* "Fcanonic?" "Fsubnormal?" "Fbounded?")
                      (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "FpredPos") NIL NIL))
              NIL)
             ("3" (REWRITE "FpredCanonic") NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (REWRITE "FpredCanonic") NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|FulpFpred2| 0
  (|FulpFpred2-2| "" 3790102978
   ("" (SKEEP)
    (("" (REWRITE "FulpCanonic")
      (("" (REWRITE "FulpCanonic")
        (("1"
          (CASE-REPLACE
           "radix * radix ^ (Fexp(Fpred(b)(p)))= radix ^ (1+Fexp(Fpred(b)(p)))")
          (("1" (REWRITE "Exp_increq_1")
            (("1" (HIDE -1 2)
              (("1" (EXPAND "Fpred") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (REWRITE "expt_plus") NIL NIL))
          NIL)
         ("2" (REWRITE "FpredCanonic") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|FulpFpred2-1| |nil| 3320491755
   ("" (SKEEP)
    (("" (REWRITE "FulpCanonic")
      (("" (REWRITE "FulpCanonic")
        (("1"
          (CASE-REPLACE
           "radix * radix ^ (Fexp(Fpred(b)(p)))= radix ^ (1+Fexp(Fpred(b)(p)))")
          (("1" (REWRITE "Exp_increq_1")
            (("1" (HIDE -1 2)
              (("1" (EXPAND "Fpred") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") NIL NIL)) NIL))
          NIL)
         ("2" (REWRITE "FpredCanonic") NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fopp_RtoF_TCC1| 0
  (|Fopp_RtoF_TCC1-1| |nil| 3877462011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Fopp_RtoF| SUBTYPE "float.f" "(float.Fbounded?(float.b))")))
 (|Fopp_RtoF| 0
  (|Fopp_RtoF-1| |nil| 3681818301
   ("" (SKEEP)
    (("" (USE "FcanonicUnique")
      (("" (SPLIT -1)
        (("1" (PROPAX) NIL NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (TYPEPRED "round?")
            (("2" (EXPAND "Unique?")
              (("2" (INST -1 "-x" "Fopp(RtoF(x))" "RtoF(-x)")
                (("1" (SPLIT -1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE 2)
                    (("2" (TYPEPRED "RtoF") (("2" (INST?) NIL NIL)) NIL)) NIL)
                   ("3" (HIDE 2)
                    (("3" (EXPAND "rounded_opp?")
                      (("3" (INST?)
                        (("3" (ASSERT)
                          (("3" (TYPEPRED "RtoF") (("3" (INST?) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1) (("2" (REWRITE "FoppBounded") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (LEMMA "FcanonicOpp")
          (("3" (INST -1 "b" "RtoF(x)")
            (("3" (ASSERT)
              (("3" (HIDE-ALL-BUT 1)
                (("3" (TYPEPRED "RtoF") (("3" (INST? -2) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE 2) (("4" (TYPEPRED "RtoF") (("4" (INST? -2) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|ulp_abs| 0
  (|ulp_abs-1| |nil| 3681747962
   ("" (SKEEP)
    (("" (EXPAND "ulp")
      (("" (EXPAND "ulp")
        (("" (LEMMA "FulpAbs")
          (("" (INST -1 "b" "RND_ToZero(b)(x)")
            (("" (ASSERT)
              (("" (SPLIT -1)
                (("1" (REPLACE -1 :HIDE? T :DIR RL)
                  (("1" (USE "FulpCanonic")
                    (("1" (SPLIT -1)
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (LEMMA "FulpCanonic")
                          (("1" (INST? -1)
                            (("1" (SPLIT -1)
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (EXPAND "abs")
                                  (("1" (LIFT-IF 1)
                                    (("1" (SPLIT 1)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "Fabs")
                                          (("1"
                                            (CASE
                                                "RND_ToZero(b)(-x)`Fexp = Fexp(RND_ToZero(b)(x))")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2" (USE "Fopp_RtoF")
                                                (("2"
                                                  (INST -1 "ToZero?(b)"
                                                   "RND_ToZero(b)")
                                                  (("1" (REPLACE -1 :HIDE? T)
                                                    (("1" (EXPAND "Fopp")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (EXPAND "Unique?")
                                                      (("2"
                                                        (USE "ToZero_Unique")
                                                        (("2"
                                                          (EXPAND "Unique?")
                                                          (("2" (SPLIT 1)
                                                            (("1" (PROPAX) NIL
                                                              NIL)
                                                             ("2"
                                                              (HIDE-ALL-BUT 1)
                                                              (("2"
                                                                (USE
                                                                 "ToZeroFopp")
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (EXPAND "Fabs")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (USE "FabsCanonic")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (TYPEPRED "RND_ToZero(b)(abs(x))")
                          (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (USE "FcanonicBounded") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|injrnd_ulp| 0
  (|injrnd_ulp-1| |nil| 3681142042
   ("" (SKEEP)
    (("" (EXPAND "ulp")
      (("" (TYPEPRED "RtoF")
        (("" (EXPAND "injective_rounding")
          (("" (FLATTEN)
            (("" (INST -2 "f")
              (("1" (ASSERT) NIL NIL)
               ("2" (EXPAND "/=")
                (("2" (REPLACE -1 1)
                  (("2" (EXPAND "Fulp" 1 2)
                    (("2" (EXPAND "Fnormalize")
                      (("2" (ASSERT)
                        (("2" (EXPAND "Fulp")
                          (("2" (CASE "Fnum(f) = 0")
                            (("1" (GRIND) NIL NIL)
                             ("2" (USE "ftor_zero_fnum")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Fulp_ulp| 0
  (|Fulp_ulp-1| |nil| 3681141194
   ("" (SKEEP)
    (("" (USE "FulpAbs")
      (("" (ASSERT)
        (("" (REPLACE -1 :HIDE? T :DIR RL)
          (("" (USE "injrnd_ulp")
            (("" (REPLACE -1 :HIDE? T)
              (("" (USE "FabsCorrect")
                (("" (REPLACE -1 :HIDE? T)
                  (("" (USE "ulp_generic_monotone")
                    (("" (ASSERT)
                      (("" (HIDE 2)
                        ((""
                          (CASE
                              "NOT FORALL(x,y,z:real) : abs(x-y) <= z IMPLIES abs(x) <= abs(y) + z")
                          (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|rndmaxismax_j| 0
  (|rndmaxismax_j-1| |nil| 3699184522
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (SKEEP) (("1" (USE "RND_Max_isMax") NIL NIL)) NIL)
       ("2" (SKEEP) (("2" (INVOKE (TYPEPRED "%1") (! 1 1)) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|rndmaxismax_j| SUBTYPE "float.RND_Max(float.b)"
    "CanonicRoundingFun(float.b, float.isMax?(float.b))")))
 (|rndminismin_j| 0
  (|rndminismin_j-1| |nil| 3699182647
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (SKEEP) (("1" (USE "RND_Min_isMin") NIL NIL)) NIL)
       ("2" (SKEEP) (("2" (INVOKE (TYPEPRED "%1") (! 1 1)) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|rndminismin_j| SUBTYPE "float.RND_Min(float.b)"
    "CanonicRoundingFun(float.b, float.isMin?(float.b))")))
 (|rndeclosest_j| 0
  (|rndeclosest_j-1| |nil| 3681830290
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (SKEEP) (("1" (USE "RND_EClosest_isEclosest") NIL NIL)) NIL)
       ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL NIL
   (|rndeclosest_j| SUBTYPE "float.RND_EClosest(float.b)"
    "CanonicRoundingFun(float.b, float.EvenClosest?(float.b))")))
 (|closest_ulp_pos| 0
  (|closest_ulp_pos-1| |nil| 3877766338
   ("" (SKEEP)
    (("" (EXPAND "ulp")
      (("" (EXPAND "ulp")
        (("" (EXPAND "RND_ToZero")
          (("" (ASSERT)
            (("" (LEMMA "MaxSuccMin")
              (("" (INST -1 "b" "RND_Min(b)(r)" "RND_Max(b)(r)" "r")
                (("" (ASSERT)
                  (("" (SPLIT)
                    (("1" (LEMMA "FsuccDiff")
                      (("1" (INST -1 "b" "RND_Min(b)(r)")
                        (("1" (ASSERT)
                          (("1" (SPLIT)
                            (("1" (REPLACE -1 :DIR RL)
                              (("1" (CASE "p=RND_Min(b)(r)")
                                (("1" (REPLACE -1)
                                  (("1" (HIDE -1)
                                    (("1" (EXPAND "Closest?")
                                      (("1"
                                        (INST -4 " Fsucc(b)(RND_Min(b)(r))")
                                        (("1" (USE "RND_Min_isMin")
                                          (("1" (EXPAND "isMin?")
                                            (("1" (FLATTEN)
                                              (("1" (USE "RND_Max_isMax")
                                                (("1" (REPLACE -5)
                                                  (("1" (EXPAND "isMax?")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (CASE
                                                            "abs(FtoR(RND_Min(b)(r)) - r) = r - FtoR(RND_Min(b)(r))")
                                                        (("1" (REPLACE -1)
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (CASE
                                                                  "abs(FtoR(Fsucc(b)(RND_Min(b)(r))) - r) = FtoR(Fsucc(b)(RND_Min(b)(r))) - r")
                                                              (("1"
                                                                (REPLACE -1)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 (1 -1))
                                                                (("2"
                                                                  (EXPAND
                                                                   "abs")
                                                                  (("2"
                                                                    (CASE
                                                                        "FtoR(Fsucc(b)(RND_Min(b)(r))) - r < 0")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (CASE
                                                                          "FtoR(Fsucc(b)(RND_Min(b)(r))) - r = 0")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT (1 -3))
                                                          (("2" (EXPAND "abs")
                                                            (("2"
                                                              (CASE
                                                                  "FtoR(RND_Min(b)(r)) - r < 0")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (CASE
                                                                    "FtoR(RND_Min(b)(r)) - r = 0")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (LEMMA "FsuccBounded")
                                          (("2" (INST -1 "b" "RND_Min(b)(r)")
                                            (("2" (TYPEPRED "RND_Min(b)(r)")
                                              (("2" (ASSERT)
                                                (("2" (USE "canonic_bounded_j")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE "p=Fsucc(b)(RND_Min(b)(r))")
                                  (("1" (REPLACE -1)
                                    (("1" (HIDE -1 -2 1)
                                      (("1" (EXPAND "Closest?")
                                        (("1" (INST -3 "(RND_Min(b)(r))")
                                          (("1"
                                            (CASE
                                                "abs(FtoR(Fsucc(b)(RND_Min(b)(r))) - r) = FtoR(Fsucc(b)(RND_Min(b)(r))) - r")
                                            (("1" (REPLACE -1)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (CASE
                                                      "abs(FtoR((RND_Min(b)(r))) - r) = r - FtoR((RND_Min(b)(r)))")
                                                  (("1" (REPLACE -1)
                                                    (("1" (HIDE -1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (USE "RND_Min_isMin")
                                                    (("2" (EXPAND "isMin?")
                                                      (("2" (FLATTEN)
                                                        (("2"
                                                          (HIDE-ALL-BUT (1 -1))
                                                          (("2" (EXPAND "abs")
                                                            (("2"
                                                              (CASE
                                                                  "FtoR((RND_Min(b)(r))) - r < 0 ")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (CASE
                                                                    "FtoR((RND_Min(b)(r))) - r = 0")
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (USE "RND_Max_isMax")
                                              (("2" (EXPAND "isMax?")
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE-ALL-BUT (1 -1))
                                                    (("2" (EXPAND "abs")
                                                      (("2"
                                                        (CASE
                                                            "FtoR(Fsucc(b)(RND_Min(b)(r))) - r < 0")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2"
                                                          (CASE
                                                              "FtoR(Fsucc(b)(RND_Min(b)(r))) - r = 0")
                                                          (("1" (REPLACE -1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (USE "Closest_min_or_max")
                                    (("2" (EXPAND "min_or_max?")
                                      (("2" (INST -1 "r" "p")
                                        (("2" (ASSERT)
                                          (("2" (SPLIT)
                                            (("1" (USE "isMin_Unique")
                                              (("1" (EXPAND "Unique?")
                                                (("1"
                                                  (INST -1 "r" "p"
                                                   "RND_Min(b)(r)")
                                                  (("1" (ASSERT)
                                                    (("1" (SPLIT)
                                                      (("1"
                                                        (LEMMA
                                                         "FcanonicUnique")
                                                        (("1"
                                                          (INST -1 "b" "p"
                                                           "RND_Min(b)(r)")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (USE "RND_Min_isMin")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (REPLACE -3 :DIR RL)
                                              (("2" (USE "isMax_Unique")
                                                (("2" (EXPAND "Unique?")
                                                  (("2"
                                                    (INST -1 "r" "p"
                                                     "RND_Max(b)(r)")
                                                    (("2" (ASSERT)
                                                      (("2" (SPLIT)
                                                        (("1"
                                                          (LEMMA
                                                           "FcanonicUnique")
                                                          (("1"
                                                            (INST -1 "b" "p"
                                                             "RND_Max(b)(r)")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (USE "RND_Max_isMax")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "rle_rounded_r0")
                              (("2"
                                (INST -1 "b" " RND_Min(b)(r)" "r" "isMin?(b)")
                                (("2" (ASSERT)
                                  (("2" (USE "RND_Min_isMin")
                                    (("2" (ASSERT)
                                      (("2" (TYPEPRED "RND_Min(b)(r)")
                                        (("2" (USE "FcanonicBounded")
                                          (("2" (ASSERT)
                                            (("2" (USE "isMin_RoundedMode")
                                              (("2" (HIDE-ALL-BUT (-1 1))
                                                (("2" (EXPAND "RoundedMode?")
                                                  (("2"
                                                    (EXPAND "rounded_mode?")
                                                    (("2" (EXPAND "Total?")
                                                      (("2" (EXPAND "total?")
                                                        (("2" (FLATTEN)
                                                          (("2" (SPLIT)
                                                            (("1" (PROPAX) NIL
                                                              NIL)
                                                             ("2"
                                                              (EXPAND
                                                               "Compatible?")
                                                              (("2"
                                                                (EXPAND
                                                                 "compatible?")
                                                                (("2" (HIDE -1)
                                                                  (("2" (SKEEP)
                                                                    (("2"
                                                                      (INSTEEP)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3"
                                                              (EXPAND
                                                               "MinOrMax?")
                                                              (("3"
                                                                (EXPAND
                                                                 "min_or_max?")
                                                                (("3" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("4"
                                                              (EXPAND
                                                               "Monotone?")
                                                              (("4"
                                                                (EXPAND
                                                                 "monotone?")
                                                                (("4" (SKEEP)
                                                                  (("4"
                                                                    (INSTEEP
                                                                     -7)
                                                                    (("4"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "Closest_min_or_max")
                      (("2" (INST -1 "b")
                        (("2" (EXPAND "min_or_max?")
                          (("2" (INST -1 "r" "p")
                            (("2" (ASSERT)
                              (("2" (SPLIT -1)
                                (("1" (USE "isMin_Unique")
                                  (("1" (EXPAND "Unique?")
                                    (("1" (INST -1 "r" "p" "RND_Min(b)(r)")
                                      (("1" (ASSERT)
                                        (("1" (USE "RND_Min_isMin")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -2)
                                              (("1"
                                                (USE "min_is_max_implies_ftor")
                                                (("1" (SPLIT)
                                                  (("1" (REPLACE -1 :DIR RL)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "abs")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (USE "FcanonicUnique")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "isMax_Unique")
                                  (("2" (EXPAND "Unique?")
                                    (("2" (INST -1 "r" "p" "RND_Max(b)(r)")
                                      (("2" (ASSERT)
                                        (("2" (USE "RND_Max_isMax")
                                          (("2" (ASSERT)
                                            (("2" (REPLACE -2)
                                              (("2"
                                                (USE "min_is_max_implies_ftor")
                                                (("2" (SPLIT)
                                                  (("1" (REPLACE -5 :DIR RL)
                                                    (("1" (REPLACE -1 :DIR RL)
                                                      (("1" (ASSERT)
                                                        (("1" (EXPAND "abs")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (USE "FcanonicUnique")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (USE "RND_Max_isMax") NIL NIL)
                     ("4" (USE "RND_Min_isMin") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|closest_ulp| 0
  (|closest_ulp-1| |nil| 3681666755
   ("" (SKEEP)
    (("" (CASE "r>=0")
      (("1" (USE "closest_ulp_pos") (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (LEMMA "closest_ulp_pos")
        (("2" (INST -1 "b" "Fopp(p)" "-r")
          (("2" (SPLIT)
            (("1" (USE "FoppCorrect")
              (("1" (REPLACE -1)
                (("1" (HIDE -1)
                  (("1" (CASE "abs(-FtoR(p) - -r) = abs(FtoR(p) - r)")
                    (("1" (REPLACE -1)
                      (("1" (ASSERT)
                        (("1" (HIDE -1)
                          (("1" (EXPAND "ulp")
                            (("1" (EXPAND "ulp")
                              (("1" (EXPAND "RND_ToZero")
                                (("1" (EXPAND "RND_Max")
                                  (("1" (USE "FulpOpp")
                                    (("1" (SPLIT)
                                      (("1" (REPLACE -1)
                                        (("1" (PROPAX) NIL NIL)) NIL)
                                       ("2" (USE "FcanonicBounded")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (EXPAND "abs") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (LEMMA "FcanonicOpp")
              (("2" (INST -1 "b" "p") (("2" (ASSERT) NIL NIL)) NIL)) NIL)
             ("3" (USE "ClosestFopp")
              (("3" (ASSERT)
                (("3" (USE "FcanonicBounded") (("3" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("4" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

