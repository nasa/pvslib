(accum_err_ln
 (ln_aerr_bound_TCC1 0
  (ln_aerr_bound_TCC1-1 nil 3709714195 ("" (subtype-tcc) nil nil) nil
   nil (ln_aerr_bound subtype "accum_err_ln.r1" "nznum")))
 (ln_aerr_bound_TCC2 0
  (ln_aerr_bound_TCC2-1 nil 3709714195
   ("" (skeep :preds? t)
    (("" (case "1 - e1 / r1 > 0")
      (("1" (assert) nil nil)
       ("2" (hide 2)
        (("2" (both-sides "*" "r1" 1)
          (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos_times_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil))
   nil
   (ln_aerr_bound subtype
    "(number_fields.-)(1, number_fields./(accum_err_ln.e1, accum_err_ln.r1))"
    "posreal")))
 (ln_aerr_bound_TCC3 0
  (ln_aerr_bound_TCC3-1 nil 3709916974
   ("" (skeep)
    (("" (with-tccs (case "ln(1 - e1 / r1) <= 0"))
      (("" (assert)
        (("" (hide 2)
          (("" (lemma "ln_le_0")
            (("" (inst? -1 :where 1)
              (("1" (with-tccs (assert))
                (("1" (both-sides "+" "e1/r1" 1)
                  (("1" (assert)
                    (("1" (both-sides "-" "1" 1)
                      (("1" (assert) (("1" (grind-reals) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (with-tccs (assert)) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r1 skolem-const-decl "real" accum_err_ln nil)
    (e1 skolem-const-decl "{e1 | 0 < r1 - e1}" accum_err_ln nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ln_le_0 formula-decl nil ln_exp lnexp))
   nil
   (ln_aerr_bound subtype
    "(number_fields.-)(ln_exp.ln((number_fields.-)(1, number_fields./(accum_err_ln.e1, accum_err_ln.r1))))"
    "nonneg_real")))
 (ln_accum_err_TCC1 0
  (ln_accum_err_TCC1-1 nil 3709714195 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (vNum const-decl "posnat" float nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil
   (ln_accum_err subtype
    "float[accum_err_ln.radix].FtoR(accum_err_ln.f1)" "posreal")))
 (ln_accum_err_TCC2 0
  (ln_accum_err_TCC2-1 nil 3709714195 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (vNum const-decl "posnat" float nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil (ln_accum_err subtype "accum_err_ln.r1" "posreal")))
 (ln_accum_err 0
  (ln_accum_err-3 "" 3709921613
   ("" (skeep)
    (("" (expand "ln_aerr_bound")
      (("" (assert)
        (("" (with-tccs (case "-ln(1 - e1 / r1) = ln(r1) - ln(r1-e1)"))
          (("1" (replace -1 :hide? t)
            (("1" (case "FtoR(f1)<=r1")
              (("1" (lemma "abs_diff_commute")
                (("1" (inst? -1 :where 1)
                  (("1" (replace -1 :hide? t)
                    (("1" (use "ln_increasing")
                      (("1" (expand "increasing?")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (expand "abs" 1)
                              (("1"
                                (case "r1-e1<=FtoR(f1)")
                                (("1"
                                  (use "ln_increasing")
                                  (("1"
                                    (expand "increasing?")
                                    (("1"
                                      (inst? -1 :where -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind-reals) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "r1<=FtoR(f1)")
                (("1" (hide 1)
                  (("1" (use "ln_increasing")
                    (("1" (expand "increasing?")
                      (("1" (inst? -1 :where -2)
                        (("1" (assert)
                          (("1" (expand "abs" 1)
                            (("1"
                              (case "ln(FtoR(f1)) - ln(r1) <= ln(r1+e1) - ln(r1)")
                              (("1"
                                (case
                                 "ln(r1 + e1) - ln(r1) <= ln(r1) - ln(r1 - e1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (1 -5))
                                  (("2"
                                    (case "(r1+e1)/r1 <= r1/(r1-e1)")
                                    (("1"
                                      (use "ln_increasing")
                                      (("1"
                                        (expand "increasing?")
                                        (("1"
                                          (inst? -1 :where -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use "ln_div")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use "ln_div")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind-reals) nil nil)
                                           ("3" (grind-reals) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (both-sides "*" "(r1-e1)" 1)
                                        (("1"
                                          (use "div_cancel2")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (both-sides "/" "r1" 1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind-reals) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case "FtoR(f1)<= r1 + e1")
                                  (("1"
                                    (use "ln_increasing")
                                    (("1"
                                      (expand "increasing?")
                                      (("1"
                                        (inst? -1 :where -2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind-reals) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 -2))
            (("2" (case "1 - e1 / r1 = (r1 -e1)/r1")
              (("1" (replace -1 :hide? t)
                (("1" (use "ln_div")
                  (("1" (replace -1 :hide? t) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind-reals) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (ln_aerr_bound const-decl "nonneg_real" accum_err_ln nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (ln_increasing formula-decl nil ln_exp lnexp)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_ln nil)
    (r1 skolem-const-decl "real" accum_err_ln nil)
    (ln_div formula-decl nil ln_exp lnexp)
    (pos_div_gt formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (ln_accum_err-2 nil 3709717139
   ("" (skeep)
    (("" (expand "exp_aerr_bound")
      (("" (case "r1<=FtoR(f1)")
        (("1"
          (case "abs(exp(FtoR(f1)) - exp(r1)) = exp(FtoR(f1)) - exp(r1)")
          (("1" (replace -1 :hide? t)
            (("1" (case "FtoR(f1)<= r1 + e1")
              (("1" (use "exp_increasing")
                (("1" (expand "increasing?")
                  (("1" (inst? -1 :where -2)
                    (("1" (assert)
                      (("1" (both-sides "-" "exp(r1)" -1)
                        (("1" (use "exp_sum")
                          (("1" (assert) nil)))))))))))))
               ("2" (grind-reals) nil)))))
           ("2" (hide 2)
            (("2" (use "exp_increasing")
              (("2" (expand "increasing?")
                (("2" (inst? -1 :where -2)
                  (("2" (assert)
                    (("2" (expand "abs" 1)
                      (("2" (propax) nil)))))))))))))))
         ("2" (case "FtoR(f1)<= r1")
          (("1" (hide 1)
            (("1" (lemma "abs_diff_commute")
              (("1" (inst? -1 :where 1)
                (("1" (replace -1 :hide? t)
                  (("1"
                    (case "abs(exp(r1) - exp(FtoR(f1))) = exp(r1) - exp(FtoR(f1))")
                    (("1" (replace -1 :hide? t)
                      (("1"
                        (case "exp(r1) - exp(FtoR(f1)) <= exp(r1+e1) - exp(FtoR(f1)+e1)")
                        (("1"
                          (case "exp(r1 + e1) - exp(FtoR(f1) + e1) <= exp(r1 + e1) - exp(r1)")
                          (("1" (use "exp_sum")
                            (("1" (replace -1 :hide? t)
                              (("1" (assert) nil)))))
                           ("2" (hide 2)
                            (("2" (case "r1<=FtoR(f1)+e1")
                              (("1"
                                (use "exp_increasing")
                                (("1"
                                  (expand "increasing?")
                                  (("1"
                                    (inst? -1 :where -2)
                                    (("1" (assert) nil)))))))
                               ("2" (grind-reals) nil)))))))
                         ("2" (hide 2)
                          (("2"
                            (case "exp(r1 + e1) - exp(FtoR(f1) + e1) = (exp(r1) - exp(FtoR(f1)))*exp(e1)")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (case "1<=exp(e1)")
                                (("1"
                                  (lemma "le_times_le_pos")
                                  (("1"
                                    (inst
                                     -1
                                     "1"
                                     "exp(r1) - exp(FtoR(f1))"
                                     "exp(r1) - exp(FtoR(f1))"
                                     "exp(e1)")
                                    (("1" (assert) nil)
                                     ("2"
                                      (use "exp_increasing")
                                      (("2"
                                        (expand "increasing?")
                                        (("2"
                                          (inst? -1 :where -3)
                                          (("2" (assert) nil)))))))))))
                                 ("2"
                                  (use "exp_increasing")
                                  (("2"
                                    (expand "increasing?")
                                    (("2"
                                      (inst -1 "0" "e1")
                                      (("2" (assert) nil)))))))))))
                             ("2" (hide 2)
                              (("2"
                                (use "exp_sum")
                                (("2"
                                  (replace -1 :hide? t)
                                  (("2"
                                    (use "exp_sum")
                                    (("2"
                                      (replace -1 :hide? t)
                                      (("2"
                                        (assert)
                                        nil)))))))))))))))))))
                     ("2" (hide 2)
                      (("2" (use "exp_increasing")
                        (("2" (expand "increasing?")
                          (("2" (inst? -1 :where -2)
                            (("2" (assert)
                              (("2"
                                (expand "abs")
                                (("2"
                                  (propax)
                                  nil)))))))))))))))))))))))
           ("2" (assert) nil))))))))
    nil)
   nil nil)
  (ln_accum_err-1 nil 3682182651
   ("" (expand "ln_aerr_bound")
    (("" (skeep)
      (("" (use "abs_ln_minus_le")
        (("" (lemma "ln_le")
          (("" (inst? -1 :where -3)
            (("" (replace -1 :hide? t :dir rl) (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil))
   nil))
 (ln_ulp_bound_TCC1 0
  (ln_ulp_bound_TCC1-1 nil 3682182607 ("" (subtype-tcc) nil nil) nil
   nil
   (ln_ulp_bound subtype
    "(number_fields.-)(accum_err_ln.r1, accum_err_ln.e1)" "posreal")))
 (ln_ulp_bound_TCC2 0
  (ln_ulp_bound_TCC2-1 nil 3709986253 ("" (subtype-tcc) nil nil) nil
   nil
   (ln_ulp_bound subtype
    "(number_fields.+)(accum_err_ln.r1, accum_err_ln.e1)" "posreal")))
 (Fln_accum_err_bound_TCC1 0
  (Fln_accum_err_bound_TCC1-1 nil 3709916974 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (vNum const-decl "posnat" float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil
   (Fln_accum_err_bound subtype "accum_err_ln.e1"
    "{e1 | reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0)}")))
 (Fln_accum_err_bound 0
  (Fln_accum_err_bound-1 nil 3682182717
   ("" (skeep)
    (("" (expand "ln_ulp_bound")
      (("" (assert)
        (("" (case "r1-e1<=FtoR(f1)")
          (("1" (use "ln_increasing")
            (("1" (expand "increasing?")
              (("1" (inst? -1 :where -2)
                (("1" (assert)
                  (("1" (case "FtoR(f1)<=r1+e1")
                    (("1" (use "ln_increasing")
                      (("1" (expand "increasing?")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1"
                              (case "FORALL(x,y,z:real): x<=y AND y<=z IMPLIES abs(y) <= max(abs(x),abs(z))")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind-reals) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((ln_ulp_bound const-decl "real" accum_err_ln nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (ln const-decl "real" ln_exp lnexp)
    (minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ln_increasing formula-decl nil ln_exp lnexp)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ln_prf_TCC1 0
  (ln_prf_TCC1-1 nil 3682180774 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ln_prf subtype "ln_exp.ln"
    "[(LAMBDA (r1): reals.>(accum_err_ln.r1, 0)) -> real]")))
 (ln_prf_TCC2 0
  (ln_prf_TCC2-2 nil 3709716505 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ln_prf subtype "accum_err_ln.ln_aerr_bound"
    "[[r1: reals.real, {e1: real_types.nonneg_real | reals.>((number_fields.-)(r1, e1), 0)}] -> real]"))
  (ln_prf_TCC2-1 nil 3682180774
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil))
      nil))
    nil)
   ((ulp_monotone formula-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil))
   nil
   (ln_prf subtype "accum_err_ln.ln_aerr_bound"
    "[[r1: reals.real, {e1: real_types.nonneg_real | reals.>((number_fields.-)(r1, e1), 0)}] -> real]")))
 (ln_prf_TCC3 1
  (ln_prf_TCC3-3 nil 3709716520
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil))
      nil))
    nil)
   ((ulp_monotone formula-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)"))
  (ln_prf_TCC3-2 nil 3709715815
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (skeep)
        (("" (use "round_even_closest") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((b formal-const-decl "Format" accum_err_ln nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ulp_abs formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)"))
  (ln_prf_TCC3-1 nil 3682180774
   ("" (skeep) (("" (use "ln_accum_err") (("" (assert) nil nil)) nil))
    nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)")))
 (ln_prf_TCC4 0
  (ln_prf_TCC4-4 nil 3709997355
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil))
      nil))
    nil)
   ((ulp_monotone formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))"))
  (ln_prf_TCC4-3 nil 3709716625
   ("" (skeep) (("" (use "ln_accum_err") (("" (assert) nil nil)) nil))
    nil)
   ((float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))"))
  (ln_prf_TCC4-2 nil 3709715800
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil))
      nil))
    nil)
   ((ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (rounded_mode? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (ulp_monotone formula-decl nil float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))"))
  (ln_prf_TCC4-1 nil 3682180774
   ("" (skeep)
    (("" (use "Fln_error_ulp")
      (("" (typepred "round")
        (("" (skeep)
          (("" (inst?)
            (("" (assert)
              (("" (expand "EvenClosest?") (("" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (FtoR const-decl "real" float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))")))
 (ln_prf_TCC5 0
  (ln_prf_TCC5-5 "" 3790103556
   ("" (skeep) (("" (use "ln_accum_err") (("" (assert) nil nil)) nil))
    nil)
   ((ln_accum_err formula-decl nil accum_err_ln nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (ln_prf_TCC5-4 nil 3709997305
   ("" (skeep) (("" (use "ln_accum_err") (("" (assert) nil)))) nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (ln_prf_TCC5-3 nil 3709716557
   ("" (skeep)
    (("" (use "Fln_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Fln_error_ulp formula-decl nil std_ln nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (FtoR const-decl "real" float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (ln_prf_TCC5-2 nil 3709715772
   ("" (skeep) (("" (use "ln_accum_err") (("" (assert) nil nil)) nil))
    nil)
   ((float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (ln_prf_TCC5-1 nil 3682180774
   ("" (skeep)
    (("" (use "Fln_accum_err_bound") (("" (assert) nil nil)) nil)) nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (ln_prf_TCC6 0
  (ln_prf_TCC6-5 "" 3790103557
   ("" (skeep)
    (("" (use "Fln_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((FtoR const-decl "real" float nil)
    (Fln_error_ulp formula-decl nil std_ln nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)"
           accum_err_ln nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl
     "{RtoF: CanonicRoundingFun(b, round) | exact_rep_conservation[radix](b, round)(RtoF)}"
     accum_err_ln nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (ln_prf_TCC6-4 nil 3709996468
   ("" (skeep)
    (("" (use "Fln_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil))))))))))
    nil)
   ((Fln_error_ulp formula-decl nil std_ln nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (FtoR const-decl "real" float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (ln_prf_TCC6-3 nil 3709716424
   ("" (skeep)
    (("" (use "Fln_accum_err_bound") (("" (assert) nil nil)) nil)) nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (ln_prf_TCC6-2 nil 3709715756
   ("" (skeep)
    (("" (use "Fln_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((FtoR const-decl "real" float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fln_error_ulp formula-decl nil std_ln nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (ln_prf_TCC6-1 nil 3709714195 ("" (assuming-tcc) nil nil) nil nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))")))
 (ln_prf_TCC7 0
  (ln_prf_TCC7-2 nil 3709996451
   ("" (skeep)
    (("" (use "Fln_accum_err_bound") (("" (assert) nil nil)) nil)) nil)
   ((Fln_accum_err_bound formula-decl nil accum_err_ln nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (ln_prf_TCC7-1 nil 3709916974 ("" (assuming-tcc) nil nil) nil nil
   (ln_prf assuming
    "accum_err_op1sch[(float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), restrict[float[radix], (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b)), real].restrict(float[accum_err_ln.radix].FtoR), accum_err_ln.RtoF, float[accum_err_ln.radix].ulp(accum_err_ln.b), LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0), restrict[{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}, (LAMBDA (f1): reals.>(float[accum_err_ln.radix].FtoR(accum_err_ln.f1), 0)), (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))].restrict(std_ln[accum_err_ln.radix, accum_err_ln.b, accum_err_ln.round, accum_err_ln.RtoF].Fln), LAMBDA (r1): reals.>(accum_err_ln.r1, 0), ln_exp.ln, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_aerr_bound, LAMBDA (r1, e1): reals.>((number_fields.-)(accum_err_ln.r1, accum_err_ln.e1), 0), accum_err_ln.ln_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (accum_err_bound_TCC1 0
  (accum_err_bound_TCC1-1 nil 3709916974 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (vNum const-decl "posnat" float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil
   (accum_err_bound subtype "accum_err_ln.f1"
    "{f1 | reals.>(float[accum_err_ln.radix].FtoR(f1), 0)}")))
 (accum_err_bound 0
  (accum_err_bound-1 nil 3682180898
   ("" (skeep)
    (("" (use "ln_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_ln nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_ln nil)
    (restrict const-decl "R" restrict nil)
    (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)"
           accum_err_ln nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl
     "{RtoF: CanonicRoundingFun(b, round) | exact_rep_conservation[radix](b, round)(RtoF)}"
     accum_err_ln nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" float nil)
    (ln const-decl "real" ln_exp lnexp)
    (Fln const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(ln(FtoR(f1)), f2)}" std_ln nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (ln_aerr_bound const-decl "nonneg_real" accum_err_ln nil)
    (ln_ulp_bound const-decl "real" accum_err_ln nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

