(aerr754sp_sqt
 (IMP_accum_err_sqt_TCC1 0
  (IMP_accum_err_sqt_TCC1-1 nil 3682184060 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_accum_err_sqt subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (IMP_accum_err_sqt_TCC2 0
  (IMP_accum_err_sqt_TCC2-1 nil 3698598943 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_accum_err_sqt assuming
    "accum_err_sqt[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_sqt"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_sqt.radix].Fbounded?(accum_err_sqt.b))): booleans.IMPLIES(accum_err_sqt.round(x, f), float[accum_err_sqt.radix].EvenClosest?(accum_err_sqt.b)(x, f))")))
 (IMP_accum_err_sqt_TCC3 0
  (IMP_accum_err_sqt_TCC3-3 "" 3790103509
   ("" (typepred "sp_closest?") (("" (propax) nil nil)) nil)
   ((sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   shostak
   (IMP_accum_err_sqt assuming
    "accum_err_sqt[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_sqt"
    "round_rounded_mode: ASSUMPTION float[accum_err_sqt.radix].rounded_mode?(accum_err_sqt.b)(accum_err_sqt.round)"))
  (IMP_accum_err_sqt_TCC3-2 nil 3698599019 ("" (typepred "sp_closest?"))
   ((sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   nil
   (IMP_accum_err_sqt assuming
    "accum_err_sqt[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_sqt"
    "round_rounded_mode: ASSUMPTION float[accum_err_sqt.radix].rounded_mode?(accum_err_sqt.b)(accum_err_sqt.round)"))
  (IMP_accum_err_sqt_TCC3-1 nil 3698598943 ("" (subtype-tcc) nil nil) nil nil
   (IMP_accum_err_sqt assuming
    "accum_err_sqt[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_sqt"
    "round_rounded_mode: ASSUMPTION float[accum_err_sqt.radix].rounded_mode?(accum_err_sqt.b)(accum_err_sqt.round)")))
 (aeboundsp_sqt_TCC1 0
  (aeboundsp_sqt_TCC1-1 nil 3682264157 ("" (subtype-tcc) nil nil) nil shostak
   (aeboundsp_sqt subtype "aerr754sp_sqt.e1"
    "{e1 | reals.>=(aerr754sp_sqt.r1, 0)}")))
 (Ssqrt_aerr_TCC1 0
  (Ssqrt_aerr_TCC1-1 nil 3682184060 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (StoR const-decl "real" ieee754sp nil) (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak
   (Ssqrt_aerr subtype "aerr754sp_sqt.f1"
    "{f1 | reals.>=(float[2].FtoR(ieee754sp_sqt.f1), 0)}")))
 (Ssqrt_aerr_TCC2 0
  (Ssqrt_aerr_TCC2-1 nil 3682184060 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (StoR const-decl "real" ieee754sp nil) (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak (Ssqrt_aerr subtype "aerr754sp_sqt.r1" "nonneg_real")))
 (Ssqrt_aerr 0
  (Ssqrt_aerr-3 nil 3682264219
   ("" (expand "aeboundsp_sqt")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Ssqrt" 1)
            (("" (expand "ulp_sp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Ssqrt const-decl "{f: unb_single | closest_single?(sqrt(FtoR(f1)))(f)}"
     ieee754sp_sqt nil)
    (accum_err_bound formula-decl nil accum_err_sqt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (aeboundsp_sqt const-decl "nonneg_real" aerr754sp_sqt nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil)
  (Ssqrt_aerr-2 nil 3682264198
   ("" (expand "Ssqrt_aerr")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Ssqrt" 1)
            (("" (expand "ulp_sp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil) ("2" (propax) nil) ("3" (assert) nil)
                   ("4" (assert) nil))))))))))))))))
    nil)
   nil nil)
  (Ssqrt_aerr-1 nil 3682184067
   ("" (skeep)
    (("" (lemma "accum_err_bound")
      (("" (expand "StoR")
        (("" (expand "Ssqrt" 1)
          (("" (expand "ulp_sp")
            (("" (inst?)
              (("" (split -1)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (accum_err_bound formula-decl nil accum_err_sqt nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil))
   nil)))

