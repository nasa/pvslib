(aerr754sp_flr
 (IMP_accum_err_flr_TCC1 0
  (IMP_accum_err_flr_TCC1-1 nil 3682181444 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_accum_err_flr subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (IMP_accum_err_flr_TCC2 0
  (IMP_accum_err_flr_TCC2-3 "" 3790103513
   ("" (skeep) (("" (expand "sp_closest?") (("" (propax) nil nil)) nil)) nil)
   ((sp_closest? const-decl "bool" ieee754sp nil)) shostak
   (IMP_accum_err_flr assuming
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_flr"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_flr.radix].Fbounded?(accum_err_flr.b))): booleans.IMPLIES(accum_err_flr.round(x, f), float[accum_err_flr.radix].EvenClosest?(accum_err_flr.b)(x, f))"))
  (IMP_accum_err_flr_TCC2-2 nil 3698594089
   ("" (skeep)
    (("" (expand "sp_closest?")
      (("" (expand "EvenClosest?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   ((sp_closest? const-decl "bool" ieee754sp nil)) shostak
   (IMP_accum_err_flr assuming
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_flr"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_flr.radix].Fbounded?(accum_err_flr.b))): booleans.IMPLIES(accum_err_flr.round(x, f), float[accum_err_flr.radix].EvenClosest?(accum_err_flr.b)(x, f))"))
  (IMP_accum_err_flr_TCC2-1 nil 3698593250 ("" (subtype-tcc) nil nil)
   ((Format type-eq-decl nil float nil) (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (radix formal-const-decl "above(1)" accum_err_flr nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (EvenClosest? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil))
   nil
   (IMP_accum_err_flr assuming
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_flr"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_flr.radix].Fbounded?(accum_err_flr.b))): booleans.IMPLIES(accum_err_flr.round(x, f), float[accum_err_flr.radix].EvenClosest?(accum_err_flr.b)(x, f))")))
 (IMP_accum_err_flr_TCC3 0
  (IMP_accum_err_flr_TCC3-3 "" 3790103514
   ("" (typepred "sp_closest?") (("" (propax) nil nil)) nil)
   ((sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   shostak
   (IMP_accum_err_flr assuming
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_flr"
    "round_rounded_mode: ASSUMPTION float[accum_err_flr.radix].rounded_mode?(accum_err_flr.b)(accum_err_flr.round)"))
  (IMP_accum_err_flr_TCC3-2 nil 3698699733 ("" (typepred "sp_closest?"))
   ((sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   nil
   (IMP_accum_err_flr assuming
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_flr"
    "round_rounded_mode: ASSUMPTION float[accum_err_flr.radix].rounded_mode?(accum_err_flr.b)(accum_err_flr.round)"))
  (IMP_accum_err_flr_TCC3-1 nil 3698672179 ("" (subtype-tcc) nil nil) nil nil
   (IMP_accum_err_flr assuming
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_flr"
    "round_rounded_mode: ASSUMPTION float[accum_err_flr.radix].rounded_mode?(accum_err_flr.b)(accum_err_flr.round)")))
 (aeboundsp_flr_TCC1 0
  (aeboundsp_flr_TCC1-1 nil 3682355814 ("" (subtype-tcc) nil nil)
   ((RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (flr_aerr_bound const-decl "real" accum_err_flr nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (aeboundsp_flr subtype
    "accum_err_flr[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].flr_aerr_bound(aerr754sp_flr.r1, aerr754sp_flr.e1)"
    "nonneg_real")))
 (Sfloor_aerr 0
  (Sfloor_aerr-2 nil 3682264078
   ("" (expand "aeboundsp_flr")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Sfloor" 1)
            (("" (inst?)
              (("" (split -1) (("1" (propax) nil nil) ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Sfloor const-decl "{f: unb_single | closest_single?(floor(FtoR(f1)))(f)}"
     ieee754sp_flr nil)
    (accum_err_bound formula-decl nil accum_err_flr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (aeboundsp_flr const-decl "nonneg_real" aerr754sp_flr nil))
   nil)
  (Sfloor_aerr-1 nil 3682181469
   ("" (skeep)
    (("" (lemma "accum_err_bound")
      (("" (expand "StoR")
        (("" (expand "Sfloor" 1)
          (("" (expand "ulp_sp")
            (("" (inst?)
              (("" (split -1) (("1" (propax) nil nil) ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (accum_err_bound formula-decl nil accum_err_flr nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil))
   shostak))
 (flr_exact_TCC1 0
  (flr_exact_TCC1-1 nil 3698593975 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (flr_exact subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (aeboundsp_flr_t_TCC1 0
  (aeboundsp_flr_t_TCC1-1 nil 3698593707 ("" (subtype-tcc) nil nil)
   ((RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (flr_t_aerr_bound const-decl "real" accum_err_flr_t nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (aeboundsp_flr_t subtype
    "accum_err_flr_t[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].flr_t_aerr_bound(aerr754sp_flr.r1, aerr754sp_flr.e1)"
    "nonneg_real")))
 (Sfloor_t_aerr 0
  (Sfloor_t_aerr-2 "" 3790103517
   ("" (expand "aeboundsp_flr_t")
    (("" (skeep)
      (("" (lemma "flr_exact.accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Sfloor" 1)
            (("" (inst?)
              (("" (split -1)
                (("1" (propax) nil nil) ("2" (propax) nil nil)
                 ("3" (propax) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Sfloor const-decl "{f: unb_single | closest_single?(floor(FtoR(f1)))(f)}"
     ieee754sp_flr nil)
    (accum_err_bound formula-decl nil accum_err_flr_t nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (aeboundsp_flr_t const-decl "nonneg_real" aerr754sp_flr nil))
   shostak)
  (Sfloor_t_aerr-1 nil 3698593899
   ("" (expand "aeboundsp_flr_t")
    (("" (skeep)
      (("" (lemma "flr_exact.accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Sfloor" 1)
            (("" (expand "ulp_sp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil) ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((StoR const-decl "real" ieee754sp nil)
    (Sfloor const-decl "{f: unb_single | closest_single?(floor(FtoR(f1)))(f)}"
     ieee754sp_flr nil)
    (accum_err_bound formula-decl nil accum_err_flr_t nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp
     nil))
   nil)))

