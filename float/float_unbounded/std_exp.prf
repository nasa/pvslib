(std_exp
 (Fexp_bounded 0
  (Fexp_bounded-1 nil 3708431871
   ("" (skeep)
    (("" (lemma "Fg_bounded")
      (("" (inst -1 "f1")
        (("" (expand "Fexp") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" std_exp nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" std_exp nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" std_exp nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" std_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Fexp const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(exp(FtoR(f1)), f2)}" std_exp
     nil))
   shostak))
 (Fexp_error 0
  (Fexp_error-1 nil 3708432001
   ("" (skeep)
    (("" (lemma "Fg_error")
      (("" (inst -1 "f1")
        (("" (expand "Fexp") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" std_exp nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" std_exp nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" std_exp nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" std_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fexp const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(exp(FtoR(f1)), f2)}" std_exp
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fexp_error_ulp 0
  (Fexp_error_ulp-1 nil 3708432212
   ("" (skeep)
    (("" (lemma "closest_ulp")
      (("" (inst?)
        (("" (split -1)
          (("1" (propax) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" std_exp nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (FtoR const-decl "real" float nil)
    (Fexp const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(exp(FtoR(f1)), f2)}" std_exp
     nil)
    (TRUE const-decl "bool" booleans nil)
    (Fexp_bounded formula-decl nil std_exp nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" std_exp nil))
   nil)))

