(accum_err_op1sch_exact
 (accumulated_error 0
  (accumulated_error-1 nil 3698585179
   ("" (skeep)
    (("" (lemma "fR_err")
      (("" (inst? -1 :where -2)
        (("" (split -1)
          (("1" (use "fF_correctly_rounded")
            (("1" (split -1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil))
              nil))
            nil)
           ("2" (propax) nil nil) ("3" (propax) nil nil)
           ("4" (propax) nil nil) ("5" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((fR_err formula-decl nil accum_err_op1sch_exact nil)
    (fF_correctly_rounded formula-decl nil accum_err_op1sch_exact nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (F formal-type-decl nil accum_err_op1sch_exact nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

