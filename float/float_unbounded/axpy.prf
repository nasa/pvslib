(|axpy|
 (|FcanonicBounded2| 0
  (|FcanonicBounded2-1| |nil| 3320508538
   ("" (SKEEP)
    (("" (TYPEPRED "x1") (("" (REWRITE "FcanonicBounded") NIL NIL)) NIL)) NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL))
   NIL
   (|FcanonicBounded2| SUBTYPE "axpy.x1"
    "{x: float[axpy.radix].float | float[axpy.radix].Fbounded?(axpy.b)(x)}")))
 (|MinOrMax_Rlt| 0
  (|MinOrMax_Rlt-1| |nil| 3320496512
   ("" (SKEEP)
    (("" (EXPAND "MinOrMax?")
      (("" (SPLIT)
        (("1" (REWRITE "RoundedModeUlp" :SUBST ("b" "b" "P" "isMin?"))
          (("1" (REWRITE "isMin_RoundedMode") NIL NIL)) NIL)
         ("2" (REWRITE "RoundedModeUlp" :SUBST ("b" "b" "P" "isMax?"))
          (("2" (REWRITE "isMax_RoundedMode") NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|MinOrMax?| CONST-DECL "bool" |axpy| NIL)
    (|isMin_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|isMin?| CONST-DECL "bool" |float| NIL) (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|RoundedModeUlp| FORMULA-DECL NIL |float| NIL)
    (|isMax_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|isMax?| CONST-DECL "bool" |float| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|MinOrMax_Fopp_TCC1| 0
  (|MinOrMax_Fopp_TCC1-1| |nil| 3320496511
   ("" (SKEEP) (("" (REWRITE "FoppBounded") NIL NIL)) NIL)
   ((|FoppBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL))
   NIL
   (|MinOrMax_Fopp| SUBTYPE "float[axpy.radix].Fopp(axpy.f)"
    "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|MinOrMax_Fopp| 0
  (|MinOrMax_Fopp-1| |nil| 3320496618
   ("" (SKEEP)
    (("" (EXPAND "MinOrMax?")
      (("" (SPLIT)
        (("1" (SKOSIMP*) (("1" (REWRITE "MinOppMax") NIL NIL)) NIL)
         ("2" (SKOSIMP*) (("2" (REWRITE "MaxOppMin") NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|MinOrMax?| CONST-DECL "bool" |axpy| NIL)
    (|MinOppMax| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|MaxOppMin| FORMULA-DECL NIL |float| NIL))
   SHOSTAK))
 (|MinOrMax1_TCC1| 0
  (|MinOrMax1_TCC1-1| |nil| 3320496511
   ("" (SKEEP)
    (("" (REWRITE "FcanonicBounded") (("" (REWRITE "FpredCanonic") NIL NIL))
      NIL))
    NIL)
   ((|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL))
   NIL
   (|MinOrMax1| SUBTYPE "float[axpy.radix].Fpred(axpy.b)(axpy.f)"
    "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|MinOrMax1_TCC2| 0
  (|MinOrMax1_TCC2-1| |nil| 3320504768
   ("" (SKEEP) (("" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
   ((|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL (|MinOrMax1| SUBTYPE "axpy.f" "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|MinOrMax1| 0
  (|MinOrMax1-1| |nil| 3320504301
   ("" (SKEEP)
    (("" (CASE "z <= FtoR(f)")
      (("1" (EXPAND "abs" -4)
        (("1" (GRIND-REALS)
          (("1" (EXPAND "MinOrMax?")
            (("1" (SKOSIMP*)
              (("1" (HIDE 1)
                (("1" (EXPAND "isMax?")
                  (("1" (SKOSIMP*)
                    (("1" (LEMMA "FsuccFpred" :SUBST ("f" "f" "b" "b"))
                      (("1" (SPLIT)
                        (("1" (REPLACE -1 1 :DIR RL)
                          (("1"
                            (CASE-REPLACE "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                            (("1" (REWRITE "FsuccProp")
                              (("1" (TRANS-INEQ 1 "z" :STRICT 1)
                                (("1"
                                  (TRANS-INEQ 1
                                   " FtoR[radix](f)-Fulp(b)(Fpred(b)(f))"
                                   :STRICT 2)
                                  (("1" (REWRITE "FpredDiff" :DIR RL)
                                    (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (REWRITE "FpredCanonic") NIL NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (EXPAND "abs" -4)
          (("2" (GRIND-REALS)
            (("2" (EXPAND "MinOrMax?")
              (("2" (SKOSIMP*)
                (("2" (HIDE 2)
                  (("2" (EXPAND "isMin?")
                    (("2" (SKOSIMP*)
                      (("2" (LEMMA "FpredFsucc" :SUBST ("f" "f" "b" "b"))
                        (("2" (SPLIT)
                          (("1" (REPLACE -1 1 :DIR RL)
                            (("1"
                              (CASE-REPLACE
                               "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                              (("1" (REWRITE "FpredProp")
                                (("1" (TRANS-INEQ 1 "z" :STRICT 2)
                                  (("1"
                                    (TRANS-INEQ 1
                                     "FtoR(f)+Fulp(b)(Fpred(b)(f))" :STRICT 1)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (TRANS-INEQ 1 "FtoR(f)+Fulp(b)(f)")
                                      (("1" (ASSERT)
                                        (("1" (REWRITE "FulpFpred1") NIL NIL))
                                        NIL)
                                       ("2" (REWRITE "FsuccDiff" :DIR RL)
                                        (("2" (ASSERT) NIL NIL)) NIL)
                                       ("3" (SKOSIMP*)
                                        (("3" (REWRITE "FcanonicBounded") NIL
                                          NIL))
                                        NIL)
                                       ("4" (REWRITE "FcanonicBounded") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "FsuccCanonic") NIL NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|isMin?| CONST-DECL "bool" |float| NIL)
    (|FpredFsucc| FORMULA-DECL NIL |float| NIL)
    (|FsuccCanonic| FORMULA-DECL NIL |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|FsuccDiff| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|FpredProp| FORMULA-DECL NIL |float| NIL)
    (|Fsucc| CONST-DECL "float" |float| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|MinOrMax?| CONST-DECL "bool" |axpy| NIL)
    (|Fnormalize| DEF-DECL
     "{x: (Fcanonic?(b)) | FtoR(x) = FtoR(f):: real AND Fexp(x) <= Fexp(f)}"
     |float| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|FsuccProp| FORMULA-DECL NIL |float| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|FsuccFpred| FORMULA-DECL NIL |float| NIL)
    (|isMax?| CONST-DECL "bool" |float| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|MinOrMax2_TCC1| 0
  (|MinOrMax2_TCC1-1| |nil| 3320505812
   ("" (SKEEP) (("" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
   ((|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL))
   NIL (|MinOrMax2| SUBTYPE "axpy.f" "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|MinOrMax2| 0
  (|MinOrMax2-1| |nil| 3320505496
   ("" (SKEEP)
    (("" (EXPAND* "MinOrMax?" "isMin?")
      (("" (SKOSIMP*)
        (("" (SPLIT)
          (("1" (PROPAX) NIL NIL)
           ("2" (SKOSIMP*)
            (("2" (HIDE 2)
              (("2" (LEMMA "FpredFsucc" :SUBST ("f" "f" "b" "b"))
                (("2" (CASE-REPLACE "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                  (("1" (SPLIT)
                    (("1" (REPLACE -1 1 :DIR RL)
                      (("1" (REWRITE "FpredProp")
                        (("1" (HIDE 2 -1 -2)
                          (("1" (TRANS-INEQ 1 "z" :STRICT 2)
                            (("1" (EXPAND "abs" -4)
                              (("1"
                                (TRANS-INEQ 1 "FtoR(f)+Fulp(b)(f)" :STRICT 1)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (REWRITE "FsuccDiff" :DIR RL)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FsuccCanonic") NIL NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|isMin?| CONST-DECL "bool" |float| NIL)
    (|MinOrMax?| CONST-DECL "bool" |axpy| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|FpredFsucc| FORMULA-DECL NIL |float| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Fnormalize| DEF-DECL
     "{x: (Fcanonic?(b)) | FtoR(x) = FtoR(f):: real AND Fexp(x) <= Fexp(f)}"
     |float| NIL)
    (|FsuccCanonic| FORMULA-DECL NIL |float| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|FsuccDiff| FORMULA-DECL NIL |float| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|FpredProp| FORMULA-DECL NIL |float| NIL)
    (|Fsucc| CONST-DECL "float" |float| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|MinOrMax3_TCC1| 0
  (|MinOrMax3_TCC1-1| |nil| 3320506118
   ("" (SKEEP) (("" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
   ((|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL))
   NIL (|MinOrMax3| SUBTYPE "axpy.f" "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|MinOrMax3| 0
  (|MinOrMax3-1| |nil| 3320505840
   ("" (SKEEP)
    (("" (CASE "z <= FtoR(f)")
      (("1" (EXPAND "abs" -4)
        (("1" (GRIND-REALS)
          (("1" (EXPAND* "MinOrMax?" "isMax?")
            (("1" (SKOSIMP*)
              (("1" (HIDE 1)
                (("1" (LEMMA "FsuccFpred" :SUBST ("f" "f" "b" "b"))
                  (("1" (SPLIT)
                    (("1" (REPLACE -1 1 :DIR RL)
                      (("1" (CASE-REPLACE "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                        (("1" (REWRITE "FsuccProp")
                          (("1" (HIDE 2 -1 -2)
                            (("1" (TRANS-INEQ 1 "z" :STRICT 1)
                              (("1"
                                (TRANS-INEQ 1 "FtoR[radix](f) -Fulp(b)(f)"
                                 :STRICT 2)
                                (("1" (REWRITE "FulpCanonic")
                                  (("1"
                                    (CASE-REPLACE
                                     "f=(# Fnum:=0, Fexp:=-dExp(b) #)")
                                    (("1" (HIDE-ALL-BUT 1)
                                      (("1" (EXPAND* "Fpred" "FtoR")
                                        (("1" (GRIND-REALS)
                                          (("1" (LEMMA "radix_less_vNum")
                                            (("1" (INST -1 "b")
                                              (("1" (HIDE 1)
                                                (("1" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (REWRITE "FcanonicUnique" :SUBST
                                       ("b" "b" "p" "f" "q"
                                        "(# Fnum := 0, Fexp := -dExp(b) #)"))
                                      (("1" (REWRITE -3 :DIR RL)
                                        (("1" (EXPAND "FtoR" 1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2"
                                          (EXPAND* "Fcanonic?" "Fsubnormal?"
                                           "Fbounded?")
                                          (("2" (GRIND-REALS)
                                            (("2" (EXPAND "abs")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FpredCanonic") NIL NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (EXPAND* "MinOrMax?" "isMin?")
          (("2" (SKOSIMP*)
            (("2" (SPLIT)
              (("1" (ASSERT) NIL NIL)
               ("2" (SKOSIMP*)
                (("2" (EXPAND "abs" -5)
                  (("2" (GRIND-REALS)
                    (("2" (HIDE 2)
                      (("2" (LEMMA "FpredFsucc" :SUBST ("f" "f" "b" "b"))
                        (("2" (SPLIT)
                          (("1" (REPLACE -1 1 :DIR RL)
                            (("1"
                              (CASE-REPLACE
                               "FtoR(f!1)=FtoR(Fnormalize(b)(f!1))")
                              (("1" (REWRITE "FpredProp")
                                (("1" (HIDE -1 -2 2)
                                  (("1" (TRANS-INEQ 1 "z" :STRICT 2)
                                    (("1"
                                      (TRANS-INEQ 1 "FtoR(f)+Fulp(b)(f)"
                                       :STRICT 1)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (REWRITE "FulpCanonic")
                                        (("2"
                                          (CASE-REPLACE
                                           "f=(# Fnum:=0, Fexp:=-dExp(b) #)")
                                          (("1" (HIDE-ALL-BUT 1)
                                            (("1" (EXPAND* "Fsucc" "FtoR")
                                              (("1" (GRIND-REALS)
                                                (("1" (HIDE 1)
                                                  (("1"
                                                    (LEMMA "radix_less_vNum")
                                                    (("1" (INST?)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (REWRITE "FcanonicUnique" :SUBST
                                             ("b" "b" "p" "f" "q"
                                              "(# Fnum := 0, Fexp := -dExp(b) #)"))
                                            (("1" (REWRITE -4 :DIR RL)
                                              (("1" (EXPAND "FtoR" 1)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2"
                                                (EXPAND* "Fcanonic?"
                                                 "Fsubnormal?" "Fbounded?")
                                                (("2" (EXPAND "abs")
                                                  (("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "FsuccCanonic") NIL NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Fsucc| CONST-DECL "float" |float| NIL)
    (|FpredProp| FORMULA-DECL NIL |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|FsuccCanonic| FORMULA-DECL NIL |float| NIL)
    (|FpredFsucc| FORMULA-DECL NIL |float| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|isMin?| CONST-DECL "bool" |float| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|isMax?| CONST-DECL "bool" |float| NIL)
    (|MinOrMax?| CONST-DECL "bool" |axpy| NIL)
    (|Fnormalize| DEF-DECL
     "{x: (Fcanonic?(b)) | FtoR(x) = FtoR(f):: real AND Fexp(x) <= Fexp(f)}"
     |float| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|FsuccProp| FORMULA-DECL NIL |float| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|Fulp| CONST-DECL "real" |float| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|zero_is_neg_zero| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|FcanonicUnique| FORMULA-DECL NIL |float| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|radix_less_vNum| FORMULA-DECL NIL |float| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|FsuccFpred| FORMULA-DECL NIL |float| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|RoundLe_TCC1| 0
  (|RoundLe_TCC1-1| |nil| 3320498426
   ("" (SKEEP) (("" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
   ((|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL))
   NIL (|RoundLe| SUBTYPE "axpy.f" "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|RoundLe_TCC2| 0
  (|RoundLe_TCC2-1| |nil| 3320498426
   ("" (SKEEP) (("" (EXPAND* "FtoR" "abs") (("" (GRIND-REALS) NIL NIL)) NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_times1| FORMULA-DECL NIL |real_props| NIL))
   NIL
   (|RoundLe| SUBTYPE "(number_fields.*(2, real_defs.abs(Fnum(axpy.f))))"
    "nznum")))
 (|RoundLe_TCC3| 0
  (|RoundLe_TCC3-1| |nil| 3320498426
   ("" (SKOSIMP*) (("" (FIELD -3) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|RoundLe| SUBTYPE
    "((number_fields.-)(1, number_fields./(1, (number_fields.*(2, real_defs.abs(Fnum(axpy.f)))))))"
    "nznum")))
 (|RoundLe| 0
  (|RoundLe-1| |nil| 3320498427
   ("" (ASSERT)
    (("" (SKEEP)
      (("" (ASSERT)
        (("" (CASE "0 < abs(Fnum(f))")
          (("1" (CASE "0 < 1 - 1 / (2 * abs(Fnum(f)))")
            (("1" (MULT-BY 2 "(1 - 1 / (2 * abs(Fnum(f))))")
              (("1"
                (CASE-REPLACE
                 " abs(FtoR[radix](f)) * (1 - 1 / (2 * abs(Fnum(f)))) = 
          abs(FtoR(f))-Fulp(b)(f)/2")
                (("1" (MOVE-TERMS 2 L 2)
                  (("1" (MOVE-TERMS 2 R 1)
                    (("1" (TRANS-INEQ 2 "abs(FtoR(f)-z)")
                      (("1" (EXPAND "abs" 1) (("1" (GRIND-REALS) NIL NIL)) NIL)
                       ("2" (REWRITE "ClosestUlp")
                        (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2 3)
                  (("2" (FIELD 1)
                    (("2" (REWRITE "FulpCanonic")
                      (("2" (EXPAND "FtoR" 1)
                        (("2" (REWRITE "abs_mult")
                          (("2" (EXPAND "abs" 1 2) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "1 <= abs(Fnum(f))")
              (("1" (FIELD 1) NIL NIL)
               ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (1 2))
            (("2" (EXPAND* "abs" "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL))
   SHOSTAK))
 (|RoundGe_TCC1| 0
  (|RoundGe_TCC1-1| |nil| 3320499635 ("" (SKEEP) (("" (FIELD -3) NIL NIL)) NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL))
   NIL
   (|RoundGe| SUBTYPE
    "((number_fields.+)(1, number_fields./(1, (number_fields.*(2, real_defs.abs(Fnum(axpy.f)))))))"
    "nznum")))
 (|RoundGe| 0
  (|RoundGe-1| |nil| 3320499635
   ("" (SKEEP)
    (("" (CASE "0 < abs(Fnum(f))")
      (("1" (CASE "0 < 1 + 1 / (2 * abs(Fnum(f)))")
        (("1" (MULT-BY 2 "(1 + 1 / (2 * abs(Fnum(f))))")
          (("1" (ASSERT)
            (("1"
              (CASE-REPLACE " abs(FtoR[radix](f)) * (1 / (2 * abs(Fnum(f)))) = 
          Fulp(b)(f)/2")
              (("1" (MOVE-TERMS 2 R 1)
                (("1" (TRANS-INEQ 2 "abs(FtoR(f)-z)")
                  (("1" (HIDE-ALL-BUT 1)
                    (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL))
                    NIL)
                   ("2" (REWRITE "ClosestUlp")
                    (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (FIELD 1)
                (("2" (REWRITE "FulpCanonic")
                  (("2" (HIDE-ALL-BUT 1)
                    (("2" (EXPAND* "abs" "FtoR") (("2" (GRIND-REALS) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FIELD 1) NIL NIL))
        NIL)
       ("2" (HIDE-ALL-BUT (1 2))
        (("2" (EXPAND* "abs" "FtoR") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL))
   SHOSTAK))
 (|ExactSum_Near_TCC1| 0
  (|ExactSum_Near_TCC1-1| |nil| 3320510642 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|ExactSum_Near| SUBTYPE "((number_fields.-)(dExp(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|ExactSum_Near| 0
  (|ExactSum_Near-1| |nil| 3320510940
   ("" (SKEEP)
    (("" (LEMMA "errorBoundedPlus")
      (("" (INST -1 "b" "f" "p" "q")
        (("" (SPLIT)
          (("1" (SKOSIMP*)
            (("1" (CASE "FtoR(e!1)=0")
              (("1" (ASSERT) NIL NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "e!1")
                  (("2" (EXPAND "Fbounded?" -1)
                    (("2" (FLATTEN)
                      (("2" (EXPAND "FtoR" 1)
                        (("2" (CASE "abs(Fnum(e!1)) < 1")
                          (("1" (GRIND-REALS) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (MULT-BY 1 "radix ^ (-dExp(b))")
                              (("2"
                                (TRANS-INEQ 1
                                 "abs(FtoR[radix](f) - (FtoR[radix](p) + FtoR[radix](q)))"
                                 :STRICT 2)
                                (("1" (TRANS-INEQ 1 "abs(FtoR(e!1))")
                                  (("1" (EXPAND "FtoR" 1)
                                    (("1" (REWRITE "abs_mult")
                                      (("1" (EXPAND "abs" 1 3)
                                        (("1" (GRIND-REALS)
                                          (("1" (REWRITE "Exp_increq_1") NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REWRITE -3)
                                    (("2" (EXPAND "abs" 1)
                                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
           ("5" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|errorBoundedPlus| FORMULA-DECL NIL |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Normal_iff_TCC1| 0
  (|Normal_iff_TCC1-1| |nil| 3320748868 ("" (SUBTYPE-TCC) NIL NIL)
   ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Normal_iff| SUBTYPE
    "((number_fields.-)((number_fields.-)(Prec(axpy.b), 1), dExp(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Normal_iff| 0
  (|Normal_iff-1| |nil| 3320748869
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SKOSIMP*)
        (("1" (HIDE -2)
          (("1" (EXPAND* "Fnormal?" "Fbounded?")
            (("1" (FLATTEN)
              (("1" (CASE "radix /= 0")
                (("1"
                  (TRANS-INEQ 1
                   ("radix ^ (Prec(b) - 1)*radix ^(-dExp(b))"
                    "radix ^ (Prec(b) - 1)*radix ^(Fexp(f))"))
                  (("1" (REWRITE "expt_plus" :DIR RL) (("1" (ASSERT) NIL NIL))
                    NIL)
                   ("2" (DIV-BY 1 "radix ^ (Prec(b) - 1)")
                    (("2" (REWRITE "Exp_increq_1") NIL NIL)) NIL)
                   ("3" (EXPAND "FtoR")
                    (("3" (REWRITE "abs_mult")
                      (("3" (EXPAND "abs" 1 2)
                        (("3" (DIV-BY 1 "radix ^ (Fexp(f))")
                          (("3" (MULT-BY 1 "radix")
                            (("3" (REWRITE "abs_mult")
                              (("3" (EXPAND "abs" -4 1)
                                (("3"
                                  (CASE-REPLACE
                                   "vNum(b)=radix ^ (Prec(b) - 1) * radix ")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2"
                                    (CASE-REPLACE
                                     "vNum(b) =  radix ^ (Prec(b) - 1) * radix^1")
                                    (("1" (REWRITE "expt_x1") NIL NIL)
                                     ("2" (REWRITE "expt_plus" :DIR RL)
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "vNum")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)
                   ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL)
                   ("8" (ASSERT) NIL NIL) ("9" (ASSERT) NIL NIL)
                   ("10" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "Fcanonic?")
          (("2" (SPLIT)
            (("1" (PROPAX) NIL NIL)
             ("2" (HIDE 1)
              (("2" (FLIP-INEQ -2)
                (("2" (EXPAND "Fsubnormal?")
                  (("2" (FLATTEN)
                    (("2" (EXPAND "FtoR")
                      (("2" (REWRITE "abs_mult")
                        (("2" (REWRITE "abs_mult")
                          (("2" (EXPAND "abs" -3 1)
                            (("2" (EXPAND "abs" 1 2)
                              (("2"
                                (CASE-REPLACE
                                 "Prec(b) - 1 - dExp(b)=Prec(b) - 1 +(- dExp(b))")
                                (("1" (REWRITE "expt_plus")
                                  (("1" (COPY -4)
                                    (("1" (REWRITE -4)
                                      (("1" (DIV-BY 1 "radix ^ (-dExp(b))")
                                        (("1" (MULT-BY 1 "radix")
                                          (("1"
                                            (CASE-REPLACE
                                             "vNum(b) =  radix ^ (Prec(b) - 1) * radix")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2"
                                              (CASE-REPLACE
                                               "vNum(b) =  radix ^ (Prec(b) - 1) * radix^1")
                                              (("1" (REWRITE "expt_x1") NIL
                                                NIL)
                                               ("2"
                                                (REWRITE "expt_plus" :DIR RL)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "vNum")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL))
   SHOSTAK))
 (|Axpy_aux1_TCC1| 0
  (|Axpy_aux1_TCC1-1| |nil| 3320512021
   ("" (SKEEP)
    (("" (REWRITE "FcanonicBounded") (("" (REWRITE "FpredCanonic") NIL NIL))
      NIL))
    NIL)
   ((|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL))
   NIL
   (|Axpy_aux1| SUBTYPE "float[axpy.radix].Fpred(axpy.b)(axpy.u)"
    "(float[axpy.radix].Fbounded?(axpy.b))")))
 (|Axpy_aux1| 0
  (|Axpy_aux1-3| "" 3790103023
   ("" (SKEEP)
    ((""
      (CASE
          "abs(FtoR(u)-(y1+a1*x1)) < Fulp(b)(Fpred(b)(u)) / 2 + abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
      (("1" (CASE "FtoR(t)+FtoR(y) <= FtoR(u)")
        (("1" (REWRITE "MinOrMax1")
          (("1" (HIDE 2)
            (("1"
              (TRANS-INEQ 1
               "abs(FtoR[radix](u) - FtoR[radix](t) - FtoR[radix](y)) +

                          Fulp(b)(Fpred(b)(u)) / 2"
               :STRICT 1)
              (("1"
                (CASE
                    "abs(FtoR[radix](u) - FtoR[radix](t) - FtoR[radix](y)) <= Fulp(b)(Fpred(b)(u)) / 2")
                (("1" (GRIND-REALS) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (LEMMA "ClosestUlp2")
                    (("2" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                      (("2" (SPLIT)
                        (("1" (CASE-REPLACE "Fabs(u)=u")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE-ALL-BUT (1 -6))
                            (("2" (EXPAND* "Fabs" "abs" "FtoR")
                              (("2" (GRIND-REALS)
                                (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TRANS-INEQ 1 "FtoR[radix](u)")
                          (("1" (HIDE 2)
                            (("1" (CASE "0 <= FtoR(t)+FtoR(y)")
                              (("1" (EXPAND "abs" 1)
                                (("1" (GRIND-REALS) NIL NIL)) NIL)
                               ("2" (HIDE-ALL-BUT (-4 -5 1))
                                (("2" (FLIP-INEQ -2)
                                  (("2" (FLIP-INEQ 2)
                                    (("2" (LEMMA "RleRoundedLessR0")
                                      (("2" (ASSERT)
                                        (("2"
                                          (INST -1 "Closest?" "b" "u"
                                           "FtoR(t)+FtoR(y)")
                                          (("2" (SPLIT)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (PROPAX) NIL NIL)
                                             ("4"
                                              (REWRITE "Closest_RoundedMode")
                                              NIL NIL)
                                             ("5" (TYPEPRED "u")
                                              (("5" (REWRITE "FcanonicBounded")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (1 -5))
                            (("2" (EXPAND "abs")
                              (("2" (EXPAND "Fulp")
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL) ("4" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLIP-INEQ 1)
          (("2" (CASE "FtoR(t)+FtoR(y) <= FtoR(u)+ Fulp(b)(Fpred(b)(u)) / 2")
            (("1" (REWRITE "MinOrMax1")
              (("1"
                (TRANS-INEQ 1
                 "abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)+abs(FtoR(t) - FtoR(a) * FtoR(x))+abs(FtoR(t)+FtoR(y)-FtoR(u))"
                 :STRICT 2)
                (("1" (HIDE-ALL-BUT 1)
                  (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
                 ("2" (EXPAND "abs" 1 3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLIP-INEQ 1)
              (("2" (REWRITE "MinOrMax2")
                (("2" (HIDE 2)
                  (("2"
                    (TRANS-INEQ 1
                     "abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)+abs(FtoR(t) - FtoR(a) * FtoR(x))+abs(FtoR(t)+FtoR(y)-FtoR(u))"
                     :STRICT 2)
                    (("1" (HIDE-ALL-BUT 1)
                      (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL))
                      NIL)
                     ("2"
                      (TRANS-INEQ 1
                       "Fulp(b)(Fpred(b)(u)) / 4 + Fulp(b)(Fpred(b)(u)) / 4 +

                                   abs(FtoR[radix](t) + FtoR[radix](y) - FtoR[radix](u))"
                       :STRICT 1)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (CASE " Fulp(b)(Fpred(b)(u)) <= Fulp(b)(u)")
                        (("1"
                          (CASE
                              "abs(FtoR[radix](t) + FtoR[radix](y) - FtoR[radix](u))<= Fulp(b)(u)/2")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (LEMMA "ClosestUlp")
                              (("2" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                                (("2" (SPLIT)
                                  (("1" (HIDE-ALL-BUT (-1 1))
                                    (("1" (EXPAND "abs")
                                      (("1" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (PROPAX) NIL NIL)
                                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FulpFpred1") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2"
          (TRANS-INEQ 1
           "abs(y1-FtoR(y)+a1*x1-FtoR(a)*FtoR(x))+abs(FtoR(t)-FtoR(a)*FtoR(x))+abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
          (("1" (HIDE-ALL-BUT 1)
            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|MinOrMax2| FORMULA-DECL NIL |axpy| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|MinOrMax1| FORMULA-DECL NIL |axpy| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|ClosestUlp2| FORMULA-DECL NIL |float| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL) (<= CONST-DECL "bool" |reals| NIL)
    NIL
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|Axpy_aux1-2| "" 3744429363
   ("" (SKEEP)
    ((""
      (CASE
          "abs(FtoR(u)-(y1+a1*x1)) < Fulp(b)(Fpred(b)(u)) / 2 + abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
      (("1" (CASE "FtoR(t)+FtoR(y) <= FtoR(u)")
        (("1" (REWRITE "MinOrMax1")
          (("1" (HIDE 2)
            (("1"
              (TRANS-INEQ 1
               "abs(FtoR[radix](u) - FtoR[radix](t) - FtoR[radix](y)) +

                          Fulp(b)(Fpred(b)(u)) / 2"
               :STRICT 1)
              (("1"
                (CASE
                    "abs(FtoR[radix](u) - FtoR[radix](t) - FtoR[radix](y)) <= Fulp(b)(Fpred(b)(u)) / 2")
                (("1" (GRIND-REALS) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (LEMMA "ClosestUlp2")
                    (("2" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                      (("2" (SPLIT)
                        (("1" (CASE-REPLACE "Fabs(u)=u")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE-ALL-BUT (1 -6))
                            (("2" (EXPAND* "Fabs" "abs" "FtoR")
                              (("2" (GRIND-REALS)
                                (("2" (DECOMPOSE-EQUALITY 1)
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TRANS-INEQ 1 "FtoR[radix](u)")
                          (("1" (HIDE 2)
                            (("1" (CASE "0 <= FtoR(t)+FtoR(y)")
                              (("1" (EXPAND "abs" 1)
                                (("1" (GRIND-REALS) NIL NIL)) NIL)
                               ("2" (HIDE-ALL-BUT (-4 -5 1))
                                (("2" (FLIP-INEQ -2)
                                  (("2" (FLIP-INEQ 2)
                                    (("2" (LEMMA "RleRoundedLessR0")
                                      (("2" (ASSERT)
                                        (("2"
                                          (INST -1 "Closest?" "b" "u"
                                           "FtoR(t)+FtoR(y)")
                                          (("2" (SPLIT)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (PROPAX) NIL NIL)
                                             ("4"
                                              (REWRITE "Closest_RoundedMode")
                                              NIL NIL)
                                             ("5" (TYPEPRED "u")
                                              (("5" (REWRITE "FcanonicBounded")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (1 -5))
                            (("2" (EXPAND "abs")
                              (("2" (EXPAND "Fulp")
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL) ("4" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLIP-INEQ 1)
          (("2" (CASE "FtoR(t)+FtoR(y) <= FtoR(u)+ Fulp(b)(Fpred(b)(u)) / 2")
            (("1" (REWRITE "MinOrMax1")
              (("1"
                (TRANS-INEQ 1
                 "abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)+abs(FtoR(t) - FtoR(a) * FtoR(x))+abs(FtoR(t)+FtoR(y)-FtoR(u))"
                 :STRICT 2)
                (("1" (HIDE-ALL-BUT 1)
                  (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
                 ("2" (EXPAND "abs" 1 3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLIP-INEQ 1)
              (("2" (REWRITE "MinOrMax2")
                (("2" (HIDE 2)
                  (("2"
                    (TRANS-INEQ 1
                     "abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)+abs(FtoR(t) - FtoR(a) * FtoR(x))+abs(FtoR(t)+FtoR(y)-FtoR(u))"
                     :STRICT 2)
                    (("1" (HIDE-ALL-BUT 1)
                      (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL))
                      NIL)
                     ("2"
                      (TRANS-INEQ 1
                       "Fulp(b)(Fpred(b)(u)) / 4 + Fulp(b)(Fpred(b)(u)) / 4 +

                                   abs(FtoR[radix](t) + FtoR[radix](y) - FtoR[radix](u))"
                       :STRICT 1)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (CASE " Fulp(b)(Fpred(b)(u)) <= Fulp(b)(u)")
                        (("1"
                          (CASE
                              "abs(FtoR[radix](t) + FtoR[radix](y) - FtoR[radix](u))<= Fulp(b)(u)/2")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (LEMMA "ClosestUlp")
                              (("2" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                                (("2" (SPLIT)
                                  (("1" (HIDE-ALL-BUT (-1 1))
                                    (("1" (EXPAND "abs")
                                      (("1" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (PROPAX) NIL NIL)
                                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FulpFpred1") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2"
          (TRANS-INEQ 1
           "abs(y1-FtoR(y)+a1*x1-FtoR(a)*FtoR(x))+abs(FtoR(t)-FtoR(a)*FtoR(x))+abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
          (("1" (HIDE-ALL-BUT 1)
            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|ClosestUlp2| FORMULA-DECL NIL |float| NIL))
   SHOSTAK)
  (|Axpy_aux1-1| |nil| 3320512021
   ("" (SKEEP)
    ((""
      (CASE
          "abs(FtoR(u)-(y1+a1*x1)) < Fulp(b)(Fpred(b)(u)) / 2 + abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
      (("1" (CASE "FtoR(t)+FtoR(y) <= FtoR(u)")
        (("1" (REWRITE "MinOrMax1")
          (("1" (HIDE 2)
            (("1"
              (TRANS-INEQ 1
               "abs(FtoR[radix](u) - FtoR[radix](t) - FtoR[radix](y)) +
                    Fulp(b)(Fpred(b)(u)) / 2"
               :STRICT 1)
              (("1"
                (CASE
                    "abs(FtoR[radix](u) - FtoR[radix](t) - FtoR[radix](y)) <= Fulp(b)(Fpred(b)(u)) / 2")
                (("1" (GRIND-REALS) NIL NIL)
                 ("2" (HIDE 2)
                  (("2" (LEMMA "ClosestUlp2")
                    (("2" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                      (("2" (SPLIT)
                        (("1" (CASE-REPLACE "Fabs(u)=u")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE-ALL-BUT (1 -6))
                            (("2" (EXPAND* "Fabs" "abs" "FtoR")
                              (("2" (GRIND-REALS)
                                (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TRANS-INEQ 1 "FtoR[radix](u)")
                          (("1" (HIDE 2)
                            (("1" (CASE "0 <= FtoR(t)+FtoR(y)")
                              (("1" (EXPAND "abs" 1)
                                (("1" (GRIND-REALS) NIL NIL)) NIL)
                               ("2" (HIDE-ALL-BUT (-4 -5 1))
                                (("2" (FLIP-INEQ -2)
                                  (("2" (FLIP-INEQ 2)
                                    (("2" (LEMMA "RleRoundedLessR0")
                                      (("2" (ASSERT)
                                        (("2"
                                          (INST -1 "Closest?" "b" "u"
                                           "FtoR(t)+FtoR(y)")
                                          (("2" (SPLIT)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (PROPAX) NIL NIL)
                                             ("4"
                                              (REWRITE "Closest_RoundedMode")
                                              NIL NIL)
                                             ("5" (TYPEPRED "u")
                                              (("5" (REWRITE "FcanonicBounded")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (1 -5))
                            (("2" (EXPAND "abs")
                              (("2" (EXPAND "Fulp")
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL) ("4" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLIP-INEQ 1)
          (("2" (CASE "FtoR(t)+FtoR(y) <= FtoR(u)+ Fulp(b)(Fpred(b)(u)) / 2")
            (("1" (REWRITE "MinOrMax1")
              (("1"
                (TRANS-INEQ 1
                 "abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)+abs(FtoR(t) - FtoR(a) * FtoR(x))+abs(FtoR(t)+FtoR(y)-FtoR(u))"
                 :STRICT 2)
                (("1" (HIDE-ALL-BUT 1)
                  (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
                 ("2" (EXPAND "abs" 1 3) (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLIP-INEQ 1)
              (("2" (REWRITE "MinOrMax2")
                (("2" (HIDE 2)
                  (("2"
                    (TRANS-INEQ 1
                     "abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)+abs(FtoR(t) - FtoR(a) * FtoR(x))+abs(FtoR(t)+FtoR(y)-FtoR(u))"
                     :STRICT 2)
                    (("1" (HIDE-ALL-BUT 1)
                      (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL))
                      NIL)
                     ("2"
                      (TRANS-INEQ 1
                       "Fulp(b)(Fpred(b)(u)) / 4 + Fulp(b)(Fpred(b)(u)) / 4 +
                         abs(FtoR[radix](t) + FtoR[radix](y) - FtoR[radix](u))"
                       :STRICT 1)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (CASE " Fulp(b)(Fpred(b)(u)) <= Fulp(b)(u)")
                        (("1"
                          (CASE
                              "abs(FtoR[radix](t) + FtoR[radix](y) - FtoR[radix](u))<= Fulp(b)(u)/2")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (HIDE 2)
                            (("2" (LEMMA "ClosestUlp")
                              (("2" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                                (("2" (SPLIT)
                                  (("1" (HIDE-ALL-BUT (-1 1))
                                    (("1" (EXPAND "abs")
                                      (("1" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (PROPAX) NIL NIL)
                                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FulpFpred1") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2"
          (TRANS-INEQ 1
           "abs(y1-FtoR(y)+a1*x1-FtoR(a)*FtoR(x))+abs(FtoR(t)-FtoR(a)*FtoR(x))+abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
          (("1" (HIDE-ALL-BUT 1)
            (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|ClosestUlp2| FORMULA-DECL NIL |float| NIL))
   SHOSTAK))
 (|Axpy_aux1_aux1| 0
  (|Axpy_aux1_aux1-2| "" 3790103025
   ("" (SKEEP)
    (("" (TRANS-INEQ 1 "Fulp(b)(t)/2")
      (("1" (REWRITE "ClosestUlp") (("1" (REWRITE "FcanonicBounded") NIL NIL))
        NIL)
       ("2" (MULT-BY 1 "4")
        (("2" (FIELD 1)
          (("2" (TRANS-INEQ 1 " radix* Fulp(b)(t)")
            (("1" (EXPAND "Fulp") (("1" (GRIND-REALS) NIL NIL)) NIL)
             ("2" (CASE "Fcanonic?(b)((# Fnum:= Fnum(t), Fexp:=Fexp(t)+1 #))")
              (("1"
                (CASE-REPLACE
                 "radix * Fulp(b)(t) =Fulp(b)( (# Fnum:= Fnum(t), Fexp:=Fexp(t)+1 #))")
                (("1" (REWRITE "FulpMonotoneAbs")
                  (("1"
                    (CASE-REPLACE
                     "abs(FtoR((# Fnum := Fnum(t), Fexp := 1 + Fexp(t) #)))=radix  * abs(FtoR[radix](t))")
                    (("1" (CASE "0 <= FtoR(Fpred(b)(u))")
                      (("1" (EXPAND "abs" 1 2) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (REWRITE "FpredPos") NIL NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (EXPAND* "abs" "FtoR")
                        (("2" (GRIND-REALS)
                          (("1" (REWRITE "expt_plus")
                            (("1" (USE "expt_x1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "expt_plus")
                            (("2" (USE "expt_x1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "FcanonicBounded")
                    (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL)
                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                  NIL)
                 ("2" (REWRITE "FulpCanonic")
                  (("2" (REWRITE "FulpCanonic")
                    (("2" (REWRITE "expt_plus") NIL NIL)) NIL))
                  NIL)
                 ("3" (REWRITE "FcanonicBounded") NIL NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-4 1))
                (("2" (EXPAND* "Fcanonic?" "Fnormal?" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)
                       ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|FpredPos| FORMULA-DECL NIL |float| NIL)
    (|FulpMonotoneAbs| FORMULA-DECL NIL |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|Axpy_aux1_aux1-1| |nil| 3320575968
   ("" (SKEEP)
    (("" (TRANS-INEQ 1 "Fulp(b)(t)/2")
      (("1" (REWRITE "ClosestUlp") (("1" (REWRITE "FcanonicBounded") NIL NIL))
        NIL)
       ("2" (MULT-BY 1 "4")
        (("2" (FIELD 1)
          (("2" (TRANS-INEQ 1 " radix* Fulp(b)(t)")
            (("1" (EXPAND "Fulp") (("1" (GRIND-REALS) NIL NIL)) NIL)
             ("2" (CASE "Fcanonic?(b)((# Fnum:= Fnum(t), Fexp:=Fexp(t)+1 #))")
              (("1"
                (CASE-REPLACE
                 "radix * Fulp(b)(t) =Fulp(b)( (# Fnum:= Fnum(t), Fexp:=Fexp(t)+1 #))")
                (("1" (REWRITE "FulpMonotoneAbs")
                  (("1"
                    (CASE-REPLACE
                     "abs(FtoR((# Fnum := Fnum(t), Fexp := 1 + Fexp(t) #)))=radix  * abs(FtoR[radix](t))")
                    (("1" (CASE "0 <= FtoR(Fpred(b)(u))")
                      (("1" (EXPAND "abs" 1 2) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (REWRITE "FpredPos") NIL NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (EXPAND* "abs" "FtoR")
                        (("2" (GRIND-REALS)
                          (("1" (REWRITE "expt_plus")
                            (("1" (USE "expt_x1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "expt_plus")
                            (("2" (USE "expt_x1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "FcanonicBounded")
                    (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL)
                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                  NIL)
                 ("2" (REWRITE "FulpCanonic")
                  (("2" (REWRITE "FulpCanonic")
                    (("2" (REWRITE "expt_plus")
                      (("2" (USE "expt_x1") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (REWRITE "FcanonicBounded") NIL NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-4 1))
                (("2" (EXPAND* "Fcanonic?" "Fnormal?" "Fbounded?")
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)
                       ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|FulpMonotoneAbs| FORMULA-DECL NIL |float| NIL)
    (|FpredPos| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL))
   SHOSTAK))
 (|Axpy_aux1_aux2| 0
  (|Axpy_aux1_aux2-1| |nil| 3320577546
   ("" (SKEEP)
    (("" (TRANS-INEQ 1 "Fulp(b)(t)/2")
      (("1" (REWRITE "ClosestUlp") (("1" (REWRITE "FcanonicBounded") NIL NIL))
        NIL)
       ("2" (REWRITE "FulpCanonic")
        (("2" (REWRITE "FulpCanonic")
          (("1" (EXPAND "Fsubnormal?")
            (("1" (FLATTEN)
              (("1" (REWRITE -5)
                (("1" (MULT-BY 1 "4")
                  (("1" (FIELD 1)
                    (("1" (TRANS-INEQ 1 "radix*(radix ^ -dExp(b))")
                      (("1" (GRIND-REALS) NIL NIL)
                       ("2"
                        (CASE-REPLACE
                         " radix * (radix ^ -dExp(b))=radix ^(1 - dExp(b))")
                        (("1" (REWRITE "Exp_increq_1") NIL NIL)
                         ("2" (LEMMA "expt_plus")
                          (("2" (INST -1 "1" "-dExp(b)" "radix")
                            (("2" (REWRITE "expt_x1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "FpredCanonic") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Axpy_aux2| 0
  (|Axpy_aux2-1| |nil| 3320577865
   ("" (SKEEP)
    (("" (REWRITE "MinOrMax1")
      (("" (HIDE 2)
        (("" (COPY -6)
          (("" (REWRITE -6)
            ((""
              (TRANS-INEQ 1
               "abs(FtoR(t)-FtoR(a)*FtoR(x))+abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)"
               :STRICT 2)
              (("1" (HIDE-ALL-BUT 1)
                (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
               ("2"
                (TRANS-INEQ 1
                 "Fulp(b)(Fpred(b)(u)) / 2+ Fulp(b)(Fpred(b)(u)) / 4" :STRICT
                 1)
                (("1"
                  (CASE
                      "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(Fpred(b)(u)) / 2")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE 2)
                    (("2" (TRANS-INEQ 1 "Fulp(b)(t)/2")
                      (("1" (REWRITE "ClosestUlp")
                        (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                       ("2" (FIELD 1)
                        (("2" (CASE "Fcanonic?(b)(Fpred(b)(u))")
                          (("1" (REWRITE "FulpCanonic")
                            (("1" (REWRITE "FulpCanonic")
                              (("1" (REWRITE "Exp_increq_1")
                                (("1" (HIDE-ALL-BUT (-1 -7 1))
                                  (("1"
                                    (EXPAND* "Fcanonic?" "Fnormal?"
                                     "Fsubnormal?" "Fbounded?")
                                    (("1" (SPLIT)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FpredCanonic") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "Fulp" 1) (("2" (GRIND-REALS) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|MinOrMax1| FORMULA-DECL NIL |axpy| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|FtoR| CONST-DECL "real" |float| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Axpy_aux3| 0
  (|Axpy_aux3-2| "" 3744429531
   ("" (SKEEP)
    (("" (CASE "FtoR(u) <= a1*x1+y1")
      (("1" (REWRITE "MinOrMax2")
        (("1" (HIDE 2)
          (("1"
            (TRANS-INEQ 1
             "abs(FtoR(u)-(FtoR(t)+FtoR(y)))+abs(FtoR(t)-FtoR(a)*FtoR(x))+abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)"
             :STRICT 2)
            (("1" (HIDE-ALL-BUT 1)
              (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
             ("2"
              (CASE
                  "abs(FtoR[radix](u) - (FtoR[radix](t) + FtoR[radix](y))) <= Fulp(b)(u)/2")
              (("1"
                (CASE
                    "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(u)/4")
                (("1"
                  (TRANS-INEQ 1
                   "Fulp(b)(u) / 4+ Fulp(b)(u) / 2+Fulp(b)(Fpred(b)(u)) / 4"
                   :STRICT 1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (CASE "Fulp(b)(Fpred(b)(u)) <= Fulp(b)(u)")
                    (("1" (GRIND-REALS) NIL NIL)
                     ("2" (REWRITE "FulpFpred1") NIL NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2 -1)
                  (("2" (TRANS-INEQ 1 "Fulp(b)(t)/2")
                    (("1" (REWRITE "ClosestUlp")
                      (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                     ("2" (FIELD 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("2" (REWRITE "FulpCanonic")
                          (("2" (TRANS-INEQ 1 "radix^(1+Fexp(t))")
                            (("1" (REWRITE "expt_plus")
                              (("1" (GRIND-REALS) NIL NIL)) NIL)
                             ("2" (REWRITE "Exp_increq_1")
                              (("2" (EXPAND "Fsubnormal?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "ClosestUlp")
                (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (CASE "Fabs(u)=u")
          (("1" (LEMMA "Axpy_aux2")
            (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                 ("3" (REWRITE "ExactSum_Near")
                  (("1"
                    (LEMMA "ClosestUlp2" :SUBST
                     ("b" "b" "p" "u" "r" "FtoR(t)+FtoR(y)"))
                    (("1" (SPLIT)
                      (("1"
                        (TRANS-INEQ 1 "Fulp(b)(Fpred(b)(Fabs(u))) / 2" :STRICT
                         2)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "FulpCanonic")
                          (("1" (GRIND-REALS) NIL NIL)
                           ("2" (REWRITE "FpredCanonic") NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (FLIP-INEQ 1)
                          (("2" (REWRITE "MinOrMax1")
                            (("2" (EXPAND "abs" 1)
                              (("2"
                                (TRANS-INEQ 1
                                 "abs(FtoR(t) + FtoR(y))- Fulp(b)(Fpred(b)(u)) / 2 - a1 * x1 - y1"
                                 :STRICT 1)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (EXPAND "abs" 1)
                                  (("2" (GRIND-REALS)
                                    (("1" (HIDE 1 2)
                                      (("1" (FLIP-INEQ -7)
                                        (("1" (LEMMA "RleRoundedLessR0")
                                          (("1"
                                            (INST -1 "Closest?" "b" "u"
                                             "FtoR(t)+FtoR(y)")
                                            (("1" (SPLIT)
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL)
                                               ("3" (PROPAX) NIL NIL)
                                               ("4"
                                                (REWRITE "Closest_RoundedMode")
                                                NIL NIL)
                                               ("5" (REWRITE "FcanonicBounded")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 1)
                                      (("2"
                                        (TRANS-INEQ 1
                                         "abs(FtoR(t)-FtoR(a)*FtoR(x)) + abs(-FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1) - Fulp(b)(Fpred(b)(u)) / 2")
                                        (("1" (HIDE-ALL-BUT 1)
                                          (("1" (EXPAND "abs")
                                            (("1" (GRIND-REALS) NIL NIL)) NIL))
                                          NIL)
                                         ("2"
                                          (CASE
                                              "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(Fpred(b)(u)) / 2")
                                          (("1" (GRIND-REALS) NIL NIL)
                                           ("2" (HIDE 2 3)
                                            (("2" (NAME "f2" "Fulp(b)(t) / 2")
                                              (("2" (TRANS-INEQ 1 "f2")
                                                (("1" (REPLACES -1 :DIR RL)
                                                  (("1" (REWRITE "ClosestUlp")
                                                    (("1"
                                                      (REWRITE
                                                       "FcanonicBounded")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (REPLACES -1 :DIR RL)
                                                  (("2" (MULT-BY 1 "2")
                                                    (("2"
                                                      (REWRITE "FulpCanonic")
                                                      (("2"
                                                        (REWRITE "FulpCanonic")
                                                        (("1"
                                                          (EXPAND
                                                           "Fsubnormal?")
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (REWRITE
                                                           "FpredCanonic")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (PROPAX) NIL NIL)
                       ("4" (HIDE-ALL-BUT (-4 1))
                        (("4" (EXPAND* "FtoR" "Fabs" "abs")
                          (("4" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (DECOMPOSE-EQUALITY)
                    (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                   ("3" (REWRITE "FcanonicBounded") NIL NIL)
                   ("4" (REWRITE "FcanonicBounded") NIL NIL))
                  NIL)
                 ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                 ("6" (PROPAX) NIL NIL) ("7" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (-4 1))
            (("2" (EXPAND* "FtoR" "Fabs" "abs")
              (("2" (GRIND-REALS) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fabs| CONST-DECL "float" |float| NIL)
    (|ExactSum_Near| FORMULA-DECL NIL |axpy| NIL)
    (|MinOrMax1| FORMULA-DECL NIL |axpy| NIL)
    (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|ClosestUlp2| FORMULA-DECL NIL |float| NIL)
    (|Axpy_aux2| FORMULA-DECL NIL |axpy| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|MinOrMax2| FORMULA-DECL NIL |axpy| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (GET_PAST_BUG "(trans-ineq 1 \" Fulp(b)(t) / 2\") -> infinite loop"
   3352629025
   ("" (SKEEP)
    (("" (CASE "FtoR(u) <= a1*x1+y1")
      (("1" (REWRITE "MinOrMax2")
        (("1" (HIDE 2)
          (("1"
            (TRANS-INEQ 1
             "abs(FtoR(u)-(FtoR(t)+FtoR(y)))+abs(FtoR(t)-FtoR(a)*FtoR(x))+abs(-1 * FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1)"
             :STRICT 2)
            (("1" (HIDE-ALL-BUT 1)
              (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
             ("2"
              (CASE
                  "abs(FtoR[radix](u) - (FtoR[radix](t) + FtoR[radix](y))) <= Fulp(b)(u)/2")
              (("1"
                (CASE
                    "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(u)/4")
                (("1"
                  (TRANS-INEQ 1
                   "Fulp(b)(u) / 4+ Fulp(b)(u) / 2+Fulp(b)(Fpred(b)(u)) / 4"
                   :STRICT 1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (CASE "Fulp(b)(Fpred(b)(u)) <= Fulp(b)(u)")
                    (("1" (GRIND-REALS) NIL NIL)
                     ("2" (REWRITE "FulpFpred1") NIL NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2 -1)
                  (("2" (TRANS-INEQ 1 "Fulp(b)(t)/2")
                    (("1" (REWRITE "ClosestUlp")
                      (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                     ("2" (FIELD 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("2" (REWRITE "FulpCanonic")
                          (("2" (TRANS-INEQ 1 "radix^(1+Fexp(t))")
                            (("1" (REWRITE "expt_plus")
                              (("1" (GRIND-REALS) (("1" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (REWRITE "Exp_increq_1")
                              (("2" (EXPAND "Fsubnormal?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "ClosestUlp")
                (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (CASE "Fabs(u)=u")
          (("1" (LEMMA "Axpy_aux2")
            (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                 ("3" (REWRITE "ExactSum_Near")
                  (("1"
                    (LEMMA "ClosestUlp2" :SUBST
                     ("b" "b" "p" "u" "r" "FtoR(t)+FtoR(y)"))
                    (("1" (SPLIT)
                      (("1"
                        (TRANS-INEQ 1 "Fulp(b)(Fpred(b)(Fabs(u))) / 2" :STRICT
                         2)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "FulpCanonic")
                          (("1" (GRIND-REALS) NIL NIL)
                           ("2" (REWRITE "FpredCanonic") NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (FLIP-INEQ 1)
                          (("2" (REWRITE "MinOrMax1")
                            (("2" (EXPAND "abs" 1)
                              (("2"
                                (TRANS-INEQ 1
                                 "abs(FtoR(t) + FtoR(y))- Fulp(b)(Fpred(b)(u)) / 2 - a1 * x1 - y1"
                                 :STRICT 1)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (EXPAND "abs" 1)
                                  (("2" (GRIND-REALS)
                                    (("1" (HIDE 1 2)
                                      (("1" (FLIP-INEQ -7)
                                        (("1" (LEMMA "RleRoundedLessR0")
                                          (("1"
                                            (INST -1 "Closest?" "b" "u"
                                             "FtoR(t)+FtoR(y)")
                                            (("1" (SPLIT)
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (ASSERT) NIL NIL)
                                               ("3" (PROPAX) NIL NIL)
                                               ("4"
                                                (REWRITE "Closest_RoundedMode")
                                                NIL NIL)
                                               ("5" (REWRITE "FcanonicBounded")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 1)
                                      (("2"
                                        (TRANS-INEQ 1
                                         "abs(FtoR(t)-FtoR(a)*FtoR(x)) + abs(-FtoR(y) - FtoR(a) * FtoR(x) + a1 * x1 + y1) - Fulp(b)(Fpred(b)(u)) / 2")
                                        (("1" (HIDE-ALL-BUT 1)
                                          (("1" (EXPAND "abs")
                                            (("1" (GRIND-REALS) NIL NIL)) NIL))
                                          NIL)
                                         ("2"
                                          (CASE
                                              "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(Fpred(b)(u)) / 2")
                                          (("1" (GRIND-REALS) NIL NIL)
                                           ("2" (HIDE 2 3)
                                            (("2" (NAME "f2" "Fulp(b)(t) / 2")
                                              (("2" (TRANS-INEQ 1 "f2")
                                                (("1" (REPLACES -1 :DIR RL)
                                                  (("1" (REWRITE "ClosestUlp")
                                                    (("1"
                                                      (REWRITE
                                                       "FcanonicBounded")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (REPLACES -1 :DIR RL)
                                                  (("2" (MULT-BY 1 "2")
                                                    (("2"
                                                      (REWRITE "FulpCanonic")
                                                      (("2"
                                                        (REWRITE "FulpCanonic")
                                                        (("1"
                                                          (EXPAND
                                                           "Fsubnormal?")
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (REWRITE
                                                           "FpredCanonic")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (PROPAX) NIL NIL)
                       ("4" (HIDE-ALL-BUT (-4 1))
                        (("4" (EXPAND* "FtoR" "Fabs" "abs")
                          (("4" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (DECOMPOSE-EQUALITY)
                    (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                   ("3" (REWRITE "FcanonicBounded") NIL NIL)
                   ("4" (REWRITE "FcanonicBounded") NIL NIL))
                  NIL)
                 ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                 ("6" (PROPAX) NIL NIL) ("7" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (-4 1))
            (("2" (EXPAND* "FtoR" "Fabs" "abs")
              (("2" (GRIND-REALS) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (|ClosestUlp2| FORMULA-DECL NIL |float| NIL))
   SHOSTAK)
  (|Axpy_aux3-1| |nil| 3320579990
   ("" (SKEEP)
    (("" (CASE "u <= a1*x1+y1")
      (("1" (REWRITE "MinOrMax2")
        (("1" (HIDE 2)
          (("1"
            (TRANS-INEQ 1
             "abs(u-(t+y))+abs(t-a*x)+abs(-1 * y - a * x + a1 * x1 + y1)"
             :STRICT 2)
            (("1" (HIDE-ALL-BUT 1)
              (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)
             ("2"
              (CASE
                  "abs(FtoR[radix](u) - (FtoR[radix](t) + FtoR[radix](y))) <= Fulp(b)(u)/2")
              (("1"
                (CASE
                    "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(u)/4")
                (("1"
                  (TRANS-INEQ 1
                   "Fulp(b)(u) / 4+ Fulp(b)(u) / 2+Fulp(b)(Fpred(b)(u)) / 4"
                   :STRICT 1)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (CASE "Fulp(b)(Fpred(b)(u)) <= Fulp(b)(u)")
                    (("1" (GRIND-REALS) NIL NIL)
                     ("2" (REWRITE "FulpFpred1") NIL NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2 -1)
                  (("2" (TRANS-INEQ 1 "Fulp(b)(t)/2")
                    (("1" (REWRITE "ClosestUlp")
                      (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                     ("2" (FIELD 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("2" (REWRITE "FulpCanonic")
                          (("2" (TRANS-INEQ 1 "radix^(1+Fexp(t))")
                            (("1" (REWRITE "expt_plus")
                              (("1" (REWRITE "expt_x1")
                                (("1" (GRIND-REALS) NIL NIL)) NIL))
                              NIL)
                             ("2" (REWRITE "Exp_increq_1")
                              (("2" (EXPAND "Fsubnormal?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "ClosestUlp")
                (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLIP-INEQ 1)
        (("2" (CASE "Fabs(u)=u")
          (("1" (CASE "abs(t+y) <= u+Fulp(b)(Fpred(b)(u)) / 2")
            (("1" (LEMMA "Axpy_aux2")
              (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
                (("1" (SPLIT)
                  (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                   ("3" (REWRITE "ExactSum_Near")
                    (("1"
                      (LEMMA "ClosestUlp2" :SUBST ("b" "b" "p" "u" "r" "t+y"))
                      (("1" (SPLIT)
                        (("1"
                          (TRANS-INEQ 1 "Fulp(b)(Fpred(b)(Fabs(u))) / 2"
                           :STRICT 2)
                          (("1" (ASSERT) NIL NIL)
                           ("2" (REWRITE -3)
                            (("2" (REWRITE "FulpCanonic")
                              (("1" (REWRITE -8 :DIR RL)
                                (("1" (GRIND-REALS) NIL NIL)) NIL)
                               ("2" (REWRITE "FpredCanonic") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)
                         ("4" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "FcanonicBounded") NIL NIL)
                     ("3" (REWRITE "FcanonicBounded") NIL NIL)
                     ("4" (REWRITE "FcanonicBounded") NIL NIL))
                    NIL)
                   ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                   ("6" (PROPAX) NIL NIL) ("7" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLIP-INEQ 1)
              (("2" (REWRITE "MinOrMax1")
                (("2" (EXPAND "abs" 1)
                  (("2"
                    (TRANS-INEQ 1
                     "abs(t + y)- Fulp(b)(Fpred(b)(u)) / 2 - a1 * x1 - y1"
                     :STRICT 1)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (EXPAND "abs" 1)
                      (("2" (GRIND-REALS)
                        (("1" (HIDE 1 2)
                          (("1" (FLIP-INEQ -7)
                            (("1" (LEMMA "RleRoundedLessR0")
                              (("1" (INST -1 "Closest?" "b" "u" "t+y")
                                (("1" (SPLIT)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (ASSERT) NIL NIL)
                                   ("3" (PROPAX) NIL NIL)
                                   ("4" (REWRITE "Closest_RoundedMode") NIL
                                    NIL)
                                   ("5" (REWRITE "FcanonicBounded") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 1)
                          (("2"
                            (TRANS-INEQ 1
                             "abs(t-a*x) + abs(-y - a * x + a1 * x1 + y1) - Fulp(b)(Fpred(b)(u)) / 2")
                            (("1" (HIDE-ALL-BUT 1)
                              (("1" (EXPAND "abs")
                                (("1" (GRIND-REALS) NIL NIL)) NIL))
                              NIL)
                             ("2"
                              (CASE
                                  "abs(FtoR[radix](t) - FtoR[radix](a) * FtoR[radix](x)) <= Fulp(b)(Fpred(b)(u)) / 2")
                              (("1" (GRIND-REALS) NIL NIL)
                               ("2" (HIDE 2 3)
                                (("2" (TRANS-INEQ 1 " Fulp(b)(t) / 2")
                                  (("1" (REWRITE "ClosestUlp")
                                    (("1" (REWRITE "FcanonicBounded") NIL NIL))
                                    NIL)
                                   ("2" (MULT-BY 1 "2")
                                    (("2" (REWRITE "FulpCanonic")
                                      (("2" (REWRITE "FulpCanonic")
                                        (("1" (EXPAND "Fsubnormal?")
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (REWRITE "FpredCanonic") NIL
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (-4 1))
            (("2" (EXPAND* "FtoR" "Fabs" "abs")
              (("2" (GRIND-REALS) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|FulpFpred1| FORMULA-DECL NIL |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (|ClosestUlp2| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL))
   SHOSTAK))
 (|AxpyPos| 0
  (|AxpyPos-1| |nil| 3320578694
   ("" (SKEEP)
    (("" (TYPEPRED "t")
      (("" (EXPAND "Fcanonic?")
        (("" (SPLIT)
          (("1" (LEMMA "Axpy_aux1")
            (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
              (("1" (SPLIT)
                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                 ("3" (LEMMA "Axpy_aux1_aux1")
                  (("3" (INST -1 "a" "t" "u" "x" "y")
                    (("3" (SPLIT)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (SPLIT)
                        (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                       ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                 ("6" (PROPAX) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "1-dExp(b) <= Fexp(Fpred(b)(u))")
            (("1" (LEMMA "Axpy_aux1")
              (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
                (("1" (SPLIT)
                  (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                   ("3" (LEMMA "Axpy_aux1_aux2")
                    (("3" (INST -1 "a" "t" "u" "x" "y")
                      (("3" (SPLIT)
                        (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                         ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                         ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                   ("6" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLIP-INEQ 1)
              (("2" (CASE "1-dExp(b) <= Fexp(u)")
                (("1" (LEMMA "Axpy_aux3")
                  (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
                    (("1" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL)
                       ("4" (CASE "Fbounded?(b)(Fpred(b)(u))")
                        (("1" (EXPAND "Fbounded?")
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                         ("2" (REWRITE "FcanonicBounded")
                          (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                        NIL)
                       ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
                       ("7" (PROPAX) NIL NIL) ("8" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLIP-INEQ 1)
                  (("2" (LEMMA "Axpy_aux2")
                    (("2" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
                      (("2" (SPLIT)
                        (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                         ("3" (REWRITE "ExactSum_Near")
                          (("1" (TRANS-INEQ 1 "radix ^ (-dExp(b))/2" :STRICT 2)
                            (("1"
                              (LEMMA "ClosestUlp" :SUBST
                               ("b" "b" "p" "u" "r" "FtoR(t)+FtoR(y)"))
                              (("1" (SPLIT)
                                (("1" (TRANS-INEQ 1 "Fulp(b)(u) / 2")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (MULT-BY 1 "2")
                                    (("2" (REWRITE "FulpCanonic")
                                      (("2" (REWRITE "Exp_increq_1") NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL)
                                 ("3" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("2" (REWRITE "FcanonicBounded") NIL NIL)
                           ("3" (REWRITE "FcanonicBounded") NIL NIL)
                           ("4" (REWRITE "FcanonicBounded") NIL NIL))
                          NIL)
                         ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                         ("6" (PROPAX) NIL NIL) ("7" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|Axpy_aux3| FORMULA-DECL NIL |axpy| NIL)
    (|Axpy_aux2| FORMULA-DECL NIL |axpy| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|ExactSum_Near| FORMULA-DECL NIL |axpy| NIL)
    (|Axpy_aux1_aux2| FORMULA-DECL NIL |axpy| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Axpy_aux1| FORMULA-DECL NIL |axpy| NIL)
    (|Axpy_aux1_aux1| FORMULA-DECL NIL |axpy| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Axpy_opt_aux1_aux1_TCC1| 0
  (|Axpy_opt_aux1_aux1_TCC1-1| |nil| 3320665877 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux1_aux1| SUBTYPE
    "(number_fields.*(2, real_defs.abs(Fnum(axpy.u))))" "nznum")))
 (|Axpy_opt_aux1_aux1_TCC2| 0
  (|Axpy_opt_aux1_aux1_TCC2-2| "" 3790103041
   ("" (SKEEP)
    (("" (EXPAND "abs" -5)
      (("" (GRIND-REALS)
        (("" (HIDE -1 -4)
          (("" (EXPAND* "FtoR" "Fnormal?")
            (("" (FLATTEN)
              (("" (EXPAND "abs")
                (("" (GRIND-REALS)
                  (("" (EXPAND "Fpred")
                    (("" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum")
                        (("1" (INST -1 "b") (("1" (GRIND-REALS) NIL NIL)) NIL))
                        NIL)
                       ("2" (CASE-REPLACE "Fnum(u)=1")
                        (("1" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                          (("1" (ASSERT)
                            (("1" (CASE "radix^1 < radix ^ (Prec(b))")
                              (("1" (REWRITE "expt_x1")
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (REWRITE "Exp_incr_1") NIL NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("3" (CASE-REPLACE "Fnum(u)=1")
                        (("1" (CASE "radix^1 < radix ^ (Prec(b))")
                          (("1" (ASSERT)
                            (("1" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "Exp_incr_1") NIL NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|Exp_incr_1| FORMULA-DECL NIL |float| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|radix_less_vNum| FORMULA-DECL NIL |float| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|zero_not_lt_zero| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK
   (|Axpy_opt_aux1_aux1| SUBTYPE
    "real_defs.abs(Fnum(float[axpy.radix].Fpred(axpy.b)(axpy.u)))" "nznum"))
  (|Axpy_opt_aux1_aux1_TCC2-1| |nil| 3320665877
   ("" (SKEEP)
    (("" (EXPAND "abs" -5)
      (("" (GRIND-REALS)
        (("" (HIDE -1 -4)
          (("" (EXPAND* "FtoR" "Fnormal?")
            (("" (FLATTEN)
              (("" (EXPAND "abs")
                (("" (GRIND-REALS)
                  (("" (EXPAND "Fpred")
                    (("" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum")
                        (("1" (INST -1 "b") (("1" (GRIND-REALS) NIL NIL)) NIL))
                        NIL)
                       ("2" (CASE-REPLACE "Fnum(u)=1")
                        (("1" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                          (("1" (FLIP-INEQ -4)
                            (("1" (ASSERT)
                              (("1" (CASE "radix^1 < radix ^ (Prec(b))")
                                (("1" (REWRITE "expt_x1")
                                  (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (REWRITE "Exp_incr_1") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("3" (CASE-REPLACE "Fnum(u)=1")
                        (("1" (CASE "radix^1 < radix ^ (Prec(b))")
                          (("1" (FLIP-INEQ -4)
                            (("1" (ASSERT)
                              (("1" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                                (("1" (REWRITE "expt_x1")
                                  (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "vNum")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "Exp_incr_1") NIL NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|radix_less_vNum| FORMULA-DECL NIL |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Exp_incr_1| FORMULA-DECL NIL |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL))
   NIL
   (|Axpy_opt_aux1_aux1| SUBTYPE
    "real_defs.abs(Fnum(float[axpy.radix].Fpred(axpy.b)(axpy.u)))" "nznum")))
 (|Axpy_opt_aux1_aux1_TCC3| 0
  (|Axpy_opt_aux1_aux1_TCC3-1| |nil| 3320665877 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux1_aux1| SUBTYPE
    "(number_fields.*(2, real_defs.abs(Fnum(axpy.t))))" "nznum")))
 (|Axpy_opt_aux1_aux1_TCC4| 0
  (|Axpy_opt_aux1_aux1_TCC4-2| "" 3744429749
   ("" (SKEEP)
    (("" (CASE "0 < (1 - 1 / (2 * abs(Fnum(t))))")
      (("1" (GRIND-REALS) NIL NIL)
       ("2" (HIDE -5)
        (("2" (CASE "0 < abs(Fnum(t))")
          (("1" (CASE "1 <= abs(Fnum(t))")
            (("1" (GRIND-REALS)
              (("1" (MOVE-TERMS 1 R 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (GRIND-REALS)
              (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (EXPAND "Fnormal?")
            (("2" (FLATTEN)
              (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL))
   SHOSTAK
   (|Axpy_opt_aux1_aux1| SUBTYPE
    "((number_fields.-)(1, number_fields./(1, (number_fields.*(2, real_defs.abs(Fnum(axpy.t)))))))"
    "nznum"))
  (|Axpy_opt_aux1_aux1_TCC4-1| |nil| 3320665877
   ("" (SKEEP)
    (("" (CASE "0 < (1 - 1 / (2 * abs(Fnum(t))))")
      (("1" (GRIND-REALS) NIL NIL)
       ("2" (HIDE -5)
        (("2" (CASE "0 < abs(Fnum(t))")
          (("1" (CASE "1 <= abs(Fnum(t))")
            (("1" (GRIND-REALS)
              (("1" (MOVE-TERMS 1 R 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
             ("2" (GRIND-REALS)
              (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (EXPAND "Fnormal?")
            (("2" (FLATTEN)
              (("2" (HIDE-ALL-BUT (-2 1))
                (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL))
   NIL
   (|Axpy_opt_aux1_aux1| SUBTYPE
    "((number_fields.-)(1, number_fields./(1, (number_fields.*(2, real_defs.abs(Fnum(axpy.t)))))))"
    "nznum")))
 (|Axpy_opt_aux1_aux1_TCC5| 0
  (|Axpy_opt_aux1_aux1_TCC5-1| |nil| 3320665877 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux1_aux1| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_aux1_aux1| 0
  (|Axpy_opt_aux1_aux1-2| "" 3790103072
   (""
    (CASE
        "FORALL (x:float): Fnormal?(b)(x) => radix^(Prec(b)-1) <= abs(Fnum(x))")
    (("1" (SKEEP)
      (("1" (INST-CP -1 "t")
        (("1" (INST -1 "u")
          (("1" (SPLIT)
            (("1" (SPLIT)
              (("1" (CASE "2 <= radix ^ (Prec(b) - 1)")
                (("1" (MULT-BY 1 "(1 - 1 / (2 * abs(Fnum(t))))")
                  (("1"
                    (TRANS-INEQ 1
                     "(1 + radix + radix ^ (4 - Prec(b))) * (1 - radix^(1-Prec(b))/2)")
                    (("1" (MOVE-TERMS 1 L 1)
                      (("1" (MOVE-TERMS 1 L 4)
                        (("1"
                          (TRANS-INEQ 1
                           "radix/(radix^(Prec(b)-1)-1)+radix/(2*radix^(Prec(b)-1))+
                                                                                       radix*1/(2*radix^(Prec(b)-1))*1/(radix^(Prec(b)-1)-1)")
                          (("1"
                            (CASE
                                "(abs(Fnum(Fpred(b)(u)))=radix ^ (Prec(b))-1 AND abs(Fnum(u))= radix ^ (Prec(b) - 1)) OR abs(Fnum(Fpred(b)(u)))=abs(Fnum(u))-1")
                            (("1" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (COPY -3)
                                  (("1" (REPLACE -3)
                                    (("1" (HIDE -4)
                                      (("1" (REPLACE -2)
                                        (("1" (HIDE-ALL-BUT (-1 1))
                                          (("1"
                                            (CASE
                                                "radix ^ (Prec(b))=radix*radix ^ (Prec(b) - 1)")
                                            (("1"
                                              (NAME-REPLACE "AA"
                                               "radix ^ (Prec(b) - 1)")
                                              (("1" (COPY -2)
                                                (("1" (REPLACE -2)
                                                  (("1" (HIDE -3)
                                                    (("1"
                                                      (CASE
                                                          "1 / (radix * AA - 1) <= 1 / (AA - 1)")
                                                      (("1"
                                                        (CASE
                                                            "(1 / (radix * AA - 1)) * (1 / (2 * AA)) * radix <=  radix * 1 / (2 * AA) * 1 / (AA - 1)")
                                                        (("1"
                                                          (CASE
                                                              " (1 / (radix * AA - 1)) * radix <=  radix / (AA - 1)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (DIV-BY 1
                                                               "radix")
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "radix / (AA - 1) / radix=1 / (AA - 1)")
                                                                (("2" (FIELD 1)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE 2)
                                                          (("2"
                                                            (DIV-BY 1 "radix")
                                                            (("2"
                                                              (CASE-REPLACE
                                                               " radix * 1 / (2 * AA) * 1 / (AA - 1) / radix =
                                                                                   (1 / (AA - 1))* (1 / (2 * AA))")
                                                              (("1"
                                                                (MULT-BY 1
                                                                 "2*AA")
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "(1 / (radix * AA - 1)) * (1 / (2 * AA)) * (2 * AA)=1 / (radix * AA - 1)")
                                                                  (("1"
                                                                    (CASE-REPLACE
                                                                     "(1 / (AA - 1)) * (1 / (2 * AA)) * (2 * AA)=1 / (AA - 1)")
                                                                    (("1"
                                                                      (FIELD 1)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FIELD 1)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (CASE
                                                              "0 < radix * AA - 1")
                                                          (("1"
                                                            (CASE "0 < AA - 1")
                                                            (("1" (GRIND-REALS)
                                                              (("1"
                                                                (DIV-BY 1 "AA")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (GRIND-REALS)
                                                              NIL NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (CASE
                                                                  "2*2 <= radix*AA")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL)
                                                               ("2"
                                                                (TRANS-INEQ 1
                                                                 "2*AA")
                                                                (("1"
                                                                  (GRIND-REALS)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (REWRITE "expt_div" :DIR RL)
                                                (("2" (USE "expt_x1")
                                                  (("2" (FIELD 1) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REPLACE -1)
                                (("2" (HIDE -2)
                                  (("2"
                                    (CASE
                                        "1 / (abs(Fnum(u)) - 1) <= 1 / (radix ^ (Prec(b) - 1) - 1)")
                                    (("1"
                                      (TRANS-INEQ 1
                                       "radix / (radix ^ (Prec(b) - 1) - 1) +  1 / (2 * abs(Fnum(u))) * radix +
                                                                         (1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) * radix")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2"
                                        (CASE-REPLACE
                                         " radix / (radix ^ (Prec(b) - 1) - 1) = (1/ (radix ^ (Prec(b) - 1) - 1)) * radix")
                                        (("1"
                                          (CASE
                                              "(1 / (abs(Fnum(u)) - 1)) * radix <=  (1 / (radix ^ (Prec(b) - 1) - 1)) * radix")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (DIV-BY 1 "radix") NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL)
                                       ("3"
                                        (CASE
                                            "  1 / (2 * abs(Fnum(u))) * radix <= radix / (2 * radix ^ (Prec(b) - 1))")
                                        (("1"
                                          (TRANS-INEQ 1
                                           " radix / (radix ^ (Prec(b) - 1) - 1) +
                                                                                      radix / (2 * radix ^ (Prec(b) - 1))+(1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) * radix")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2"
                                            (CASE
                                                "(1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) * radix <=  radix * 1 / (2 * radix ^ (Prec(b) - 1)) * 1 /
                                                                                                            (radix ^ (Prec(b) - 1) - 1)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2" (DIV-BY 1 "radix")
                                                (("2"
                                                  (CASE-REPLACE
                                                   " radix * 1 / (2 * radix ^ (Prec(b) - 1)) * 1 /
                                                                                                  (radix ^ (Prec(b) - 1) - 1)
                                                                                                  / radix = 1 / (radix ^ (Prec(b) - 1) - 1) * 1 / (2 * radix ^ (Prec(b) - 1))")
                                                  (("1"
                                                    (CASE
                                                        "(1 / (2 * abs(Fnum(u)))) <= 1 / (2 * radix ^ (Prec(b) - 1))")
                                                    (("1"
                                                      (TRANS-INEQ 1
                                                       " (1 / (abs(Fnum(u)) - 1)) *  1 / (2 * radix ^ (Prec(b) - 1))")
                                                      (("1"
                                                        (MULT-BY 1
                                                         "abs(Fnum(u)) - 1")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "(1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) *
                                                                                                                         (abs(Fnum(u)) - 1)=(1 / (2 * abs(Fnum(u))))")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "(1 / (abs(Fnum(u)) - 1)) * 1 / (2 * radix ^ (Prec(b) - 1)) *
                                                                                                                                (abs(Fnum(u)) - 1)=1 / (2 * radix ^ (Prec(b) - 1))")
                                                            (("1" (FIELD 1) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (FIELD 1) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (MULT-BY 1
                                                         "2 * radix ^ (Prec(b) - 1)")
                                                        NIL NIL))
                                                      NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FIELD 1) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DIV-BY 1 "radix")
                                            (("2"
                                              (CASE-REPLACE
                                               "radix / (2 * radix ^ (Prec(b) - 1)) / radix= 1 / (2*radix ^ (Prec(b) - 1))")
                                              (("1" (MULT-BY 1 "2")
                                                (("1"
                                                  (CASE-REPLACE
                                                   "1 / (2 * abs(Fnum(u))) * 2=1 /abs(Fnum(u))")
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "1 / (2 * radix ^ (Prec(b) - 1)) * 2=1/radix ^ (Prec(b) - 1)")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL)
                                                     ("2" (FIELD 1) NIL NIL))
                                                    NIL)
                                                   ("2" (FIELD 1) NIL NIL)
                                                   ("3" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (CASE "0 < radix ^ (Prec(b) - 1) - 1")
                                        (("1" (GRIND-REALS) NIL NIL)
                                         ("2"
                                          (CASE
                                              "radix^1 <=  radix ^ (Prec(b) - 1)")
                                          (("1" (REWRITE "expt_x1")
                                            (("1" (GRIND-REALS) NIL NIL)) NIL)
                                           ("2" (REWRITE "Exp_increq_1") NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (CASE "0 <  Fnum(u)")
                                (("1" (CASE "0 <= Fnum(Fpred(b)(u))")
                                  (("1"
                                    (CASE-REPLACE
                                     "abs(Fnum(Fpred(b)(u)))=Fnum(Fpred(b)(u))")
                                    (("1" (CASE-REPLACE "abs(Fnum(u))=Fnum(u)")
                                      (("1"
                                        (CASE-REPLACE
                                         "radix ^ (Prec(b))=vNum(b)")
                                        (("1"
                                          (CASE-REPLACE
                                           "radix ^ (Prec(b)-1)=vNum(b)/radix")
                                          (("1" (EXPAND "Fpred" 1)
                                            (("1" (GRIND-REALS) NIL NIL)) NIL)
                                           ("2" (REWRITE -1 :DIR RL)
                                            (("2" (REWRITE "expt_div" :DIR RL)
                                              NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "vNum")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (EXPAND "abs" 1)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (EXPAND "abs" 1)
                                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (CASE "0 <=  FtoR(Fpred(b)(u))")
                                    (("1" (EXPAND "FtoR" -1)
                                      (("1" (GRIND-REALS) NIL NIL)) NIL)
                                     ("2" (REWRITE "FpredPos") NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "FtoR" -6)
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -2 -3 -4 -5 -6)
                            (("2"
                              (CASE-REPLACE
                               "radix ^ (1 - Prec(b))=1/radix ^ (Prec(b) - 1)")
                              (("1"
                                (CASE-REPLACE
                                 " radix ^ (4 - Prec(b))=radix^3/radix ^ (Prec(b) - 1)")
                                (("1" (HIDE -1 -2)
                                  (("1"
                                    (NAME-REPLACE "AA" "radix ^ (Prec(b) - 1)")
                                    (("1" (CASE "0 < AA-1")
                                      (("1" (CASE "0 < 2*AA")
                                        (("1" (MULT-BY 1 "AA-1")
                                          (("1" (MULT-BY 1 "2*AA")
                                            (("1" (TRANS-INEQ 1 "3*AA*radix")
                                              (("1" (FIELD 1) NIL NIL)
                                               ("2" (GRIND-REALS)
                                                (("2" (MULT-BY 1 "AA")
                                                  (("2" (GRIND-REALS)
                                                    (("2"
                                                      (CASE-REPLACE
                                                       "2 * (AA * AA * radix ^ 3) / (2 * (AA * AA))=radix ^ 3")
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "2 * (AA * AA * radix) / (2 * AA)=AA * radix")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "2 * (AA * AA * AA) / (2 * AA)=AA * AA")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "2 * (AA * AA * AA * radix ^ 3) / (2 * (AA * AA))=AA * radix ^ 3")
                                                            (("1"
                                                              (CASE-REPLACE
                                                               " 2 * (AA * AA * AA * radix) / (2 * AA)=AA * AA * radix")
                                                              (("1"
                                                                (HIDE -1 -2 -3
                                                                 -4 -5)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (MOVE-TERMS
                                                                     1 R 4)
                                                                    (("1"
                                                                      (MOVE-TERMS
                                                                       1 R 4)
                                                                      (("1"
                                                                        (MOVE-TERMS
                                                                         1 R 4)
                                                                        (("1"
                                                                          (CASE
                                                                              "radix*radix <= AA")
                                                                          (("1"
                                                                            (HIDE
                                                                             -5)
                                                                            (("1"
                                                                              (REWRITE
                                                                               "expt_x3")
                                                                              (("1"
                                                                                (GRIND-REALS)
                                                                                (("1"
                                                                                  (TRANS-INEQ
                                                                                   1
                                                                                   " 2 * (AA * AA * radix * radix * radix)")
                                                                                  (("1"
                                                                                    (TRANS-INEQ
                                                                                     1
                                                                                     "AA * AA + 3 * (AA * (AA * radix)) + 4 * (AA * AA * radix)")
                                                                                    (("1"
                                                                                      (GRIND-REALS)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (DIV-BY
                                                                                       1
                                                                                       "AA")
                                                                                      (("2"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "AA")
                                                                                        (("2"
                                                                                          (TRANS-INEQ
                                                                                           1
                                                                                           "1+7*radix")
                                                                                          (("1"
                                                                                            (FIELD
                                                                                             1)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (CASE-REPLACE
                                                                                             "2 * (AA * AA * radix * radix * radix) / AA / AA=2*radix*radix*radix")
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -1)
                                                                                              (("1"
                                                                                                (TRANS-INEQ
                                                                                                 1
                                                                                                 "8*radix")
                                                                                                (("1"
                                                                                                  (GRIND-REALS)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (DIV-BY
                                                                                                   1
                                                                                                   "radix")
                                                                                                  (("2"
                                                                                                    (DIV-BY
                                                                                                     1
                                                                                                     "2")
                                                                                                    (("2"
                                                                                                      (CASE-REPLACE
                                                                                                       "8/2=4")
                                                                                                      (("2"
                                                                                                        (TRANS-INEQ
                                                                                                         1
                                                                                                         "2*radix")
                                                                                                        (("1"
                                                                                                          (GRIND-REALS)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (GRIND-REALS)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FIELD
                                                                                               1)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (GRIND-REALS)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (REVEAL
                                                                               -12)
                                                                              (("2"
                                                                                (REWRITE
                                                                                 -1
                                                                                 :DIR
                                                                                 RL)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "expt_x2"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "Exp_increq_1")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (FIELD 1) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (FIELD 1) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (FIELD 1) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (FIELD 1) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REWRITE "expt_div") NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (REWRITE "expt_inverse" :DIR RL)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (SKOSIMP*)
                              (("3" (HIDE -1) (("3" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (HIDE 2) (("4" (GRIND-REALS) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DIV-BY 1 "1 + radix + radix ^ (4 - Prec(b))")
                      (("2"
                        (CASE-REPLACE
                         "radix ^ (1 - Prec(b))=1/radix ^ (Prec(b) - 1)")
                        (("1" (GRIND-REALS) NIL NIL)
                         ("2" (REWRITE "expt_inverse" :DIR RL)
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1" (FIELD 1) NIL NIL) ("2" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TRANS-INEQ 1 "radix ^1")
                  (("1" (REWRITE "expt_x1") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (REWRITE "Exp_increq_1") NIL NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "Fnormal?")
          (("2" (FLATTEN)
            (("2" (REWRITE "abs_mult")
              (("2" (EXPAND "abs" -2 1)
                (("2" (CASE-REPLACE "vNum(b)= radix *radix ^ (Prec(b) - 1)")
                  (("1" (GRIND-REALS) NIL NIL)
                   ("2" (CASE-REPLACE " vNum(b) =radix ^ (Prec(b))")
                    (("1" (REWRITE "expt_div" :DIR RL)
                      (("1" (USE "expt_x1") (("1" (FIELD 1) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    NIL (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_minus_le2| FORMULA-DECL NIL |real_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|expt_x3| FORMULA-DECL NIL |exponentiation| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|le_plus_le| FORMULA-DECL NIL |real_props| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|FpredPos| FORMULA-DECL NIL |float| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL) NIL
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_div| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_minus_le1| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|Fpred| CONST-DECL "float" |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL))
   SHOSTAK)
  (|Axpy_opt_aux1_aux1-1| |nil| 3320665878
   (""
    (CASE
        "FORALL (x:float): Fnormal?(b)(x) => radix^(Prec(b)-1) <= abs(Fnum(x))")
    (("1" (SKEEP)
      (("1" (INST-CP -1 "t")
        (("1" (INST -1 "u")
          (("1" (SPLIT)
            (("1" (SPLIT)
              (("1" (CASE "2 <= radix ^ (Prec(b) - 1)")
                (("1" (MULT-BY 1 "(1 - 1 / (2 * abs(Fnum(t))))")
                  (("1"
                    (TRANS-INEQ 1
                     "(1 + radix + radix ^ (4 - Prec(b))) * (1 - radix^(1-Prec(b))/2)")
                    (("1" (MOVE-TERMS 1 L 1)
                      (("1" (MOVE-TERMS 1 L 4)
                        (("1"
                          (TRANS-INEQ 1
                           "radix/(radix^(Prec(b)-1)-1)+radix/(2*radix^(Prec(b)-1))+
                                                                                       radix*1/(2*radix^(Prec(b)-1))*1/(radix^(Prec(b)-1)-1)")
                          (("1"
                            (CASE
                                "(abs(Fnum(Fpred(b)(u)))=radix ^ (Prec(b))-1 AND abs(Fnum(u))= radix ^ (Prec(b) - 1)) OR abs(Fnum(Fpred(b)(u)))=abs(Fnum(u))-1")
                            (("1" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (COPY -3)
                                  (("1" (REPLACE -3)
                                    (("1" (HIDE -4)
                                      (("1" (REPLACE -2)
                                        (("1" (HIDE-ALL-BUT (-1 1))
                                          (("1"
                                            (CASE
                                                "radix ^ (Prec(b))=radix*radix ^ (Prec(b) - 1)")
                                            (("1"
                                              (NAME-REPLACE "AA"
                                               "radix ^ (Prec(b) - 1)")
                                              (("1" (COPY -2)
                                                (("1" (REPLACE -2)
                                                  (("1" (HIDE -3)
                                                    (("1"
                                                      (CASE
                                                          "1 / (radix * AA - 1) <= 1 / (AA - 1)")
                                                      (("1"
                                                        (CASE
                                                            "(1 / (radix * AA - 1)) * (1 / (2 * AA)) * radix <=  radix * 1 / (2 * AA) * 1 / (AA - 1)")
                                                        (("1"
                                                          (CASE
                                                              " (1 / (radix * AA - 1)) * radix <=  radix / (AA - 1)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (DIV-BY 1
                                                               "radix")
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "radix / (AA - 1) / radix=1 / (AA - 1)")
                                                                (("2" (FIELD 1)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE 2)
                                                          (("2"
                                                            (DIV-BY 1 "radix")
                                                            (("2"
                                                              (CASE-REPLACE
                                                               " radix * 1 / (2 * AA) * 1 / (AA - 1) / radix =
                                                                                   (1 / (AA - 1))* (1 / (2 * AA))")
                                                              (("1"
                                                                (MULT-BY 1
                                                                 "2*AA")
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "(1 / (radix * AA - 1)) * (1 / (2 * AA)) * (2 * AA)=1 / (radix * AA - 1)")
                                                                  (("1"
                                                                    (CASE-REPLACE
                                                                     "(1 / (AA - 1)) * (1 / (2 * AA)) * (2 * AA)=1 / (AA - 1)")
                                                                    (("1"
                                                                      (FIELD 1)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FIELD 1)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2"
                                                          (CASE
                                                              "0 < radix * AA - 1")
                                                          (("1"
                                                            (CASE "0 < AA - 1")
                                                            (("1" (GRIND-REALS)
                                                              (("1"
                                                                (DIV-BY 1 "AA")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (GRIND-REALS)
                                                              NIL NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (CASE
                                                                  "2*2 <= radix*AA")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL)
                                                               ("2"
                                                                (TRANS-INEQ 1
                                                                 "2*AA")
                                                                (("1"
                                                                  (GRIND-REALS)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (REWRITE "expt_div" :DIR RL)
                                                (("2" (USE "expt_x1")
                                                  (("2" (REPLACE -1 :HIDE? T)
                                                    (("2" (FIELD 1) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (REPLACE -1)
                                (("2" (HIDE -2)
                                  (("2"
                                    (CASE
                                        "1 / (abs(Fnum(u)) - 1) <= 1 / (radix ^ (Prec(b) - 1) - 1)")
                                    (("1"
                                      (TRANS-INEQ 1
                                       "radix / (radix ^ (Prec(b) - 1) - 1) +  1 / (2 * abs(Fnum(u))) * radix +
                                                                         (1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) * radix")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2"
                                        (CASE-REPLACE
                                         " radix / (radix ^ (Prec(b) - 1) - 1) = (1/ (radix ^ (Prec(b) - 1) - 1)) * radix")
                                        (("1"
                                          (CASE
                                              "(1 / (abs(Fnum(u)) - 1)) * radix <=  (1 / (radix ^ (Prec(b) - 1) - 1)) * radix")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (DIV-BY 1 "radix") NIL NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL)
                                       ("3"
                                        (CASE
                                            "  1 / (2 * abs(Fnum(u))) * radix <= radix / (2 * radix ^ (Prec(b) - 1))")
                                        (("1"
                                          (TRANS-INEQ 1
                                           " radix / (radix ^ (Prec(b) - 1) - 1) +
                                                                                      radix / (2 * radix ^ (Prec(b) - 1))+(1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) * radix")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2"
                                            (CASE
                                                "(1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) * radix <=  radix * 1 / (2 * radix ^ (Prec(b) - 1)) * 1 /
                                                                                                            (radix ^ (Prec(b) - 1) - 1)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (HIDE 2)
                                              (("2" (DIV-BY 1 "radix")
                                                (("2"
                                                  (CASE-REPLACE
                                                   " radix * 1 / (2 * radix ^ (Prec(b) - 1)) * 1 /
                                                                                                  (radix ^ (Prec(b) - 1) - 1)
                                                                                                  / radix = 1 / (radix ^ (Prec(b) - 1) - 1) * 1 / (2 * radix ^ (Prec(b) - 1))")
                                                  (("1"
                                                    (CASE
                                                        "(1 / (2 * abs(Fnum(u)))) <= 1 / (2 * radix ^ (Prec(b) - 1))")
                                                    (("1"
                                                      (TRANS-INEQ 1
                                                       " (1 / (abs(Fnum(u)) - 1)) *  1 / (2 * radix ^ (Prec(b) - 1))")
                                                      (("1"
                                                        (MULT-BY 1
                                                         "abs(Fnum(u)) - 1")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "(1 / (abs(Fnum(u)) - 1)) * (1 / (2 * abs(Fnum(u)))) *
                                                                                                                         (abs(Fnum(u)) - 1)=(1 / (2 * abs(Fnum(u))))")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "(1 / (abs(Fnum(u)) - 1)) * 1 / (2 * radix ^ (Prec(b) - 1)) *
                                                                                                                                (abs(Fnum(u)) - 1)=1 / (2 * radix ^ (Prec(b) - 1))")
                                                            (("1" (FIELD 1) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (FIELD 1) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (MULT-BY 1
                                                         "2 * radix ^ (Prec(b) - 1)")
                                                        NIL NIL))
                                                      NIL)
                                                     ("2" (HIDE 2)
                                                      (("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FIELD 1) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (DIV-BY 1 "radix")
                                            (("2"
                                              (CASE-REPLACE
                                               "radix / (2 * radix ^ (Prec(b) - 1)) / radix= 1 / (2*radix ^ (Prec(b) - 1))")
                                              (("1" (MULT-BY 1 "2")
                                                (("1"
                                                  (CASE-REPLACE
                                                   "1 / (2 * abs(Fnum(u))) * 2=1 /abs(Fnum(u))")
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "1 / (2 * radix ^ (Prec(b) - 1)) * 2=1/radix ^ (Prec(b) - 1)")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL)
                                                     ("2" (FIELD 1) NIL NIL))
                                                    NIL)
                                                   ("2" (FIELD 1) NIL NIL)
                                                   ("3" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FIELD 1) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2"
                                        (CASE "0 < radix ^ (Prec(b) - 1) - 1")
                                        (("1" (GRIND-REALS) NIL NIL)
                                         ("2"
                                          (CASE
                                              "radix^1 <=  radix ^ (Prec(b) - 1)")
                                          (("1" (REWRITE "expt_x1")
                                            (("1" (GRIND-REALS) NIL NIL)) NIL)
                                           ("2" (REWRITE "Exp_increq_1") NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 2)
                              (("2" (CASE "0 <  Fnum(u)")
                                (("1" (CASE "0 <= Fnum(Fpred(b)(u))")
                                  (("1"
                                    (CASE-REPLACE
                                     "abs(Fnum(Fpred(b)(u)))=Fnum(Fpred(b)(u))")
                                    (("1" (CASE-REPLACE "abs(Fnum(u))=Fnum(u)")
                                      (("1"
                                        (CASE-REPLACE
                                         "radix ^ (Prec(b))=vNum(b)")
                                        (("1"
                                          (CASE-REPLACE
                                           "radix ^ (Prec(b)-1)=vNum(b)/radix")
                                          (("1" (EXPAND "Fpred" 1)
                                            (("1" (GRIND-REALS) NIL NIL)) NIL)
                                           ("2" (REWRITE -1 :DIR RL)
                                            (("2" (REWRITE "expt_div" :DIR RL)
                                              (("2" (USE "expt_x1")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "vNum")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (EXPAND "abs" 1)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (EXPAND "abs" 1)
                                      (("2" (GRIND-REALS) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (CASE "0 <=  FtoR(Fpred(b)(u))")
                                    (("1" (EXPAND "FtoR" -1)
                                      (("1" (GRIND-REALS) NIL NIL)) NIL)
                                     ("2" (REWRITE "FpredPos") NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "FtoR" -6)
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -2 -3 -4 -5 -6)
                            (("2"
                              (CASE-REPLACE
                               "radix ^ (1 - Prec(b))=1/radix ^ (Prec(b) - 1)")
                              (("1"
                                (CASE-REPLACE
                                 " radix ^ (4 - Prec(b))=radix^3/radix ^ (Prec(b) - 1)")
                                (("1" (HIDE -1 -2)
                                  (("1"
                                    (NAME-REPLACE "AA" "radix ^ (Prec(b) - 1)")
                                    (("1" (CASE "0 < AA-1")
                                      (("1" (CASE "0 < 2*AA")
                                        (("1" (MULT-BY 1 "AA-1")
                                          (("1" (MULT-BY 1 "2*AA")
                                            (("1" (TRANS-INEQ 1 "3*AA*radix")
                                              (("1" (FIELD 1) NIL NIL)
                                               ("2" (GRIND-REALS)
                                                (("2" (MULT-BY 1 "AA")
                                                  (("2" (GRIND-REALS)
                                                    (("2"
                                                      (CASE-REPLACE
                                                       "2 * (AA * AA * radix ^ 3) / (2 * (AA * AA))=radix ^ 3")
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "2 * (AA * AA * radix) / (2 * AA)=AA * radix")
                                                        (("1"
                                                          (CASE-REPLACE
                                                           "2 * (AA * AA * AA) / (2 * AA)=AA * AA")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "2 * (AA * AA * AA * radix ^ 3) / (2 * (AA * AA))=AA * radix ^ 3")
                                                            (("1"
                                                              (CASE-REPLACE
                                                               " 2 * (AA * AA * AA * radix) / (2 * AA)=AA * AA * radix")
                                                              (("1"
                                                                (HIDE -1 -2 -3
                                                                 -4 -5)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (MOVE-TERMS
                                                                     1 R 4)
                                                                    (("1"
                                                                      (MOVE-TERMS
                                                                       1 R 4)
                                                                      (("1"
                                                                        (MOVE-TERMS
                                                                         1 R 4)
                                                                        (("1"
                                                                          (CASE
                                                                              "radix*radix <= AA")
                                                                          (("1"
                                                                            (HIDE
                                                                             -5)
                                                                            (("1"
                                                                              (REWRITE
                                                                               "expt_x3")
                                                                              (("1"
                                                                                (GRIND-REALS)
                                                                                (("1"
                                                                                  (TRANS-INEQ
                                                                                   1
                                                                                   " 2 * (AA * AA * radix * radix * radix)")
                                                                                  (("1"
                                                                                    (TRANS-INEQ
                                                                                     1
                                                                                     "AA * AA + 3 * (AA * (AA * radix)) + 4 * (AA * AA * radix)")
                                                                                    (("1"
                                                                                      (GRIND-REALS)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (DIV-BY
                                                                                       1
                                                                                       "AA")
                                                                                      (("2"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "AA")
                                                                                        (("2"
                                                                                          (TRANS-INEQ
                                                                                           1
                                                                                           "1+7*radix")
                                                                                          (("1"
                                                                                            (FIELD
                                                                                             1)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (CASE-REPLACE
                                                                                             "2 * (AA * AA * radix * radix * radix) / AA / AA=2*radix*radix*radix")
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -1)
                                                                                              (("1"
                                                                                                (TRANS-INEQ
                                                                                                 1
                                                                                                 "8*radix")
                                                                                                (("1"
                                                                                                  (GRIND-REALS)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (DIV-BY
                                                                                                   1
                                                                                                   "radix")
                                                                                                  (("2"
                                                                                                    (DIV-BY
                                                                                                     1
                                                                                                     "2")
                                                                                                    (("2"
                                                                                                      (CASE-REPLACE
                                                                                                       "8/2=4")
                                                                                                      (("2"
                                                                                                        (TRANS-INEQ
                                                                                                         1
                                                                                                         "2*radix")
                                                                                                        (("1"
                                                                                                          (GRIND-REALS)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (GRIND-REALS)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FIELD
                                                                                               1)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (GRIND-REALS)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (REVEAL
                                                                               -12)
                                                                              (("2"
                                                                                (REWRITE
                                                                                 -1
                                                                                 :DIR
                                                                                 RL)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "expt_x2"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "Exp_increq_1")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (FIELD 1) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (FIELD 1) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (FIELD 1) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (FIELD 1) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (HIDE 2)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REWRITE "expt_div") NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (REWRITE "expt_inverse" :DIR RL)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (SKOSIMP*)
                              (("3" (HIDE -1) (("3" (GRIND-REALS) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (HIDE 2) (("4" (GRIND-REALS) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DIV-BY 1 "1 + radix + radix ^ (4 - Prec(b))")
                      (("2"
                        (CASE-REPLACE
                         "radix ^ (1 - Prec(b))=1/radix ^ (Prec(b) - 1)")
                        (("1" (GRIND-REALS) NIL NIL)
                         ("2" (REWRITE "expt_inverse" :DIR RL)
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (SPLIT)
                      (("1" (FIELD 1) NIL NIL) ("2" (FIELD 1) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TRANS-INEQ 1 "radix ^1")
                  (("1" (REWRITE "expt_x1") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (REWRITE "Exp_increq_1") NIL NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "Fnormal?")
          (("2" (FLATTEN)
            (("2" (REWRITE "abs_mult")
              (("2" (EXPAND "abs" -2 1)
                (("2" (CASE-REPLACE "vNum(b)= radix *radix ^ (Prec(b) - 1)")
                  (("1" (GRIND-REALS) NIL NIL)
                   ("2" (CASE-REPLACE " vNum(b) =radix ^ (Prec(b))")
                    (("1" (REWRITE "expt_div" :DIR RL)
                      (("1" (USE "expt_x1") (("1" (FIELD 1) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|Fpred| CONST-DECL "float" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|FpredPos| FORMULA-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL))
   SHOSTAK))
 (|Axpy_opt_aux1_TCC1| 0
  (|Axpy_opt_aux1_TCC1-1| |nil| 3320593659 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux1| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_aux1| 0
  (|Axpy_opt_aux1-2| "" 3790103088
   ("" (SKEEP)
    (("" (CASE "Fnormal?(b)(u)")
      (("1" (CASE "0 < Fnum(Fpred(b)(u))")
        (("1" (CASE "0 < 1+1/Fnum(Fpred(b)(u))")
          (("1" (TRANS-INEQ 1 "FtoR(u)/(1+1/Fnum(Fpred(b)(u)))")
            (("1" (MULT-BY 1 "1 + 1 / Fnum(Fpred(b)(u))")
              (("1" (CASE "0 < abs(Fnum(u))")
                (("1" (CASE "0 < 1+1/(2*abs(Fnum(u)))")
                  (("1"
                    (TRANS-INEQ 1
                     "abs(FtoR(t)+FtoR(y))/(1+1/(2*abs(Fnum(u))))")
                    (("1" (MULT-BY 1 "1 + 1 / (2 * abs(Fnum(u)))")
                      (("1" (TRANS-INEQ 1 "abs(FtoR(y)) - abs(FtoR(t))")
                        (("1" (MOVE-TERMS 1 R 2)
                          (("1"
                            (TRANS-INEQ 1
                             "abs(FtoR[radix](t))*(1+radix*((1 + 1 / Fnum(Fpred(b)(u)))*(1 + 1 / (2 * abs(Fnum(u))))))")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (CASE "0 < abs(Fnum(t))")
                              (("1" (CASE " 0 <  (1 - 1 / (2 * abs(Fnum(t))))")
                                (("1"
                                  (CASE " abs(FtoR[radix](t)) <=
                                                                                            abs(FtoR[radix](a) * FtoR[radix](x)) / (1 - 1 / (2 * abs(Fnum(t))))")
                                  (("1"
                                    (TRANS-INEQ 1
                                     "(radix + 1 + radix ^ (4 - Prec(b))) *
                                                                                   abs(FtoR[radix](a) * FtoR[radix](x))")
                                    (("1" (LEMMA "Axpy_opt_aux1_aux1")
                                      (("1" (INST -1 "t" "u")
                                        (("1" (SPLIT)
                                          (("1"
                                            (MULT-BY -1 "abs(FtoR(a)*FtoR(x))")
                                            (("1"
                                              (TRANS-INEQ 1 "(1 +
                                                                                          radix * (1 + 1 / (2 * abs(Fnum(u)))) *
                                                                                           (1 + 1 / abs(Fnum(Fpred(b)(u)))))
                                                                                         / (1 - 1 / (2 * abs(Fnum(t))))
                                                                                         * abs(FtoR[radix](a) * FtoR[radix](x))")
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "abs(Fnum(Fpred(b)(u)))=Fnum(Fpred(b)(u))")
                                                  (("1" (HIDE -1)
                                                    (("1"
                                                      (NAME-REPLACE "G1"
                                                       "(1 - 1 / (2 * abs(Fnum(t))))")
                                                      (("1"
                                                        (NAME-REPLACE "G2"
                                                         "1 + 1 / (2 * abs(Fnum(u)))")
                                                        (("1"
                                                          (NAME-REPLACE "G3"
                                                           "1 + 1 / Fnum(Fpred(b)(u))")
                                                          (("1"
                                                            (DIV-BY 1
                                                             "1 + radix * (G3 * G2)")
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "(1 + radix * G2 * G3) / G1 * abs(FtoR[radix](a) * FtoR[radix](x)) /
                                                                                                            (1 + radix * (G3 * G2))= abs(FtoR[radix](a) * FtoR[radix](x)) / G1")
                                                              (("1" (FIELD 1)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (CASE
                                                                    "radix * (G3 * G2) >= 0")
                                                                (("1" (SPLIT)
                                                                  (("1"
                                                                    (GRIND-REALS)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (EXPAND "abs" 1)
                                                      (("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (PROPAX) NIL NIL)
                                           ("3" (PROPAX) NIL NIL)
                                           ("4" (PROPAX) NIL NIL)
                                           ("5" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (REWRITE "RoundLe")
                                      (("2" (HIDE-ALL-BUT (-1 -3))
                                        (("2" (EXPAND* "abs" "FtoR")
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (HIDE-ALL-BUT (-1 1))
                                    (("2" (MOVE-TERMS 1 R 2)
                                      (("2" (ASSERT)
                                        (("2" (CASE "1 <= abs(Fnum(t))")
                                          (("1" (GRIND-REALS) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (EXPAND "Fnormal?")
                                (("2" (FLATTEN)
                                  (("2" (HIDE-ALL-BUT (1 -12))
                                    (("2" (REWRITE "abs_mult")
                                      (("2" (EXPAND "abs" -1 1)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TRANS-INEQ 1 "abs(FtoR(u))")
                      (("1" (REWRITE "RoundGe") NIL NIL)
                       ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL)
                     ("3" (SKOSIMP*) (("3" (GRIND-REALS) NIL NIL)) NIL)
                     ("4" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("2" (CASE "0 <= 1 / (2 * abs(Fnum(u)))")
                    (("1" (GRIND-REALS) NIL NIL) ("2" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("3" (GRIND-REALS) NIL NIL))
                  NIL)
                 ("2" (EXPAND "FtoR" -6)
                  (("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (MULT-BY 1 "1 + 1/Fnum(Fpred(b)(u))")
              (("2" (ASSERT)
                (("2"
                  (CASE-REPLACE
                   " FtoR[radix](Fpred(b)(u)) * (1 / Fnum(Fpred(b)(u))) = Fulp(b)(Fpred(b)(u))")
                  (("1" (REWRITE "FpredDiff" :DIR RL) (("1" (ASSERT) NIL NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (EXPAND "FtoR" 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("1" (FIELD 1) NIL NIL)
                         ("2" (REWRITE "FpredCanonic") NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "FcanonicBounded")
                    (("3" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (GRIND-REALS) NIL NIL)) NIL))
              NIL)
             ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (GRIND-REALS) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (-1 1))
            (("2" (TRANS-INEQ 1 "1" :STRICT 1)
              (("1" (ASSERT) NIL NIL)
               ("2" (GRIND-REALS)
                (("2" (CASE "0 <= 1 / Fnum(Fpred(b)(u))")
                  (("1" (GRIND-REALS) NIL NIL) ("2" (GRIND-REALS) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT) NIL NIL))
          NIL)
         ("2" (HIDE-ALL-BUT (-1 1 -4))
          (("2" (EXPAND* "FtoR" "Fnormal?")
            (("2" (FLATTEN)
              (("2" (EXPAND "abs" -2)
                (("2" (GRIND-REALS)
                  (("2" (EXPAND "Fpred")
                    (("2" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum")
                        (("1" (INST -1 "b") (("1" (GRIND-REALS) NIL NIL)) NIL))
                        NIL)
                       ("2" (MULT-BY 2 "radix")
                        (("2" (ASSERT)
                          (("2" (CASE "radix < vNum(b)")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                              (("1" (CASE "radix=radix^1")
                                (("1" (TRANS-INEQ 1 "radix^1" :STRICT 2)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (REWRITE "Exp_incr_1") NIL NIL))
                                  NIL)
                                 ("2" (REWRITE "expt_x1") NIL NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (MULT-BY 2 "radix")
                        (("3" (ASSERT)
                          (("3" (CASE "radix < vNum(b)")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (TRANS-INEQ 1 "radix^1" :STRICT 2)
                              (("1" (REWRITE "expt_x1")
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                                (("1" (REWRITE "Exp_incr_1") NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "vNum")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "Normal_iff" :SUBST ("f" "u"))
          (("2" (SPLIT)
            (("1" (FLATTEN)
              (("1"
                (CASE
                    " radix ^ (Prec(b) - 1 - dExp(b)) <= abs(FtoR[radix](u))")
                (("1" (ASSERT) NIL NIL)
                 ("2" (TRANS-INEQ 1 "abs(FtoR(t))")
                  (("1" (LEMMA "Normal_iff" :SUBST ("f" "t"))
                    (("1" (SPLIT)
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2 -1 -2)
                    (("2" (LEMMA "Closest_Monotone")
                      (("2" (EXPAND "Monotone?")
                        (("2"
                          (INST -1 "b" "abs(FtoR(t))" "abs(FtoR(t)+FtoR(y))"
                           "Fabs(t)" "Fabs(u)")
                          (("1" (SPLIT)
                            (("1" (REWRITE "FabsCorrect")
                              (("1" (REWRITE "FabsCorrect") NIL NIL)) NIL)
                             ("2" (REWRITE "ClosestFabs")
                              (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                             ("3" (REWRITE "ClosestFabs")
                              (("1" (REWRITE "RoundedProjector")
                                (("1" (REWRITE "Closest_RoundedMode") NIL NIL)
                                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL)
                               ("2" (REWRITE "FcanonicBounded") NIL NIL))
                              NIL)
                             ("4" (HIDE 2)
                              (("4" (CASE "0 <  2*radix^(Prec(b)-1)")
                                (("1"
                                  (TRANS-INEQ 1
                                   "abs(FtoR[radix](t))*((radix+1)*(1-1/(2*radix ^ (Prec(b) - 1)))-1) "
                                   :STRICT 1)
                                  (("1" (DIV-BY 1 "abs(FtoR[radix](t))")
                                    (("1"
                                      (CASE
                                          "radix*radix <=radix ^ (Prec(b) - 1)")
                                      (("1"
                                        (NAME-REPLACE "AA"
                                         "radix ^ (Prec(b) - 1)")
                                        (("1" (HIDE-ALL-BUT (-1 -2 1))
                                          (("1" (FIELD 1)
                                            (("1" (MOVE-TERMS 1 R 2)
                                              (("1" (MOVE-TERMS 1 R 2)
                                                (("1"
                                                  (TRANS-INEQ 1 "2*AA+AA"
                                                   :STRICT 2)
                                                  (("1" (MOVE-TERMS 1 R 1)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (TRANS-INEQ 1
                                                         "radix*radix")
                                                        (("1"
                                                          (TRANS-INEQ 1
                                                           "radix+radix")
                                                          (("1" (GRIND-REALS)
                                                            NIL NIL)
                                                           ("2" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (DIV-BY 1 "AA")
                                                    (("2" (FIELD 1) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "expt_x2" :DIR RL)
                                        (("2" (REWRITE "Exp_increq_1") NIL
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT (1 -6))
                                      (("2" (EXPAND* "Fnormal?" "FtoR")
                                        (("2" (FLATTEN)
                                          (("2" (REWRITE "abs_mult")
                                            (("2" (REWRITE "abs_mult")
                                              (("2" (EXPAND "abs" -2 1)
                                                (("2" (EXPAND "abs" 1 2)
                                                  (("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (TRANS-INEQ 1 "abs(FtoR(y))-abs(FtoR(t))")
                                    (("1" (MOVE-TERMS 1 R 2)
                                      (("1"
                                        (TRANS-INEQ 1
                                         "(abs(FtoR[radix](t)) *  ((radix + 1) * (1 - 1 / (2 * radix ^ (Prec(b) - 1)))))")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2"
                                          (TRANS-INEQ 1
                                           "abs(FtoR[radix](a) * FtoR[radix](x))*(radix + 1)")
                                          (("1" (NAME-REPLACE "rr" "radix+1")
                                            (("1" (CANCEL-BY 1 "rr")
                                              (("1" (HIDE -1 1)
                                                (("1"
                                                  (TRANS-INEQ 1
                                                   "(abs(FtoR[radix](t)) *(1 - 1 / (2 * radix ^ (Prec(b) - 1))))")
                                                  (("1"
                                                    (NAME-REPLACE "G1"
                                                     "1 / (2 * radix ^ (Prec(b) - 1))")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL))
                                                    NIL)
                                                   ("2" (LEMMA "RoundLe")
                                                    (("2"
                                                      (INST -1 "t"
                                                       "FtoR(a)*FtoR(x)")
                                                      (("2"
                                                        (CASE
                                                            " 0 < 2 * abs(Fnum(t))")
                                                        (("1"
                                                          (CASE
                                                              " 0 < 1 - 1 / (2 * abs(Fnum(t)))")
                                                          (("1" (SPLIT)
                                                            (("1"
                                                              (MULT-BY -1
                                                               " 1 - 1 / (2 * abs(Fnum(t)))")
                                                              (("1"
                                                                (TRANS-INEQ 1
                                                                 "abs(FtoR[radix](t)) * (1 - 1 / (2 * abs(Fnum(t))))")
                                                                (("1"
                                                                  (DIV-BY 1
                                                                   "abs(FtoR[radix](t))")
                                                                  (("1"
                                                                    (CASE
                                                                        " radix ^ (Prec(b) - 1) <= abs(Fnum(t))")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-9 1))
                                                                      (("2"
                                                                        (EXPAND
                                                                         "Fnormal?")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (CASE-REPLACE
                                                                             "radix ^ (Prec(b) - 1)=vNum(b)/radix")
                                                                            (("1"
                                                                              (GRIND-REALS)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "abs"
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (CASE-REPLACE
                                                                               "vNum(b)=radix ^ (Prec(b))")
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "expt_div"
                                                                                 :DIR
                                                                                 RL)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "vNum")
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (PROPAX) NIL
                                                              NIL)
                                                             ("3"
                                                              (HIDE-ALL-BUT
                                                               (-1 -9))
                                                              (("3"
                                                                (EXPAND*
                                                                 "Fnormal?"
                                                                 "FtoR")
                                                                (("3" (FLATTEN)
                                                                  (("3"
                                                                    (EXPAND
                                                                     "abs")
                                                                    (("3"
                                                                      (GRIND-REALS)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("4" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE-ALL-BUT
                                                             (-1 -8 1))
                                                            (("2"
                                                              (CASE
                                                                  "1 <= abs(Fnum(t))")
                                                              (("1" (FIELD 1)
                                                                NIL NIL)
                                                               ("2" (HIDE -2 2)
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT (1 -7))
                                                          (("2"
                                                            (EXPAND "Fnormal?")
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (EXPAND "abs")
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (TRANS-INEQ 1
                                             "(radix + 1 + radix ^ (4 - Prec(b))) *
                                                       abs(FtoR[radix](a) * FtoR[radix](x))")
                                            (("2"
                                              (DIV-BY 1 "abs(FtoR(a)*FtoR(x))")
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "abs")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL)
                                 ("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FabsBounded")
                            (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                           ("3" (REWRITE "FabsBounded")
                            (("3" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Closest_Monotone| FORMULA-DECL NIL |float| NIL)
    (|FabsBounded| FORMULA-DECL NIL |float| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|nprat_div_posrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    NIL NIL (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|expt_div| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|le_minus_le| FORMULA-DECL NIL |real_props| NIL)
    (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|RoundedProjector| FORMULA-DECL NIL |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (|ClosestFabs| FORMULA-DECL NIL |float| NIL)
    (|FabsCorrect| FORMULA-DECL NIL |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL) NIL
    (|Monotone?| CONST-DECL "bool" |float| NIL)
    (|Normal_iff| FORMULA-DECL NIL |axpy| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|Exp_incr_1| FORMULA-DECL NIL |float| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix_less_vNum| FORMULA-DECL NIL |float| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL) NIL
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|Axpy_opt_aux1_aux1| FORMULA-DECL NIL |axpy| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL) NIL NIL
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|RoundLe| FORMULA-DECL NIL |axpy| NIL)
    (|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|RoundGe| FORMULA-DECL NIL |axpy| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|pos_div_le| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|Fpred| CONST-DECL "float" |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|Axpy_opt_aux1-1| |nil| 3320593708
   ("" (SKEEP)
    (("" (CASE "Fnormal?(b)(u)")
      (("1" (CASE "0 < Fnum(Fpred(b)(u))")
        (("1" (CASE "0 < 1+1/Fnum(Fpred(b)(u))")
          (("1" (TRANS-INEQ 1 "FtoR(u)/(1+1/Fnum(Fpred(b)(u)))")
            (("1" (MULT-BY 1 "1 + 1 / Fnum(Fpred(b)(u))")
              (("1" (CASE "0 < abs(Fnum(u))")
                (("1" (CASE "0 < 1+1/(2*abs(Fnum(u)))")
                  (("1"
                    (TRANS-INEQ 1
                     "abs(FtoR(t)+FtoR(y))/(1+1/(2*abs(Fnum(u))))")
                    (("1" (MULT-BY 1 "1 + 1 / (2 * abs(Fnum(u)))")
                      (("1" (TRANS-INEQ 1 "abs(FtoR(y)) - abs(FtoR(t))")
                        (("1" (MOVE-TERMS 1 R 2)
                          (("1"
                            (TRANS-INEQ 1
                             "abs(FtoR[radix](t))*(1+radix*((1 + 1 / Fnum(Fpred(b)(u)))*(1 + 1 / (2 * abs(Fnum(u))))))")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (CASE "0 < abs(Fnum(t))")
                              (("1" (CASE " 0 <  (1 - 1 / (2 * abs(Fnum(t))))")
                                (("1"
                                  (CASE " abs(FtoR[radix](t)) <=
                                                                                            abs(FtoR[radix](a) * FtoR[radix](x)) / (1 - 1 / (2 * abs(Fnum(t))))")
                                  (("1"
                                    (TRANS-INEQ 1
                                     "(radix + 1 + radix ^ (4 - Prec(b))) *
                                                                                   abs(FtoR[radix](a) * FtoR[radix](x))")
                                    (("1" (LEMMA "Axpy_opt_aux1_aux1")
                                      (("1" (INST -1 "t" "u")
                                        (("1" (SPLIT)
                                          (("1"
                                            (MULT-BY -1 "abs(FtoR(a)*FtoR(x))")
                                            (("1"
                                              (TRANS-INEQ 1 "(1 +
                                                                                          radix * (1 + 1 / (2 * abs(Fnum(u)))) *
                                                                                           (1 + 1 / abs(Fnum(Fpred(b)(u)))))
                                                                                         / (1 - 1 / (2 * abs(Fnum(t))))
                                                                                         * abs(FtoR[radix](a) * FtoR[radix](x))")
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "abs(Fnum(Fpred(b)(u)))=Fnum(Fpred(b)(u))")
                                                  (("1" (HIDE -1)
                                                    (("1"
                                                      (NAME-REPLACE "G1"
                                                       "(1 - 1 / (2 * abs(Fnum(t))))")
                                                      (("1"
                                                        (NAME-REPLACE "G2"
                                                         "1 + 1 / (2 * abs(Fnum(u)))")
                                                        (("1"
                                                          (NAME-REPLACE "G3"
                                                           "1 + 1 / Fnum(Fpred(b)(u))")
                                                          (("1"
                                                            (DIV-BY 1
                                                             "1 + radix * (G3 * G2)")
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "(1 + radix * G2 * G3) / G1 * abs(FtoR[radix](a) * FtoR[radix](x)) /
                                                                                                            (1 + radix * (G3 * G2))= abs(FtoR[radix](a) * FtoR[radix](x)) / G1")
                                                              (("1" (FIELD 1)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (CASE
                                                                    "radix * (G3 * G2) >= 0")
                                                                (("1" (SPLIT)
                                                                  (("1"
                                                                    (GRIND-REALS)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE 2)
                                                    (("2" (EXPAND "abs" 1)
                                                      (("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (PROPAX) NIL NIL)
                                           ("3" (PROPAX) NIL NIL)
                                           ("4" (PROPAX) NIL NIL)
                                           ("5" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (REWRITE "RoundLe")
                                      (("2" (HIDE-ALL-BUT (-1 -3))
                                        (("2" (EXPAND* "abs" "FtoR")
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (HIDE-ALL-BUT (-1 1))
                                    (("2" (MOVE-TERMS 1 R 2)
                                      (("2" (ASSERT)
                                        (("2" (CASE "1 <= abs(Fnum(t))")
                                          (("1" (GRIND-REALS) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (EXPAND "Fnormal?")
                                (("2" (FLATTEN)
                                  (("2" (HIDE-ALL-BUT (1 -12))
                                    (("2" (REWRITE "abs_mult")
                                      (("2" (EXPAND "abs" -1 1)
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TRANS-INEQ 1 "abs(FtoR(u))")
                      (("1" (REWRITE "RoundGe") NIL NIL)
                       ("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL)) NIL))
                      NIL)
                     ("3" (SKOSIMP*) (("3" (GRIND-REALS) NIL NIL)) NIL)
                     ("4" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("2" (CASE "0 <= 1 / (2 * abs(Fnum(u)))")
                    (("1" (GRIND-REALS) NIL NIL) ("2" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("3" (GRIND-REALS) NIL NIL))
                  NIL)
                 ("2" (EXPAND "FtoR" -6)
                  (("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (MULT-BY 1 "1 + 1/Fnum(Fpred(b)(u))")
              (("2" (ASSERT)
                (("2"
                  (CASE-REPLACE
                   " FtoR[radix](Fpred(b)(u)) * (1 / Fnum(Fpred(b)(u))) = Fulp(b)(Fpred(b)(u))")
                  (("1" (REWRITE "FpredDiff" :DIR RL) (("1" (ASSERT) NIL NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (EXPAND "FtoR" 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("1" (FIELD 1) NIL NIL)
                         ("2" (REWRITE "FpredCanonic") NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "FcanonicBounded")
                    (("3" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (GRIND-REALS) NIL NIL)) NIL))
              NIL)
             ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (GRIND-REALS) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (-1 1))
            (("2" (TRANS-INEQ 1 "1" :STRICT 1)
              (("1" (ASSERT) NIL NIL)
               ("2" (GRIND-REALS)
                (("2" (CASE "0 <= 1 / Fnum(Fpred(b)(u))")
                  (("1" (GRIND-REALS) NIL NIL) ("2" (GRIND-REALS) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT) NIL NIL))
          NIL)
         ("2" (HIDE-ALL-BUT (-1 1 -4))
          (("2" (EXPAND* "FtoR" "Fnormal?")
            (("2" (FLATTEN)
              (("2" (EXPAND "abs" -2)
                (("2" (GRIND-REALS)
                  (("2" (EXPAND "Fpred")
                    (("2" (GRIND-REALS)
                      (("1" (LEMMA "radix_less_vNum")
                        (("1" (INST -1 "b") (("1" (GRIND-REALS) NIL NIL)) NIL))
                        NIL)
                       ("2" (MULT-BY 2 "radix")
                        (("2" (ASSERT)
                          (("2" (CASE "radix < vNum(b)")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                              (("1" (CASE "radix=radix^1")
                                (("1" (TRANS-INEQ 1 "radix^1" :STRICT 2)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (REWRITE "Exp_incr_1") NIL NIL))
                                  NIL)
                                 ("2" (REWRITE "expt_x1") NIL NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (MULT-BY 2 "radix")
                        (("3" (ASSERT)
                          (("3" (CASE "radix < vNum(b)")
                            (("1" (GRIND-REALS) NIL NIL)
                             ("2" (TRANS-INEQ 1 "radix^1" :STRICT 2)
                              (("1" (REWRITE "expt_x1")
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (CASE-REPLACE "vNum(b)=radix^(Prec(b))")
                                (("1" (REWRITE "Exp_incr_1") NIL NIL)
                                 ("2" (ASSERT)
                                  (("2" (EXPAND "vNum")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (LEMMA "Normal_iff" :SUBST ("f" "u"))
          (("2" (SPLIT)
            (("1" (FLATTEN)
              (("1"
                (CASE
                    " radix ^ (Prec(b) - 1 - dExp(b)) <= abs(FtoR[radix](u))")
                (("1" (ASSERT) NIL NIL)
                 ("2" (TRANS-INEQ 1 "abs(FtoR(t))")
                  (("1" (LEMMA "Normal_iff" :SUBST ("f" "t"))
                    (("1" (SPLIT)
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2 -1 -2)
                    (("2" (LEMMA "Closest_Monotone")
                      (("2" (EXPAND "Monotone?")
                        (("2"
                          (INST -1 "b" "abs(FtoR(t))" "abs(FtoR(t)+FtoR(y))"
                           "Fabs(t)" "Fabs(u)")
                          (("1" (SPLIT)
                            (("1" (REWRITE "FabsCorrect")
                              (("1" (REWRITE "FabsCorrect") NIL NIL)) NIL)
                             ("2" (REWRITE "ClosestFabs")
                              (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                             ("3" (REWRITE "ClosestFabs")
                              (("1" (REWRITE "RoundedProjector")
                                (("1" (REWRITE "Closest_RoundedMode") NIL NIL)
                                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL)
                               ("2" (REWRITE "FcanonicBounded") NIL NIL))
                              NIL)
                             ("4" (HIDE 2)
                              (("4" (CASE "0 <  2*radix^(Prec(b)-1)")
                                (("1"
                                  (TRANS-INEQ 1
                                   "abs(FtoR[radix](t))*((radix+1)*(1-1/(2*radix ^ (Prec(b) - 1)))-1) "
                                   :STRICT 1)
                                  (("1" (DIV-BY 1 "abs(FtoR[radix](t))")
                                    (("1"
                                      (CASE
                                          "radix*radix <=radix ^ (Prec(b) - 1)")
                                      (("1"
                                        (NAME-REPLACE "AA"
                                         "radix ^ (Prec(b) - 1)")
                                        (("1" (HIDE-ALL-BUT (-1 -2 1))
                                          (("1" (FIELD 1)
                                            (("1" (MOVE-TERMS 1 R 2)
                                              (("1" (MOVE-TERMS 1 R 2)
                                                (("1"
                                                  (TRANS-INEQ 1 "2*AA+AA"
                                                   :STRICT 2)
                                                  (("1" (MOVE-TERMS 1 R 1)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (TRANS-INEQ 1
                                                         "radix*radix")
                                                        (("1"
                                                          (TRANS-INEQ 1
                                                           "radix+radix")
                                                          (("1" (GRIND-REALS)
                                                            NIL NIL)
                                                           ("2" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (DIV-BY 1 "AA")
                                                    (("2" (FIELD 1) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "expt_x2" :DIR RL)
                                        (("2" (REWRITE "Exp_increq_1") NIL
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT (1 -6))
                                      (("2" (EXPAND* "Fnormal?" "FtoR")
                                        (("2" (FLATTEN)
                                          (("2" (REWRITE "abs_mult")
                                            (("2" (REWRITE "abs_mult")
                                              (("2" (EXPAND "abs" -2 1)
                                                (("2" (EXPAND "abs" 1 2)
                                                  (("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (TRANS-INEQ 1 "abs(FtoR(y))-abs(FtoR(t))")
                                    (("1" (MOVE-TERMS 1 R 2)
                                      (("1"
                                        (TRANS-INEQ 1
                                         "(abs(FtoR[radix](t)) *  ((radix + 1) * (1 - 1 / (2 * radix ^ (Prec(b) - 1)))))")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2"
                                          (TRANS-INEQ 1
                                           "abs(FtoR[radix](a) * FtoR[radix](x))*(radix + 1)")
                                          (("1" (NAME-REPLACE "rr" "radix+1")
                                            (("1" (CANCEL-BY 1 "rr")
                                              (("1" (HIDE -1 1)
                                                (("1"
                                                  (TRANS-INEQ 1
                                                   "(abs(FtoR[radix](t)) *(1 - 1 / (2 * radix ^ (Prec(b) - 1))))")
                                                  (("1"
                                                    (NAME-REPLACE "G1"
                                                     "1 / (2 * radix ^ (Prec(b) - 1))")
                                                    (("1" (GRIND-REALS) NIL
                                                      NIL))
                                                    NIL)
                                                   ("2" (LEMMA "RoundLe")
                                                    (("2"
                                                      (INST -1 "t"
                                                       "FtoR(a)*FtoR(x)")
                                                      (("2"
                                                        (CASE
                                                            " 0 < 2 * abs(Fnum(t))")
                                                        (("1"
                                                          (CASE
                                                              " 0 < 1 - 1 / (2 * abs(Fnum(t)))")
                                                          (("1" (SPLIT)
                                                            (("1"
                                                              (MULT-BY -1
                                                               " 1 - 1 / (2 * abs(Fnum(t)))")
                                                              (("1"
                                                                (TRANS-INEQ 1
                                                                 "abs(FtoR[radix](t)) * (1 - 1 / (2 * abs(Fnum(t))))")
                                                                (("1"
                                                                  (DIV-BY 1
                                                                   "abs(FtoR[radix](t))")
                                                                  (("1"
                                                                    (CASE
                                                                        " radix ^ (Prec(b) - 1) <= abs(Fnum(t))")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-9 1))
                                                                      (("2"
                                                                        (EXPAND
                                                                         "Fnormal?")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (CASE-REPLACE
                                                                             "radix ^ (Prec(b) - 1)=vNum(b)/radix")
                                                                            (("1"
                                                                              (GRIND-REALS)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "abs"
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (CASE-REPLACE
                                                                               "vNum(b)=radix ^ (Prec(b))")
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "expt_div"
                                                                                 :DIR
                                                                                 RL)
                                                                                (("1"
                                                                                  (USE
                                                                                   "expt_x1")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "vNum")
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (PROPAX) NIL
                                                              NIL)
                                                             ("3"
                                                              (HIDE-ALL-BUT
                                                               (-1 -9))
                                                              (("3"
                                                                (EXPAND*
                                                                 "Fnormal?"
                                                                 "FtoR")
                                                                (("3" (FLATTEN)
                                                                  (("3"
                                                                    (EXPAND
                                                                     "abs")
                                                                    (("3"
                                                                      (GRIND-REALS)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("4" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (HIDE-ALL-BUT
                                                             (-1 -8 1))
                                                            (("2"
                                                              (CASE
                                                                  "1 <= abs(Fnum(t))")
                                                              (("1" (FIELD 1)
                                                                NIL NIL)
                                                               ("2" (HIDE -2 2)
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT (1 -7))
                                                          (("2"
                                                            (EXPAND "Fnormal?")
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (EXPAND "abs")
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (TRANS-INEQ 1
                                             "(radix + 1 + radix ^ (4 - Prec(b))) *
                                                       abs(FtoR[radix](a) * FtoR[radix](x))")
                                            (("2"
                                              (DIV-BY 1 "abs(FtoR(a)*FtoR(x))")
                                              (("2" (GRIND-REALS) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "abs")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL)
                                 ("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FabsBounded")
                            (("2" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                           ("3" (REWRITE "FabsBounded")
                            (("3" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (ASSERT) NIL NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|radix_less_vNum| FORMULA-DECL NIL |float| NIL)
    (|Exp_incr_1| FORMULA-DECL NIL |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Closest_Monotone| FORMULA-DECL NIL |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|RoundedProjector| FORMULA-DECL NIL |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (|ClosestFabs| FORMULA-DECL NIL |float| NIL)
    (|FabsCorrect| FORMULA-DECL NIL |float| NIL)
    (|FabsBounded| FORMULA-DECL NIL |float| NIL)
    (|Monotone?| CONST-DECL "bool" |float| NIL))
   SHOSTAK))
 (|Axpy_opt_aux2_TCC1| 0
  (|Axpy_opt_aux2_TCC1-1| |nil| 3320755855 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux2| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_aux2_TCC2| 0
  (|Axpy_opt_aux2_TCC2-1| |nil| 3321271390 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux2| SUBTYPE "((number_fields.-)(1, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_aux2| 0
  (|Axpy_opt_aux2-2| "" 3790103155
   (""
    (CASE
        "FORALL (x:float): Fnormal?(b)(x) => radix^(Prec(b)-1) <= abs(Fnum(x))")
    (("1" (SKEEP)
      (("1" (CASE "Fnormal?(b)(Fpred(b)(u))")
        (("1" (CASE "Fnormal?(b)(u)")
          (("1" (TRANS-INEQ 1 "abs(FtoR(u))*radix^(-Prec(b))" :STRICT 1)
            (("1" (MULT-BY 1 "radix ^ (Prec(b))")
              (("1"
                (TRANS-INEQ 1 "abs(FtoR[radix](y)) * radix/(radix+1)" :STRICT
                 2)
                (("1" (REWRITE "expt_div" :DIR RL)
                  (("1" (USE "expt_x1") (("1" (FIELD 1) NIL NIL)) NIL)) NIL)
                 ("2" (TRANS-INEQ 1 "abs(FtoR(u))" :STRICT 1)
                  (("1" (CASE "0< 2*abs(Fnum(u))")
                    (("1" (CASE "0< 1+1/(2*abs(Fnum(u)))")
                      (("1"
                        (TRANS-INEQ 1
                         "abs(FtoR(t)+FtoR(y))/(1+1/(2*abs(Fnum(u))))" :STRICT
                         1)
                        (("1" (CASE "0 < 1+radix^(1-Prec(b))/2")
                          (("1"
                            (TRANS-INEQ 1
                             " abs(FtoR[radix](t) + FtoR[radix](y)) / ( 1 + radix ^ (1 - Prec(b)) / 2)"
                             :STRICT 1)
                            (("1" (MULT-BY 1 "1 + radix ^ (1 - Prec(b)) / 2")
                              (("1"
                                (TRANS-INEQ 1 "abs(FtoR(y))-abs(FtoR(t))"
                                 :STRICT 1)
                                (("1" (MOVE-TERMS 1 L 1)
                                  (("1" (MOVE-TERMS 1 R 2)
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE
                                            "0 < 1+radix+radix^(4 - Prec(b))")
                                        (("1"
                                          (CASE
                                              " 0 < 1 - radix ^ (1 - Prec(b)) / 2")
                                          (("1"
                                            (TRANS-INEQ 1
                                             "abs(FtoR(y))/(1 - radix ^ (1 - Prec(b)) / 2)*1/(1 + radix + radix ^ (4 - Prec(b)))"
                                             :STRICT 2)
                                            (("1" (CASE "0 < 2 * abs(Fnum(t))")
                                              (("1"
                                                (CASE
                                                    "0 < 1 - 1 / (2 * abs(Fnum(t)))")
                                                (("1"
                                                  (TRANS-INEQ 1
                                                   "abs(FtoR(a)*FtoR(x))/(1-1/(2*abs(Fnum(t))))")
                                                  (("1" (REWRITE "RoundLe")
                                                    (("1"
                                                      (HIDE-ALL-BUT (-1 -3))
                                                      (("1"
                                                        (EXPAND* "FtoR" "abs")
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (TRANS-INEQ 1
                                                     "abs(FtoR[radix](a) * FtoR[radix](x)) / (1 - radix ^ (1 - Prec(b)) / 2)")
                                                    (("1" (INST -10 "t")
                                                      (("1" (SPLIT)
                                                        (("1" (FIELD 1)
                                                          (("1"
                                                            (DIV-BY 1
                                                             "abs(FtoR(a))")
                                                            (("1"
                                                              (DIV-BY 1
                                                               "abs(FtoR(x))")
                                                              (("1" (FIELD 1)
                                                                (("1"
                                                                  (MULT-BY 1
                                                                   "radix ^ (Prec(b) - 1)")
                                                                  (("1"
                                                                    (TRANS-INEQ
                                                                     1
                                                                     "abs(Fnum(t))")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (DIV-BY 1
                                                                       "abs(Fnum(t))")
                                                                      (("2"
                                                                        (FIELD
                                                                         1)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "expt_plus"
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (USE
                                                                             "expt_x0")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (MULT-BY 1
                                                       "(1 - radix ^ (1 - Prec(b)) / 2)")
                                                      (("2" (FIELD 1) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (ASSERT) NIL NIL)
                                                   ("4" (ASSERT) NIL NIL))
                                                  NIL)
                                                 ("2" (MOVE-TERMS 1 R 2)
                                                  (("2" (ASSERT)
                                                    (("2" (HIDE 2 -15)
                                                      (("2"
                                                        (CASE
                                                            "1 <=  abs(Fnum(t))")
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT (-1 1))
                                                          (("2"
                                                            (NAME-REPLACE "gg"
                                                             "abs(Fnum(t))")
                                                            (("2" (GRIND-REALS)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (ASSERT) NIL NIL))
                                                NIL)
                                               ("2" (EXPAND "Fnormal?" -13)
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE 2 -15)
                                                    (("2" (GRIND-REALS) NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (CASE-REPLACE
                                               " radix ^ (4 - Prec(b))=radix^3*radix ^ (1 - Prec(b))")
                                              (("1"
                                                (CASE
                                                    "0 < radix ^ (1 - Prec(b))")
                                                (("1"
                                                  (CASE
                                                      " radix ^ (1 - Prec(b)) <= radix^(-5)")
                                                  (("1"
                                                    (HIDE -7 -8 -9 -10 -11 -12
                                                     -13 -14 -16 -17)
                                                    (("1"
                                                      (NAME-REPLACE "AA"
                                                       "radix ^ (1 - Prec(b))")
                                                      (("1" (HIDE -3 -7)
                                                        (("1"
                                                          (MULT-BY 1 "1+radix")
                                                          (("1"
                                                            (TRANS-INEQ 1
                                                             "abs(FtoR[radix](y))*(1+radix) - abs(FtoR[radix](y)) * radix -
                                                                                     AA / 2 * (abs(FtoR[radix](y)) * radix)"
                                                             :STRICT 1)
                                                            (("1"
                                                              (DIV-BY 1
                                                               "abs(FtoR(y))")
                                                              (("1"
                                                                (TRANS-INEQ 1
                                                                 "1/ (1 - AA / 2) * 1 / (1 + radix + radix ^ 3 * AA)
                                                                                           * (1 + radix)"
                                                                 :STRICT 2)
                                                                (("1" (FIELD 1)
                                                                  (("1"
                                                                    (MULT-BY -5
                                                                     " 1 - AA / 2")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (TRANS-INEQ 1
                                                                   "( (1 + radix) -  radix -
                                                                                                 AA / 2 *  radix)"
                                                                   :STRICT 1)
                                                                  (("1"
                                                                    (MULT-BY 1
                                                                     "1-AA/2")
                                                                    (("1"
                                                                      (TRANS-INEQ
                                                                       1
                                                                       "1 / (1 + radix + radix ^ 3 * AA) * (1 + radix)"
                                                                       :STRICT
                                                                       2)
                                                                      (("1"
                                                                        (FIELD
                                                                         1)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (MULT-BY
                                                                         1
                                                                         "1 + radix + radix ^ 3 * AA")
                                                                        (("2"
                                                                          (TRANS-INEQ
                                                                           1
                                                                           "1+radix"
                                                                           :STRICT
                                                                           2)
                                                                          (("1"
                                                                            (FIELD
                                                                             1)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (MOVE-TERMS
                                                                                 1
                                                                                 L
                                                                                 1)
                                                                                (("2"
                                                                                  (MOVE-TERMS
                                                                                   1
                                                                                   L
                                                                                   1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (MOVE-TERMS
                                                                                       1
                                                                                       R
                                                                                       (2
                                                                                        3
                                                                                        4
                                                                                        5
                                                                                        6))
                                                                                      (("2"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "AA")
                                                                                        (("2"
                                                                                          (TRANS-INEQ
                                                                                           1
                                                                                           "( 1 / 2 + radix ^ 3 * (AA / 2) + 1/ 2 * radix * radix +
                                                                                                              radix ^ 3 * (AA / 2) * radix
                                                                                                            +  radix)"
                                                                                           :STRICT
                                                                                           2)
                                                                                          (("1"
                                                                                            (FIELD
                                                                                             1)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (TRANS-INEQ
                                                                                             1
                                                                                             " (radix ^ 3 + AA / 4 * radix +
                                                                                                                  (AA / 4) * radix * radix
                                                                                                                 +  radix ^ 3 * (AA / 2) * (AA / 2) * radix)"
                                                                                             :STRICT
                                                                                             1)
                                                                                            (("1"
                                                                                              (TRANS-INEQ
                                                                                               1
                                                                                               "radix ^ 3"
                                                                                               :STRICT
                                                                                               2)
                                                                                              (("1"
                                                                                                (MULT-BY
                                                                                                 1
                                                                                                 "2")
                                                                                                (("1"
                                                                                                  (TRANS-INEQ
                                                                                                   1
                                                                                                   "1+radix^3*AA+radix*radix+radix^3*radix*AA+2*radix")
                                                                                                  (("1"
                                                                                                    (FIELD
                                                                                                     1)
                                                                                                    NIL
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (TRANS-INEQ
                                                                                                     1
                                                                                                     "1 + radix ^ 3 * radix^(-5) + radix * radix + radix ^ 3 * radix * radix^(-5) + 2 * radix")
                                                                                                    (("1"
                                                                                                      (MOVE-TERMS
                                                                                                       1
                                                                                                       R
                                                                                                       (1
                                                                                                        3
                                                                                                        5))
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (CASE
                                                                                                              "radix ^ 3 * AA <=  radix ^ 3 * radix ^ (-5)")
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "AA * radix ^ 3 * radix <=  radix ^ 3 * radix ^ (-5) * radix")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (GRIND-REALS)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (GRIND-REALS)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (REWRITE
                                                                                                       "expt_plus"
                                                                                                       :DIR
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (CASE-REPLACE
                                                                                                         "radix ^ 3 * radix * radix ^ (-5)=radix^(-1)")
                                                                                                        (("1"
                                                                                                          (CASE
                                                                                                              "radix * radix <= radix ^ 3")
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "1 + radix ^ -2 + radix ^ (-1) + 2 * radix <=
                                                                                                                                       radix ^ 3")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (HIDE
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (TRANS-INEQ
                                                                                                                 1
                                                                                                                 "radix^2+radix^2")
                                                                                                                (("1"
                                                                                                                  (CASE
                                                                                                                      "1 + radix ^ -2 + radix ^ (-1) <= radix ^ 2")
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        " 2 * radix <= radix ^ 2")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (REWRITE
                                                                                                                       "expt_x2")
                                                                                                                      (("2"
                                                                                                                        (GRIND-REALS)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (TRANS-INEQ
                                                                                                                       1
                                                                                                                       "radix+1+1")
                                                                                                                      (("1"
                                                                                                                        (CASE
                                                                                                                            "1 <= radix")
                                                                                                                        (("1"
                                                                                                                          (CASE
                                                                                                                              "radix ^ -2 <= 1")
                                                                                                                          (("1"
                                                                                                                            (CASE
                                                                                                                                "radix ^ -1 <= 1")
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (TRANS-INEQ
                                                                                                                               1
                                                                                                                               "radix^0")
                                                                                                                              (("1"
                                                                                                                                (REWRITE
                                                                                                                                 "Exp_increq_1")
                                                                                                                                NIL
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (REWRITE
                                                                                                                                 "expt_x0")
                                                                                                                                (("2"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (TRANS-INEQ
                                                                                                                             1
                                                                                                                             "radix^0")
                                                                                                                            (("1"
                                                                                                                              (REWRITE
                                                                                                                               "Exp_increq_1")
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (REWRITE
                                                                                                                               "expt_x0")
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (REWRITE
                                                                                                                         "expt_x2")
                                                                                                                        (("2"
                                                                                                                          (GRIND-REALS)
                                                                                                                          (("2"
                                                                                                                            (TRANS-INEQ
                                                                                                                             1
                                                                                                                             "radix+radix")
                                                                                                                            (("1"
                                                                                                                              (GRIND-REALS)
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (GRIND-REALS)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (TRANS-INEQ
                                                                                                                   1
                                                                                                                   "radix*radix^2")
                                                                                                                  (("1"
                                                                                                                    (GRIND-REALS)
                                                                                                                    NIL
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (LEMMA
                                                                                                                     "expt_plus")
                                                                                                                    (("2"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "2"
                                                                                                                       "1"
                                                                                                                       "radix")
                                                                                                                      (("2"
                                                                                                                        (REWRITE
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (REWRITE
                                                                                                             "expt_x2"
                                                                                                             :DIR
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (REWRITE
                                                                                                               "Exp_increq_1")
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (LEMMA
                                                                                                           "expt_plus")
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "3"
                                                                                                             "1"
                                                                                                             "radix")
                                                                                                            (("2"
                                                                                                              (REWRITE
                                                                                                               "expt_x1")
                                                                                                              (("2"
                                                                                                                (REWRITE
                                                                                                                 -1
                                                                                                                 :DIR
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (REWRITE
                                                                                                                   "expt_plus"
                                                                                                                   :DIR
                                                                                                                   RL)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (GRIND-REALS)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FIELD
                                                                                               1)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FIELD 1)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2"
                                                                  (REVEAL -19
                                                                   -16 -20)
                                                                  (("2"
                                                                    (CASE
                                                                        "0 < abs(FtoR(a)*FtoR(x))*(radix+1+radix^(4-Prec(b)))")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (DIV-BY 1
                                                                       " (radix + 1 + radix ^ (4 - Prec(b)))")
                                                                      (("2"
                                                                        (TRANS-INEQ
                                                                         1 "0"
                                                                         :STRICT
                                                                         2)
                                                                        (("1"
                                                                          (FIELD
                                                                           1)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (CASE
                                                                              "0 <= abs(FtoR(a)*FtoR(x))")
                                                                          (("1"
                                                                            (SPLIT-INEQ
                                                                             -1)
                                                                            (("1"
                                                                              (CASE
                                                                                  "FtoR[radix](t)=FtoR[radix]((#Fnum:=0, Fexp:=-dExp(b)#))")
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 (-1
                                                                                  -5))
                                                                                (("1"
                                                                                  (EXPAND*
                                                                                   "Fnormal?"
                                                                                   "FtoR")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (GRIND-REALS)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (LEMMA
                                                                                 "RoundedProjectorEq")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "Closest?"
                                                                                   "b"
                                                                                   "(# Fnum := 0, Fexp := -dExp(b) #)"
                                                                                   "t")
                                                                                  (("2"
                                                                                    (SPLIT)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (CASE-REPLACE
                                                                                       "FtoR((# Fnum := 0, Fexp := -dExp(b) #))=FtoR(a)*FtoR(x)")
                                                                                      (("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         (-1
                                                                                          1))
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "FtoR"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "abs"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (GRIND-REALS)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (REWRITE
                                                                                       "Closest_RoundedMode")
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("4"
                                                                                      (REWRITE
                                                                                       "FcanonicBounded")
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("5"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("5"
                                                                                        (EXPAND
                                                                                         "Fbounded?")
                                                                                        (("5"
                                                                                          (EXPAND
                                                                                           "abs")
                                                                                          (("5"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (GRIND-REALS)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FIELD 1) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (REWRITE "Exp_increq_1")
                                                    NIL NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL)
                                               ("2"
                                                (REWRITE "expt_plus" :DIR RL)
                                                NIL NIL))
                                              NIL)
                                             ("3" (ASSERT) NIL NIL)
                                             ("4" (ASSERT) NIL NIL))
                                            NIL)
                                           ("2" (MOVE-TERMS 1 R 2)
                                            (("2" (ASSERT)
                                              (("2" (HIDE-ALL-BUT (-11 1))
                                                (("2"
                                                  (TRANS-INEQ 1 "1/2" :STRICT
                                                   2)
                                                  (("1" (FIELD 1)
                                                    (("1"
                                                      (TRANS-INEQ 1 "radix^0")
                                                      (("1"
                                                        (REWRITE
                                                         "Exp_increq_1")
                                                        NIL NIL)
                                                       ("2" (REWRITE "expt_x0")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT 1)
                                  (("2" (EXPAND "abs")
                                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -6 "u")
                              (("2" (SPLIT)
                                (("1" (FIELD 1)
                                  (("1" (DIV-BY 1 "abs(FtoR(t)+FtoR(y))")
                                    (("1" (FIELD 1)
                                      (("1"
                                        (CASE
                                            "1<=abs(Fnum(u)) *  (radix ^ (1 - Prec(b)))")
                                        (("1"
                                          (MULT-BY -1 "abs(FtoR(t) + FtoR(y))")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (HIDE 2)
                                          (("2" (ASSERT)
                                            (("2"
                                              (MULT-BY 1
                                               "radix ^ (Prec(b) - 1)")
                                              (("2"
                                                (TRANS-INEQ 1 "abs(Fnum(u))")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (DIV-BY 1 "abs(Fnum(u))")
                                                  (("2" (FIELD 1)
                                                    (("2"
                                                      (REWRITE "expt_plus" :DIR
                                                       RL)
                                                      (("2" (USE "expt_x0")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TRANS-INEQ 1 "1" :STRICT 1)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (REWRITE "RoundGe") NIL NIL)
                         ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (TRANS-INEQ 1 "1" :STRICT 1)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (MOVE-TERMS 1 R 1)
                          (("2" (ASSERT) (("2" (GRIND-REALS) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (ASSERT) NIL NIL))
                      NIL)
                     ("2" (EXPAND "Fnormal?" -1)
                      (("2" (FLATTEN)
                        (("2" (HIDE-ALL-BUT (-2 1))
                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "expt_inverse") (("2" (FIELD 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REWRITE "expt_inverse")
              (("2" (MULT-BY 1 "radix ^ Prec(b)")
                (("2" (TRANS-INEQ 1 "abs(FtoR(u))")
                  (("1" (FIELD 1) NIL NIL)
                   ("2"
                    (TRANS-INEQ 1 " Fulp(b)(Fpred(b)(u))+ FtoR(Fpred(b)(u))")
                    (("1" (REWRITE "FpredDiff" :DIR RL)
                      (("1" (ASSERT)
                        (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "FtoR" 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("1" (DIV-BY 1 "radix ^ (Fexp(Fpred(b)(u)))")
                          (("1" (TRANS-INEQ 1 "Fnum(Fpred(b)(u))+1")
                            (("1" (FIELD 1) NIL NIL)
                             ("2" (HIDE-ALL-BUT (-2 1))
                              (("2" (NAME-REPLACE "ff" "Fpred(b)(u)")
                                (("2" (EXPAND* "Fnormal?" "Fbounded?")
                                  (("2" (FLATTEN)
                                    (("2"
                                      (CASE-REPLACE
                                       " radix ^ Prec(b)= vNum(b)")
                                      (("1" (EXPAND "abs" -2)
                                        (("1" (GRIND-REALS)
                                          (("1"
                                            (CASE
                                                "FORALL (i,j:int): i<j => 1+i <= j")
                                            (("1" (INST?)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (SKEEP)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2" (EXPAND "vNum")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FpredCanonic") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
            NIL)
           ("2" (LEMMA "Normal_iff")
            (("2" (INST-CP -1 "u")
              (("2" (INST -1 "Fpred(b)(u)")
                (("2" (SPLIT)
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (REWRITE -2)
                        (("1" (TRANS-INEQ 1 " abs(FtoR[radix](Fpred(b)(u)))")
                          (("1" (CASE " 0 <= FtoR(Fpred(b)(u))")
                            (("1" (EXPAND "abs" 1)
                              (("1" (LEMMA "FpredLt")
                                (("1" (INST -1 "b" "u")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FpredPos") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL)
                   ("2" (ASSERT) (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "Normal_iff")
          (("2" (INST-CP -1 "Fpred(b)(u)")
            (("2" (INST -1 "t")
              (("2" (SPLIT)
                (("1" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (REWRITE -2)
                      (("1" (TRANS-INEQ 1 "abs(FtoR(t))")
                        (("1" (TRANS-INEQ 1 "radix*abs(FtoR(t))")
                          (("1" (DIV-BY 1 "abs(FtoR[radix](t))")
                            (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (EXPAND "abs" 1 2)
                            (("2" (GRIND-REALS)
                              (("1" (LEMMA "Axpy_opt_aux1")
                                (("1" (INST -1 "a" "t" "u" "x" "y")
                                  (("1" (SPLIT)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL)
                                     ("3" (PROPAX) NIL NIL)
                                     ("4" (ASSERT) NIL NIL)
                                     ("5" (PROPAX) NIL NIL)
                                     ("6" (PROPAX) NIL NIL)
                                     ("7" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (LEMMA "Axpy_opt_aux1")
                                (("2" (INST -1 "a" "t" "u" "x" "y")
                                  (("2" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (ASSERT) NIL NIL)
                                     ("3" (PROPAX) NIL NIL)
                                     ("4" (ASSERT) NIL NIL)
                                     ("5" (PROPAX) NIL NIL)
                                     ("6" (PROPAX) NIL NIL)
                                     ("7" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "Fnormal?")
          (("2" (FLATTEN)
            (("2" (CASE-REPLACE "vNum(b)=radix ^ (Prec(b))")
              (("1" (REWRITE "expt_div" :DIR RL)
                (("1" (REWRITE "abs_mult")
                  (("1" (EXPAND "abs" -3 1)
                    (("1" (USE "expt_x1") (("1" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL)) NIL)) NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Axpy_opt_aux1| FORMULA-DECL NIL |axpy| NIL)
    (|Normal_iff| FORMULA-DECL NIL |axpy| NIL)
    (|FpredPos| FORMULA-DECL NIL |float| NIL)
    (|FpredLt| FORMULA-DECL NIL |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|expt_div| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|RoundLe| FORMULA-DECL NIL |axpy| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    NIL NIL (|both_sides_minus_le2| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|le_plus_le| FORMULA-DECL NIL |real_props| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|RoundedProjectorEq| FORMULA-DECL NIL |float| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) NIL NIL NIL NIL
    (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|RoundGe| FORMULA-DECL NIL |axpy| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL))
   SHOSTAK)
  (|Axpy_opt_aux2-1| |nil| 3320755856
   (""
    (CASE
        "FORALL (x:float): Fnormal?(b)(x) => radix^(Prec(b)-1) <= abs(Fnum(x))")
    (("1" (SKEEP)
      (("1" (CASE "Fnormal?(b)(Fpred(b)(u))")
        (("1" (CASE "Fnormal?(b)(u)")
          (("1" (TRANS-INEQ 1 "abs(FtoR(u))*radix^(-Prec(b))" :STRICT 1)
            (("1" (MULT-BY 1 "radix ^ (Prec(b))")
              (("1"
                (TRANS-INEQ 1 "abs(FtoR[radix](y)) * radix/(radix+1)" :STRICT
                 2)
                (("1" (REWRITE "expt_div" :DIR RL)
                  (("1" (USE "expt_x1") (("1" (FIELD 1) NIL NIL)) NIL)) NIL)
                 ("2" (TRANS-INEQ 1 "abs(FtoR(u))" :STRICT 1)
                  (("1" (CASE "0< 2*abs(Fnum(u))")
                    (("1" (CASE "0< 1+1/(2*abs(Fnum(u)))")
                      (("1"
                        (TRANS-INEQ 1
                         "abs(FtoR(t)+FtoR(y))/(1+1/(2*abs(Fnum(u))))" :STRICT
                         1)
                        (("1" (CASE "0 < 1+radix^(1-Prec(b))/2")
                          (("1"
                            (TRANS-INEQ 1
                             " abs(FtoR[radix](t) + FtoR[radix](y)) / ( 1 + radix ^ (1 - Prec(b)) / 2)"
                             :STRICT 1)
                            (("1" (MULT-BY 1 "1 + radix ^ (1 - Prec(b)) / 2")
                              (("1"
                                (TRANS-INEQ 1 "abs(FtoR(y))-abs(FtoR(t))"
                                 :STRICT 1)
                                (("1" (MOVE-TERMS 1 L 1)
                                  (("1" (MOVE-TERMS 1 R 2)
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE
                                            "0 < 1+radix+radix^(4 - Prec(b))")
                                        (("1"
                                          (CASE
                                              " 0 < 1 - radix ^ (1 - Prec(b)) / 2")
                                          (("1"
                                            (TRANS-INEQ 1
                                             "abs(FtoR(y))/(1 - radix ^ (1 - Prec(b)) / 2)*1/(1 + radix + radix ^ (4 - Prec(b)))"
                                             :STRICT 2)
                                            (("1" (CASE "0 < 2 * abs(Fnum(t))")
                                              (("1"
                                                (CASE
                                                    "0 < 1 - 1 / (2 * abs(Fnum(t)))")
                                                (("1"
                                                  (TRANS-INEQ 1
                                                   "abs(FtoR(a)*FtoR(x))/(1-1/(2*abs(Fnum(t))))")
                                                  (("1" (REWRITE "RoundLe")
                                                    (("1"
                                                      (HIDE-ALL-BUT (-1 -3))
                                                      (("1"
                                                        (EXPAND* "FtoR" "abs")
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (TRANS-INEQ 1
                                                     "abs(FtoR[radix](a) * FtoR[radix](x)) / (1 - radix ^ (1 - Prec(b)) / 2)")
                                                    (("1" (INST -10 "t")
                                                      (("1" (SPLIT)
                                                        (("1" (FIELD 1)
                                                          (("1"
                                                            (DIV-BY 1
                                                             "abs(FtoR(a))")
                                                            (("1"
                                                              (DIV-BY 1
                                                               "abs(FtoR(x))")
                                                              (("1" (FIELD 1)
                                                                (("1"
                                                                  (MULT-BY 1
                                                                   "radix ^ (Prec(b) - 1)")
                                                                  (("1"
                                                                    (TRANS-INEQ
                                                                     1
                                                                     "abs(Fnum(t))")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (DIV-BY 1
                                                                       "abs(Fnum(t))")
                                                                      (("2"
                                                                        (FIELD
                                                                         1)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "expt_plus"
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (USE
                                                                             "expt_x0")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (MULT-BY 1
                                                       "(1 - radix ^ (1 - Prec(b)) / 2)")
                                                      (("2" (FIELD 1) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3" (ASSERT) NIL NIL)
                                                   ("4" (ASSERT) NIL NIL))
                                                  NIL)
                                                 ("2" (MOVE-TERMS 1 R 2)
                                                  (("2" (ASSERT)
                                                    (("2" (HIDE 2 -15)
                                                      (("2"
                                                        (CASE
                                                            "1 <=  abs(Fnum(t))")
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT (-1 1))
                                                          (("2"
                                                            (NAME-REPLACE "gg"
                                                             "abs(Fnum(t))")
                                                            (("2" (GRIND-REALS)
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (ASSERT) NIL NIL))
                                                NIL)
                                               ("2" (EXPAND "Fnormal?" -13)
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE 2 -15)
                                                    (("2" (GRIND-REALS) NIL
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (CASE-REPLACE
                                               " radix ^ (4 - Prec(b))=radix^3*radix ^ (1 - Prec(b))")
                                              (("1"
                                                (CASE
                                                    "0 < radix ^ (1 - Prec(b))")
                                                (("1"
                                                  (CASE
                                                      " radix ^ (1 - Prec(b)) <= radix^(-5)")
                                                  (("1"
                                                    (HIDE -7 -8 -9 -10 -11 -12
                                                     -13 -14 -16 -17)
                                                    (("1"
                                                      (NAME-REPLACE "AA"
                                                       "radix ^ (1 - Prec(b))")
                                                      (("1" (HIDE -3 -7)
                                                        (("1"
                                                          (MULT-BY 1 "1+radix")
                                                          (("1"
                                                            (TRANS-INEQ 1
                                                             "abs(FtoR[radix](y))*(1+radix) - abs(FtoR[radix](y)) * radix -
                                                                                     AA / 2 * (abs(FtoR[radix](y)) * radix)"
                                                             :STRICT 1)
                                                            (("1"
                                                              (DIV-BY 1
                                                               "abs(FtoR(y))")
                                                              (("1"
                                                                (TRANS-INEQ 1
                                                                 "1/ (1 - AA / 2) * 1 / (1 + radix + radix ^ 3 * AA)
                                                                                           * (1 + radix)"
                                                                 :STRICT 2)
                                                                (("1" (FIELD 1)
                                                                  (("1"
                                                                    (MULT-BY -5
                                                                     " 1 - AA / 2")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (TRANS-INEQ 1
                                                                   "( (1 + radix) -  radix -
                                                                                                 AA / 2 *  radix)"
                                                                   :STRICT 1)
                                                                  (("1"
                                                                    (MULT-BY 1
                                                                     "1-AA/2")
                                                                    (("1"
                                                                      (TRANS-INEQ
                                                                       1
                                                                       "1 / (1 + radix + radix ^ 3 * AA) * (1 + radix)"
                                                                       :STRICT
                                                                       2)
                                                                      (("1"
                                                                        (FIELD
                                                                         1)
                                                                        NIL
                                                                        NIL)
                                                                       ("2"
                                                                        (MULT-BY
                                                                         1
                                                                         "1 + radix + radix ^ 3 * AA")
                                                                        (("2"
                                                                          (TRANS-INEQ
                                                                           1
                                                                           "1+radix"
                                                                           :STRICT
                                                                           2)
                                                                          (("1"
                                                                            (FIELD
                                                                             1)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (MOVE-TERMS
                                                                                 1
                                                                                 L
                                                                                 1)
                                                                                (("2"
                                                                                  (MOVE-TERMS
                                                                                   1
                                                                                   L
                                                                                   1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (MOVE-TERMS
                                                                                       1
                                                                                       R
                                                                                       (2
                                                                                        3
                                                                                        4
                                                                                        5
                                                                                        6))
                                                                                      (("2"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "AA")
                                                                                        (("2"
                                                                                          (TRANS-INEQ
                                                                                           1
                                                                                           "( 1 / 2 + radix ^ 3 * (AA / 2) + 1/ 2 * radix * radix +
                                                                                                              radix ^ 3 * (AA / 2) * radix
                                                                                                            +  radix)"
                                                                                           :STRICT
                                                                                           2)
                                                                                          (("1"
                                                                                            (FIELD
                                                                                             1)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (TRANS-INEQ
                                                                                             1
                                                                                             " (radix ^ 3 + AA / 4 * radix +
                                                                                                                  (AA / 4) * radix * radix
                                                                                                                 +  radix ^ 3 * (AA / 2) * (AA / 2) * radix)"
                                                                                             :STRICT
                                                                                             1)
                                                                                            (("1"
                                                                                              (TRANS-INEQ
                                                                                               1
                                                                                               "radix ^ 3"
                                                                                               :STRICT
                                                                                               2)
                                                                                              (("1"
                                                                                                (MULT-BY
                                                                                                 1
                                                                                                 "2")
                                                                                                (("1"
                                                                                                  (TRANS-INEQ
                                                                                                   1
                                                                                                   "1+radix^3*AA+radix*radix+radix^3*radix*AA+2*radix")
                                                                                                  (("1"
                                                                                                    (FIELD
                                                                                                     1)
                                                                                                    NIL
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (TRANS-INEQ
                                                                                                     1
                                                                                                     "1 + radix ^ 3 * radix^(-5) + radix * radix + radix ^ 3 * radix * radix^(-5) + 2 * radix")
                                                                                                    (("1"
                                                                                                      (MOVE-TERMS
                                                                                                       1
                                                                                                       R
                                                                                                       (1
                                                                                                        3
                                                                                                        5))
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (CASE
                                                                                                              "radix ^ 3 * AA <=  radix ^ 3 * radix ^ (-5)")
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "AA * radix ^ 3 * radix <=  radix ^ 3 * radix ^ (-5) * radix")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (GRIND-REALS)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (GRIND-REALS)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (REWRITE
                                                                                                       "expt_plus"
                                                                                                       :DIR
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (CASE-REPLACE
                                                                                                         "radix ^ 3 * radix * radix ^ (-5)=radix^(-1)")
                                                                                                        (("1"
                                                                                                          (CASE
                                                                                                              "radix * radix <= radix ^ 3")
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "1 + radix ^ -2 + radix ^ (-1) + 2 * radix <=
                                                                                                                                       radix ^ 3")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (HIDE
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (TRANS-INEQ
                                                                                                                 1
                                                                                                                 "radix^2+radix^2")
                                                                                                                (("1"
                                                                                                                  (CASE
                                                                                                                      "1 + radix ^ -2 + radix ^ (-1) <= radix ^ 2")
                                                                                                                  (("1"
                                                                                                                    (CASE
                                                                                                                        " 2 * radix <= radix ^ 2")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (REWRITE
                                                                                                                       "expt_x2")
                                                                                                                      (("2"
                                                                                                                        (GRIND-REALS)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (TRANS-INEQ
                                                                                                                       1
                                                                                                                       "radix+1+1")
                                                                                                                      (("1"
                                                                                                                        (CASE
                                                                                                                            "1 <= radix")
                                                                                                                        (("1"
                                                                                                                          (CASE
                                                                                                                              "radix ^ -2 <= 1")
                                                                                                                          (("1"
                                                                                                                            (CASE
                                                                                                                                "radix ^ -1 <= 1")
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (TRANS-INEQ
                                                                                                                               1
                                                                                                                               "radix^0")
                                                                                                                              (("1"
                                                                                                                                (REWRITE
                                                                                                                                 "Exp_increq_1")
                                                                                                                                NIL
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (REWRITE
                                                                                                                                 "expt_x0")
                                                                                                                                (("2"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (TRANS-INEQ
                                                                                                                             1
                                                                                                                             "radix^0")
                                                                                                                            (("1"
                                                                                                                              (REWRITE
                                                                                                                               "Exp_increq_1")
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (REWRITE
                                                                                                                               "expt_x0")
                                                                                                                              (("2"
                                                                                                                                (ASSERT)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (REWRITE
                                                                                                                         "expt_x2")
                                                                                                                        (("2"
                                                                                                                          (GRIND-REALS)
                                                                                                                          (("2"
                                                                                                                            (TRANS-INEQ
                                                                                                                             1
                                                                                                                             "radix+radix")
                                                                                                                            (("1"
                                                                                                                              (GRIND-REALS)
                                                                                                                              NIL
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (GRIND-REALS)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (TRANS-INEQ
                                                                                                                   1
                                                                                                                   "radix*radix^2")
                                                                                                                  (("1"
                                                                                                                    (GRIND-REALS)
                                                                                                                    NIL
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (LEMMA
                                                                                                                     "expt_plus")
                                                                                                                    (("2"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "2"
                                                                                                                       "1"
                                                                                                                       "radix")
                                                                                                                      (("2"
                                                                                                                        (REWRITE
                                                                                                                         "expt_x1")
                                                                                                                        (("2"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (REWRITE
                                                                                                             "expt_x2"
                                                                                                             :DIR
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (REWRITE
                                                                                                               "Exp_increq_1")
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (LEMMA
                                                                                                           "expt_plus")
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "3"
                                                                                                             "1"
                                                                                                             "radix")
                                                                                                            (("2"
                                                                                                              (REWRITE
                                                                                                               "expt_x1")
                                                                                                              (("2"
                                                                                                                (REWRITE
                                                                                                                 -1
                                                                                                                 :DIR
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (REWRITE
                                                                                                                   "expt_plus"
                                                                                                                   :DIR
                                                                                                                   RL)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (GRIND-REALS)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (FIELD
                                                                                               1)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FIELD 1)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2"
                                                                  (REVEAL -19
                                                                   -16 -20)
                                                                  (("2"
                                                                    (CASE
                                                                        "0 < abs(FtoR(a)*FtoR(x))*(radix+1+radix^(4-Prec(b)))")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (DIV-BY 1
                                                                       " (radix + 1 + radix ^ (4 - Prec(b)))")
                                                                      (("2"
                                                                        (TRANS-INEQ
                                                                         1 "0"
                                                                         :STRICT
                                                                         2)
                                                                        (("1"
                                                                          (FIELD
                                                                           1)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (CASE
                                                                              "0 <= abs(FtoR(a)*FtoR(x))")
                                                                          (("1"
                                                                            (SPLIT-INEQ
                                                                             -1)
                                                                            (("1"
                                                                              (CASE
                                                                                  "FtoR[radix](t)=FtoR[radix]((#Fnum:=0, Fexp:=-dExp(b)#))")
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 (-1
                                                                                  -5))
                                                                                (("1"
                                                                                  (EXPAND*
                                                                                   "Fnormal?"
                                                                                   "FtoR")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (GRIND-REALS)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (LEMMA
                                                                                 "RoundedProjectorEq")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "Closest?"
                                                                                   "b"
                                                                                   "(# Fnum := 0, Fexp := -dExp(b) #)"
                                                                                   "t")
                                                                                  (("2"
                                                                                    (SPLIT)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (CASE-REPLACE
                                                                                       "FtoR((# Fnum := 0, Fexp := -dExp(b) #))=FtoR(a)*FtoR(x)")
                                                                                      (("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         (-1
                                                                                          1))
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "FtoR"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "abs"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (GRIND-REALS)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (REWRITE
                                                                                       "Closest_RoundedMode")
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("4"
                                                                                      (REWRITE
                                                                                       "FcanonicBounded")
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("5"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("5"
                                                                                        (EXPAND
                                                                                         "Fbounded?")
                                                                                        (("5"
                                                                                          (EXPAND
                                                                                           "abs")
                                                                                          (("5"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (GRIND-REALS)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FIELD 1) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (REWRITE "Exp_increq_1")
                                                    NIL NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL)
                                               ("2"
                                                (REWRITE "expt_plus" :DIR RL)
                                                NIL NIL))
                                              NIL)
                                             ("3" (ASSERT) NIL NIL)
                                             ("4" (ASSERT) NIL NIL))
                                            NIL)
                                           ("2" (MOVE-TERMS 1 R 2)
                                            (("2" (ASSERT)
                                              (("2" (HIDE-ALL-BUT (-11 1))
                                                (("2"
                                                  (TRANS-INEQ 1 "1/2" :STRICT
                                                   2)
                                                  (("1" (FIELD 1)
                                                    (("1"
                                                      (TRANS-INEQ 1 "radix^0")
                                                      (("1"
                                                        (REWRITE
                                                         "Exp_increq_1")
                                                        NIL NIL)
                                                       ("2" (REWRITE "expt_x0")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT 1)
                                  (("2" (EXPAND "abs")
                                    (("2" (GRIND-REALS) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST -6 "u")
                              (("2" (SPLIT)
                                (("1" (FIELD 1)
                                  (("1" (DIV-BY 1 "abs(FtoR(t)+FtoR(y))")
                                    (("1" (FIELD 1)
                                      (("1"
                                        (CASE
                                            "1<=abs(Fnum(u)) *  (radix ^ (1 - Prec(b)))")
                                        (("1"
                                          (MULT-BY -1 "abs(FtoR(t) + FtoR(y))")
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (HIDE 2)
                                          (("2" (ASSERT)
                                            (("2"
                                              (MULT-BY 1
                                               "radix ^ (Prec(b) - 1)")
                                              (("2"
                                                (TRANS-INEQ 1 "abs(Fnum(u))")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (DIV-BY 1 "abs(Fnum(u))")
                                                  (("2" (FIELD 1)
                                                    (("2"
                                                      (REWRITE "expt_plus" :DIR
                                                       RL)
                                                      (("2" (USE "expt_x0")
                                                        (("2" (REPLACE -1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TRANS-INEQ 1 "1" :STRICT 1)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (GRIND-REALS) NIL NIL))
                            NIL)
                           ("3" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (REWRITE "RoundGe") NIL NIL)
                         ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (TRANS-INEQ 1 "1" :STRICT 1)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (MOVE-TERMS 1 R 1)
                          (("2" (ASSERT) (("2" (GRIND-REALS) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (ASSERT) NIL NIL))
                      NIL)
                     ("2" (EXPAND "Fnormal?" -1)
                      (("2" (FLATTEN)
                        (("2" (HIDE-ALL-BUT (-2 1))
                          (("2" (GRIND-REALS) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "expt_inverse") (("2" (FIELD 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REWRITE "expt_inverse")
              (("2" (MULT-BY 1 "radix ^ Prec(b)")
                (("2" (TRANS-INEQ 1 "abs(FtoR(u))")
                  (("1" (FIELD 1) NIL NIL)
                   ("2"
                    (TRANS-INEQ 1 " Fulp(b)(Fpred(b)(u))+ FtoR(Fpred(b)(u))")
                    (("1" (REWRITE "FpredDiff" :DIR RL)
                      (("1" (ASSERT)
                        (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "FtoR" 1)
                      (("2" (REWRITE "FulpCanonic")
                        (("1" (DIV-BY 1 "radix ^ (Fexp(Fpred(b)(u)))")
                          (("1" (TRANS-INEQ 1 "Fnum(Fpred(b)(u))+1")
                            (("1" (FIELD 1) NIL NIL)
                             ("2" (HIDE-ALL-BUT (-2 1))
                              (("2" (NAME-REPLACE "ff" "Fpred(b)(u)")
                                (("2" (EXPAND* "Fnormal?" "Fbounded?")
                                  (("2" (FLATTEN)
                                    (("2"
                                      (CASE-REPLACE
                                       " radix ^ Prec(b)= vNum(b)")
                                      (("1" (EXPAND "abs" -2)
                                        (("1" (GRIND-REALS)
                                          (("1"
                                            (CASE
                                                "FORALL (i,j:int): i<j => 1+i <= j")
                                            (("1" (INST?)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (SKEEP)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2" (EXPAND "vNum")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FpredCanonic") NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL))
            NIL)
           ("2" (LEMMA "Normal_iff")
            (("2" (INST-CP -1 "u")
              (("2" (INST -1 "Fpred(b)(u)")
                (("2" (SPLIT)
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (REWRITE -2)
                        (("1" (TRANS-INEQ 1 " abs(FtoR[radix](Fpred(b)(u)))")
                          (("1" (CASE " 0 <= FtoR(Fpred(b)(u))")
                            (("1" (EXPAND "abs" 1)
                              (("1" (LEMMA "FpredLt")
                                (("1" (INST -1 "b" "u")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (REWRITE "FpredPos") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL)
                   ("2" (ASSERT) (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "Normal_iff")
          (("2" (INST-CP -1 "Fpred(b)(u)")
            (("2" (INST -1 "t")
              (("2" (SPLIT)
                (("1" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (REWRITE -2)
                      (("1" (TRANS-INEQ 1 "abs(FtoR(t))")
                        (("1" (TRANS-INEQ 1 "radix*abs(FtoR(t))")
                          (("1" (DIV-BY 1 "abs(FtoR[radix](t))")
                            (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (EXPAND "abs" 1 2)
                            (("2" (GRIND-REALS)
                              (("1" (LEMMA "Axpy_opt_aux1")
                                (("1" (INST -1 "a" "t" "u" "x" "y")
                                  (("1" (SPLIT)
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (ASSERT) NIL NIL)
                                     ("3" (PROPAX) NIL NIL)
                                     ("4" (ASSERT) NIL NIL)
                                     ("5" (PROPAX) NIL NIL)
                                     ("6" (PROPAX) NIL NIL)
                                     ("7" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (LEMMA "Axpy_opt_aux1")
                                (("2" (INST -1 "a" "t" "u" "x" "y")
                                  (("2" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (ASSERT) NIL NIL)
                                     ("3" (PROPAX) NIL NIL)
                                     ("4" (ASSERT) NIL NIL)
                                     ("5" (PROPAX) NIL NIL)
                                     ("6" (PROPAX) NIL NIL)
                                     ("7" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) (("2" (REWRITE "FpredCanonic") NIL NIL)) NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (EXPAND "Fnormal?")
          (("2" (FLATTEN)
            (("2" (CASE-REPLACE "vNum(b)=radix ^ (Prec(b))")
              (("1" (REWRITE "expt_div" :DIR RL)
                (("1" (REWRITE "abs_mult")
                  (("1" (EXPAND "abs" -3 1)
                    (("1" (USE "expt_x1") (("1" (GRIND-REALS) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "vNum") (("2" (PROPAX) NIL NIL)) NIL)) NIL)
               ("3" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|RoundedProjectorEq| FORMULA-DECL NIL |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|FpredPos| FORMULA-DECL NIL |float| NIL)
    (|FpredLt| FORMULA-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL))
   SHOSTAK))
 (|Axpy_opt_aux3_TCC1| 0
  (|Axpy_opt_aux3_TCC1-1| |nil| 3321283541 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux3| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_aux3_TCC2| 0
  (|Axpy_opt_aux3_TCC2-1| |nil| 3321283541 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt_aux3| SUBTYPE "((number_fields.-)(1, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_aux3| 0
  (|Axpy_opt_aux3-2| "" 3790103186
   ("" (SKEEP)
    (("" (CASE "-dExp(b) <= Fexp(u)")
      (("1" (SPLIT-INEQ -1)
        (("1" (HIDE -2)
          (("1" (MULT-BY 1 "radix/2+radix")
            (("1" (MULT-BY 1 "radix ^ (Prec(b)-1)")
              (("1"
                (TRANS-INEQ 1
                 "abs(FtoR[radix](y)) * (radix ^ (1 - Prec(b)) * radix ^ (Prec(b) - 1))"
                 :STRICT 2)
                (("1" (ASSERT) NIL NIL)
                 ("2" (REWRITE "expt_plus" :DIR RL)
                  (("2" (CASE-REPLACE "FtoR(y)=FtoR(u)-FtoR(t)")
                    (("1" (TRANS-INEQ 1 "abs(FtoR(u))+abs(FtoR(t))" :STRICT 2)
                      (("1" (HIDE-ALL-BUT 1)
                        (("1" (EXPAND "abs")
                          (("1" (USE "expt_x0") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "FulpCanonic")
                        (("1" (CASE-REPLACE "Fexp(Fpred(b)(u))=-dExp(b)")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "abs(FtoR[radix](t)) <=  radix ^ (Prec(b) - 1) * radix ^ -dExp(b)*(radix/2)")
                              (("1"
                                (CASE
                                    "abs(FtoR[radix](u)) < radix ^ (Prec(b) - 1) * radix ^ -dExp(b) * radix")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REWRITE "FabsCorrect" :DIR RL)
                                    (("2" (EXPAND "Fabs")
                                      (("2" (EXPAND "FtoR" 1)
                                        (("2" (REWRITE -4 :DIR RL)
                                          (("2" (DIV-BY 1 "radix ^ -dExp(b)")
                                            (("2" (FIELD 1)
                                              (("2"
                                                (TRANS-INEQ 1 "vNum(b)" :STRICT
                                                 1)
                                                (("1" (CASE "Fbounded?(b)(u)")
                                                  (("1" (EXPAND "Fbounded?")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2"
                                                    (REWRITE "FcanonicBounded")
                                                    NIL NIL))
                                                  NIL)
                                                 ("2"
                                                  (TRANS-INEQ 1
                                                   "radix ^ (Prec(b))")
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "vNum")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (LEMMA "expt_plus")
                                                    (("2"
                                                      (INST -1 "1" "Prec(b)-1"
                                                       "radix")
                                                      (("2" (REWRITE "expt_x1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-8 1))
                                (("2" (EXPAND* "Fsubnormal?" "FtoR")
                                  (("2" (FLATTEN)
                                    (("2" (COPY -3)
                                      (("2" (REWRITE -3)
                                        (("2" (DIV-BY 1 "radix ^ -dExp(b)")
                                          (("2" (REWRITE "abs_mult")
                                            (("2" (REWRITE "abs_mult")
                                              (("2" (EXPAND "abs" 1 2)
                                                (("2"
                                                  (CASE-REPLACE
                                                   "exponentiation.^(radix, -dExp(b)) = radix ^ -dExp(b)"
                                                   :HIDE? T)
                                                  (("2" (FIELD 1)
                                                    (("2"
                                                      (CASE-REPLACE
                                                       " radix ^ (Prec(b) - 1)=vNum(b)/radix")
                                                      (("1"
                                                        (TRANS-INEQ 1
                                                         "radix*abs(Fnum(t))")
                                                        (("1" (GRIND-REALS) NIL
                                                          NIL)
                                                         ("2"
                                                          (EXPAND "abs" -3 1)
                                                          (("2" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (REWRITE "expt_div"
                                                         :DIR RL)
                                                        (("2" (GRIND-REALS)
                                                          (("2" (USE "expt_x1")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND "vNum")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (-2 -5 1))
                            (("2" (EXPAND "Fpred")
                              (("2" (EXPAND "FtoR")
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FpredCanonic") NIL NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "FtoR(u)=FtoR(t)+FtoR(y)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2 3)
                        (("2" (LEMMA "ExactSum_Near")
                          (("2" (INST?)
                            (("2" (SPLIT)
                              (("1" (PROPAX) NIL NIL)
                               ("2"
                                (TRANS-INEQ 1 "radix ^ (-dExp(b))/2" :STRICT 2)
                                (("1" (TRANS-INEQ 1 "Fulp(b)(u)/2")
                                  (("1" (REWRITE "ClosestUlp")
                                    (("1" (REWRITE "FcanonicBounded") NIL NIL))
                                    NIL)
                                   ("2" (REWRITE "FulpCanonic")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL))
                                NIL)
                               ("3" (PROPAX) NIL NIL)
                               ("4" (REWRITE "FcanonicBounded") NIL NIL)
                               ("5" (REWRITE "FcanonicBounded") NIL NIL)
                               ("6" (REWRITE "FcanonicBounded") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "-dExp(b) < Fexp(u)")
          (("1" (HIDE -2 1)
            (("1" (TRANS-INEQ 1 "abs(FtoR(u))*radix^(-Prec(b)) ")
              (("1" (MULT-BY 1 "radix ^ (Prec(b))")
                (("1"
                  (TRANS-INEQ 1
                   "abs(FtoR[radix](y)) / (radix/2 + radix)*(radix ^ (1 - Prec(b))*radix ^ (Prec(b)))")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REWRITE "expt_plus" :DIR RL)
                    (("2"
                      (TRANS-INEQ 1
                       "abs(FtoR(u))*(radix ^ (-Prec(b)) * radix ^ (Prec(b)))")
                      (("1" (REWRITE "expt_plus" :DIR RL)
                        (("1" (CASE-REPLACE "(Prec(b)) + (-Prec(b))=0")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "Fexp(u)=1-dExp(b) OR 2-dExp(b) <= Fexp(u)")
                              (("1" (SPLIT)
                                (("1" (LEMMA "expt_x1")
                                  (("1" (INST -1 "radix")
                                    (("1" (LEMMA "expt_x0")
                                      (("1" (INST -1 "radix")
                                        (("1" (LABEL "radix0" -1)
                                          (("1" (LABEL "radix1" -2)
                                            (("1" (HIDE "radix0" "radix1")
                                              (("1" (HIDE -2 -3)
                                                (("1" (DIV-BY 1 "radix")
                                                  (("1"
                                                    (MULT-BY 1 "radix/2+radix")
                                                    (("1"
                                                      (TRANS-INEQ 1
                                                       "abs(FtoR(u))+abs(FtoR(t))+abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
                                                      (("1" (HIDE-ALL-BUT 1)
                                                        (("1" (EXPAND "abs")
                                                          (("1" (GRIND-REALS)
                                                            NIL NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE -7)
                                                        (("2"
                                                          (TRANS-INEQ 1
                                                           "abs(FtoR(u))+(radix^(Prec(b)-1)-1)*radix^(-dExp(b))+radix^(1-dExp(b))/2")
                                                          (("1"
                                                            (CASE
                                                                "abs(FtoR[radix](t)) <= (radix ^ (Prec(b) - 1) - 1) * radix ^ (-dExp(b))")
                                                            (("1"
                                                              (CASE
                                                                  "abs(FtoR[radix](u) - (FtoR[radix](t) + FtoR[radix](y)))
                                                                                                                                                                                                                          <= radix ^ (1 - dExp(b)) / 2")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (TRANS-INEQ 1
                                                                   "Fulp(b)(u)/2")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "ClosestUlp")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "FcanonicBounded")
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REWRITE
                                                                     "FulpCanonic")
                                                                    (("2"
                                                                      (REWRITE
                                                                       -2)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND
                                                               "Fsubnormal?")
                                                              (("2" (FLATTEN)
                                                                (("2"
                                                                  (EXPAND
                                                                   "FtoR" 1)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "abs_mult")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "abs" 1
                                                                       2)
                                                                      (("2"
                                                                        (COPY
                                                                         -8)
                                                                        (("2"
                                                                          (REWRITE
                                                                           -8)
                                                                          (("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (DIV-BY
                                                                               1
                                                                               " radix ^ -dExp(b)")
                                                                              (("2"
                                                                                (TRANS-INEQ
                                                                                 1
                                                                                 "(radix ^ (Prec(b) - 1)-1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "abs_mult"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "abs"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (CASE-REPLACE
                                                                                       "vNum(b)=radix*(radix ^ (Prec(b) - 1))")
                                                                                      (("1"
                                                                                        (DIV-BY
                                                                                         -2
                                                                                         "radix")
                                                                                        (("1"
                                                                                          (CASE
                                                                                              "FORALL (i,j:int):i<j=> i<= j-1")
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-7
                                                                                                1))
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP*)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REWRITE
                                                                                         "expt_div"
                                                                                         :DIR
                                                                                         RL)
                                                                                        (("2"
                                                                                          (REVEAL
                                                                                           "radix1")
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             "radix1")
                                                                                            (("2"
                                                                                              (GRIND-REALS)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "vNum")
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (MULT-BY 1 "radix")
                                                            (("2"
                                                              (TRANS-INEQ 1
                                                               "abs(FtoR(u))*(radix/2+radix)")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (MOVE-TERMS 1
                                                                   R 2)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (MULT-BY
                                                                       1 "2")
                                                                      (("1"
                                                                        (FIELD
                                                                         1)
                                                                        (("1"
                                                                          (DIV-BY
                                                                           1
                                                                           "radix")
                                                                          (("1"
                                                                            (TRANS-INEQ
                                                                             1
                                                                             "(2 * (radix ^ (Prec(b) - 1) * radix ^ (-dExp(b)) ) -
                                                                                                                2 * (radix ^ (-dExp(b)) )
                                                                                                                + ((radix ^ (1 - dExp(b)))))")
                                                                            (("1"
                                                                              (FIELD
                                                                               1)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (REWRITE
                                                                               "FabsCorrect"
                                                                               :DIR
                                                                               RL)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "FtoR"
                                                                                 1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "Fabs")
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (CASE-REPLACE
                                                                                       "radix ^ (1 - dExp(b))=radix*radix ^ (-dExp(b))")
                                                                                      (("1"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "radix ^ (-dExp(b))")
                                                                                        (("1"
                                                                                          (TRANS-INEQ
                                                                                           1
                                                                                           "(radix -2 +
                                                                                                                                2 * (radix ^ (Prec(b) - 1)))")
                                                                                          (("1"
                                                                                            (GRIND-REALS)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (FIELD
                                                                                             1)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (FIELD
                                                                                             1)
                                                                                            (("3"
                                                                                              (TRANS-INEQ
                                                                                               1
                                                                                               "(radix ^ (Prec(b)))")
                                                                                              (("1"
                                                                                                (CASE
                                                                                                    "2 <= radix")
                                                                                                (("1"
                                                                                                  (SPLIT-INEQ
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       -1
                                                                                                       :DIR
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (LEMMA
                                                                                                           "expt_plus")
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "Prec(b)-1"
                                                                                                             "2")
                                                                                                            (("1"
                                                                                                              (REWRITE
                                                                                                               "expt_x1")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (CASE
                                                                                                        "2 < radix")
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -2
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (TRANS-INEQ
                                                                                                         1
                                                                                                         "3 * (radix ^ (Prec(b) - 1))")
                                                                                                        (("1"
                                                                                                          (MOVE-TERMS
                                                                                                           1
                                                                                                           L
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (TRANS-INEQ
                                                                                                               1
                                                                                                               "radix^1")
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "expt_x1")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (REWRITE
                                                                                                                 "Exp_increq_1")
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (TRANS-INEQ
                                                                                                           1
                                                                                                           "radix * (radix ^ (Prec(b) - 1))")
                                                                                                          (("1"
                                                                                                            (GRIND-REALS)
                                                                                                            NIL
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (REWRITE
                                                                                                             "expt_div"
                                                                                                             :DIR
                                                                                                             RL)
                                                                                                            (("2"
                                                                                                              (USE
                                                                                                               "expt_x1")
                                                                                                              (("2"
                                                                                                                (GRIND-REALS)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (TYPEPRED
                                                                                                 "u")
                                                                                                (("2"
                                                                                                  (EXPAND*
                                                                                                   "Fcanonic?"
                                                                                                   "Fsubnormal?"
                                                                                                   "Fnormal?")
                                                                                                  (("2"
                                                                                                    (FLATTEN)
                                                                                                    (("2"
                                                                                                      (REWRITE
                                                                                                       "abs_mult")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "abs"
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (TRANS-INEQ
                                                                                                           1
                                                                                                           "vNum(b)")
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "vNum")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (LEMMA
                                                                                         "expt_plus")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "1"
                                                                                           "-dExp(b)"
                                                                                           "radix")
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "expt_x1")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FIELD 1)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (WITH-LABELS (LEMMA "expt_x0") "radix0")
                                  (("2" (INST "radix0" "radix")
                                    (("2"
                                      (WITH-LABELS (LEMMA "expt_x1") "radix1")
                                      (("2" (INST "radix1" "radix")
                                        (("2" (HIDE "radix1")
                                          (("2" (HIDE "radix0")
                                            (("2" (DIV-BY 1 "radix")
                                              (("2"
                                                (MULT-BY 1 "radix / 2 + radix")
                                                (("2"
                                                  (CASE
                                                      "0 < 1+radix^(1-Prec(b))/2")
                                                  (("1"
                                                    (TRANS-INEQ 1
                                                     "abs(FtoR(u))*(1+radix^(1-Prec(b))/2+radix^(-2))")
                                                    (("1" (ASSERT)
                                                      (("1" (MOVE-TERMS 1 R 2)
                                                        (("1"
                                                          (TRANS-INEQ 1
                                                           "abs(FtoR[radix](y)) - abs(FtoR(t))")
                                                          (("1"
                                                            (MOVE-TERMS 1 R 2)
                                                            (("1"
                                                              (MOVE-TERMS 1 L
                                                               1)
                                                              (("1"
                                                                (MOVE-TERMS 1 L
                                                                 1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (TRANS-INEQ
                                                                     1
                                                                     "radix^(Prec(b)-1)*radix^(-dExp(b))")
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       (-9 1))
                                                                      (("1"
                                                                        (REWRITE
                                                                         "FabsCorrect"
                                                                         :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (EXPAND*
                                                                           "FtoR"
                                                                           "Fabs"
                                                                           "Fsubnormal?")
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (TRANS-INEQ
                                                                               1
                                                                               "vNum(b)/radix*radix ^(-dExp(b))")
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "abs_mult")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "abs"
                                                                                   -3
                                                                                   1)
                                                                                  (("1"
                                                                                    (COPY
                                                                                     -3)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       -3)
                                                                                      (("1"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "radix ^ -dExp(b) ")
                                                                                        (("1"
                                                                                          (GRIND-REALS)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (DIV-BY
                                                                                 1
                                                                                 "radix ^ -dExp(b) ")
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "expt_div"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (GRIND-REALS)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "vNum")
                                                                                      (("2"
                                                                                        (USE
                                                                                         "expt_x1")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (REWRITE
                                                                       "FabsCorrect"
                                                                       :DIR RL)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "FtoR"
                                                                         1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "Fabs")
                                                                          (("2"
                                                                            (TRANS-INEQ
                                                                             1
                                                                             "abs(Fnum(u))*(radix ^ Fexp(u)*radix ^ (-2))")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "expt_plus"
                                                                               :DIR
                                                                               RL
                                                                               :SUBST
                                                                               ("i"
                                                                                "Fexp(u)"))
                                                                              (("1"
                                                                                (CASE
                                                                                    "radix ^ (Prec(b) - 1) <= abs(Fnum(u))")
                                                                                (("1"
                                                                                  (CASE
                                                                                      "radix ^ (-dExp(b)) <= radix ^ (Fexp(u) - 2)")
                                                                                  (("1"
                                                                                    (GRIND-REALS)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REWRITE
                                                                                     "Exp_increq_1")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-2
                                                                                    1))
                                                                                  (("2"
                                                                                    (TYPEPRED
                                                                                     "u")
                                                                                    (("2"
                                                                                      (EXPAND*
                                                                                       "Fcanonic?"
                                                                                       "Fnormal?"
                                                                                       "Fsubnormal?")
                                                                                      (("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (REWRITE
                                                                                           "abs_mult")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "abs"
                                                                                             -2
                                                                                             1)
                                                                                            (("2"
                                                                                              (TRANS-INEQ
                                                                                               1
                                                                                               " vNum(b)/radix")
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "expt_div"
                                                                                                 :DIR
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (GRIND-REALS)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "vNum")
                                                                                                    (("1"
                                                                                                      (USE
                                                                                                       "expt_x1")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (GRIND-REALS)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (TRANS-INEQ 1
                                                             "abs(FtoR(t)+FtoR(y))")
                                                            (("1"
                                                              (HIDE-ALL-BUT 1)
                                                              (("1"
                                                                (EXPAND "abs")
                                                                (("1"
                                                                  (GRIND-REALS)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (CASE
                                                                  " 0 < 2*abs(Fnum(u))")
                                                              (("1"
                                                                (CASE
                                                                    "0 < 1+1/(2*abs(Fnum(u)))")
                                                                (("1"
                                                                  (TRANS-INEQ 1
                                                                   " abs(FtoR[radix](u))*(1+  1 / (2 * abs(Fnum(u))))")
                                                                  (("1"
                                                                    (DIV-BY 1
                                                                     "1 + 1 / (2 * abs(Fnum(u)))")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "RoundGe")
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (MOVE-TERMS
                                                                       1 L 1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (DIV-BY
                                                                           1
                                                                           "abs(FtoR(u))")
                                                                          (("2"
                                                                            (MULT-BY
                                                                             1
                                                                             "2")
                                                                            (("2"
                                                                              (LEMMA
                                                                               "expt_inverse")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "Prec(b)-1"
                                                                                 "radix")
                                                                                (("2"
                                                                                  (TRANS-INEQ
                                                                                   1
                                                                                   "1 / (radix ^ (Prec(b) - 1))")
                                                                                  (("1"
                                                                                    (FIELD
                                                                                     1)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-7
                                                                                        1))
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "u")
                                                                                        (("1"
                                                                                          (EXPAND*
                                                                                           "Fcanonic?"
                                                                                           "Fnormal?"
                                                                                           "Fsubnormal?")
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "abs_mult")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "abs"
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (TRANS-INEQ
                                                                                                   1
                                                                                                   "vNum(b)/radix")
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "expt_div"
                                                                                                     :DIR
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (GRIND-REALS)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "vNum")
                                                                                                        (("1"
                                                                                                          (USE
                                                                                                           "expt_x1")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (GRIND-REALS)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (GRIND-REALS)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 1))
                                                                  (("2"
                                                                    (TRANS-INEQ
                                                                     1 "1"
                                                                     :STRICT 1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (MOVE-TERMS
                                                                       1 L 1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (GRIND-REALS)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3" (ASSERT)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 (-7 1))
                                                                (("2"
                                                                  (EXPAND*
                                                                   "FtoR"
                                                                   "abs")
                                                                  (("2"
                                                                    (GRIND-REALS)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (DIV-BY 1 "abs(FtoR(u))")
                                                      (("2" (FIELD 1)
                                                        (("2"
                                                          (MOVE-TERMS 1 L 3)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (CASE
                                                                  "(2 * (radix ^ (-2) * radix)) <= 1")
                                                              (("1"
                                                                (CASE
                                                                    "(radix * (radix ^ (1 - Prec(b)))) <= 1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-11 1))
                                                                  (("2"
                                                                    (LEMMA
                                                                     "expt_plus")
                                                                    (("2"
                                                                      (INST -1
                                                                       "1"
                                                                       "1-Prec(b)"
                                                                       "radix")
                                                                      (("2"
                                                                        (REWRITE
                                                                         "expt_x1")
                                                                        (("2"
                                                                          (TRANS-INEQ
                                                                           1
                                                                           "radix ^ (2 - Prec(b))")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (TRANS-INEQ
                                                                             1
                                                                             "radix ^ 0")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "Exp_increq_1")
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (REWRITE
                                                                               "expt_x0")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2"
                                                                  (REWRITE
                                                                   "expt_inverse")
                                                                  (("2"
                                                                    (REWRITE
                                                                     "expt_x2")
                                                                    (("2"
                                                                      (FIELD 1)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (GRIND-REALS) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-2 1))
                                (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "abs" 1)
                (("2" (REWRITE "expt_inverse")
                  (("2" (CROSS-MULT 1)
                    (("2" (TRANS-INEQ 1 "FtoR(u)")
                      (("1" (ASSERT) NIL NIL)
                       ("2"
                        (TRANS-INEQ 1 "Fulp(b)(Fpred(b)(u))+FtoR(Fpred(b)(u))")
                        (("1" (REWRITE "FpredDiff" :DIR RL)
                          (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (REWRITE "FulpCanonic")
                          (("1" (EXPAND "FtoR" 1)
                            (("1" (DIV-BY 1 "radix ^ (Fexp(Fpred(b)(u)))")
                              (("1" (TRANS-INEQ 1 "Fnum(Fpred(b)(u))+1")
                                (("1" (FIELD 1) NIL NIL)
                                 ("2" (CASE "Fbounded?(b)(Fpred(b)(u))")
                                  (("1" (EXPAND "Fbounded?")
                                    (("1" (FLATTEN)
                                      (("1" (HIDE-ALL-BUT (-1 1))
                                        (("1"
                                          (CASE-REPLACE
                                           "radix ^ (Prec(b))=vNum(b)")
                                          (("1" (EXPAND "abs")
                                            (("1" (GRIND-REALS)
                                              (("1"
                                                (CASE
                                                    "FORALL (i,j:int): i<j => 1+i <= j")
                                                (("1" (GRIND-REALS) NIL NIL)
                                                 ("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (EXPAND "vNum")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REWRITE "FcanonicBounded")
                                    (("2" (REWRITE "FpredCanonic") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FpredCanonic") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (CASE "Fbounded?(b)(u)")
        (("1" (EXPAND "Fbounded?") (("1" (FLATTEN) NIL NIL)) NIL)
         ("2" (REWRITE "FcanonicBounded") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Fulp_posreal_j| APPLICATION-JUDGEMENT "posreal" |axpy| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|expt_div| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|cross_mult| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|FabsCorrect| FORMULA-DECL NIL |float| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|ExactSum_Near| FORMULA-DECL NIL |axpy| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL)
    (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (FDX_12 SKOLEM-CONST-DECL "posrat" |axpy| NIL)
    (FDX_11 SKOLEM-CONST-DECL
     "{x: {n: nonneg_real | n >= Fnum(u) AND n >= -Fnum(u)} | x >= Fnum(u)}"
     |axpy| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (|u| SKOLEM-CONST-DECL "{x: float | Fcanonic?(b)(x)}" |axpy| NIL)
    (|RoundGe| FORMULA-DECL NIL |axpy| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK)
  (|Axpy_opt_aux3-1| |nil| 3321283542
   ("" (SKEEP)
    (("" (CASE "-dExp(b) <= Fexp(u)")
      (("1" (SPLIT-INEQ -1)
        (("1" (HIDE -2)
          (("1" (MULT-BY 1 "radix/2+radix")
            (("1" (MULT-BY 1 "radix ^ (Prec(b)-1)")
              (("1"
                (TRANS-INEQ 1
                 "abs(FtoR[radix](y)) * (radix ^ (1 - Prec(b)) * radix ^ (Prec(b) - 1))"
                 :STRICT 2)
                (("1" (ASSERT) NIL NIL)
                 ("2" (REWRITE "expt_plus" :DIR RL)
                  (("2" (CASE-REPLACE "FtoR(y)=FtoR(u)-FtoR(t)")
                    (("1" (TRANS-INEQ 1 "abs(FtoR(u))+abs(FtoR(t))" :STRICT 2)
                      (("1" (HIDE-ALL-BUT 1)
                        (("1" (EXPAND "abs")
                          (("1" (USE "expt_x0") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REWRITE "FulpCanonic")
                        (("1" (CASE-REPLACE "Fexp(Fpred(b)(u))=-dExp(b)")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "abs(FtoR[radix](t)) <=  radix ^ (Prec(b) - 1) * radix ^ -dExp(b)*(radix/2)")
                              (("1"
                                (CASE
                                    "abs(FtoR[radix](u)) < radix ^ (Prec(b) - 1) * radix ^ -dExp(b) * radix")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REWRITE "FabsCorrect" :DIR RL)
                                    (("2" (EXPAND "Fabs")
                                      (("2" (EXPAND "FtoR" 1)
                                        (("2" (REWRITE -4 :DIR RL)
                                          (("2" (DIV-BY 1 "radix ^ -dExp(b)")
                                            (("2" (FIELD 1)
                                              (("2"
                                                (TRANS-INEQ 1 "vNum(b)" :STRICT
                                                 1)
                                                (("1" (CASE "Fbounded?(b)(u)")
                                                  (("1" (EXPAND "Fbounded?")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2"
                                                    (REWRITE "FcanonicBounded")
                                                    NIL NIL))
                                                  NIL)
                                                 ("2"
                                                  (TRANS-INEQ 1
                                                   "radix ^ (Prec(b))")
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "vNum")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (LEMMA "expt_plus")
                                                    (("2"
                                                      (INST -1 "1" "Prec(b)-1"
                                                       "radix")
                                                      (("2" (REWRITE "expt_x1")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-8 1))
                                (("2" (EXPAND* "Fsubnormal?" "FtoR")
                                  (("2" (FLATTEN)
                                    (("2" (COPY -3)
                                      (("2" (REWRITE -3)
                                        (("2" (DIV-BY 1 "radix ^ -dExp(b)")
                                          (("2" (REWRITE "abs_mult")
                                            (("2" (REWRITE "abs_mult")
                                              (("2" (EXPAND "abs" 1 2)
                                                (("2" (FIELD 1)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     " radix ^ (Prec(b) - 1)=vNum(b)/radix")
                                                    (("1"
                                                      (TRANS-INEQ 1
                                                       "radix*abs(Fnum(t))")
                                                      (("1" (GRIND-REALS) NIL
                                                        NIL)
                                                       ("2" (EXPAND "abs" -3 1)
                                                        (("2" (GRIND-REALS) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (REWRITE "expt_div" :DIR
                                                       RL)
                                                      (("2" (GRIND-REALS)
                                                        (("2" (USE "expt_x1")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REPLACE -1
                                                                       :HIDE?
                                                                       T)
                                                              (("2"
                                                                (EXPAND "vNum")
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (-2 -5 1))
                            (("2" (EXPAND "Fpred")
                              (("2" (EXPAND "FtoR")
                                (("2" (GRIND-REALS) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "FpredCanonic") NIL NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "FtoR(u)=FtoR(t)+FtoR(y)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE 2 3)
                        (("2" (LEMMA "ExactSum_Near")
                          (("2" (INST?)
                            (("2" (SPLIT)
                              (("1" (PROPAX) NIL NIL)
                               ("2"
                                (TRANS-INEQ 1 "radix ^ (-dExp(b))/2" :STRICT 2)
                                (("1" (TRANS-INEQ 1 "Fulp(b)(u)/2")
                                  (("1" (REWRITE "ClosestUlp")
                                    (("1" (REWRITE "FcanonicBounded") NIL NIL))
                                    NIL)
                                   ("2" (REWRITE "FulpCanonic")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (GRIND-REALS) NIL NIL))
                                NIL)
                               ("3" (PROPAX) NIL NIL)
                               ("4" (REWRITE "FcanonicBounded") NIL NIL)
                               ("5" (REWRITE "FcanonicBounded") NIL NIL)
                               ("6" (REWRITE "FcanonicBounded") NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "-dExp(b) < Fexp(u)")
          (("1" (HIDE -2 1)
            (("1" (TRANS-INEQ 1 "abs(FtoR(u))*radix^(-Prec(b)) ")
              (("1" (MULT-BY 1 "radix ^ (Prec(b))")
                (("1"
                  (TRANS-INEQ 1
                   "abs(FtoR[radix](y)) / (radix/2 + radix)*(radix ^ (1 - Prec(b))*radix ^ (Prec(b)))")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REWRITE "expt_plus" :DIR RL)
                    (("2"
                      (TRANS-INEQ 1
                       "abs(FtoR(u))*(radix ^ (-Prec(b)) * radix ^ (Prec(b)))")
                      (("1" (REWRITE "expt_plus" :DIR RL)
                        (("1" (CASE-REPLACE "(Prec(b)) + (-Prec(b))=0")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "Fexp(u)=1-dExp(b) OR 2-dExp(b) <= Fexp(u)")
                              (("1" (SPLIT)
                                (("1" (LEMMA "expt_x1")
                                  (("1" (INST -1 "radix")
                                    (("1" (LEMMA "expt_x0")
                                      (("1" (INST -1 "radix")
                                        (("1" (LABEL "radix0" -1)
                                          (("1" (LABEL "radix1" -2)
                                            (("1" (REPLACE "radix0")
                                              (("1" (REPLACE "radix1")
                                                (("1" (HIDE "radix0" "radix1")
                                                  (("1" (HIDE -2 -3)
                                                    (("1" (DIV-BY 1 "radix")
                                                      (("1"
                                                        (MULT-BY 1
                                                         "radix/2+radix")
                                                        (("1"
                                                          (TRANS-INEQ 1
                                                           "abs(FtoR(u))+abs(FtoR(t))+abs(FtoR(u)-(FtoR(t)+FtoR(y)))")
                                                          (("1"
                                                            (HIDE-ALL-BUT 1)
                                                            (("1"
                                                              (EXPAND "abs")
                                                              (("1"
                                                                (GRIND-REALS)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE -7)
                                                            (("2"
                                                              (TRANS-INEQ 1
                                                               "abs(FtoR(u))+(radix^(Prec(b)-1)-1)*radix^(-dExp(b))+radix^(1-dExp(b))/2")
                                                              (("1"
                                                                (CASE
                                                                    "abs(FtoR[radix](t)) <= (radix ^ (Prec(b) - 1) - 1) * radix ^ (-dExp(b))")
                                                                (("1"
                                                                  (CASE
                                                                      "abs(FtoR[radix](u) - (FtoR[radix](t) + FtoR[radix](y)))
                                                                                                                                                                                                                          <= radix ^ (1 - dExp(b)) / 2")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (TRANS-INEQ
                                                                       1
                                                                       "Fulp(b)(u)/2")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "ClosestUlp")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "FcanonicBounded")
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (REWRITE
                                                                         "FulpCanonic")
                                                                        (("2"
                                                                          (REWRITE
                                                                           -2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (EXPAND
                                                                   "Fsubnormal?")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "FtoR"
                                                                       1)
                                                                      (("2"
                                                                        (REWRITE
                                                                         "abs_mult")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "abs"
                                                                           1 2)
                                                                          (("2"
                                                                            (COPY
                                                                             -8)
                                                                            (("2"
                                                                              (REWRITE
                                                                               -8)
                                                                              (("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (DIV-BY
                                                                                   1
                                                                                   " radix ^ -dExp(b)")
                                                                                  (("2"
                                                                                    (TRANS-INEQ
                                                                                     1
                                                                                     "(radix ^ (Prec(b) - 1)-1)")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "abs_mult"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "abs"
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (CASE-REPLACE
                                                                                           "vNum(b)=radix*(radix ^ (Prec(b) - 1))")
                                                                                          (("1"
                                                                                            (DIV-BY
                                                                                             -2
                                                                                             "radix")
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "FORALL (i,j:int):i<j=> i<= j-1")
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   (-7
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (SKOSIMP*)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (REWRITE
                                                                                             "expt_div"
                                                                                             :DIR
                                                                                             RL)
                                                                                            (("2"
                                                                                              (REVEAL
                                                                                               "radix1")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 "radix1")
                                                                                                (("2"
                                                                                                  (HIDE
                                                                                                   "radix1")
                                                                                                  (("2"
                                                                                                    (GRIND-REALS)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "vNum")
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (MULT-BY 1
                                                                 "radix")
                                                                (("2"
                                                                  (TRANS-INEQ 1
                                                                   "abs(FtoR(u))*(radix/2+radix)")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (MOVE-TERMS
                                                                       1 R 2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (MULT-BY
                                                                           1
                                                                           "2")
                                                                          (("1"
                                                                            (FIELD
                                                                             1)
                                                                            (("1"
                                                                              (DIV-BY
                                                                               1
                                                                               "radix")
                                                                              (("1"
                                                                                (TRANS-INEQ
                                                                                 1
                                                                                 "(2 * (radix ^ (Prec(b) - 1) * radix ^ (-dExp(b)) ) -
                                                                                                                2 * (radix ^ (-dExp(b)) )
                                                                                                                + ((radix ^ (1 - dExp(b)))))")
                                                                                (("1"
                                                                                  (FIELD
                                                                                   1)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (REWRITE
                                                                                   "FabsCorrect"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "FtoR"
                                                                                     1)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "Fabs")
                                                                                      (("2"
                                                                                        (REWRITE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (CASE-REPLACE
                                                                                           "radix ^ (1 - dExp(b))=radix*radix ^ (-dExp(b))")
                                                                                          (("1"
                                                                                            (DIV-BY
                                                                                             1
                                                                                             "radix ^ (-dExp(b))")
                                                                                            (("1"
                                                                                              (TRANS-INEQ
                                                                                               1
                                                                                               "(radix -2 +
                                                                                                                                2 * (radix ^ (Prec(b) - 1)))")
                                                                                              (("1"
                                                                                                (GRIND-REALS)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (FIELD
                                                                                                 1)
                                                                                                NIL
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (FIELD
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (TRANS-INEQ
                                                                                                   1
                                                                                                   "(radix ^ (Prec(b)))")
                                                                                                  (("1"
                                                                                                    (CASE
                                                                                                        "2 <= radix")
                                                                                                    (("1"
                                                                                                      (SPLIT-INEQ
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (REWRITE
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           -1
                                                                                                           :DIR
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "expt_plus")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -1
                                                                                                                 "1"
                                                                                                                 "Prec(b)-1"
                                                                                                                 "2")
                                                                                                                (("1"
                                                                                                                  (REWRITE
                                                                                                                   "expt_x1")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (CASE
                                                                                                            "2 < radix")
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -2
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (TRANS-INEQ
                                                                                                             1
                                                                                                             "3 * (radix ^ (Prec(b) - 1))")
                                                                                                            (("1"
                                                                                                              (MOVE-TERMS
                                                                                                               1
                                                                                                               L
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (TRANS-INEQ
                                                                                                                   1
                                                                                                                   "radix^1")
                                                                                                                  (("1"
                                                                                                                    (REWRITE
                                                                                                                     "expt_x1")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (REWRITE
                                                                                                                     "Exp_increq_1")
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (TRANS-INEQ
                                                                                                               1
                                                                                                               "radix * (radix ^ (Prec(b) - 1))")
                                                                                                              (("1"
                                                                                                                (GRIND-REALS)
                                                                                                                NIL
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (REWRITE
                                                                                                                 "expt_div"
                                                                                                                 :DIR
                                                                                                                 RL)
                                                                                                                (("2"
                                                                                                                  (USE
                                                                                                                   "expt_x1")
                                                                                                                  (("2"
                                                                                                                    (GRIND-REALS)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (TYPEPRED
                                                                                                     "u")
                                                                                                    (("2"
                                                                                                      (EXPAND*
                                                                                                       "Fcanonic?"
                                                                                                       "Fsubnormal?"
                                                                                                       "Fnormal?")
                                                                                                      (("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "abs_mult")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "abs"
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (TRANS-INEQ
                                                                                                               1
                                                                                                               "vNum(b)")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "vNum")
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (LEMMA
                                                                                             "expt_plus")
                                                                                            (("2"
                                                                                              (INST
                                                                                               -1
                                                                                               "1"
                                                                                               "-dExp(b)"
                                                                                               "radix")
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "expt_x1")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FIELD 1)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (WITH-LABELS (LEMMA "expt_x0") "radix0")
                                  (("2" (INST "radix0" "radix")
                                    (("2"
                                      (WITH-LABELS (LEMMA "expt_x1") "radix1")
                                      (("2" (INST "radix1" "radix")
                                        (("2" (REPLACE "radix1")
                                          (("2" (HIDE "radix1")
                                            (("2" (REPLACE "radix0")
                                              (("2" (HIDE "radix0")
                                                (("2" (DIV-BY 1 "radix")
                                                  (("2"
                                                    (MULT-BY 1
                                                     "radix / 2 + radix")
                                                    (("2"
                                                      (CASE
                                                          "0 < 1+radix^(1-Prec(b))/2")
                                                      (("1"
                                                        (TRANS-INEQ 1
                                                         "abs(FtoR(u))*(1+radix^(1-Prec(b))/2+radix^(-2))")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (MOVE-TERMS 1 R 2)
                                                            (("1"
                                                              (TRANS-INEQ 1
                                                               "abs(FtoR[radix](y)) - abs(FtoR(t))")
                                                              (("1"
                                                                (MOVE-TERMS 1 R
                                                                 2)
                                                                (("1"
                                                                  (MOVE-TERMS 1
                                                                   L 1)
                                                                  (("1"
                                                                    (MOVE-TERMS
                                                                     1 L 1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (TRANS-INEQ
                                                                         1
                                                                         "radix^(Prec(b)-1)*radix^(-dExp(b))")
                                                                        (("1"
                                                                          (HIDE-ALL-BUT
                                                                           (-9
                                                                            1))
                                                                          (("1"
                                                                            (REWRITE
                                                                             "FabsCorrect"
                                                                             :DIR
                                                                             RL)
                                                                            (("1"
                                                                              (EXPAND*
                                                                               "FtoR"
                                                                               "Fabs"
                                                                               "Fsubnormal?")
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (TRANS-INEQ
                                                                                   1
                                                                                   "vNum(b)/radix*radix ^(-dExp(b))")
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "abs_mult")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "abs"
                                                                                       -3
                                                                                       1)
                                                                                      (("1"
                                                                                        (COPY
                                                                                         -3)
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           -3)
                                                                                          (("1"
                                                                                            (DIV-BY
                                                                                             1
                                                                                             "radix ^ -dExp(b) ")
                                                                                            (("1"
                                                                                              (GRIND-REALS)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (DIV-BY
                                                                                     1
                                                                                     "radix ^ -dExp(b) ")
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "expt_div"
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("2"
                                                                                        (GRIND-REALS)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "vNum")
                                                                                          (("2"
                                                                                            (USE
                                                                                             "expt_x1")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REWRITE
                                                                           "FabsCorrect"
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "FtoR"
                                                                             1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "Fabs")
                                                                              (("2"
                                                                                (TRANS-INEQ
                                                                                 1
                                                                                 "abs(Fnum(u))*(radix ^ Fexp(u)*radix ^ (-2))")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "expt_plus"
                                                                                   :DIR
                                                                                   RL
                                                                                   :SUBST
                                                                                   ("i"
                                                                                    "Fexp(u)"))
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "radix ^ (Prec(b) - 1) <= abs(Fnum(u))")
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "radix ^ (-dExp(b)) <= radix ^ (Fexp(u) - 2)")
                                                                                      (("1"
                                                                                        (GRIND-REALS)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REWRITE
                                                                                         "Exp_increq_1")
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-2
                                                                                        1))
                                                                                      (("2"
                                                                                        (TYPEPRED
                                                                                         "u")
                                                                                        (("2"
                                                                                          (EXPAND*
                                                                                           "Fcanonic?"
                                                                                           "Fnormal?"
                                                                                           "Fsubnormal?")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (REWRITE
                                                                                               "abs_mult")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "abs"
                                                                                                 -2
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (TRANS-INEQ
                                                                                                   1
                                                                                                   " vNum(b)/radix")
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "expt_div"
                                                                                                     :DIR
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (GRIND-REALS)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "vNum")
                                                                                                        (("1"
                                                                                                          (USE
                                                                                                           "expt_x1")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (GRIND-REALS)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (TRANS-INEQ 1
                                                                 "abs(FtoR(t)+FtoR(y))")
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "abs")
                                                                    (("1"
                                                                      (GRIND-REALS)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (CASE
                                                                      " 0 < 2*abs(Fnum(u))")
                                                                  (("1"
                                                                    (CASE
                                                                        "0 < 1+1/(2*abs(Fnum(u)))")
                                                                    (("1"
                                                                      (TRANS-INEQ
                                                                       1
                                                                       " abs(FtoR[radix](u))*(1+  1 / (2 * abs(Fnum(u))))")
                                                                      (("1"
                                                                        (DIV-BY
                                                                         1
                                                                         "1 + 1 / (2 * abs(Fnum(u)))")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "RoundGe")
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (MOVE-TERMS
                                                                           1 L
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (DIV-BY
                                                                               1
                                                                               "abs(FtoR(u))")
                                                                              (("2"
                                                                                (MULT-BY
                                                                                 1
                                                                                 "2")
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "expt_inverse")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "Prec(b)-1"
                                                                                     "radix")
                                                                                    (("2"
                                                                                      (TRANS-INEQ
                                                                                       1
                                                                                       "1 / (radix ^ (Prec(b) - 1))")
                                                                                      (("1"
                                                                                        (FIELD
                                                                                         1)
                                                                                        (("1"
                                                                                          (HIDE-ALL-BUT
                                                                                           (-7
                                                                                            1))
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "u")
                                                                                            (("1"
                                                                                              (EXPAND*
                                                                                               "Fcanonic?"
                                                                                               "Fnormal?"
                                                                                               "Fsubnormal?")
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "abs_mult")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "abs"
                                                                                                     -2
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (TRANS-INEQ
                                                                                                       1
                                                                                                       "vNum(b)/radix")
                                                                                                      (("1"
                                                                                                        (REWRITE
                                                                                                         "expt_div"
                                                                                                         :DIR
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (GRIND-REALS)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "vNum")
                                                                                                            (("1"
                                                                                                              (USE
                                                                                                               "expt_x1")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (GRIND-REALS)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (GRIND-REALS)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-1 1))
                                                                      (("2"
                                                                        (TRANS-INEQ
                                                                         1 "1"
                                                                         :STRICT
                                                                         1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (MOVE-TERMS
                                                                           1 L
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (GRIND-REALS)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     (-7 1))
                                                                    (("2"
                                                                      (EXPAND*
                                                                       "FtoR"
                                                                       "abs")
                                                                      (("2"
                                                                        (GRIND-REALS)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (DIV-BY 1
                                                           "abs(FtoR(u))")
                                                          (("2" (FIELD 1)
                                                            (("2"
                                                              (MOVE-TERMS 1 L
                                                               3)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (CASE
                                                                      "(2 * (radix ^ (-2) * radix)) <= 1")
                                                                  (("1"
                                                                    (CASE
                                                                        "(radix * (radix ^ (1 - Prec(b)))) <= 1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-11 1))
                                                                      (("2"
                                                                        (LEMMA
                                                                         "expt_plus")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "1"
                                                                           "1-Prec(b)"
                                                                           "radix")
                                                                          (("2"
                                                                            (REWRITE
                                                                             "expt_x1")
                                                                            (("2"
                                                                              (TRANS-INEQ
                                                                               1
                                                                               "radix ^ (2 - Prec(b))")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (TRANS-INEQ
                                                                                 1
                                                                                 "radix ^ 0")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "Exp_increq_1")
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (REWRITE
                                                                                   "expt_x0")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "expt_inverse")
                                                                      (("2"
                                                                        (REWRITE
                                                                         "expt_x2")
                                                                        (("2"
                                                                          (FIELD
                                                                           1)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (GRIND-REALS) NIL
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-2 1))
                                (("2" (FLATTEN) (("2" (GRIND-REALS) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "abs" 1)
                (("2" (REWRITE "expt_inverse")
                  (("2" (CROSS-MULT 1)
                    (("2" (TRANS-INEQ 1 "FtoR(u)")
                      (("1" (ASSERT) NIL NIL)
                       ("2"
                        (TRANS-INEQ 1 "Fulp(b)(Fpred(b)(u))+FtoR(Fpred(b)(u))")
                        (("1" (REWRITE "FpredDiff" :DIR RL)
                          (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (REWRITE "FulpCanonic")
                          (("1" (EXPAND "FtoR" 1)
                            (("1" (DIV-BY 1 "radix ^ (Fexp(Fpred(b)(u)))")
                              (("1" (TRANS-INEQ 1 "Fnum(Fpred(b)(u))+1")
                                (("1" (FIELD 1) NIL NIL)
                                 ("2" (CASE "Fbounded?(b)(Fpred(b)(u))")
                                  (("1" (EXPAND "Fbounded?")
                                    (("1" (FLATTEN)
                                      (("1" (HIDE-ALL-BUT (-1 1))
                                        (("1"
                                          (CASE-REPLACE
                                           "radix ^ (Prec(b))=vNum(b)")
                                          (("1" (EXPAND "abs")
                                            (("1" (GRIND-REALS)
                                              (("1"
                                                (CASE
                                                    "FORALL (i,j:int): i<j => 1+i <= j")
                                                (("1" (GRIND-REALS) NIL NIL)
                                                 ("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (EXPAND "vNum")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REWRITE "FcanonicBounded")
                                    (("2" (REWRITE "FpredCanonic") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REWRITE "FpredCanonic") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (CASE "Fbounded?(b)(u)")
        (("1" (EXPAND "Fbounded?") (("1" (FLATTEN) NIL NIL)) NIL)
         ("2" (REWRITE "FcanonicBounded") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|FpredDiff| FORMULA-DECL NIL |float| NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (|FpredCanonic| FORMULA-DECL NIL |float| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|FabsCorrect| FORMULA-DECL NIL |float| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL))
   SHOSTAK))
 (|Axpy_optPos_TCC1| 0
  (|Axpy_optPos_TCC1-1| |nil| 3320768094 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_optPos| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_optPos_TCC2| 0
  (|Axpy_optPos_TCC2-1| |nil| 3320768094 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_optPos| SUBTYPE "((number_fields.-)(1, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_optPos| 0
  (|Axpy_optPos-1| |nil| 3320768520
   ("" (SKEEP)
    (("" (LEMMA "AxpyPos")
      (("" (INST?)
        (("" (INST -1 "t" "u")
          (("" (SPLIT)
            (("1" (PROPAX) NIL NIL)
             ("2"
              (TRANS-INEQ 1
               "abs(FtoR[radix](y)) * radix ^ (1 - Prec(b)) / (6 * radix)"
               :STRICT 1)
              (("2" (MULT-BY 1 "4")
                (("2" (TYPEPRED "t")
                  (("2" (EXPAND "Fcanonic?")
                    (("2" (SPLIT)
                      (("1"
                        (TRANS-INEQ 1
                         "abs(FtoR(y))*radix^(1-Prec(b))/(radix+1)" :STRICT 2)
                        (("1" (HIDE-ALL-BUT 1)
                          (("1" (DIV-BY 1 "abs(FtoR(y))")
                            (("1"
                              (TRANS-INEQ 1
                               "radix ^ (1 - Prec(b)) / (6 * radix) * 4 ")
                              (("1" (FIELD 1) NIL NIL)
                               ("2"
                                (TRANS-INEQ 1
                                 "radix ^ (1 - Prec(b)) / (radix + 1)")
                                (("1" (DIV-BY 1 "radix ^ (1 - Prec(b))")
                                  (("1" (TRANS-INEQ 1 "4/(6*radix)")
                                    (("1" (FIELD 1) NIL NIL)
                                     ("2" (TRANS-INEQ 1 "1/(radix + 1)")
                                      (("1" (GRIND-REALS) NIL NIL)
                                       ("2" (FIELD 1) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FIELD 1) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "Axpy_opt_aux2")
                          (("2" (INST?)
                            (("2" (INST -1 "t" "u")
                              (("2" (SPLIT)
                                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                                 ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                                 ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
                                 ("7" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2"
                        (TRANS-INEQ 1
                         "abs(FtoR(y))*radix^(1-Prec(b))/(radix+radix/2)")
                        (("1" (HIDE-ALL-BUT 1) (("1" (FIELD 1) NIL NIL)) NIL)
                         ("2" (LEMMA "Axpy_opt_aux3")
                          (("2" (INST?)
                            (("2" (INST -1 "t" "u")
                              (("2" (SPLIT)
                                (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                                 ("3" (PROPAX) NIL NIL) ("4" (ASSERT) NIL NIL)
                                 ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
                                 ("7" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SKOSIMP*)
              (("3" (LEMMA "Axpy_opt_aux1")
                (("3" (INST?)
                  (("3" (INST -1 "t" "u")
                    (("3" (SPLIT)
                      (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                       ("3" (PROPAX) NIL NIL) ("4" (ASSERT) NIL NIL)
                       ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
                       ("7" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
             ("6" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|AxpyPos| FORMULA-DECL NIL |axpy| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|Axpy_opt_aux2| FORMULA-DECL NIL |axpy| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Axpy_opt_aux3| FORMULA-DECL NIL |axpy| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Fpred| CONST-DECL "float" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Axpy_opt_aux1| FORMULA-DECL NIL |axpy| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Axpy_optZero_TCC1| 0
  (|Axpy_optZero_TCC1-1| |nil| 3321008004 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_optZero| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_optZero_TCC2| 0
  (|Axpy_optZero_TCC2-1| |nil| 3321008004 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_optZero| SUBTYPE "((number_fields.-)(1, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_optZero| 0
  (|Axpy_optZero-1| |nil| 3321008612
   ("" (SKEEP)
    (("" (CASE "u=(# Fnum:= 0, Fexp:=-dExp(b) #)")
      (("1" (CASE "FtoR(u)=FtoR(t)+FtoR(y)")
        (("1" (CASE "FtoR(y)=0")
          (("1" (HIDE-ALL-BUT (-1 -8))
            (("1" (FLIP-INEQ -2)
              (("1" (REWRITE -1)
                (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (CASE "radix*abs(FtoR(y)) <= (radix+1)*Fulp(b)(y)/2")
            (("1" (HIDE-ALL-BUT (-1 1))
              (("1" (REWRITE "FabsCorrect" :DIR RL)
                (("1" (REWRITE "FulpCanonic")
                  (("1" (EXPAND* "Fabs" "FtoR")
                    (("1" (DIV-BY -1 "radix ^ (Fexp(y))")
                      (("1"
                        (CASE-REPLACE
                         " radix * (abs(Fnum(y)) * radix ^ Fexp(y)) / radix ^ (Fexp(y))= radix * abs(Fnum(y))")
                        (("1"
                          (CASE-REPLACE
                           "(radix ^ (Fexp(y)) + radix ^ (Fexp(y)) * radix) / 2 /
                                radix ^ (Fexp(y))=(radix+1)/2")
                          (("1" (HIDE -1 -2)
                            (("1" (DIV-BY -1 "radix")
                              (("1" (CASE "abs(Fnum(y)) < 1")
                                (("1" (EXPAND "abs" -1)
                                  (("1" (GRIND-REALS) NIL NIL)) NIL)
                                 ("2"
                                  (TRANS-INEQ 1 "(radix + 1) / 2 / radix"
                                   :STRICT 2)
                                  (("2" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FIELD 1) NIL NIL))
                          NIL)
                         ("2" (FIELD 1) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2"
              (CASE
                  "(radix+1) * abs(FtoR[radix](y)) <= abs(FtoR(y))+(radix + 1) * Fulp(b)(y) / 2")
              (("1" (GRIND-REALS) NIL NIL)
               ("2" (HIDE 2 4)
                (("2" (DIV-BY 1 "radix+1")
                  (("2"
                    (TRANS-INEQ 1
                     "abs(FtoR[radix](y))/(radix+1)+ Fulp(b)(y) / 2")
                    (("1" (MOVE-TERMS 1 R 2)
                      (("1" (TRANS-INEQ 1 "abs(FtoR(a)*FtoR(x))")
                        (("1" (MOVE-TERMS 1 L 2)
                          (("1" (MOVE-TERMS 1 R 1)
                            (("1" (CASE-REPLACE "y=Fopp(t)")
                              (("1" (REWRITE "FulpOpp")
                                (("1" (REWRITE "FoppCorrect")
                                  (("1"
                                    (CASE-REPLACE "abs(-FtoR(t))=abs(FtoR(t))")
                                    (("1"
                                      (TRANS-INEQ 1
                                       "abs(FtoR(t)-FtoR(a)*FtoR(x))")
                                      (("1" (HIDE-ALL-BUT (-5 1))
                                        (("1"
                                          (CASE
                                              "FORALL (v,w:real): (v>=0 => w>=0)=> (v<=0 => w<=0) => abs(w)-abs(v)<=abs(w-v)")
                                          (("1"
                                            (INST -1 "FtoR(a)*FtoR(x)"
                                             "FtoR(t)")
                                            (("1" (SPLIT)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (SKOSIMP*)
                                                (("2"
                                                  (LEMMA "RleRoundedLessR0")
                                                  (("2"
                                                    (INST -1 "Closest?" "b" "t"
                                                     "FtoR(a)*FtoR(x)")
                                                    (("2" (SPLIT)
                                                      (("1" (PROPAX) NIL NIL)
                                                       ("2" (PROPAX) NIL NIL)
                                                       ("3" (PROPAX) NIL NIL)
                                                       ("4"
                                                        (REWRITE
                                                         "Closest_RoundedMode")
                                                        NIL NIL)
                                                       ("5"
                                                        (REWRITE
                                                         "FcanonicBounded")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (SKOSIMP*)
                                                (("3" (LEMMA "RleRoundedR0")
                                                  (("3"
                                                    (INST -1 "Closest?" "b" "t"
                                                     "FtoR(a)*FtoR(x)")
                                                    (("3" (SPLIT)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT) NIL NIL)
                                                       ("3" (PROPAX) NIL NIL)
                                                       ("4"
                                                        (REWRITE
                                                         "Closest_RoundedMode")
                                                        NIL NIL)
                                                       ("5"
                                                        (REWRITE
                                                         "FcanonicBounded")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (SKEEP)
                                              (("2" (EXPAND "abs")
                                                (("2" (GRIND-REALS) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "ClosestUlp")
                                        (("2" (REWRITE "FcanonicBounded") NIL
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT 1)
                                      (("2" (EXPAND "abs")
                                        (("2" (GRIND-REALS) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "FcanonicBounded") NIL NIL))
                                NIL)
                               ("2" (LEMMA "FcanonicUnique")
                                (("2" (INST -1 "b" "y" "Fopp(t)")
                                  (("2" (SPLIT)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (REWRITE "FoppCorrect")
                                      (("2" (ASSERT) NIL NIL)) NIL)
                                     ("3" (LEMMA "FcanonicOpp")
                                      (("3" (INST -1 "b" "t")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("4" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (MULT-BY 1 "radix+1")
                          (("2"
                            (TRANS-INEQ 1
                             "(radix + 1 + radix ^ (4 - Prec(b))) *
                                       abs(FtoR[radix](a) * FtoR[radix](x))")
                            (("2" (ASSERT)
                              (("2" (MOVE-TERMS 1 R 1)
                                (("2" (MOVE-TERMS 1 R 2)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FIELD 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "ExactSum_Near")
          (("1" (TRANS-INEQ 1 "Fulp(b)(u)/2" :STRICT 2)
            (("1" (LEMMA "ClosestUlp")
              (("1" (INST -1 "b" "u" "FtoR(t)+FtoR(y)")
                (("1" (SPLIT)
                  (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)
                   ("3" (REWRITE "FcanonicBounded") NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REWRITE "FulpCanonic")
              (("2" (REWRITE -1) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (REWRITE "FcanonicBounded") NIL NIL)
           ("3" (REWRITE "FcanonicBounded") NIL NIL)
           ("4" (REWRITE "FcanonicBounded") NIL NIL))
          NIL))
        NIL)
       ("2" (LEMMA "FcanonicUnique")
        (("2" (INST -1 "b" "u" "(# Fnum := 0, Fexp := -dExp(b) #)")
          (("2" (SPLIT)
            (("1" (PROPAX) NIL NIL)
             ("2" (REWRITE -3 :DIR RL)
              (("2" (EXPAND "FtoR" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
             ("3" (EXPAND* "Fcanonic?" "Fsubnormal?" "Fbounded?")
              (("3" (FLATTEN)
                (("3" (SPLIT)
                  (("1" (EXPAND "abs" 1) (("1" (GRIND-REALS) NIL NIL)) NIL)
                   ("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|ExactSum_Near| FORMULA-DECL NIL |axpy| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Fopp| CONST-DECL "float" |float| NIL)
    (|FulpOpp| FORMULA-DECL NIL |float| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|ClosestUlp| FORMULA-DECL NIL |float| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|RleRoundedR0| FORMULA-DECL NIL |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (RND TYPE-EQ-DECL NIL |float| NIL)
    (|Closest_RoundedMode| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|RleRoundedLessR0| FORMULA-DECL NIL |float| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|FoppCorrect| FORMULA-DECL NIL |float| NIL)
    (|FcanonicOpp| FORMULA-DECL NIL |float| NIL)
    (|FcanonicUnique| FORMULA-DECL NIL |float| NIL)
    (|div_cancel2| FORMULA-DECL NIL |real_props| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|FulpCanonic| FORMULA-DECL NIL |float| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonzero_times2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Fabs| CONST-DECL "float" |float| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|FabsCorrect| FORMULA-DECL NIL |float| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|Fulp| CONST-DECL "real" |float| NIL)
    (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_ge| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|zero_is_neg_zero| FORMULA-DECL NIL |real_props| NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Axpy_opt_TCC1| 0
  (|Axpy_opt_TCC1-1| |nil| 3321008004 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt| SUBTYPE "((number_fields.-)(4, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt_TCC2| 0
  (|Axpy_opt_TCC2-1| |nil| 3321008004 ("" (SUBTYPE-TCC) NIL NIL)
   ((|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|Fsubnormal?| CONST-DECL "bool" |float| NIL)
    (|Fnormal?| CONST-DECL "bool" |float| NIL)
    (|Fbounded?| CONST-DECL "bool" |float| NIL)
    (|vNum| CONST-DECL "posnat" |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|Closest?| CONST-DECL "bool" |float| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}"
     |real_defs| NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|Axpy_opt| SUBTYPE "((number_fields.-)(1, Prec(axpy.b)))"
    "{i: integers.int | booleans.OR(axpy.radix /= 0, reals.>=(i, 0))}")))
 (|Axpy_opt| 0
  (|Axpy_opt-1| |nil| 3321015698
   ("" (SKEEP)
    (("" (CASE " 0 < FtoR(u)")
      (("1" (LEMMA "Axpy_optPos")
        (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
          (("1" (SPLIT)
            (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
             ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
             ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)
             ("7" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (CASE "0=FtoR(u)")
        (("1" (LEMMA "Axpy_optZero")
          (("1" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
            (("1" (SPLIT)
              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
               ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
               ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "FtoR(u) < 0")
          (("1" (HIDE 1 2)
            (("1" (LEMMA "Axpy_optPos")
              (("1"
                (INST -1 "a" "a1" "Fopp(t)" "Fopp(u)" "Fopp(x)" "-x1" "Fopp(y)"
                 "-y1")
                (("1" (SPLIT)
                  (("1" (CASE "u=Fopp(Fopp(u))")
                    (("1" (REPLACE -1 1)
                      (("1" (CASE-REPLACE "y1 + a1 * x1=-(-y1 + a1 * -x1)")
                        (("1" (REWRITE "MinOrMax_Fopp")
                          (("1" (REWRITE "FoppBounded")
                            (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "Fopp" 1)
                      (("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
                    NIL)
                   ("2"
                    (TRANS-INEQ 1
                     "abs(y1 - FtoR[radix](y) + a1 * x1 - FtoR[radix](a) * FtoR[radix](x))"
                     :STRICT 2)
                    (("1" (HIDE-ALL-BUT 1)
                      (("1" (REWRITE "FoppCorrect")
                        (("1" (REWRITE "FoppCorrect")
                          (("1" (EXPAND "abs") (("1" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REWRITE "FoppCorrect")
                      (("2" (CASE-REPLACE "abs(-FtoR(y))= abs(FtoR[radix](y))")
                        (("2" (EXPAND "abs" 1) (("2" (GRIND-REALS) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "FoppCorrect")
                    (("3" (REWRITE "FoppCorrect")
                      (("3" (CASE-REPLACE "abs(-FtoR(y))= abs(FtoR[radix](y))")
                        (("1"
                          (CASE-REPLACE
                           "abs(FtoR[radix](a) * -FtoR(x))= abs(FtoR[radix](a) * FtoR[radix](x))")
                          (("1" (HIDE-ALL-BUT 1)
                            (("1" (REWRITE "abs_mult")
                              (("1" (REWRITE "abs_mult")
                                (("1" (EXPAND "abs")
                                  (("1" (GRIND-REALS) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (EXPAND "abs") (("2" (GRIND-REALS) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (PROPAX) NIL NIL)
                   ("5" (REWRITE "FoppCorrect") (("5" (GRIND-REALS) NIL NIL))
                    NIL)
                   ("6"
                    (CASE-REPLACE
                     "FtoR(Fopp(t))+FtoR(Fopp(y))=-(FtoR(t)+FtoR(y))")
                    (("1" (REWRITE "ClosestFopp")
                      (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                     ("2" (REWRITE "FoppCorrect")
                      (("2" (REWRITE "FoppCorrect") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("7"
                    (CASE-REPLACE "FtoR(a)*FtoR(Fopp(x))=-(FtoR(a)*FtoR(x))")
                    (("1" (REWRITE "ClosestFopp")
                      (("1" (REWRITE "FcanonicBounded") NIL NIL)) NIL)
                     ("2" (REWRITE "FoppCorrect") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "FcanonicOpp")
                  (("2" (INST -1 "b" "y") (("2" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("3" (LEMMA "FcanonicOpp")
                  (("3" (INST -1 "b" "y")
                    (("3" (ASSERT)
                      (("3" (LEMMA "FcanonicOpp")
                        (("3" (INST -1 "b" "x") (("3" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (LEMMA "FcanonicOpp")
                  (("4" (INST -1 "b" "u") (("4" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("5" (LEMMA "FcanonicOpp")
                  (("5" (INST -1 "b" "t") (("5" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND-REALS) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|FcanonicOpp| FORMULA-DECL NIL |float| NIL)
    (|ClosestFopp| FORMULA-DECL NIL |float| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|FoppCorrect| FORMULA-DECL NIL |float| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|FoppBounded| FORMULA-DECL NIL |float| NIL)
    (|FcanonicBounded| FORMULA-DECL NIL |float| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|MinOrMax_Fopp| FORMULA-DECL NIL |axpy| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) NIL NIL NIL NIL
    (|Fopp| CONST-DECL "float" |float| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Axpy_optZero| FORMULA-DECL NIL |axpy| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Axpy_optPos| FORMULA-DECL NIL |axpy| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Axpy_simpl| 0
  (|Axpy_simpl-1| |nil| 3321016669
   ("" (SKEEP)
    (("" (LEMMA "Axpy_opt")
      (("" (INST -1 "a" "a1" "t" "u" "x" "x1" "y" "y1")
        (("" (SPLIT)
          (("1" (PROPAX) NIL NIL)
           ("2"
            (CASE-REPLACE
             "abs(FtoR[radix](y)) * 2 ^ (1 - Prec(b)) / 12=abs(FtoR[radix](y)) * radix ^ (1 - Prec(b)) / (6 * radix)")
            (("2" (HIDE-ALL-BUT (-4 1))
              (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("3"
            (TRANS-INEQ 1
             " (3 + 1 / 100000) * abs(FtoR[radix](a) * FtoR[radix](x))")
            (("3" (DIV-BY 1 "abs(FtoR(a)*FtoR(x))")
              (("3" (REPLACE -4)
                (("3" (HIDE-ALL-BUT (-3 1))
                  (("3" (ASSERT)
                    (("3" (MOVE-TERMS 1 L 1)
                      (("3" (ASSERT)
                        (("3" (TRANS-INEQ 1 "2^(-20)")
                          (("1" (REVEAL -4)
                            (("1" (CASE-REPLACE "2=radix")
                              (("1" (REWRITE "Exp_increq_1") NIL NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (EVAL-FORMULA) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (ASSERT) NIL NIL) ("5" (PROPAX) NIL NIL)
           ("6" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Axpy_opt| FORMULA-DECL NIL |axpy| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|Exp_increq_1| FORMULA-DECL NIL |float| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL NIL (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|FtoR| CONST-DECL "real" |float| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|b| FORMAL-CONST-DECL "Format" |axpy| NIL)
    (|Fcanonic?| CONST-DECL "bool" |float| NIL)
    (|Format| TYPE-EQ-DECL NIL |float| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|float| TYPE-EQ-DECL NIL |float| NIL)
    (|radix| FORMAL-CONST-DECL "above(1)" |axpy| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)))

