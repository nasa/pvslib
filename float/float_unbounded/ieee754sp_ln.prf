(ieee754sp_ln
 (IMP_std_ln_TCC1 0
  (IMP_std_ln_TCC1-1 nil 3720282008 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_std_ln subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (Sln_TCC1 0
  (Sln_TCC1-2 nil 3709662184
   ("" (skeep :preds? t) (("" (expand "StoR") (("" (assert) nil nil)) nil))
    nil)
   ((StoR const-decl "real" ieee754sp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (Sln subtype "float[2].FtoR(ieee754sp_ln.f1)" "posreal"))
  (Sln_TCC1-1 nil 3709661841 ("" (subtype-tcc) nil nil) nil nil
   (Sln subtype "float[2].FtoR(ieee754sp_ln.f1)" "posreal")))
 (Sln_TCC2 0
  (Sln_TCC2-2 nil 3709999140
   ("" (skeep :preds? t) (("" (expand "StoR") (("" (propax) nil nil)) nil))
    nil)
   ((StoR const-decl "real" ieee754sp nil)) nil
   (Sln subtype "ieee754sp_ln.f1" "{f1 | reals.>(float[2].FtoR(f1), 0)}"))
  (Sln_TCC2-1 nil 3709998202 ("" (subtype-tcc) nil nil) nil nil
   (Sln subtype "ieee754sp_ln.f1" "{f1 | reals.>(float[2].FtoR(f1), 0)}")))
 (Sln_TCC3 0
  (Sln_TCC3-1 nil 3719596711
   ("" (expand "Fln") (("" (expand "Fg") (("" (propax) nil nil)) nil)) nil)
   ((Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (Fln const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(ln(FtoR(f1)), f2)}"
     std_ln nil))
   nil
   (Sln subtype
    "std_ln[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].Fln(ieee754sp_ln.f1)"
    "{f: ieee754sp.unb_single | ieee754sp.closest_single?(ln_exp.ln(float[2].FtoR(ieee754sp_ln.f1)))(f)}")))
 (Sln_correctly_rounded_TCC1 0
  (Sln_correctly_rounded_TCC1-1 nil 3709998202 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float nil) (StoR const-decl "real" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (Sln_correctly_rounded subtype "ieee754sp_ln.f1"
    "{f1 | reals.>(ieee754sp.StoR(ieee754sp_ln.f1), 0)}")))
 (Sln_correctly_rounded_TCC2 0
  (Sln_correctly_rounded_TCC2-1 nil 3719596711 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float nil) (StoR const-decl "real" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (Sln_correctly_rounded subtype "ieee754sp.StoR(ieee754sp_ln.f1)"
    "posreal")))
 (Sln_correctly_rounded 0
  (Sln_correctly_rounded-1 nil 3709662134
   ("" (skeep)
    (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
      (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
        (("" (expand "Fg")
          (("" (expand "RtoS")
            (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Sln const-decl "{f: unb_single | closest_single?(ln(FtoR(f1)))(f)}"
     ieee754sp_ln nil)
    (Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (StoR const-decl "real" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (Fln const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(ln(FtoR(f1)), f2)}"
     std_ln nil))
   nil)))

