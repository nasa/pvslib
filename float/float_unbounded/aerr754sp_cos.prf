(aerr754sp_cos
 (IMP_accum_err_cos_TCC1 0
  (IMP_accum_err_cos_TCC1-1 nil 3699783160 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_accum_err_cos subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (IMP_accum_err_cos_TCC2 0
  (IMP_accum_err_cos_TCC2-1 nil 3699783160 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_accum_err_cos assuming
    "accum_err_cos[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_cos"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_cos.radix].Fbounded?(accum_err_cos.b))): booleans.IMPLIES(accum_err_cos.round(x, f), float[accum_err_cos.radix].EvenClosest?(accum_err_cos.b)(x, f))")))
 (IMP_accum_err_cos_TCC3 0
  (IMP_accum_err_cos_TCC3-2 "" 3790103526
   ("" (typepred "sp_closest?") (("" (propax) nil nil)) nil)
   ((sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   shostak
   (IMP_accum_err_cos assuming
    "accum_err_cos[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_cos"
    "round_rounded_mode: ASSUMPTION float[accum_err_cos.radix].rounded_mode?(accum_err_cos.b)(accum_err_cos.round)"))
  (IMP_accum_err_cos_TCC3-1 nil 3699783160 ("" (typepred "sp_closest?"))
   ((sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp nil)
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
   rounded_mode?(single_precision_format)(round)}" ieee754sp nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   nil
   (IMP_accum_err_cos assuming
    "accum_err_cos[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_cos"
    "round_rounded_mode: ASSUMPTION float[accum_err_cos.radix].rounded_mode?(accum_err_cos.b)(accum_err_cos.round)")))
 (Scos_aerr 0
  (Scos_aerr-1 nil 3699783183
   ("" (expand "aeboundsp_cos")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Scos" 1)
            (("" (expand "ulp_sp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Scos const-decl "{f: unb_single | closest_single?(cos(FtoR(f1)))(f)}"
     ieee754sp_cos nil)
    (accum_err_bound formula-decl nil accum_err_cos nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (aeboundsp_cos const-decl "nonneg_real" aerr754sp_cos nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos trig))
   nil)))

