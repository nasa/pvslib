(std_atn
 (Fatn_bounded 0
  (Fatn_bounded-2 nil 3698571809
   ("" (skeep)
    (("" (lemma "Fg_bounded")
      (("" (inst -1 "f1")
        (("" (expand "Fatn") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" std_atn nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" std_atn nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" std_atn nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" std_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Fatn const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(atan(FtoR(f1)), f2)}" std_atn
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil)
  (Fatn_bounded-1 nil 3679473796
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,atan_pre,atan]")
      (("" (inst -1 "f1")
        (("" (expand "Fatn") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Format type-eq-decl nil float nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Fatn_error 0
  (Fatn_error-2 nil 3698571838
   ("" (skeep)
    (("" (lemma "Fg_error")
      (("" (inst -1 "f1")
        (("" (expand "Fatn") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" std_atn nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" std_atn nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" std_atn nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" std_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fatn const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(atan(FtoR(f1)), f2)}" std_atn
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (Fatn_error-1 nil 3679473863
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,atan_pre,atan]")
      (("" (inst -1 "f1")
        (("" (expand "Fatn") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Format type-eq-decl nil float nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Fatn_error_ulp 0
  (Fatn_error_ulp-1 nil 3699648798
   ("" (skeep)
    (("" (lemma "closest_ulp")
      (("" (inst?)
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (invoke (typepred "%1") (! 1 1))
            (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (invoke (typepred "%1") (! 1 2)) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" std_atn nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          trig)
    (FtoR const-decl "real" float nil)
    (Fatn const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(atan(FtoR(f1)), f2)}" std_atn
     nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fatn_bounded formula-decl nil std_atn nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" std_atn nil))
   nil)))

