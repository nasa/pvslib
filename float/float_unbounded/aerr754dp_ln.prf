(aerr754dp_ln
 (IMP_accum_err_ln_TCC1 0
  (IMP_accum_err_ln_TCC1-1 nil 3699783472 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (IMP_accum_err_ln subtype "ieee754dp.ieee754radix" "integers.above(1)")))
 (IMP_accum_err_ln_TCC2 0
  (IMP_accum_err_ln_TCC2-1 nil 3699783472 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (IMP_accum_err_ln assuming
    "accum_err_ln[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_ln"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_ln.radix].Fbounded?(accum_err_ln.b))): booleans.IMPLIES(accum_err_ln.round(x, f), float[accum_err_ln.radix].EvenClosest?(accum_err_ln.b)(x, f))")))
 (IMP_accum_err_ln_TCC3 0
  (IMP_accum_err_ln_TCC3-2 "" 3790103676
   ("" (typepred "dp_closest?") (("" (propax) nil nil)) nil)
   ((dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   shostak
   (IMP_accum_err_ln assuming
    "accum_err_ln[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_ln"
    "round_rounded_mode: ASSUMPTION float[accum_err_ln.radix].rounded_mode?(accum_err_ln.b)(accum_err_ln.round)"))
  (IMP_accum_err_ln_TCC3-1 nil 3699783472 ("" (typepred "dp_closest?"))
   ((dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Closest? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (rounded_mode? const-decl "bool" float nil))
   nil
   (IMP_accum_err_ln assuming
    "accum_err_ln[2, ieee754dp.double_precision_format, ieee754dp.dp_closest?, ieee754dp.RtoD].accum_err_ln"
    "round_rounded_mode: ASSUMPTION float[accum_err_ln.radix].rounded_mode?(accum_err_ln.b)(accum_err_ln.round)")))
 (aebounddp_ln_TCC1 0
  (aebounddp_ln_TCC1-1 nil 3712403166 ("" (subtype-tcc) nil nil) nil nil
   (aebounddp_ln subtype "aerr754dp_ln.e1"
    "{e1 | reals.>((number_fields.-)(aerr754dp_ln.r1, accum_err_ln.e1), 0)}")))
 (Dln_aerr_TCC1 0
  (Dln_aerr_TCC1-1 nil 3712403166 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (DtoR const-decl "real" ieee754dp nil) (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (Dln_aerr subtype "aerr754dp_ln.f1"
    "{f1 | reals.>(ieee754dp.DtoR(ieee754dp_ln.f1), 0)}")))
 (Dln_aerr_TCC2 0
  (Dln_aerr_TCC2-1 nil 3712403166 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (DtoR const-decl "real" ieee754dp nil) (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil (Dln_aerr subtype "aerr754dp_ln.r1" "posreal")))
 (Dln_aerr 0
  (Dln_aerr-2 "" 3790103679
   ("" (expand "aebounddp_ln")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "DtoR")
          (("" (expand "Dln" 1)
            (("" (expand "ulp_dp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (DtoR const-decl "real" ieee754dp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Dln const-decl "{f: unb_double | closest_double?(ln(FtoR(f1)))(f)}"
     ieee754dp_ln nil)
    (accum_err_bound formula-decl nil accum_err_ln nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp nil)
    (aebounddp_ln const-decl "nonneg_real" aerr754dp_ln nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak)
  (Dln_aerr-1 nil 3699783488
   ("" (expand "aebounddp_ln")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "DtoR")
          (("" (expand "Dln" 1)
            (("" (expand "ulp_dp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DtoR const-decl "real" ieee754dp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (Dln const-decl "{f: unb_double | closest_double?(ln(FtoR(f1)))(f)}"
     ieee754dp_ln nil)
    (accum_err_bound formula-decl nil accum_err_ln nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}" ieee754dp
     nil))
   nil)))

