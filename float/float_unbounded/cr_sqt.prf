(cr_sqt
 (Fsqrt_TCC1 0
  (Fsqrt_TCC1-1 nil 3679422302 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (b formal-const-decl "Format" cr_sqt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (radix formal-const-decl "above(1)" cr_sqt nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (Fsqrt subtype "float[cr_sqt.radix].FtoR(cr_sqt.f1)"
    "nonneg_real")))
 (Fsqrt_bounded 0
  (Fsqrt_bounded-2 nil 3698572030
   ("" (skeep)
    (("" (lemma "Fg_bounded")
      (("" (inst -1 "f1")
        (("" (expand "Fsqrt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_sqt nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_sqt nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_sqt nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_sqt nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(sqrt(FtoR(f1)), f2)}" cr_sqt
     nil)
    (FtoR const-decl "real" float nil))
   nil)
  (Fsqrt_bounded-1 nil 3679473764
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,sqrt_pre,sqrt]")
      (("" (inst -1 "f1")
        (("" (expand "Fsqrt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (Format type-eq-decl nil float nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil))
   shostak))
 (Fsqrt_error_TCC1 0
  (Fsqrt_error_TCC1-1 nil 3679422302 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (float type-eq-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (radix formal-const-decl "above(1)" cr_sqt nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil
   (Fsqrt_error subtype "float[cr_sqt.radix].FtoR(cr_sqt.f1)"
    "nonneg_real")))
 (Fsqrt_error 0
  (Fsqrt_error-2 nil 3698572051
   ("" (skeep)
    (("" (lemma "Fg_error")
      (("" (inst -1 "f1")
        (("" (expand "Fsqrt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_sqt nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_sqt nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_sqt nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_sqt nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(sqrt(FtoR(f1)), f2)}" cr_sqt
     nil)
    (FtoR const-decl "real" float nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (Fsqrt_error-1 nil 3679473837
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,sqrt_pre,sqrt]")
      (("" (inst -1 "f1")
        (("" (expand "Fsqrt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (Format type-eq-decl nil float nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil))
   shostak))
 (Fsqrt_error_ulp 0
  (Fsqrt_error_ulp-1 nil 3682183755
   ("" (skeep)
    (("" (lemma "closest_ulp")
      (("" (inst?)
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (invoke (typepred "%1") (! 1 1))
            (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (invoke (typepred "%1") (! 1 2)) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_sqt nil)
    (float type-eq-decl nil float nil) (>= const-decl "bool" reals nil)
    (FtoR const-decl "real" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(sqrt(FtoR(f1)), f2)}" cr_sqt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fsqrt_bounded formula-decl nil cr_sqt nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_sqt nil))
   shostak)))

