(std_mul_props
 (Fmul_radix_power_error_ulp_TCC1 0
  (Fmul_radix_power_error_ulp_TCC1-1 nil 3698073152 ("" (subtype-tcc) nil nil)
   nil nil
   (Fmul_radix_power_error_ulp subtype "std_mul_props.n"
    "{i: integers.int | booleans.OR(std_mul_props.radix /= 0, reals.>=(i, 0))}")))
 (Fmul_radix_power_error_ulp 0
  (Fmul_radix_power_error_ulp-1 nil 3698073167
   ("" (skeep)
    (("" (typepred "RtoF")
      (("" (expand "exact_rep_conservation")
        (("" (inst - "f" "n")
          (("1" (expand "exactly_representable")
            (("1" (expand "Fmul")
              (("1" (expand "Fg")
                (("1" (lemma "Closest_int_exact_rep[radix]")
                  (("1" (expand "exactly_representable")
                    (("1" (inst -1 "b" "round" "RtoF" "radix ^ n")
                      (("1" (replace -1) (("1" (propax) nil nil)) nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "vNum")
                          (("2" (typepred "n")
                            (("2" (expand "abs")
                              (("2" (lift-if 1)
                                (("2" (split 1)
                                  (("1" (flatten)
                                    (("1" (typepred "radix")
                                      (("1" (assert) nil nil)) nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (lemma "both_sides_expt_gt1_gt")
                                      (("2"
                                        (expand ">")
                                        (("2"
                                          (inst -1 "radix" "Prec(b)" "n")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (skeep)
                          (("3" (typepred "RtoF")
                            (("3" (typepred "round")
                              (("3" (inst? -1)
                                (("3" (inst? -2) (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "FcanonicBounded[radix]") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FcanonicBounded formula-decl nil float nil)
    (exactly_representable const-decl "bool" float nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (round skolem-const-decl "ClosestRoundingPred[radix](b)" std_mul_props
           nil)
    (RtoF skolem-const-decl "{RtoF: CanonicRoundingFun[radix](b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" std_mul_props nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (vNum const-decl "posnat" float nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_gt1_gt formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Closest_int_exact_rep formula-decl nil float nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) * FtoR(f2), f3)}" std_mul
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (f skolem-const-decl "{f: (Fcanonic?[radix](b)) | n < Prec(b) - Fexp(f)}"
     std_mul_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (n skolem-const-decl "{n: nat | n < Prec(b)}" std_mul_props nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (b skolem-const-decl "Format[radix]" std_mul_props nil)
    (radix skolem-const-decl "above(1)" std_mul_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   shostak)))

