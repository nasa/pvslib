(accum_err_sub
 (sub_accum_err 0
  (sub_accum_err-3 "" 3790103300
   ("" (skeep)
    (("" (use "interval_as_absdif")
      (("" (replace -1 :hide? t)
        (("" (use "interval_as_absdif")
          (("" (replace -1 :hide? t)
            (("" (lemma "interval_as_absdif")
              (("" (inst? -1 :where 1)
                (("" (replace -1 :hide? t)
                  (("" (lemma "Sub_inclusion")
                    ((""
                      (inst -1 "[|FtoR(f1) - e1, FtoR(f1) + e1|]"
                       "[|FtoR(f2) - e2, FtoR(f2) + e2|]" "r1" "r2")
                      (("" (assert)
                        (("" (expand "Sub")
                          (("" (expand "[||]")
                            (("" (expand "sub_aerr_bound")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((interval_as_absdif formula-decl nil interval interval_arith)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Sub_inclusion formula-decl nil interval interval_arith)
    (sub_aerr_bound const-decl "nonneg_real" accum_err_sub nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak)
  (sub_accum_err-2 nil 3682021395
   ("" (skeep)
    (("" (use "interval_as_absdif")
      (("" (replace -1 :hide? t)
        (("" (use "interval_as_absdif")
          (("" (replace -1 :hide? t)
            (("" (lemma "interval_as_absdif")
              (("" (inst? -1 :where 1)
                (("1" (replace -1 :hide? t)
                  (("1" (lemma "Sub_inclusion")
                    (("1"
                      (inst -1 "[|FtoR(f1) - e1, FtoR(f1) + e1|]"
                       "[|FtoR(f2) - e2, FtoR(f2) + e2|]" "r1" "r2")
                      (("1" (assert)
                        (("1" (expand "Sub")
                          (("1" (expand "[||]")
                            (("1" (expand "sub_aerr_bound")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "sub_aerr_bound") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((interval_as_absdif formula-decl nil interval interval_arith)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil) (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Sub_inclusion formula-decl nil interval interval_arith))
   nil)
  (sub_accum_err-1 nil 3682020767
   ("" (skeep)
    (("" (expand "sub_aerr_bound")
      (("" (use "abs_dist")
        (("" (assert) (("" (hide -2) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (Fsub_accum_err_bound 0
  (Fsub_accum_err_bound-1 nil 3682020622
   ("" (skeep)
    (("" (expand "sub_ulp_bound")
      (("" (name-replace "A___" "FtoR(f1)")
        (("" (name-replace "B___" "FtoR(f2)") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sub_ulp_bound const-decl "real" accum_err_sub nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (aelemmath_sub_TCC1 0
  (aelemmath_sub_TCC1-2 nil 3682021510
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (hide 2)
        (("" (lemma "round_even_closest")
          (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ulp_abs formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" accum_err_sub nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" accum_err_sub nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (RestrictedRounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (round_even_closest formula-decl nil accum_err_sub nil))
   nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "ulp_abs: ASSUMPTION accum_err_op2sch.ulp(real_defs.abs(accum_err_op2sch.r1)) = accum_err_op2sch.ulp(accum_err_op2sch.r1)"))
  (aelemmath_sub_TCC1-1 nil 3682019115 ("" (assuming-tcc) nil nil) nil nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "ulp_abs: ASSUMPTION accum_err_op2sch.ulp(real_defs.abs(accum_err_op2sch.r1)) = accum_err_op2sch.ulp(accum_err_op2sch.r1)")))
 (aelemmath_sub_TCC2 0
  (aelemmath_sub_TCC2-2 nil 3682021565
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil)) nil))
    nil)
   ((round_rounded_mode formula-decl nil accum_err_sub nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (round formal-const-decl "ClosestRoundingPred(b)" accum_err_sub nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (rounded_mode? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" accum_err_sub nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ulp_monotone formula-decl nil float nil))
   nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op2sch.r1), reals.<=(accum_err_op2sch.r1, accum_err_op2sch.r2)), reals.<=(accum_err_op2sch.ulp(accum_err_op2sch.r1), accum_err_op2sch.ulp(accum_err_op2sch.r2)))"))
  (aelemmath_sub_TCC2-1 nil 3682019115 ("" (assuming-tcc) nil nil) nil nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op2sch.r1), reals.<=(accum_err_op2sch.r1, accum_err_op2sch.r2)), reals.<=(accum_err_op2sch.ulp(accum_err_op2sch.r1), accum_err_op2sch.ulp(accum_err_op2sch.r2)))")))
 (aelemmath_sub_TCC3 0
  (aelemmath_sub_TCC3-2 nil 3682021582
   ("" (skeep) (("" (use "sub_accum_err") (("" (assert) nil nil)) nil)) nil)
   ((sub_accum_err formula-decl nil accum_err_sub nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(     (reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.r1)), accum_err_op2sch.e1)) AND (reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f2), accum_err_op2sch.r2)), accum_err_op2sch.e2)) AND accum_err_op2sch.fR_pre?(accum_err_op2sch.r1, accum_err_op2sch.r2) AND accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)) AND accum_err_op2sch.fun_bound_pre(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2), reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.fR(accum_err_op2sch.r1, accum_err_op2sch.r2))), accum_err_op2sch.fun_bound(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2)))"))
  (aelemmath_sub_TCC3-1 nil 3682019115 ("" (assuming-tcc) nil nil) nil nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(     (reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.r1)), accum_err_op2sch.e1)) AND (reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f2), accum_err_op2sch.r2)), accum_err_op2sch.e2)) AND accum_err_op2sch.fR_pre?(accum_err_op2sch.r1, accum_err_op2sch.r2) AND accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)) AND accum_err_op2sch.fun_bound_pre(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2), reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.fR(accum_err_op2sch.r1, accum_err_op2sch.r2))), accum_err_op2sch.fun_bound(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2)))")))
 (aelemmath_sub_TCC4 0
  (aelemmath_sub_TCC4-3 "" 3790103305
   ("" (skeep)
    (("" (use "Fsub_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((Fsub_error_ulp formula-decl nil cr_sub nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" accum_err_sub nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" accum_err_sub nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.fF_pre?(accum_err_op2sch.f1, accum_err_op2sch.f2)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.fF(accum_err_op2sch.f1, accum_err_op2sch.f2)), accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)))), number_fields./(accum_err_op2sch.ulp(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2))), 2)))"))
  (aelemmath_sub_TCC4-2 nil 3682021809
   ("" (skeep)
    (("" (use "Fsub_error_ulp")
      (("" (typepred "round")
        (("" (skeep)
          (("" (inst?)
            (("" (assert)
              (("" (expand "EvenClosest?") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fsub_error_ulp formula-decl nil cr_sub nil)
    (Format type-eq-decl nil float nil) (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil))
   nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.fF_pre?(accum_err_op2sch.f1, accum_err_op2sch.f2)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.fF(accum_err_op2sch.f1, accum_err_op2sch.f2)), accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)))), number_fields./(accum_err_op2sch.ulp(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2))), 2)))"))
  (aelemmath_sub_TCC4-1 nil 3682019115 ("" (assuming-tcc) nil nil) nil nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.fF_pre?(accum_err_op2sch.f1, accum_err_op2sch.f2)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.fF(accum_err_op2sch.f1, accum_err_op2sch.f2)), accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)))), number_fields./(accum_err_op2sch.ulp(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2))), 2)))")))
 (aelemmath_sub_TCC5 0
  (aelemmath_sub_TCC5-2 nil 3682021597
   ("" (skeep) (("" (use "Fsub_accum_err_bound") (("" (assert) nil nil)) nil))
    nil)
   ((Fsub_accum_err_bound formula-decl nil accum_err_sub nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.r1)), accum_err_op2sch.e1), booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f2), accum_err_op2sch.r2)), accum_err_op2sch.e2), booleans.AND(accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.ulp_bound_pre(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2)))), reals.<=(real_defs.abs(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2))), accum_err_op2sch.ulp_bound(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2)))"))
  (aelemmath_sub_TCC5-1 nil 3682019115 ("" (assuming-tcc) nil nil) nil nil
   (aelemmath_sub assuming
    "accum_err_op2sch[(float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), restrict[float[radix], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), real].restrict(float[accum_err_sub.radix].FtoR), accum_err_sub.RtoF, float[accum_err_sub.radix].ulp(accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF), LAMBDA (f1, f2): booleans.TRUE, restrict[[float[radix], float[radix]], [f1: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)), {f2: (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b)) | booleans.TRUE}], (float[accum_err_sub.radix].Fbounded?(accum_err_sub.b))].restrict(cr_sub[accum_err_sub.radix, accum_err_sub.b, accum_err_sub.round, accum_err_sub.RtoF].Fsub), LAMBDA (r1, r2): booleans.TRUE, restrict[[numfield, numfield], [r1: reals.real, {r2: reals.real | booleans.TRUE}], numfield].restrict(number_fields.-), LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_aerr_bound, LAMBDA (r1, e1, r2, e2): booleans.TRUE, accum_err_sub.sub_ulp_bound].accum_err_op2sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.r1)), accum_err_op2sch.e1), booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op2sch.F2R(accum_err_op2sch.f2), accum_err_op2sch.r2)), accum_err_op2sch.e2), booleans.AND(accum_err_op2sch.fR_pre?(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2)), accum_err_op2sch.ulp_bound_pre(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2)))), reals.<=(real_defs.abs(accum_err_op2sch.fR(accum_err_op2sch.F2R(accum_err_op2sch.f1), accum_err_op2sch.F2R(accum_err_op2sch.f2))), accum_err_op2sch.ulp_bound(accum_err_op2sch.r1, accum_err_op2sch.e1, accum_err_op2sch.r2, accum_err_op2sch.e2)))")))
 (accum_err_bound 0
  (accum_err_bound-2 "" 3790103307
   ("" (skeep)
    (("" (use "aelemmath_sub.accumulated_error") (("" (assert) nil nil)) nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op2sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_sub nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_sub nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" accum_err_sub nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" accum_err_sub nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" float nil) (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) - FtoR(f2), f3)}" cr_sub nil)
    (sub_aerr_bound const-decl "nonneg_real" accum_err_sub nil)
    (sub_ulp_bound const-decl "real" accum_err_sub nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak)
  (accum_err_bound-1 nil 3682019118
   ("" (skeep)
    (("" (use "aelemmath_sub.accumulated_error")
      (("" (assert)
        (("" (expand "sub_ulp_bound") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op2sch nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (ulp const-decl "posreal" float nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) - FtoR(f2), f3)}" cr_sub
     nil))
   shostak)))

