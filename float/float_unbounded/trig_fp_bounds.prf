(|trig_fp_bounds|
 (|IMP_derivative_props_TCC1| 0
  (|IMP_derivative_props_TCC1-2| |nil| 3699628916
   ("" (GROUND) (("" (EXPAND "connected?") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL
   (|IMP_derivative_props| ASSUMING
    "analysis@derivative_props[real].derivative_props"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))
  (|IMP_derivative_props_TCC1-1| |nil| 3699628843 ("" (ASSUMING-TCC) NIL NIL)
   NIL NIL
   (|IMP_derivative_props| ASSUMING
    "analysis@derivative_props[real].derivative_props"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (|IMP_derivative_props_TCC2| 0
  (|IMP_derivative_props_TCC2-2| |nil| 3699628932
   ("" (EXPAND "not_one_element?")
    (("" (SKEEP) (("" (INST 1 "x+1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|))
   NIL
   (|IMP_derivative_props| ASSUMING
    "analysis@derivative_props[real].derivative_props"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))
  (|IMP_derivative_props_TCC2-1| |nil| 3699628843 ("" (ASSUMING-TCC) NIL NIL)
   NIL NIL
   (|IMP_derivative_props| ASSUMING
    "analysis@derivative_props[real].derivative_props"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|sin_error_prep| 0
  (|sin_error_prep-1| |nil| 3680957043
   (""
    (CASE
        "FORALL (x: real, eps:nnreal): abs(sin(x + eps) - sin(x)) <= 2*abs(sin(eps/2))")
    (("1" (SKEEP)
      (("1" (CASE "eps >=0")
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (CASE "abs(eps/2) = eps/2")
              (("1" (ASSERT) NIL NIL)
               ("2" (REWRITE "abs_div")
                (("2" (ASSERT)
                  (("2" (EXPAND "abs" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "sin_neg")
          (("2" (INST -1 "-(x+eps)")
            (("2" (SIMPLIFY -1)
              (("2" (CASE "NOT --(x+eps)= x+eps")
                (("1" (ASSERT) NIL NIL)
                 ("2" (REPLACES -1)
                  (("2" (REPLACES -1)
                    (("2" (LEMMA "sin_neg")
                      (("2" (INST -1 "-x")
                        (("2" (CASE "NOT --x = x")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (REPLACES -1)
                            (("2" (REPLACES -1)
                              (("2" (LEMMA "abs_neg")
                                (("2" (INST -1 " sin(-x - eps) -sin(-x)")
                                  (("2" (REPLACES -1)
                                    (("2" (INST -1 "-x" "-eps")
                                      (("1" (CASE "not abs(eps/2)  = -eps/2")
                                        (("1" (REWRITE "abs_div")
                                          (("1" (EXPAND "abs" 1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (REPLACES -1)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (SKEEP)
        (("2" (REWRITE " sin_diff")
          (("2" (REWRITE "abs_mult")
            (("2" (REWRITE "abs_mult")
              (("2" (EXPAND "abs" 1 1)
                (("2" (CANCEL-BY 1 "2")
                  (("2" (HIDE (-1 1))
                    (("2" (CANCEL-BY 1 "abs(sin(eps/2))")
                      (("2" (HIDE (-1 1))
                        (("2" (EXPAND "abs")
                          (("2" (LIFT-IF 1)
                            (("2" (SPLIT 1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_diff| FORMULA-DECL NIL |trig_extra| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|even_posnat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL NIL
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|cos_error_prep| 0
  (|cos_error_prep-1| |nil| 3680958608
   ("" (LEMMA "cos_shift")
    (("" (SKEEP)
      (("" (INST-CP -1 "pi/2-x-eps")
        (("" (SIMPLIFY -2)
          (("" (INST -1 "pi/2-x")
            (("" (SIMPLIFY -1)
              (("" (REPLACES -1)
                (("" (REPLACES -1)
                  (("" (LEMMA "sin_error_prep")
                    (("" (INST -1 "pi/2-x" "-eps")
                      (("" (CASE "NOT abs(-eps / 2) = abs(eps / 2)")
                        (("1" (HIDE-ALL-BUT 1)
                          (("1" (GROUND)
                            (("1" (EXPAND "abs")
                              (("1" (GROUND)
                                (("1" (LIFT-IF 1)
                                  (("1" (SPLIT 1)
                                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sin_error_prep| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|cos_shift| FORMULA-DECL NIL |sincos| |trig|))
   SHOSTAK))
 (|sin_bound_TCC1| 0
  (|sin_bound_TCC1-1| |nil| 3680961614 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_bound| SUBTYPE "3"
    "{i: integers.int | booleans.OR(trig_fp_bounds.eps /= 0, reals.>=(i, 0))}")))
 (|sin_bound_TCC2| 0
  (|sin_bound_TCC2-1| |nil| 3680961614 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_bound| SUBTYPE "5"
    "{i: integers.int | booleans.OR(trig_fp_bounds.eps /= 0, reals.>=(i, 0))}")))
 (|sin_bound_TCC3| 0
  (|sin_bound_TCC3-1| |nil| 3680961614 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_bound| SUBTYPE "7"
    "{i: integers.int | booleans.OR(trig_fp_bounds.eps /= 0, reals.>=(i, 0))}")))
 (|sin_bound_TCC4| 0
  (|sin_bound_TCC4-1| |nil| 3680961614 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_bound| SUBTYPE "9"
    "{i: integers.int | booleans.OR(trig_fp_bounds.eps /= 0, reals.>=(i, 0))}")))
 (|sin_bound| 0
  (|sin_bound-1| |nil| 3680961614
   ("" (SKEEP)
    (("" (LEMMA "sin_lb_gt0")
      (("" (CASE "eps = 0")
        (("1" (REPLACES -1)
          (("1" (SIMPLIFY 1)
            (("1" (REWRITE "sin_0")
              (("1" (EXPAND "abs") (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("2" (INST -1 "2" "eps/2")
          (("1" (SPLIT -1)
            (("1" (LEMMA "trig_approx.sin_lb")
              (("1" (INST -1 "2" "eps/2")
                (("1" (CASE "NOT abs(sin(eps/2)) = sin(eps/2)")
                  (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (REPLACES -1)
                    (("2" (LEMMA "trig_approx.sin_ub")
                      (("2" (INST-CP -1 "0" "eps/2")
                        (("1" (EXPAND "sin_ub" -2)
                          (("1" (EXPAND "sin_approx")
                            (("1" (EXPAND "sigma")
                              (("1" (EXPAND "sigma")
                                (("1" (EXPAND "sin_term")
                                  (("1" (EXPAND "factorial")
                                    (("1" (EXPAND "factorial")
                                      (("1" (EXPAND "^" -2)
                                        (("1" (EXPAND "expt")
                                          (("1" (EXPAND "expt")
                                            (("1" (SIMPLIFY -2)
                                              (("1" (CROSS-MULT -2)
                                                (("1" (INST -1 "2" "eps/2")
                                                  (("1" (EXPAND "sin_ub")
                                                    (("1" (EXPAND "sin_approx")
                                                      (("1" (EXPAND "sigma")
                                                        (("1" (EXPAND "sigma")
                                                          (("1"
                                                            (EXPAND "sigma")
                                                            (("1"
                                                              (EXPAND "sigma")
                                                              (("1"
                                                                (EXPAND
                                                                 "sigma")
                                                                (("1"
                                                                  (EXPAND
                                                                   "sigma")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "sin_term")
                                                                    (("1"
                                                                      (CASE
                                                                          "NOT 2*((-1) ^ 0 * (eps / 2) ^ (1) / factorial(1) +
        (-1) ^ 1 * (eps / 2) ^ (3) / factorial(3)
        + (-1) ^ 2 * (eps / 2) ^ (5) / factorial(5)
        + (-1) ^ 3 * (eps / 2) ^ (7) / factorial(7)
        + (-1) ^ 4 * (eps / 2) ^ (9) / factorial(9)) = eps - eps ^ 3 / 24 + eps ^ 5 / 1920 - eps ^ 7 / 322560 +
            eps ^ 9 / 92897280")
                                                                      (("1"
                                                                        (HIDE-ALL-BUT
                                                                         1)
                                                                        (("1"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (BOTH-SIDES
                                                                         "*"
                                                                         "2"
                                                                         -2)
                                                                        (("1"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "min")
                                                                            (("1"
                                                                              (LIFT-IF
                                                                               2)
                                                                              (("1"
                                                                                (SPLIT
                                                                                 2)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL)
             ("2" (CROSS-MULT 1)
              (("2" (MULT-INEQ -1 -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_lb_gt0| FORMULA-DECL NIL |trig_approx| |trig|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) NIL
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sin_lb| FORMULA-DECL NIL |trig_approx| |trig|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sin_ub| FORMULA-DECL NIL |trig_approx| |trig|)
    (|sin_ub| CONST-DECL "real" |trig_approx| |trig|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|sin_term| CONST-DECL "real" |trig_approx| |trig|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|factorial_1| FORMULA-DECL NIL |factorial| |ints|)
    (|div_div2| FORMULA-DECL NIL |real_props| NIL)
    (|add_div| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_le| FORMULA-DECL NIL |real_props| NIL)
    (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (|sin_approx| CONST-DECL "real" |trig_approx| |trig|)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_min| APPLICATION-JUDGEMENT "{s: rat | s <= q AND s <= r}" |real_defs|
     NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|sin_error_bound_TCC1| 0
  (|sin_error_bound_TCC1-1| |nil| 3680963345 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_error_bound| SUBTYPE "3"
    "{i: integers.int | booleans.OR(trig_fp_bounds.peps /= 0, reals.>=(i, 0))}")))
 (|sin_error_bound_TCC2| 0
  (|sin_error_bound_TCC2-1| |nil| 3680963345 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_error_bound| SUBTYPE "5"
    "{i: integers.int | booleans.OR(trig_fp_bounds.peps /= 0, reals.>=(i, 0))}")))
 (|sin_error_bound_TCC3| 0
  (|sin_error_bound_TCC3-1| |nil| 3680963345 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_error_bound| SUBTYPE "7"
    "{i: integers.int | booleans.OR(trig_fp_bounds.peps /= 0, reals.>=(i, 0))}")))
 (|sin_error_bound_TCC4| 0
  (|sin_error_bound_TCC4-1| |nil| 3680963345 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|sin_error_bound| SUBTYPE "9"
    "{i: integers.int | booleans.OR(trig_fp_bounds.peps /= 0, reals.>=(i, 0))}")))
 (|sin_error_bound| 0
  (|sin_error_bound-1| |nil| 3680963347
   ("" (SKEEP)
    (("" (SKOLETIN)
      (("" (LEMMA "sin_error_prep")
        (("" (INST?)
          (("" (LEMMA "sin_bound")
            (("" (INST -1 "peps")
              (("" (TYPEPRED "eps")
                (("" (ASSERT)
                  (("" (CASE " NOT abs(eps/2) = peps/2")
                    (("1" (REWRITE "abs_div" 1)
                      (("1" (EXPAND "abs" 1 2) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_error_prep| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|sin_bound| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|cos_error_bound| 0
  (|cos_error_bound-1| |nil| 3680964690
   ("" (SKEEP)
    (("" (SKOLETIN)
      (("" (LEMMA "cos_error_prep")
        (("" (INST?)
          (("" (LEMMA "sin_bound")
            (("" (INST -1 "peps")
              (("" (TYPEPRED "eps")
                (("" (ASSERT)
                  (("" (CASE " NOT abs(eps/2) = peps/2")
                    (("1" (REWRITE "abs_div" 1)
                      (("1" (EXPAND "abs" 1 2) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sin_bound| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|cos_error_prep| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL))
   SHOSTAK))
 (|sin_bnd_simple| 0
  (|sin_bnd_simple-1| |nil| 3696756078
   ("" (SKEEP)
    (("" (CASE "abs(eps)<=2")
      (("1" (LEMMA "sin_error_bound")
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (EXPAND "min" 1)
              (("1" (ASSERT) (("1" (LIFT-IF 1) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (EXPAND "min" 2)
        (("2" (LIFT-IF 2)
          (("2" (ASSERT)
            (("2" (TYPEPRED "sin(x)")
              (("2" (TYPEPRED "sin(x+eps)")
                (("2" (ASSERT)
                  (("2" (EXPAND "abs" 2)
                    (("2" (ASSERT)
                      (("2" (LIFT-IF 2)
                        (("2" (SPLIT)
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|sin_error_bound| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|cos_bnd_simple| 0
  (|cos_bnd_simple-1| |nil| 3696756109
   ("" (SKEEP)
    (("" (LEMMA "sin_shift")
      (("" (INST-CP -1 "x+eps")
        (("" (INST -1 "x")
          (("" (REPLACES -1 :DIR RL)
            (("" (REPLACES -1 :DIR RL)
              (("" (LEMMA "sin_bnd_simple")
                (("" (INST -1 "pi/2-x" "-eps")
                  (("" (LEMMA "abs_neg")
                    (("" (INST -1 "eps")
                      (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_shift| FORMULA-DECL NIL |sincos| |trig|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|)
    (|sin_bnd_simple| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|sin_error_eps| 0
  (|sin_error_eps-1| |nil| 3696756144
   ("" (SKEEP)
    (("" (LEMMA "sin_bnd_simple")
      (("" (INST -1 "x" "ep")
        (("" (ASSERT)
          (("" (EXPAND "min" -1)
            (("" (LIFT-IF -1)
              (("" (EXPAND "min")
                (("" (LIFT-IF 1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_bnd_simple| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|cos_error_eps| 0
  (|cos_error_eps-1| |nil| 3696756178
   ("" (SKEEP)
    (("" (LEMMA "cos_bnd_simple")
      (("" (INST -1 "x" "ep")
        (("" (EXPAND "min")
          (("" (GROUND) (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cos_bnd_simple| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|atan_error_eps_TCC1| 0
  (|atan_error_eps_TCC1-1| |nil| 3696756045 ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)) NIL
   (|atan_error_eps| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(trig_fp_bounds.x, trig_fp_bounds.eps)) /= 0, reals.>=(i, 0))}")))
 (|atan_error_eps_TCC2| 0
  (|atan_error_eps_TCC2-1| |nil| 3696756045 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|atan_error_eps| SUBTYPE "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(trig_fp_bounds.eps, trig_fp_bounds.x) = 0), reals.>=(i, 0))}")))
 (|atan_error_eps_TCC3| 0
  (|atan_error_eps_TCC3-1| |nil| 3696756045
   ("" (SKEEP)
    (("" (LIFT-IF -2)
      (("" (SPLIT -2)
        (("1" (ASSERT) NIL NIL)
         ("2" (FLATTEN)
          (("2" (EXPAND "min")
            (("2" (LIFT-IF -1)
              (("2" (SPLIT -1)
                (("1" (FLATTEN)
                  (("1" (CASE "(x+eps)^2 = sq(x+eps)")
                    (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (CASE "(x-eps)^2 = sq(x-eps)")
                    (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|atan_error_eps| SUBTYPE
    "((number_fields.+)(1, IF reals.<=(real_defs.abs(trig_fp_bounds.x), trig_fp_bounds.eps) THEN 0 ELSE real_defs.min(exponentiation.^(((number_fields.-)(trig_fp_bounds.x, trig_fp_bounds.eps)), 2), exponentiation.^(((number_fields.+)(trig_fp_bounds.x, trig_fp_bounds.eps)), 2)) ENDIF))"
    "nznum")))
 (|atan_error_eps| 0
  (|atan_error_eps-1| |nil| 3696756215
   ("" (SKEEP)
    (("" (LEMMA "mean_value_abs")
      (("" (INST -1 "x" "x+ep" "atan")
        (("" (LEMMA "deriv_atan_fun")
          (("" (FLATTEN)
            (("" (ASSERT)
              (("" (CASE "0=ep")
                (("1" (REPLACES -1 :DIR RL)
                  (("1" (ASSERT)
                    (("1" (EXPAND "abs" 1 1)
                      (("1"
                        (CASE "NOT (1 +
                   IF abs(x) <= eps THEN 0
                   ELSE min((x - eps) ^ 2, (eps + x) ^ 2)
                   ENDIF)>= 1")
                        (("1" (HIDE 2)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (LEMMA "abs_sq")
                                  (("2" (INST-CP -1 "x-eps")
                                    (("2" (INST -1 "x+eps")
                                      (("2" (EXPAND "^")
                                        (("2" (EXPAND "expt")
                                          (("2" (EXPAND "expt")
                                            (("2" (EXPAND "expt")
                                              (("2" (EXPAND "sq" -1 2)
                                                (("2" (EXPAND "sq" -2 2)
                                                  (("2" (REPLACES -1 :DIR RL)
                                                    (("2" (REPLACES -1 :DIR RL)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (CROSS-MULT 1)
                          (("2" (ASSERT)
                            (("2" (LIFT-IF 1)
                              (("2" (ASSERT)
                                (("2" (SPLIT 1)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT 2)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (SKEEP)
                    (("2" (REPLACES -5 :DIR RL)
                      (("2" (EXPAND "deriv" -2)
                        (("2" (DECOMPOSE-EQUALITY -2)
                          (("1" (INST -1 "c")
                            (("1" (REPLACES -1)
                              (("1" (CASE "NOT abs(1/(1+c*c)) = 1/(1+c*c)")
                                (("1" (HIDE 3)
                                  (("1" (EXPAND "abs")
                                    (("1" (LIFT-IF 1)
                                      (("1" (SPLIT 1)
                                        (("1" (FLATTEN)
                                          (("1" (LEMMA "abs_sq")
                                            (("1" (INST -1 "c")
                                              (("1" (EXPAND "sq")
                                                (("1" (REPLACES -1 :DIR RL)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACES -1)
                                  (("2"
                                    (CASE
                                        "NOT 1/(1+c*c)*abs(ep)<= eps/(1+c*c)")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE
                                            "NOT  eps / (1 + c * c) =  1 / (1 + c * c)*eps")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (REPLACES -1)
                                          (("2" (CANCEL-BY 1 "1 / (1 + c * c)")
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (CASE "eps / (1 + c * c) <= eps /
                       (1 +
                         IF abs(x) <= eps THEN 0
                         ELSE min((x - eps) ^ 2, (eps + x) ^ 2)
                         ENDIF)")
                                      (("1" (ASSERT)
                                        (("1"
                                          (CASE
                                              "FORALL (j,k,l:real): j<=k and k<=l IMPLIES j<=l")
                                          (("1"
                                            (INST -1
                                             "1 / (1 + c * c) * abs(ep)"
                                             "eps / (1 + c * c) " "       eps /
                      (1 +
                        IF abs(x) <= eps THEN 0
                        ELSE min((x - eps) ^ 2, (eps + x) ^ 2)
                        ENDIF)")
                                            (("1" (ASSERT)
                                              (("1" (GROUND) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE 3)
                                        (("2" (CANCEL-BY 1 "eps")
                                          (("2" (LIFT-IF 2)
                                            (("2" (SPLIT 2)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1" (CROSS-MULT 1) NIL
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2"
                                                  (CASE
                                                      "c*c>= min((x - eps) ^ 2, (eps + x) ^ 2)")
                                                  (("1" (CROSS-MULT 2)
                                                    (("1" (SPLIT 2)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (LEMMA "abs_sq")
                                                        (("2"
                                                          (TYPEPRED
                                                           "sq(x-eps)")
                                                          (("2"
                                                            (TYPEPRED
                                                             "sq(x+eps)")
                                                            (("2"
                                                              (HIDE-ALL-BUT
                                                               (-1 -2 1))
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE (3 4 5))
                                                    (("2" (FLIP-INEQ 2)
                                                      (("2"
                                                        (NAME "m"
                                                              "min(x, ep+x)")
                                                        (("2" (REPLACES -1)
                                                          (("2"
                                                            (NAME "M"
                                                                  "max(x, ep+x)")
                                                            (("2" (REPLACES -1)
                                                              (("2"
                                                                (EXPAND "abs"
                                                                        -1)
                                                                (("2"
                                                                  (LIFT-IF -1)
                                                                  (("2"
                                                                    (SPLIT -1)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (CASE
                                                                            "not min((x - eps) ^ 2, (eps + x) ^ 2) = (eps + x) ^ 2")
                                                                        (("1"
                                                                          (HIDE
                                                                           2)
                                                                          (("1"
                                                                            (MOVE-TERMS
                                                                             -2
                                                                             R
                                                                             1)
                                                                            (("1"
                                                                              (CASE
                                                                                  "NOT -(x-eps) >= -x-eps")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (MULT-INEQ
                                                                                 -1
                                                                                 -1)
                                                                                (("2"
                                                                                  (CASE
                                                                                      "NOT -(x - eps) * -(x - eps) = (x-eps)^2")
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     1)
                                                                                    (("1"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REPLACES
                                                                                     -1)
                                                                                    (("2"
                                                                                      (CASE
                                                                                          "NOT (-x - eps) * (-x - eps) = (x+eps)^2")
                                                                                      (("1"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("1"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REPLACES
                                                                                         -1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "min")
                                                                                          (("2"
                                                                                            (GROUND)
                                                                                            (("2"
                                                                                              (LIFT-IF
                                                                                               1)
                                                                                              (("2"
                                                                                                (SPLIT
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("2"
                                                                            (CASE
                                                                                "NOT M<=x+eps")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "M")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "max"
                                                                                 1)
                                                                                (("1"
                                                                                  (LIFT-IF
                                                                                   1)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     1)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (MOVE-TERMS
                                                                               -1
                                                                               L
                                                                               1)
                                                                              (("2"
                                                                                (MOVE-TERMS
                                                                                 -1
                                                                                 R
                                                                                 1)
                                                                                (("2"
                                                                                  (MOVE-TERMS
                                                                                   -1
                                                                                   R
                                                                                   1)
                                                                                  (("2"
                                                                                    (MOVE-TERMS
                                                                                     -3
                                                                                     R
                                                                                     1)
                                                                                    (("2"
                                                                                      (MOVE-TERMS
                                                                                       -8
                                                                                       R
                                                                                       1)
                                                                                      (("2"
                                                                                        (MOVE-TERMS
                                                                                         -8
                                                                                         L
                                                                                         1)
                                                                                        (("2"
                                                                                          (SIMPLIFY)
                                                                                          (("2"
                                                                                            (CASE
                                                                                                "NOT -c > -(x+eps)")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (MULT-INEQ
                                                                                               -1
                                                                                               -1)
                                                                                              (("2"
                                                                                                (CASE
                                                                                                    "NOT -(x + eps) * -(x + eps) = (eps+x)^2")
                                                                                                (("1"
                                                                                                  (HIDE-ALL-BUT
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (MOVE-TERMS
                                                                         -1 R
                                                                         1)
                                                                        (("2"
                                                                          (FLIP-INEQ
                                                                           1)
                                                                          (("2"
                                                                            (CASE
                                                                                "not x+eps>=x-eps")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (MULT-INEQ
                                                                               -1
                                                                               -1)
                                                                              (("2"
                                                                                (CASE
                                                                                    "not min((x - eps) ^ 2, (eps + x) ^ 2) = (x-eps)^2")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "min"
                                                                                   1)
                                                                                  (("1"
                                                                                    (LIFT-IF
                                                                                     1)
                                                                                    (("1"
                                                                                      (SPLIT
                                                                                       1)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "^")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "expt")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "expt")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "expt")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("2"
                                                                                    (CASE
                                                                                        "not m>= x-eps")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "m")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "min"
                                                                                           1)
                                                                                          (("1"
                                                                                            (LIFT-IF
                                                                                             1)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               1)
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (CASE
                                                                                          "not c>= x-eps")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (MULT-INEQ
                                                                                         -1
                                                                                         -1)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "^")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "expt")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "expt")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "expt")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "abs_sq")
                            (("2" (INST -1 "x1!1")
                              (("2" (EXPAND "sq") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (LEMMA "abs_sq")
                            (("3" (INST -1 "x1!1")
                              (("3" (EXPAND "sq") (("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (EXPAND "derivable?")
                            (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)
                           ("5" (EXPAND "derivable?")
                            (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|mean_value_abs| FORMULA-DECL NIL |derivative_props| |analysis|)
    (|deriv_atan_fun| FORMULA-DECL NIL |atan| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|deriv| CONST-DECL "real" |derivatives_def| |analysis|)
    (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) NIL
    (|zero_times1| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|div_distributes| FORMULA-DECL NIL |real_props| NIL)
    (|div_simp| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) NIL
    (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) NIL
    (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) NIL
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|div_cancel1| FORMULA-DECL NIL |real_props| NIL)
    (|div_div1| FORMULA-DECL NIL |real_props| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|div_times| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|derivable?| CONST-DECL "bool" |derivatives| |analysis|)
    (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|div_mult_pos_neg_le2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|abs_sq| FORMULA-DECL NIL |abs_lems| |reals|)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|generic_bounding| 0
  (|generic_bounding-1| |nil| 3696690818
   ("" (SKEEP)
    (("" (LEMMA "abs_abs")
      (("" (INST -1 "F(x+ep)")
        (("" (REPLACES -1 :DIR RL)
          (("" (CASE "abs(F(x + ep)) = abs(F(x + ep))-abs(F(x)) +abs(F(x))")
            (("1" (REPLACES -1)
              (("1" (LEMMA "real_props.triangle")
                (("1" (INST -1 "abs(F(x + ep)) - abs(F(x))" "abs(F(x))")
                  (("1"
                    (CASE "FORALL (a,b:real): abs(abs(a)-abs(b))<=abs(a-b)")
                    (("1" (INST -1 " F(x+ep)" "F(x)")
                      (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_abs| FORMULA-DECL NIL |real_props| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|sin_ulp_bounded| 0
  (|sin_ulp_bounded-1| |nil| 3696693998
   ("" (SKEEP)
    (("" (LEMMA "sin_error_eps")
      (("" (LEMMA "generic_bounding")
        ((""
          (INST -1 "sin" "x" "ep" "eps" "LAMBDA (z:real, e:nnreal): min(2, e)")
          (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|sin_error_eps| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|generic_bounding| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|))
   SHOSTAK))
 (|cos_ulp_bounded| 0
  (|cos_ulp_bounded-1| |nil| 3696694356
   ("" (SKEEP)
    (("" (LEMMA "cos_error_eps")
      (("" (LEMMA "generic_bounding")
        ((""
          (INST -1 "cos" "x" "ep" "eps" "LAMBDA (z:real, e:nnreal): min(2, e)")
          (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|cos_error_eps| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_real_min| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z <= x AND z <= y}" |real_defs| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|generic_bounding| FORMULA-DECL NIL |trig_fp_bounds| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|))
   SHOSTAK))
 (|atan_ulp_bounded| 0
  (|atan_ulp_bounded-3| |nil| 3699628352
   ("" (SKEEP)
    (("" (CASE "NOT abs(x+h) <= abs(x) + eps")
      (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (CASE "NOT abs(atan(x+h)) = atan(abs(x+h))")
        (("1" (HIDE 2)
          (("1" (EXPAND "abs" 1 2)
            (("1" (LIFT-IF 1)
              (("1" (SPLIT 1)
                (("1" (LEMMA "atan_neg")
                  (("1" (INST?)
                    (("1" (LEMMA "abs_neg")
                      (("1" (INST -1 "atan(h+x)")
                        (("1" (REPLACE -2 -1 :DIR RL)
                          (("1" (REPLACE -2 -1)
                            (("1" (REPLACE -1 :DIR RL)
                              (("1" (REPLACE -2 -1 :DIR RL)
                                (("1" (REPLACE -2 1 :DIR RL)
                                  (("1" (FLATTEN)
                                    (("1" (CASE "not atan(-(h + x)) >=0")
                                      (("1" (LEMMA "atan_0")
                                        (("1" (LEMMA "atan_strict_increasing")
                                          (("1" (EXPAND "strict_increasing?")
                                            (("1" (INST -1 "0" "-(h+x)")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "abs " 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (FLIP-INEQ 1)
                    (("2" (CASE "h+x=0")
                      (("1" (REPLACES -1)
                        (("1" (LEMMA "atan_0")
                          (("1" (ASSERT)
                            (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (LEMMA "atan_0")
                          (("2" (LEMMA "atan_strict_increasing")
                            (("2" (EXPAND "strict_increasing?")
                              (("2" (INST -1 "0" "h+x")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (REPLACES -1)
            (("2" (CASE "abs(h + x) = abs(x) + eps")
              (("1" (ASSERT) NIL NIL)
               ("2" (LEMMA "atan_strict_increasing")
                (("2" (EXPAND "strict_increasing?")
                  (("2" (INST -1 "abs(h + x) " " abs(x) + eps")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|atan_neg| FORMULA-DECL NIL |atan| |trig|)
    (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL))
   NIL)
  (|atan_ulp_bounded-2| |nil| 3696756247
   ("" (SKEEP)
    (("" (LEMMA "generic_bounding")
      (("" (LEMMA "atan_error_eps")
        (("" (INST?)
          (("" (INST?)
            ((""
              (INST -2 "atan" "x" "ep" "eps"
               "LAMBDA(z:real, e: nnreal): e/(1+ IF abs(z)<=e THEN 0 ELSE min((z-e)^2, (z+e)^2) ENDIF)")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKEEP)
                  (("2" (LIFT-IF 1)
                    (("2" (SPLIT 1)
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (EXPAND "min")
                            (("2" (LIFT-IF 2)
                              (("2" (SPLIT 2)
                                (("1" (FLATTEN)
                                  (("1" (CASE "(e+z)^2 = sq(e+z)")
                                    (("1" (GROUND)
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (CASE "(z-e)^2 = sq(z-e)")
                                    (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE-ALL-BUT 1)
                (("3" (SKEEP)
                  (("3" (LIFT-IF -1)
                    (("3" (SPLIT -1)
                      (("1" (GROUND) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "min")
                          (("2" (LIFT-IF -1)
                            (("2" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (ASSERT)
                                  (("1" (CASE "(e+z)^2 = sq(e+z)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (CASE "(z-e)^2 = sq(z-e)")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|))
   NIL)
  (|atan_ulp_bounded-1| |nil| 3696755084
   ("" (SKEEP)
    (("" (LEMMA "generic_bounding")
      (("" (LEMMA "atan_bound")
        (("" (INST?)
          (("" (INST?)
            ((""
              (INST -2 "atan" "x" "ep" "eps"
               "LAMBDA(z:real, e: nnreal): e/(1+ IF abs(z)<=e THEN 0 ELSE min((z-e)^2, (z+e)^2) ENDIF)")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKEEP)
                  (("2" (LIFT-IF 1)
                    (("2" (SPLIT 1)
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (EXPAND "min")
                            (("2" (LIFT-IF 2)
                              (("2" (SPLIT 2)
                                (("1" (FLATTEN)
                                  (("1" (CASE "(e+z)^2 = sq(e+z)")
                                    (("1" (GROUND)
                                      (("1" (REPLACE -1)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (CASE "(z-e)^2 = sq(z-e)")
                                    (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE-ALL-BUT 1)
                (("3" (SKEEP)
                  (("3" (LIFT-IF -1)
                    (("3" (SPLIT -1)
                      (("1" (GROUND) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "min")
                          (("2" (LIFT-IF -1)
                            (("2" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (ASSERT)
                                  (("1" (CASE "(e+z)^2 = sq(e+z)")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (CASE "(z-e)^2 = sq(z-e)")
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|))
   SHOSTAK))
 (|div_ulp_TCC1| 0
  (|div_ulp_TCC1-1| |nil| 3793991558 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|div_ulp| SUBTYPE
    "((number_fields.+)(trig_fp_bounds.x2, trig_fp_bounds.h2))" "nznum")))
 (|div_ulp_TCC2| 0
  (|div_ulp_TCC2-1| |nil| 3793991558
   ("" (SKEEP :PREDS? T)
    (("" (EXPAND "abs" -8)
      (("" (LIFT-IF -8)
        (("" (SPLIT -8)
          (("1" (FLATTEN)
            (("1" (MOVE-TERMS -2 L 1)
              (("1" (MOVE-TERMS -2 L 1)
                (("1" (SIMPLIFY)
                  (("1" (CASE "x2+eps2 = 0")
                    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|div_ulp| SUBTYPE
    "((number_fields.-)(real_defs.abs(trig_fp_bounds.x2), trig_fp_bounds.eps2))"
    "nznum")))
 (|div_ulp| 0
  (|div_ulp-1| |nil| 3793991711
   ("" (SKEEP)
    (("" (LEMMA "abs_div")
      (("" (INST?)
        (("" (REPLACES -1)
          (("" (CASE "NOT  1 / abs((x2 + h2)) <= 1 / (abs(x2) - eps2)")
            (("1" (HIDE 2)
              (("1" (TYPEPRED "eps2")
                (("1" (CASE "not abs(x2)-eps2>0")
                  (("1" (HIDE 2)
                    (("1" (EXPAND "abs" 1)
                      (("1" (LIFT-IF 1)
                        (("1" (SPLIT 1)
                          (("1" (FLATTEN)
                            (("1" (FLIP-INEQ 1)
                              (("1" (ASSERT)
                                (("1" (SWAP-REL -3)
                                  (("1" (CASE "NOT x2-eps2<0")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (MOVE-TERMS -1 L 1)
                                      (("2" (MOVE-TERMS -1 L 1)
                                        (("2" (MOVE-TERMS -2 L 1)
                                          (("2" (MOVE-TERMS -2 L 1)
                                            (("2" (MULT-INEQ -1 -2)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (FLIP-INEQ 1)
                              (("2" (FLIP-INEQ 1)
                                (("2" (ASSERT)
                                  (("2" (CASE "not x2+eps2>=0")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (SWAP-REL -2)
                                      (("2" (MOVE-TERMS -2 R 1)
                                        (("2" (MOVE-TERMS -2 R 1)
                                          (("2" (MULT-INEQ -1 -2)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CROSS-MULT 1)
                    (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "NOT abs((x1 + h1)) <= (abs(x1) + eps1)")
              (("1" (HIDE 2) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)
               ("2" (CASE "0<=1 / abs((x2 + h2))")
                (("1" (MULT-INEQ -2 -3)
                  (("1" (ASSERT) NIL NIL)
                   ("2" (GROUND)
                    (("1" (REWRITE "abs_abs") (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (CASE "NOT 1 = abs(1)")
                      (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                       ("2" (REPLACE -1 -4)
                        (("2" (REPLACE -1 1)
                          (("2" (REWRITE "abs_div" :DIR RL)
                            (("2" (REWRITE "abs_div" :DIR RL)
                              (("2" (REWRITE "abs_abs")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) (("2" (CROSS-MULT 1) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_div| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|abs_abs| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) NIL
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL) NIL NIL
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL))
 (|sqrt_ulp_TCC1| 0
  (|sqrt_ulp_TCC1-1| |nil| 3793991558 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|sqrt_ulp| SUBTYPE "(number_fields.+)(trig_fp_bounds.x, trig_fp_bounds.h)"
    "nonneg_real")))
 (|sqrt_ulp| 0
  (|sqrt_ulp-1| |nil| 3793991738
   ("" (SKEEP)
    (("" (TYPEPRED "sqrt(x + h)")
      (("" (EXPAND "abs" 1)
        (("" (ASSERT)
          (("" (LEMMA "sqrt_le") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sqrt_le| FORMULA-DECL NIL |sqrt| |reals|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL))
   NIL))
 (|atan_ulp| 0
  (|atan_ulp-1| |nil| 3793991758
   ("" (SKEEP)
    (("" (CASE "NOT abs(x+h) <= abs(x) + eps")
      (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (CASE "NOT abs(atan(x+h)) = atan(abs(x+h))")
        (("1" (HIDE 2)
          (("1" (EXPAND "abs" 1 2)
            (("1" (LIFT-IF 1)
              (("1" (SPLIT 1)
                (("1" (LEMMA "atan_neg")
                  (("1" (INST?)
                    (("1" (LEMMA "abs_neg")
                      (("1" (INST -1 "atan(h+x)")
                        (("1" (REPLACE -2 -1 :DIR RL)
                          (("1" (REPLACE -2 -1)
                            (("1" (REPLACE -1 :DIR RL)
                              (("1" (REPLACE -2 -1 :DIR RL)
                                (("1" (REPLACE -2 1 :DIR RL)
                                  (("1" (FLATTEN)
                                    (("1" (CASE "not atan(-(h + x)) >=0")
                                      (("1" (LEMMA "atan_0")
                                        (("1" (LEMMA "atan_strict_increasing")
                                          (("1" (EXPAND "strict_increasing?")
                                            (("1" (INST -1 "0" "-(h+x)")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "abs " 1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (FLIP-INEQ 1)
                    (("2" (CASE "h+x=0")
                      (("1" (REPLACES -1)
                        (("1" (LEMMA "atan_0")
                          (("1" (ASSERT)
                            (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (LEMMA "atan_0")
                          (("2" (LEMMA "atan_strict_increasing")
                            (("2" (EXPAND "strict_increasing?")
                              (("2" (INST -1 "0" "h+x")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (REPLACES -1)
            (("2" (CASE "abs(h + x) = abs(x) + eps")
              (("1" (ASSERT) NIL NIL)
               ("2" (LEMMA "atan_strict_increasing")
                (("2" (EXPAND "strict_increasing?")
                  (("2" (INST -1 "abs(h + x) " " abs(x) + eps")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|atan_neg| FORMULA-DECL NIL |atan| |trig|)
    (|abs_neg| FORMULA-DECL NIL |abs_lems| |reals|)
    (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|)
    (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan|
     |trig|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL))
   NIL)))

