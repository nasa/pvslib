(accum_err_sin
 (sin_accum_err 0
  (sin_accum_err-1 nil 3682182651
   ("" (skeep)
    (("" (lemma "sin_error_eps")
      (("" (case "EXISTS(h:real| abs(h) <= e1): FtoR(f1) = r1 + h")
        (("1" (skeep -1)
          (("1" (inst -2 "r1" "h" "e1")
            (("1" (expand "sin_aerr_bound") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide -1)
          (("2" (inst 1 "FtoR(f1)-r1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sin_error_eps formula-decl nil trig_fp_bounds nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_aerr_bound const-decl "nonneg_real" accum_err_sin nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f1 skolem-const-decl "(Fbounded?(b))" accum_err_sin nil)
    (r1 skolem-const-decl "real" accum_err_sin nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_sin nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil))
 (Fsin_accum_err_bound 0
  (Fsin_accum_err_bound-1 nil 3682182717
   ("" (skeep)
    (("" (lemma "sin_ulp_bounded")
      (("" (case "EXISTS(h:real| abs(h) <= e1): FtoR(f1) = r1 + h")
        (("1" (skeep -1)
          (("1" (inst -2 "r1" "h" "e1")
            (("1" (expand "sin_ulp_bound") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide -1)
          (("2" (inst 1 "FtoR(f1)-r1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sin_ulp_bounded formula-decl nil trig_fp_bounds nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_ulp_bound const-decl "real" accum_err_sin nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f1 skolem-const-decl "(Fbounded?(b))" accum_err_sin nil)
    (r1 skolem-const-decl "real" accum_err_sin nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_sin nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   shostak))
 (sin_prf_TCC1 0
  (sin_prf_TCC1-2 nil 3699646525
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (skeep)
        (("" (use "round_even_closest") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((ulp_abs formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_sin nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_sin
           nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (RestrictedRounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (round_even_closest formula-decl nil accum_err_sin nil))
   nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)"))
  (sin_prf_TCC1-1 nil 3699613488 ("" (subtype-tcc) nil nil) nil nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)")))
 (sin_prf_TCC2 0
  (sin_prf_TCC2-2 nil 3699646539
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil)) nil))
    nil)
   ((round_rounded_mode formula-decl nil accum_err_sin nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_sin
           nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (rounded_mode? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_sin nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ulp_monotone formula-decl nil float nil))
   nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))"))
  (sin_prf_TCC2-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))")))
 (sin_prf_TCC3 0
  (sin_prf_TCC3-3 "" 3790103358
   ("" (skeep) (("" (use "sin_accum_err") (("" (assert) nil nil)) nil)) nil)
   ((sin_accum_err formula-decl nil accum_err_sin nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   shostak
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (sin_prf_TCC3-2 nil 3699646569
   ("" (skeep) (("" (use "sin_accum_err") (("" (assert) nil)))) nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil) (float type-eq-decl nil float nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (sin_prf_TCC3-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (sin_prf_TCC4 0
  (sin_prf_TCC4-2 nil 3699648575
   ("" (skeep)
    (("" (use "Fsin_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((Fsin_error_ulp formula-decl nil cr_sin nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_sin
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_sin nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (sin_prf_TCC4-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))")))
 (sin_prf_TCC5 0
  (sin_prf_TCC5-2 nil 3699648850
   ("" (skeep) (("" (use "Fsin_accum_err_bound") (("" (assert) nil nil)) nil))
    nil)
   ((Fsin_accum_err_bound formula-decl nil accum_err_sin nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (sin_prf_TCC5-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (sin_prf assuming
    "accum_err_op1sch[(float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), restrict[float[radix], (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b)), real].restrict(float[accum_err_sin.radix].FtoR), accum_err_sin.RtoF, float[accum_err_sin.radix].ulp(accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_sin.radix].Fbounded?(accum_err_sin.b))].restrict(cr_sin[accum_err_sin.radix, accum_err_sin.b, accum_err_sin.round, accum_err_sin.RtoF].Fsin), LAMBDA (r1): booleans.TRUE, sincos_def.sin, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_sin.sin_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (accum_err_bound 0
  (accum_err_bound-1 nil 3682180898
   ("" (skeep)
    (("" (use "sin_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)
         ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (propax) nil nil)
         ("7" (propax) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_sin nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_sin nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_sin
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_sin nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" float nil) (TRUE const-decl "bool" booleans nil)
    (sin const-decl "real" sincos_def trig)
    (Fsin const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(sin(FtoR(f1)), f2)}"
     cr_sin nil)
    (sin_aerr_bound const-decl "nonneg_real" accum_err_sin nil)
    (sin_ulp_bound const-decl "real" accum_err_sin nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig))
   shostak)))

