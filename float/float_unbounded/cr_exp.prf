(cr_exp
 (IMP_binop_em_scheme_TCC1 0
  (IMP_binop_em_scheme_TCC1-1 nil 3698317741 ("" (subtype-tcc) nil nil)
   ((exp_pre1 const-decl "bool" cr_exp nil)
    (/= const-decl "boolean" notequal nil)
    (integer? const-decl "bool" integers nil)
    (exp_pre2 const-decl "bool" cr_exp nil))
   nil
   (IMP_binop_em_scheme subtype "exponentiation.^"
    "[[x: (cr_exp.exp_pre1), (cr_exp.exp_pre2(x))] -> real]")))
 (Fexp_TCC1 0
  (Fexp_TCC1-1 nil 3668254167 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (exp_pre2 const-decl "bool" cr_exp nil) (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (b formal-const-decl "Format" cr_exp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (integer? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (radix formal-const-decl "above(1)" cr_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (Fexp subtype "float[cr_exp.radix].FtoR(cr_exp.f2)"
    "{i: integers.int | booleans.OR(float[cr_exp.radix].FtoR(cr_exp.f1) /= 0, reals.>=(i, 0))}")))
 (Fexp_TCC2 0
  (Fexp_TCC2-1 nil 3668254167 ("" (subtype-tcc) nil nil)
   ((radix formal-const-decl "above(1)" cr_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil) (exp_pre1 const-decl "bool" cr_exp nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil
   (Fexp subtype "cr_exp.f1"
    "{f1 | cr_exp.exp_pre1(float[cr_exp.radix].FtoR(f1))}")))
 (Fexp_bounded 0
  (Fexp_bounded-3 "" 3790103252
   ("" (skeep)
    (("" (expand "Fexp")
      (("" (assert) (("" (expand "Fg") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Fexp const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) ^ FtoR(f2), f3)}" cr_exp nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil))
   shostak)
  (Fexp_bounded-2 nil 3669720962
   ("" (skeep)
    ((""
      (lemma
       "Fg_bounded[radix,b,exp_pre1,exp_pre2,LAMBDA((x1|exp_pre1(x1)),(x2|exp_pre2(x1)(x2))):x1^x2]")
      (("1" (inst -1 "f1" "f2")
        (("1" (expand "Fexp")
          (("1" (assert) (("1" (expand "Fg") (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "exp_pre1") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep :preds? t)
          (("2" (expand "exp_pre2")
            (("2" (flatten)
              (("2" (assert)
                (("2" (ground)
                  (("1" (expand "integer?") (("1" (propax) nil nil)) nil)
                   ("2" (expand "integer?") (("2" (propax) nil nil)) nil)
                   ("3" (expand "integer?") (("3" (propax) nil nil)) nil)
                   ("4" (expand "integer?") (("4" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil))
   nil)
  (Fexp_bounded-1 nil 3669720930
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,exp_pre2,^]")
      (("1" (inst -1 "f1" "f2") (("1" (expand "Fexp") (("1" (propax) nil)))))
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (typepred "x2")
            (("2" (expand "exp_pre2") (("2" (assert) nil))))))))))))
    nil)
   nil nil))
 (Fexp_error_TCC1 0
  (Fexp_error_TCC1-1 nil 3669723413 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (exp_pre2 const-decl "bool" cr_exp nil) (float type-eq-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (integer? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (radix formal-const-decl "above(1)" cr_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil
   (Fexp_error subtype "float[cr_exp.radix].FtoR(cr_exp.f2)"
    "{i: integers.int | booleans.OR(float[cr_exp.radix].FtoR(cr_exp.f1) /= 0, reals.>=(i, 0))}")))
 (Fexp_error 0
  (Fexp_error-1 nil 3669723431
   ("" (skeep)
    (("" (use "Fg_error")
      (("1" (expand "Fexp") (("1" (propax) nil nil)) nil)
       ("2" (assert) (("2" (expand "exp_pre1") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Fexp const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) ^ FtoR(f2), f3)}" cr_exp nil)
    (Fulp_posreal_j application-judgement "posreal" cr_exp nil)
    (FtoR const-decl "real" float nil)
    (f1 skolem-const-decl "float[radix]" cr_exp nil)
    (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (exp_pre2 const-decl "bool" cr_exp nil)
    (exp_pre1 const-decl "bool" cr_exp nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_exp nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_exp nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_exp nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil binop_em_scheme nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

