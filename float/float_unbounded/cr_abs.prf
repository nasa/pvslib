(cr_abs
 (Fabs_bounded 0
  (Fabs_bounded-1 nil 3683490070
   ("" (skeep)
    (("" (expand "Fabs") (("" (expand "Fg") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((Fabs const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(abs(FtoR(f1)), f2)}"
     cr_abs nil)
    (Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil))
   shostak))
 (Fabs_exact 0
  (Fabs_exact-1 nil 3698583923
   ("" (skeep)
    (("" (expand "Fabs")
      (("" (expand "Fg")
        (("" (lemma "Closest_bounded_exact_rep")
          (("" (expand "exactly_representable")
            (("" (inst -1 "b" "round" "RtoF" "abs(FtoR(f1))")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (inst 1 "abs(Fnum(f1))" "Fexp(f1)")
                    (("1" (expand "FtoR")
                      (("1" (typepred "f1")
                        (("1" (expand "Fbounded?")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1" (split 1)
                                (("1" (use "abs_abs") (("1" (assert) nil nil))
                                  nil)
                                 ("2" (use "abs_mult")
                                  (("2" (replace -1 :hide? t)
                                    (("2"
                                      (case
                                       "abs(radix ^ (Fexp(f1))) = abs(radix) ^ Fexp(f1)")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (typepred "radix")
                                          (("1"
                                            (expand "abs" 1 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "radix")
                                        (("3"
                                          (expand "abs" 1 1)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "RtoF")
                (("2" (typepred "round")
                  (("2" (skeep)
                    (("2" (inst? - :where 1)
                      (("2" (inst? - :where 1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fabs const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(abs(FtoR(f1)), f2)}"
     cr_abs nil)
    (radix formal-const-decl "above(1)" cr_abs nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Closest_bounded_exact_rep formula-decl nil float nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs_mult formula-decl nil real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs_abs formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (FtoR const-decl "real" float nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fbounded? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (b formal-const-decl "Format" cr_abs nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_abs nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_abs nil)
    (exactly_representable const-decl "bool" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil))
   shostak)))

