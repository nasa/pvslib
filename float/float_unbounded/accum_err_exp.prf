(accum_err_exp
 (exp_aerr_bound_TCC1 0
  (exp_aerr_bound_TCC1-1 nil 3709654139
   ("" (skeep)
    (("" (expand ">=" :assert? none)
      (("" (lemma "le_times_le_pos")
        (("" (inst -1 "0" "0" "(exp(e1) - 1)" "exp(r1)")
          (("" (assert)
            (("" (hide 2)
              (("" (use "exp_increasing")
                (("" (expand "increasing?")
                  (("" (inst -1 "0" "e1") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (increasing? const-decl "bool" real_fun_preds reals)
    (exp_0 formula-decl nil ln_exp lnexp)
    (exp_increasing formula-decl nil ln_exp lnexp)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (le_times_le_pos formula-decl nil real_props nil))
   nil
   (exp_aerr_bound subtype
    "number_fields.*(((number_fields.-)(ln_exp.exp(accum_err_exp.e1), 1)), ln_exp.exp(accum_err_exp.r1))"
    "nonneg_real")))
 (exp_accum_err 0
  (exp_accum_err-1 nil 3708432562
   ("" (skeep)
    (("" (expand "exp_aerr_bound")
      (("" (case "r1<=FtoR(f1)")
        (("1" (case "abs(exp(FtoR(f1)) - exp(r1)) = exp(FtoR(f1)) - exp(r1)")
          (("1" (replace -1 :hide? t)
            (("1" (case "FtoR(f1)<= r1 + e1")
              (("1" (use "exp_increasing")
                (("1" (expand "increasing?")
                  (("1" (inst? -1 :where -2)
                    (("1" (assert)
                      (("1" (both-sides "-" "exp(r1)" -1)
                        (("1" (use "exp_sum") (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind-reals) nil nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (use "exp_increasing")
              (("2" (expand "increasing?")
                (("2" (inst? -1 :where -2)
                  (("2" (assert)
                    (("2" (expand "abs" 1) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "FtoR(f1)<= r1")
          (("1" (hide 1)
            (("1" (lemma "abs_diff_commute")
              (("1" (inst? -1 :where 1)
                (("1" (replace -1 :hide? t)
                  (("1"
                    (case "abs(exp(r1) - exp(FtoR(f1))) = exp(r1) - exp(FtoR(f1))")
                    (("1" (replace -1 :hide? t)
                      (("1"
                        (case "exp(r1) - exp(FtoR(f1)) <= exp(r1+e1) - exp(FtoR(f1)+e1)")
                        (("1"
                          (case "exp(r1 + e1) - exp(FtoR(f1) + e1) <= exp(r1 + e1) - exp(r1)")
                          (("1" (use "exp_sum")
                            (("1" (replace -1 :hide? t)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (case "r1<=FtoR(f1)+e1")
                              (("1" (use "exp_increasing")
                                (("1" (expand "increasing?")
                                  (("1" (inst? -1 :where -2)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (grind-reals) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2"
                            (case "exp(r1 + e1) - exp(FtoR(f1) + e1) = (exp(r1) - exp(FtoR(f1)))*exp(e1)")
                            (("1" (replace -1 :hide? t)
                              (("1" (case "1<=exp(e1)")
                                (("1" (lemma "le_times_le_pos")
                                  (("1"
                                    (inst -1 "1" "exp(r1) - exp(FtoR(f1))"
                                     "exp(r1) - exp(FtoR(f1))" "exp(e1)")
                                    (("1" (assert) nil nil)
                                     ("2" (use "exp_increasing")
                                      (("2"
                                        (expand "increasing?")
                                        (("2"
                                          (inst? -1 :where -3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (use "exp_increasing")
                                  (("2" (expand "increasing?")
                                    (("2" (inst -1 "0" "e1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (use "exp_sum")
                                (("2" (replace -1 :hide? t)
                                  (("2" (use "exp_sum")
                                    (("2" (replace -1 :hide? t)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (use "exp_increasing")
                        (("2" (expand "increasing?")
                          (("2" (inst? -1 :where -2)
                            (("2" (assert)
                              (("2" (expand "abs") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_aerr_bound const-decl "nonneg_real" accum_err_exp nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp_increasing formula-decl nil ln_exp lnexp)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp_sum formula-decl nil ln_exp lnexp)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp_0 formula-decl nil ln_exp lnexp)
    (le_times_le_pos formula-decl nil real_props nil)
    (r1 skolem-const-decl "real" accum_err_exp nil)
    (f1 skolem-const-decl "(Fbounded?(b))" accum_err_exp nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fexp_accum_err_bound 0
  (Fexp_accum_err_bound-1 nil 3709660413
   ("" (skeep)
    (("" (case "FtoR(f1)<= r1 + e1")
      (("1" (use "exp_increasing")
        (("1" (expand "increasing?")
          (("1" (inst? -1 :where -2)
            (("1" (assert)
              (("1" (expand "exp_ulp_bound")
                (("1" (expand "abs" 1) (("1" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind-reals) nil nil))
      nil))
    nil)
   ((exp_increasing formula-decl nil ln_exp lnexp)
    (exp_ulp_bound const-decl "real" accum_err_exp nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (float type-eq-decl nil float nil) (FtoR const-decl "real" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (exp_prf_TCC1 0
  (exp_prf_TCC1-2 nil 3709660585
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (skeep)
        (("" (use "round_even_closest") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((ulp_abs formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_exp nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_exp
           nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (RestrictedRounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (round_even_closest formula-decl nil accum_err_exp nil))
   nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)"))
  (exp_prf_TCC1-1 nil 3708432562 ("" (assuming-tcc) nil nil) nil nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)")))
 (exp_prf_TCC2 0
  (exp_prf_TCC2-2 nil 3709660919
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil)) nil))
    nil)
   ((round_rounded_mode formula-decl nil accum_err_exp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_exp
           nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (rounded_mode? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_exp nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ulp_monotone formula-decl nil float nil))
   nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))"))
  (exp_prf_TCC2-1 nil 3708432562 ("" (assuming-tcc) nil nil) nil nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))")))
 (exp_prf_TCC3 0
  (exp_prf_TCC3-2 nil 3709660966
   ("" (skeep) (("" (use "exp_accum_err") (("" (assert) nil nil)) nil)) nil)
   ((exp_accum_err formula-decl nil accum_err_exp nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (exp_prf_TCC3-1 nil 3708432562 ("" (assuming-tcc) nil nil) nil nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (exp_prf_TCC4 0
  (exp_prf_TCC4-3 nil 3709660994
   ("" (skeep)
    (("" (use "Fexp_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((Fexp_error_ulp formula-decl nil std_exp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_exp
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_exp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (exp_prf_TCC4-2 nil 3709660952
   ("" (skeep) (("" (use "exp_accum_err") (("" (assert) nil)))) nil) nil nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (exp_prf_TCC4-1 nil 3708432562 ("" (assuming-tcc) nil nil) nil nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))")))
 (exp_prf_TCC5 0
  (exp_prf_TCC5-2 nil 3709661022
   ("" (skeep) (("" (use "Fexp_accum_err_bound") (("" (assert) nil nil)) nil))
    nil)
   ((Fexp_accum_err_bound formula-decl nil accum_err_exp nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (exp_prf_TCC5-1 nil 3708432562 ("" (assuming-tcc) nil nil) nil nil
   (exp_prf assuming
    "accum_err_op1sch[(float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), restrict[float[radix], (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b)), real].restrict(float[accum_err_exp.radix].FtoR), accum_err_exp.RtoF, float[accum_err_exp.radix].ulp(accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_exp.radix].Fbounded?(accum_err_exp.b))].restrict(std_exp[accum_err_exp.radix, accum_err_exp.b, accum_err_exp.round, accum_err_exp.RtoF].Fexp), LAMBDA (r1): booleans.TRUE, ln_exp.exp, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_exp.exp_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (accum_err_bound 0
  (accum_err_bound-1 nil 3709660531
   ("" (skeep)
    (("" (use "exp_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)
         ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (propax) nil nil)
         ("7" (propax) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_exp nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_exp nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_exp
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_exp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" float nil) (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (Fexp const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(exp(FtoR(f1)), f2)}"
     std_exp nil)
    (exp_aerr_bound const-decl "nonneg_real" accum_err_exp nil)
    (exp_ulp_bound const-decl "real" accum_err_exp nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

