(cr_flr
 (Ffloor_bounded 0
  (Ffloor_bounded-1 nil 3669723971
   ("" (skeep)
    (("" (lemma "Fg_bounded")
      (("" (inst -1 "f1") (("" (expand "Ffloor") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_flr nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_flr nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_flr nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_flr nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(floor(FtoR(f1)), f2)}" cr_flr nil))
   shostak))
 (Ffloor_no_rounding_error 0
  (Ffloor_no_rounding_error-1 nil 3711124378
   ("" (skeep)
    (("" (expand "Ffloor")
      (("" (expand "Fg")
        (("" (use "floor_def")
          (("" (flatten)
            (("" (expand "FtoR" -1 2)
              (("" (case "Fexp(f1)>=0")
                (("1" (case "integer?(FtoR(f1))")
                  (("1" (lemma "floor_int")
                    (("1" (inst -1 "FtoR(f1)")
                      (("1" (replace -1 :hide? t)
                        (("1" (lemma "Closest_bounded_exact_rep")
                          (("1" (inst -1 "b" "round" "RtoF" "FtoR(f1)")
                            (("1" (split -1)
                              (("1" (expand "exactly_representable")
                                (("1" (propax) nil nil)) nil)
                               ("2" (inst 1 "Fnum(f1)" "Fexp(f1)")
                                (("2" (typepred "f1")
                                  (("2" (expand "Fbounded?")
                                    (("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "FtoR")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (typepred "RtoF")
                                (("2" (typepred "round")
                                  (("2" (skeep)
                                    (("2" (inst -1 "r" "RtoF(r)")
                                      (("2"
                                        (inst -2 "r")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "integer?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (expand "FtoR")
                      (("2" (use "nat_exp") (("2" (subtype-tcc) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "Closest_int_exact_rep")
                  (("2" (inst -1 "b" "round" "RtoF" "floor(FtoR(f1))")
                    (("1" (expand "exactly_representable")
                      (("1" (propax) nil nil)) nil)
                     ("2" (typepred "f1")
                      (("2" (expand "Fbounded?")
                        (("2" (flatten)
                          (("2" (expand "abs" -1)
                            (("2" (lift-if -1)
                              (("2" (split -1)
                                (("1" (flatten)
                                  (("1"
                                    (case "-Fnum(f1) * radix^Fexp(f1) < vNum(b)")
                                    (("1"
                                      (case "-floor(FtoR(f1))-1 <-FtoR(f1)")
                                      (("1"
                                        (case "-floor(FtoR(f1))-1 < vNum(b)")
                                        (("1"
                                          (expand "abs" 1)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (mult-by
                                                   -4
                                                   "radix^Fexp(f1)")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "FtoR" -1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (lemma "both_sides_times_pos_lt2")
                                      (("2"
                                        (inst
                                         -1
                                         "-Fnum(f1)"
                                         "radix ^ (Fexp(f1))"
                                         "radix^0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "both_sides_expt_gt1_lt")
                                            (("1"
                                              (inst -1 "radix" "Fexp(f1)" "0")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (expand "abs" 2)
                                    (("2" (lift-if 2)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case "FtoR(f1)>=0")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (use "LeFnumZERO")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (case
                                             "Fnum(f1) * radix ^Fexp(f1) <= Fnum(f1) * radix^0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "both_sides_times_pos_lt2")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "Fnum(f1)"
                                                   "radix ^ (Fexp(f1))"
                                                   "radix^0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "both_sides_expt_gt1_lt")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "radix"
                                                         "Fexp(f1)"
                                                         "0")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (typepred "RtoF")
                        (("3" (typepred "round")
                          (("3" (skeep)
                            (("3" (inst -1 "r" "RtoF(r)")
                              (("3" (inst -2 "r") (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ffloor const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(floor(FtoR(f1)), f2)}" cr_flr nil)
    (floor_def formula-decl nil floor_ceil nil)
    (b formal-const-decl "Format" cr_flr nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" cr_flr nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (>= const-decl "bool" reals nil) (integer? const-decl "bool" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exactly_representable const-decl "bool" float nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_flr nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_flr nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Closest_bounded_exact_rep formula-decl nil float nil)
    (integer nonempty-type-from-decl nil integers nil)
    (f1 skolem-const-decl "(Fbounded?(b))" cr_flr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (floor_int formula-decl nil floor_ceil nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_exp judgement-tcc nil exponentiation nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (LeFnumZERO formula-decl nil float nil) (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (vNum const-decl "posnat" float nil)
    (Closest_int_exact_rep formula-decl nil float nil)
    (Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil))
   shostak)))

