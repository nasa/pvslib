(aerr754sp_atn
 (IMP_accum_err_atn_TCC1 0
  (IMP_accum_err_atn_TCC1-1 nil 3699974714 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (IMP_accum_err_atn subtype "ieee754sp.ieee754radix" "integers.above(1)")))
 (IMP_accum_err_atn_TCC2 0
  (IMP_accum_err_atn_TCC2-1 nil 3699974714 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (FtoR const-decl "real" float nil) (Closest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_accum_err_atn assuming
    "accum_err_atn[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_atn"
    "round_even_closest: ASSUMPTION FORALL (x: reals.real, f: (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))): booleans.IMPLIES(accum_err_atn.round(x, f), float[accum_err_atn.radix].EvenClosest?(accum_err_atn.b)(x, f))")))
 (IMP_accum_err_atn_TCC3 0
  (IMP_accum_err_atn_TCC3-1 nil 3699974714
   ("" (use "sp_closest?_j") (("" (flatten) nil nil)) nil)
   ((sp_closest?_j judgement-tcc nil ieee754sp nil)) nil
   (IMP_accum_err_atn assuming
    "accum_err_atn[2, ieee754sp.single_precision_format, ieee754sp.sp_closest?, ieee754sp.RtoS].accum_err_atn"
    "round_rounded_mode: ASSUMPTION float[accum_err_atn.radix].rounded_mode?(accum_err_atn.b)(accum_err_atn.round)")))
 (Satan_aerr 0
  (Satan_aerr-1 nil 3699783314
   ("" (expand "aeboundsp_atn")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "StoR")
          (("" (expand "Satan" 1)
            (("" (expand "ulp_sp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Satan const-decl "{f: unb_single | closest_single?(atan(FtoR(f1)))(f)}"
     ieee754sp_atn nil)
    (accum_err_bound formula-decl nil accum_err_atn nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (aeboundsp_atn const-decl "nonneg_real" aerr754sp_atn nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil))
 (Satan_t_aerr 0
  (Satan_t_aerr-1 nil 3699974629
   ("" (expand "aeboundsp_atn_t")
    (("" (skeep)
      (("" (lemma "accum_err_bound_t")
        (("" (expand "StoR")
          (("" (expand "Satan" 1)
            (("" (expand "ulp_sp")
              (("" (inst?)
                (("" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (ulp_sp const-decl "nonneg_real" ieee754sp nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Satan const-decl "{f: unb_single | closest_single?(atan(FtoR(f1)))(f)}"
     ieee754sp_atn nil)
    (accum_err_bound_t formula-decl nil accum_err_atn nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}" ieee754sp nil)
    (aeboundsp_atn_t const-decl "nonneg_real" aerr754sp_atn nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil)))

