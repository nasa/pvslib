(cr_neg
 (Fneg_bounded 0
  (Fneg_bounded-1 nil 3683490070
   ("" (skeep)
    (("" (expand "Fneg")
      (("" (expand "Fg") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((Fneg const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(-(FtoR(f1)), f2)}" cr_neg nil)
    (Fg const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil))
   shostak))
 (Fneg_error 0
  (Fneg_error-1 nil 3683490124
   ("" (skeep)
    (("" (lemma "Fg_error")
      (("" (inst -1 "f1")
        (("" (expand "Fneg") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_neg nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_neg nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_neg nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_neg nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fneg const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(-(FtoR(f1)), f2)}" cr_neg nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fneg_error_ulp 0
  (Fneg_error_ulp-2 "" 3790103260
   ("" (skeep)
    (("" (use "closest_ulp")
      (("" (split)
        (("1" (propax) nil nil)
         ("2" (invoke (typepred "%1") (! 1 1))
          (("2" (use "FcanonicBounded") (("2" (assert) nil nil)) nil))
          nil)
         ("3" (invoke (typepred "%1") (! 1 2)) nil nil))
        nil))
      nil))
    nil)
   ((closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_neg nil)
    (Fneg const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(-(FtoR(f1)), f2)}" cr_neg nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_neg nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fneg_bounded formula-decl nil cr_neg nil)
    (FcanonicBounded formula-decl nil float nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (Fneg_error_ulp-1 nil 3683490206
   ("" (skeep)
    (("" (lemma "closest_ulp")
      ((""
        (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
         (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (invoke (typepred "%1") (! 1 1))
            (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (invoke (typepred "%1") (! 1 2))
            (("3" (expand "EvenClosest?") (("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closest_ulp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil))
   nil))
 (Fneg_exact 0
  (Fneg_exact-1 nil 3698583923
   ("" (skeep)
    (("" (expand "Fneg")
      (("" (expand "Fg")
        (("" (lemma "Closest_bounded_exact_rep")
          (("" (expand "exactly_representable")
            (("" (inst -1 "b" "round" "RtoF" "-FtoR(f1)")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (inst 1 "-Fnum(f1)" "Fexp(f1)")
                    (("1" (expand "FtoR")
                      (("1" (typepred "f1")
                        (("1" (expand "Fbounded?")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "abs" 1 1)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "RtoF")
                (("2" (typepred "round")
                  (("2" (skeep)
                    (("2" (inst? - :where 1)
                      (("2" (inst? - :where 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fneg const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(-(FtoR(f1)), f2)}" cr_neg nil)
    (radix formal-const-decl "above(1)" cr_neg nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Closest_bounded_exact_rep formula-decl nil float nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fbounded? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (b formal-const-decl "Format" cr_neg nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_neg nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_neg nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (exactly_representable const-decl "bool" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (Fg const-decl
     "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil))
   shostak)))

