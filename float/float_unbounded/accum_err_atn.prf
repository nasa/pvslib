(accum_err_atn
 (atn_accum_err 0
  (atn_accum_err-1 nil 3682182651
   ("" (skeep)
    (("" (lemma "atan_error_eps")
      (("" (case "EXISTS(h:real| abs(h) <= e1): FtoR(f1) = r1 + h")
        (("1" (skeep -1)
          (("1" (inst -2 "r1" "h" "e1")
            (("1" (expand "atn_aerr_bound")
              (("1" (assert)
                (("1" (invoke (case "%1 <= %2") (! -2 2) (! 1 2))
                  (("1" (assert)
                    (("1" (replace -2 :hide? t :dir rl)
                      (("1"
                        (name "bla" "e1 /
                  (1 +
                    IF abs(r1) <= e1 THEN 0
                    ELSE min((r1 - e1) ^ 2, (e1 + r1) ^ 2)
                    ENDIF)")
                        (("1" (replace -1 :hide? t) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2"
                      (case "(1 +
         IF abs(r1) <= e1 THEN 0
         ELSE min((r1 - e1) ^ 2, (e1 + r1) ^ 2)
         ENDIF) >= 1")
                      (("1" (label "div_ok" -1)
                        (("1" (hide "div_ok")
                          (("1" (lemma "both_sides_div_pos_le2")
                            (("1" (inst? -1)
                              (("1" (inst -1 "1")
                                (("1" (case "e1/1 = e1")
                                  (("1" (replace -1 :hide? t)
                                    (("1" (replace -1 :hide? t)
                                      (("1"
                                        (reveal "div_ok")
                                        (("1"
                                          (expand ">=")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (reveal "div_ok")
                                (("2" (split 1)
                                  (("1"
                                    (name-replace "bla" "
                  (1 +
                    IF abs(r1) <= e1 THEN 0
                    ELSE min((r1 - e1) ^ 2, (e1 + r1) ^ 2)
                    ENDIF)")
                                    (("1" (assert) nil nil)) nil)
                                   ("2"
                                    (name-replace "bla" "
                  (1 +
                    IF abs(r1) <= e1 THEN 0
                    ELSE min((r1 - e1) ^ 2, (e1 + r1) ^ 2)
                    ENDIF)")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (assert) nil nil)) nil)
                             ("2" (flatten)
                              (("2"
                                (case "min((r1 - e1) ^ 2, (e1 + r1) ^ 2) >= 0")
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "min")
                                    (("2" (lift-if 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (use "expt_x2")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use "pos_times_ge")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1)
                                            (("2"
                                              (use "expt_x2")
                                              (("2"
                                                (replace -1 :hide? t)
                                                (("2"
                                                  (use "pos_times_ge")
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst 1 "FtoR(f1)-r1") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((atan_error_eps formula-decl nil trig_fp_bounds nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (pos_times_ge formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r1 skolem-const-decl "real" accum_err_atn nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_atn nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (atn_aerr_bound const-decl "nonneg_real" accum_err_atn nil)
    (f1 skolem-const-decl "(Fbounded?(b))" accum_err_atn nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil))
 (Fatn_accum_err_bound 0
  (Fatn_accum_err_bound-1 nil 3682182717
   ("" (skeep)
    (("" (lemma "atan_ulp_bounded")
      (("" (case "EXISTS(h:real| abs(h) <= e1): FtoR(f1) = r1 + h")
        (("1" (skeep -1)
          (("1" (inst -2 "r1" "h" "e1")
            (("1" (expand "atn_ulp_bound") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide -1)
          (("2" (inst 1 "FtoR(f1)-r1") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((atan_ulp_bounded formula-decl nil trig_fp_bounds nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atn_ulp_bound const-decl "real" accum_err_atn nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f1 skolem-const-decl "(Fbounded?(b))" accum_err_atn nil)
    (r1 skolem-const-decl "real" accum_err_atn nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_atn nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   shostak))
 (atn_prf_TCC1 0
  (atn_prf_TCC1-3 nil 3699781055
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (skeep)
        (("" (use "round_even_closest") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((ulp_abs formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_atn nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_atn
           nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (RestrictedRounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (round_even_closest formula-decl nil accum_err_atn nil))
   nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)"))
  (atn_prf_TCC1-2 nil 3699646525
   ("" (skeep)
    (("" (use "ulp_abs")
      (("" (skeep)
        (("" (use "round_even_closest") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((ulp_abs formula-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (RestrictedRounding type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil))
   nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)"))
  (atn_prf_TCC1-1 nil 3699613488 ("" (subtype-tcc) nil nil) nil nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "ulp_abs: ASSUMPTION accum_err_op1sch.ulp(real_defs.abs(accum_err_op1sch.r1)) = accum_err_op1sch.ulp(accum_err_op1sch.r1)")))
 (atn_prf_TCC2 0
  (atn_prf_TCC2-2 nil 3699646539
   ("" (skeep)
    (("" (use "ulp_monotone")
      (("1" (assert) nil nil) ("2" (use "round_rounded_mode") nil nil)) nil))
    nil)
   ((round_rounded_mode formula-decl nil accum_err_atn nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_atn
           nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (rounded_mode? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_atn nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ulp_monotone formula-decl nil float nil))
   nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))"))
  (atn_prf_TCC2-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, accum_err_op1sch.r1), reals.<=(accum_err_op1sch.r1, accum_err_op1sch.r2)), reals.<=(accum_err_op1sch.ulp(accum_err_op1sch.r1), accum_err_op1sch.ulp(accum_err_op1sch.r2)))")))
 (atn_prf_TCC3 0
  (atn_prf_TCC3-3 "" 3790103410
   ("" (skeep) (("" (use "atn_accum_err") (("" (assert) nil nil)) nil)) nil)
   ((atn_accum_err formula-decl nil accum_err_atn nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   shostak
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (atn_prf_TCC3-2 nil 3699646569
   ("" (skeep) (("" (use "atn_accum_err") (("" (assert) nil)))) nil)
   ((Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil) (float type-eq-decl nil float nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (atn_prf_TCC3-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (atn_prf_TCC4 0
  (atn_prf_TCC4-2 nil 3699648575
   ("" (skeep)
    (("" (use "Fatn_error_ulp")
      (("" (typepred "round")
        (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((Fatn_error_ulp formula-decl nil std_atn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (float type-eq-decl nil float nil) (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_atn
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_atn nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))"))
  (atn_prf_TCC4-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "fF_correctly_rounded: ASSUMPTION booleans.IMPLIES(booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fF_pre?(accum_err_op1sch.f1)), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.fF(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)))), number_fields./(accum_err_op1sch.ulp(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), 2)))")))
 (atn_prf_TCC5 0
  (atn_prf_TCC5-2 nil 3699648850
   ("" (skeep) (("" (use "Fatn_accum_err_bound") (("" (assert) nil nil)) nil))
    nil)
   ((Fatn_accum_err_bound formula-decl nil accum_err_atn nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))"))
  (atn_prf_TCC5-1 nil 3699613488 ("" (assuming-tcc) nil nil) nil nil
   (atn_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_aerr_bound, LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "f_ulp_bound: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.ulp_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1))), reals.<=(real_defs.abs(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1))), accum_err_op1sch.ulp_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (accum_err_bound 0
  (accum_err_bound-1 nil 3682180898
   ("" (skeep)
    (("" (use "atn_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil)
         ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (propax) nil nil)
         ("7" (propax) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_atn
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_atn nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" float nil) (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (Fatn const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(atan(FtoR(f1)), f2)}"
     std_atn nil)
    (atn_aerr_bound const-decl "nonneg_real" accum_err_atn nil)
    (atn_ulp_bound const-decl "real" accum_err_atn nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   shostak))
 (atn_t_aerr_bound_TCC1 0
  (atn_t_aerr_bound_TCC1-1 nil 3699972173 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (atn_t_aerr_bound subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(accum_err_atn.r1, accum_err_atn.e1)) /= 0, reals.>=(i, 0))}")))
 (atn_t_aerr_bound_TCC2 0
  (atn_t_aerr_bound_TCC2-1 nil 3699972173 ("" (subtype-tcc) nil nil) nil nil
   (atn_t_aerr_bound subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(accum_err_atn.e1, accum_err_atn.r1) = 0), reals.>=(i, 0))}")))
 (atn_t_aerr_bound_TCC3 0
  (atn_t_aerr_bound_TCC3-2 nil 3699973237
   ("" (skeep)
    (("" (expand "min")
      (("" (lift-if -1)
        (("" (split -1)
          (("1" (flatten)
            (("1" (case "(1 + (e1 + r1) ^ 2) > 0")
              (("1" (assert) nil nil)
               ("2" (lemma "posreal_plus_nnreal_is_posreal")
                (("2" (inst -1 "(e1 + r1) ^ 2" "1")
                  (("2" (hide-all-but 1)
                    (("2" (use "expt_x2")
                      (("2" (replace -1 :hide? t)
                        (("2" (use "pos_times_le")
                          (("2" (assert) (("2" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (case "(1 + (r1 - e1) ^ 2) > 0")
              (("1" (assert) nil nil)
               ("2" (lemma "posreal_plus_nnreal_is_posreal")
                (("2" (inst -1 "(e1 + r1) ^ 2" "1")
                  (("1" (hide-all-but 1)
                    (("1" (use "expt_x2")
                      (("1" (replace -1 :hide? t)
                        (("1" (use "pos_times_le")
                          (("1" (assert) (("1" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (use "expt_x2")
                      (("2" (replace -1 :hide? t)
                        (("2" (use "pos_times_le")
                          (("2" (assert) (("2" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil) (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_atn nil)
    (r1 skolem-const-decl "real" accum_err_atn nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (pos_times_le formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_plus_nnreal_is_posreal judgement-tcc nil real_types nil))
   nil
   (atn_t_aerr_bound subtype
    "((number_fields.+)(1, real_defs.min(exponentiation.^(((number_fields.-)(accum_err_atn.r1, accum_err_atn.e1)), 2), exponentiation.^(((number_fields.+)(accum_err_atn.r1, accum_err_atn.e1)), 2))))"
    "nznum"))
  (atn_t_aerr_bound_TCC3-1 nil 3699972173 ("" (subtype-tcc) nil nil) nil nil
   (atn_t_aerr_bound subtype
    "((number_fields.+)(1, real_defs.min(exponentiation.^(((number_fields.-)(accum_err_atn.r1, accum_err_atn.e1)), 2), exponentiation.^(((number_fields.+)(accum_err_atn.r1, accum_err_atn.e1)), 2))))"
    "nznum")))
 (atn_t_aerr_bound_TCC4 0
  (atn_t_aerr_bound_TCC4-2 nil 3699972810
   ("" (skeep)
    (("" (use "nnreal_div_posreal_is_nnreal")
      (("" (hide 2)
        (("" (case "1 + min((r1 - e1) ^ 2, (e1 + r1) ^ 2) >= 0")
          (("1" (use "atn_t_aerr_bound_TCC3") (("1" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (use "nnreal_plus_nnreal_is_nnreal")
              (("2" (hide 2)
                (("2" (expand "min")
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (hide -1)
                          (("1" (use "expt_x2")
                            (("1" (replace -1 :hide? t)
                              (("1" (use "pos_times_ge")
                                (("1" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 1)
                          (("2" (use "expt_x2")
                            (("2" (replace -1 :hide? t)
                              (("2" (use "pos_times_ge")
                                (("2" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil)
    (r1 skolem-const-decl "real" accum_err_atn nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_atn nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (nnreal_plus_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (atn_t_aerr_bound_TCC3 subtype-tcc nil accum_err_atn nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil))
   nil
   (atn_t_aerr_bound subtype
    "number_fields./(accum_err_atn.e1, ((number_fields.+)(1, real_defs.min(exponentiation.^(((number_fields.-)(accum_err_atn.r1, accum_err_atn.e1)), 2), exponentiation.^(((number_fields.+)(accum_err_atn.r1, accum_err_atn.e1)), 2)))))"
    "nonneg_real"))
  (atn_t_aerr_bound_TCC4-1 nil 3699972173 ("" (subtype-tcc) nil nil) nil nil
   (atn_t_aerr_bound subtype
    "number_fields./(accum_err_atn.e1, ((number_fields.+)(1, real_defs.min(exponentiation.^(((number_fields.-)(accum_err_atn.r1, accum_err_atn.e1)), 2), exponentiation.^(((number_fields.+)(accum_err_atn.r1, accum_err_atn.e1)), 2)))))"
    "nonneg_real")))
 (atn_t_accum_err 0
  (atn_t_accum_err-1 nil 3699972182
   ("" (skeep)
    (("" (lemma "atan_error_eps")
      (("" (case "EXISTS(h:real| abs(h) <= e1): FtoR(f1) = r1 + h")
        (("1" (skeep -1)
          (("1" (inst -2 "r1" "h" "e1")
            (("1" (expand "atn_t_aerr_bound") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (inst 1 "FtoR(f1)-r1") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((atan_error_eps formula-decl nil trig_fp_bounds nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FtoR const-decl "real" float nil) (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atn_t_aerr_bound const-decl "nonneg_real" accum_err_atn nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_atn nil)
    (r1 skolem-const-decl "real" accum_err_atn nil)
    (f1 skolem-const-decl "(Fbounded?(b))" accum_err_atn nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   shostak))
 (atn_t_prf_TCC1 0
  (atn_t_prf_TCC1-1 nil 3699972676 ("" (use "atn_t_accum_err") nil nil)
   ((atn_t_accum_err formula-decl nil accum_err_atn nil)) nil
   (atn_t_prf assuming
    "accum_err_op1sch[(float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), restrict[float[radix], (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b)), real].restrict(float[accum_err_atn.radix].FtoR), accum_err_atn.RtoF, float[accum_err_atn.radix].ulp(accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF), LAMBDA (f1): booleans.TRUE, restrict[float[radix], (LAMBDA (f1): booleans.TRUE), (float[accum_err_atn.radix].Fbounded?(accum_err_atn.b))].restrict(std_atn[accum_err_atn.radix, accum_err_atn.b, accum_err_atn.round, accum_err_atn.RtoF].Fatn), LAMBDA (r1): booleans.TRUE, atan.atan, LAMBDA (r1, e1): reals.<(accum_err_atn.e1, real_defs.abs(accum_err_atn.r1)), LAMBDA (r1, (e1: nonneg_real | reals.<(accum_err_atn.e1, real_defs.abs(accum_err_atn.r1)))): accum_err_atn.atn_t_aerr_bound(accum_err_atn.r1, e1), LAMBDA (r1, e1): booleans.TRUE, accum_err_atn.atn_ulp_bound].accum_err_op1sch"
    "fR_err: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.F2R(accum_err_op1sch.f1), accum_err_op1sch.r1)), accum_err_op1sch.e1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.r1), booleans.AND(accum_err_op1sch.fR_pre?(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fun_bound_pre(accum_err_op1sch.r1, accum_err_op1sch.e1)))), reals.<=(real_defs.abs((number_fields.-)(accum_err_op1sch.fR(accum_err_op1sch.F2R(accum_err_op1sch.f1)), accum_err_op1sch.fR(accum_err_op1sch.r1))), accum_err_op1sch.fun_bound(accum_err_op1sch.r1, accum_err_op1sch.e1)))")))
 (accum_err_bound_t 0
  (accum_err_bound_t-1 nil 3699972707
   ("" (skeep)
    (("" (use "atn_t_prf.accumulated_error")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (propax) nil nil) ("3" (propax) nil nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_op1sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" accum_err_atn nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (b formal-const-decl "Format" accum_err_atn nil)
    (restrict const-decl "R" restrict nil) (FtoR const-decl "real" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)" accum_err_atn
           nil)
    (RNDF type-eq-decl nil float nil) (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
   exact_rep_conservation[radix](b, round)(RtoF)}" accum_err_atn nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" float nil) (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan trig)
    (Fatn const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(atan(FtoR(f1)), f2)}"
     std_atn nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (atn_t_aerr_bound const-decl "nonneg_real" accum_err_atn nil)
    (atn_ulp_bound const-decl "real" accum_err_atn nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil)))

