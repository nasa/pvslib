(accum_err_op2sch
 (accumulated_error 0
  (accumulated_error-2 "" 3790103281
   ("" (skeep)
    (("" (lemma "fR_err")
      (("" (inst? -1 :where -2)
        (("" (inst? -1 :where -3)
          (("" (split -1)
            (("1" (use "fF_correctly_rounded")
              (("1" (split -1)
                (("1" (lemma "ulp_abs")
                  (("1" (invoke (inst -1 "%1") (! -2 2 1 1))
                    (("1" (replace -1 :hide? t :dir rl)
                      (("1" (use "f_ulp_bound")
                        (("1" (split -1)
                          (("1" (lemma "ulp_monotone")
                            (("1" (inst? -1 :where -2)
                              (("1" (split -1)
                                (("1"
                                  (invoke (case "%1 <= %2/2") (! -3 1)
                                   (! -1 2))
                                  (("1" (lemma "abs_triang")
                                    (("1" (inst? -1 :where -2)
                                      (("1"
                                        (inst? -1 :where -6)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (invoke
                                             (name-replace "A__" "%1")
                                             (! 1 1))
                                            (("1"
                                              (invoke
                                               (name-replace "B__" "%1")
                                               (! 1 2))
                                              nil
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil) ("3" (propax) nil nil)
                           ("4" (propax) nil nil) ("5" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil)
             ("2" (propax) nil nil) ("3" (propax) nil nil)
             ("4" (propax) nil nil) ("5" (propax) nil nil)
             ("6" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fR_err formula-decl nil accum_err_op2sch nil)
    (ulp_abs formula-decl nil accum_err_op2sch nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (ulp_monotone formula-decl nil accum_err_op2sch nil)
    (abs_triang formula-decl nil abs_lems reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (e2 skolem-const-decl "nonneg_real" accum_err_op2sch nil)
    (r2 skolem-const-decl "real" accum_err_op2sch nil)
    (e1 skolem-const-decl "nonneg_real" accum_err_op2sch nil)
    (r1 skolem-const-decl "real" accum_err_op2sch nil)
    (fun_bound formal-const-decl "[r1: real, e1: nonneg_real, r2: real,
 {e2: nonneg_real | fun_bound_pre(r1, e1, r2, e2)} ->
   real]" accum_err_op2sch nil)
    (fun_bound_pre formal-const-decl
     "[real, nonneg_real, real, nonneg_real -> bool]" accum_err_op2sch nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ulp formal-const-decl "[real -> nonneg_real]" accum_err_op2sch nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (fF formal-const-decl "[f1: F, {f2: F | fF_pre?(f1, f2)} -> F]"
     accum_err_op2sch nil)
    (fF_pre? formal-const-decl "[F, F -> bool]" accum_err_op2sch nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (ulp_bound_pre formal-const-decl
     "[real, nonneg_real, real, nonneg_real -> bool]" accum_err_op2sch nil)
    (ulp_bound formal-const-decl "[r1: real, e1: nonneg_real, r2: real,
 {e2: nonneg_real | ulp_bound_pre(r1, e1, r2, e2)} ->
   real]" accum_err_op2sch nil)
    (f_ulp_bound formula-decl nil accum_err_op2sch nil)
    (F2R formal-const-decl "[F -> real]" accum_err_op2sch nil)
    (fR formal-const-decl "[r1: real, {r2: real | fR_pre?(r1, r2)} -> real]"
     accum_err_op2sch nil)
    (fR_pre? formal-const-decl "[real, real -> bool]" accum_err_op2sch nil)
    (fF_correctly_rounded formula-decl nil accum_err_op2sch nil)
    (F formal-type-decl nil accum_err_op2sch nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (accumulated_error-1 nil 3682015427
   ("" (skeep)
    (("" (lemma "fR_err")
      (("" (inst? -1 :where -2)
        (("" (inst? -1 :where -3)
          (("" (split -1)
            (("1" (use "fF_correctly_rounded")
              (("1" (split -1)
                (("1" (lemma "ulp_abs")
                  (("1" (invoke (inst -1 "%1") (! -2 2 1 1))
                    (("1" (replace -1 :hide? t :dir rl)
                      (("1" (use "f_ulp_bound")
                        (("1" (split -1)
                          (("1" (lemma "ulp_monotone")
                            (("1" (inst? -1 :where -2)
                              (("1" (split -1)
                                (("1"
                                  (invoke (case "%1 <= %2/2") (! -3 1)
                                   (! -1 2))
                                  (("1" (lemma "abs_triang")
                                    (("1" (inst? -1 :where -2)
                                      (("1"
                                        (inst? -1 :where -6)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (invoke
                                             (name-replace "A__" "%1")
                                             (! 1 1))
                                            (("1"
                                              (invoke
                                               (name-replace "B__" "%1")
                                               (! 1 2))
                                              nil
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil) ("3" (propax) nil nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil) ("3" (propax) nil nil))
                nil))
              nil)
             ("2" (propax) nil nil) ("3" (propax) nil nil)
             ("4" (propax) nil nil) ("5" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_triang formula-decl nil abs_lems reals)) shostak)))

