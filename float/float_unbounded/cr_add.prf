(cr_add
 (Fadd_bounded 0
  (Fadd_bounded-1 nil 3669717954
   ("" (skeep)
    (("" (lemma "Fg_bounded")
      (("" (inst -1 "f1" "f2")
        (("" (expand "Fadd") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoF formal-const-decl "CanonicRoundingFun(b, round)" cr_add nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" cr_add nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_add nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_add nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     cr_add nil))
   shostak))
 (Fadd_error 0
  (Fadd_error-2 "" 3790103233
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 2)) nil nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_add nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     cr_add nil)
    (FtoR const-decl "real" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_add nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Fadd_bounded formula-decl nil cr_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (Fadd_error-1 nil 3669723024
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (invoke (typepred "%1") (! 1 2))
            (("2" (expand "EvenClosest?") (("2" (flatten) nil nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil))
   nil))
 (Fadd_error_ulp 0
  (Fadd_error_ulp-1 nil 3681669557
   ("" (skeep)
    (("" (lemma "closest_ulp")
      (("" (inst -1 "b" "Fadd(f1, f2)" "FtoR(f1) + FtoR(f2)")
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (invoke (typepred "%1") (! 1 1))
            (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (invoke (typepred "%1") (! 1 2)) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((radix formal-const-decl "above(1)" cr_add nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (closest_ulp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (Fadd_bounded formula-decl nil cr_add nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     cr_add nil)
    (FtoR const-decl "real" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" cr_add nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

