(unop_em_scheme
 (Fg_TCC1 0
  (Fg_TCC1-1 nil 3668261446 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (s? formal-const-decl "[real -> bool]" unop_em_scheme nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (b formal-const-decl "Format" unop_em_scheme nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (radix formal-const-decl "above(1)" unop_em_scheme nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (Fg subtype "float[unop_em_scheme.radix].FtoR(unop_em_scheme.f1)"
    "(unop_em_scheme.s?)")))
 (Fg_TCC2 0
  (Fg_TCC2-1 nil 3668261446 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (s? formal-const-decl "[real -> bool]" unop_em_scheme nil)
    (float type-eq-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (radix formal-const-decl "above(1)" unop_em_scheme nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (FtoR const-decl "real" float nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil
   (Fg subtype "float[unop_em_scheme.radix].FtoR(unop_em_scheme.f1)"
    "(unop_em_scheme.s?)")))
 (Fg_TCC3 0
  (Fg_TCC3-1 nil 3668261446
   ("" (skeep)
    (("" (typepred "RtoF")
      (("" (typepred "round")
        (("" (inst?)
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((RtoF formal-const-decl "CanonicRoundingFun(b, round)" unop_em_scheme nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil) (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred(b)" unop_em_scheme nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (b formal-const-decl "Format" unop_em_scheme nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" unop_em_scheme nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (s? formal-const-decl "[real -> bool]" unop_em_scheme nil)
    (g formal-const-decl "[x: (s?) -> real]" unop_em_scheme nil)
    (FtoR const-decl "real" float nil))
   nil
   (Fg subtype
    "unop_em_scheme.RtoF(unop_em_scheme.g(float[unop_em_scheme.radix].FtoR(unop_em_scheme.f1)))"
    "{f2: (float[unop_em_scheme.radix].Fcanonic?(unop_em_scheme.b)) | float[unop_em_scheme.radix].Closest?(unop_em_scheme.b)(unop_em_scheme.g(float[unop_em_scheme.radix].FtoR(unop_em_scheme.f1)), f2)}")))
 (Fg_bounded 0
  (Fg_bounded-1 nil 3669723844
   ("" (skeep)
    (("" (typepred "Fg(f1)")
      (("" (expand "Fcanonic?")
        (("" (expand "Fsubnormal?")
          (("" (expand "Fnormal?") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (g formal-const-decl "[x: (s?) -> real]" unop_em_scheme nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (s? formal-const-decl "[real -> bool]" unop_em_scheme nil)
    (b formal-const-decl "Format" unop_em_scheme nil)
    (Fcanonic? const-decl "bool" float nil) (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (radix formal-const-decl "above(1)" unop_em_scheme nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil))
   shostak))
 (Fg_error 0
  (Fg_error-2 "" 3790103226
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2) (("2" (invoke (typepred "%1") (! 1 2)) nil nil)) nil)
         ("3" (hide 2) (("3" (use "Fg_bounded") nil nil)) nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" unop_em_scheme nil)
    (Fg const-decl "{f2: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (g formal-const-decl "[x: (s?) -> real]" unop_em_scheme nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (s? formal-const-decl "[real -> bool]" unop_em_scheme nil)
    (float type-eq-decl nil float nil)
    (b formal-const-decl "Format" unop_em_scheme nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (Fg_error-1 nil 3669723806
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (invoke (typepred "%1") (! 1 2))
            (("2" (expand "EvenClosest?") (("2" (flatten) nil nil)) nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (use "Fg_bounded") nil nil)) nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil) (Format type-eq-decl nil float nil))
   shostak)))

