(|bounding_circuits_defs| (|is_less_MM_list_TCC1| 0 (|is_less_MM_list_TCC1-1| |nil| 3654423363 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL)) NIL (|is_less_MM_list| SUBTYPE "bounding_circuits_defs.LM" "(list_adt[Measure_Matrix[N]].cons?)"))) (|is_less_MM_list_TCC2| 0 (|is_less_MM_list_TCC2-1| |nil| 3654423363 ("" (SKEEP) (("" (INST + "car(LM)") (("" (GROUND) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|is_less_MM_list| SUBTYPE "booleans.TRUE" "{b: booleans.bool | booleans.IMPLIES(b, EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, bounding_circuits_defs.LM), measures[bounding_circuits_defs.N].<=(MM, bounding_circuits_defs.M)))}"))) (|is_less_MM_list_TCC3| 0 (|is_less_MM_list_TCC3-1| |nil| 3654423363 ("" (TERMINATION-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL)) NIL (|is_less_MM_list| TERMINATION "bounding_circuits_defs.is_less_MM_list(bounding_circuits_defs.M, list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM))" "NIL"))) (|is_less_MM_list_TCC4| 0 (|is_less_MM_list_TCC4-1| |nil| 3654423363 ("" (SKEEP :PREDS? T) (("" (TYPEPRED "  v(M, cdr[Measure_Matrix[N]](LM))") (("" (GROUND) (("" (SKEEP -) (("" (INST + "MM") (("" (GROUND) (("" (EXPAND "member" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (<= CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|is_less_MM_list| SUBTYPE "bounding_circuits_defs.is_less_MM_list(bounding_circuits_defs.M, list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM))" "{b: booleans.bool | booleans.IMPLIES(b, EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, bounding_circuits_defs.LM), measures[bounding_circuits_defs.N].<=(MM, bounding_circuits_defs.M)))}"))) (|minimalize_iter_TCC1| 0 (|minimalize_iter_TCC1-2| "" 3885250988 ("" (SKEEP) (("" (GROUND) (("1" (SKEEP) (("1" (TYPEPRED "M") (("1" (HIDE (-1 -2)) (("1" (GROUND) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 1 "M") (("2" (GROUND) (("2" (EXPAND "<=") (("2" (GROUND) (("2" (EXPAND "le") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) NIL NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL)) SHOSTAK (|minimalize_iter| SUBTYPE "bounding_circuits_defs.ret" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | booleans.OR(list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM), list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.ret)))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), (booleans.OR(list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.ret), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))))}")) (|minimalize_iter_TCC1-1| |nil| 3654423363 ("" (SKEEP) (("" (GROUND) (("1" (SKEEP) (("1" (TYPEPRED (M)) (("1" (HIDE (-1 -2)) (("1" (GROUND) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 1 "M") (("2" (GROUND) (("2" (EXPAND "<=") (("2" (GROUND) (("2" (EXPAND "le") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) NIL NIL)) NIL)) NIL) NIL NIL (|minimalize_iter| SUBTYPE "bounding_circuits_defs.ret" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | booleans.OR(list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM), list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.ret)))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), (booleans.OR(list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.ret), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))))}"))) (|minimalize_iter_TCC2| 0 (|minimalize_iter_TCC2-1| |nil| 3654423363 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND " length" 2 2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|minimalize_iter| TERMINATION "bounding_circuits_defs.minimalize_iter(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM), bounding_circuits_defs.ret)" "NIL"))) (|minimalize_iter_TCC3| 0 (|minimalize_iter_TCC3-2| "" 3885251025 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("1" (TYPEPRED " v(cdr[Measure_Matrix[N]](LM), ret)") (("1" (SKEEP) (("1" (TYPEPRED "M") (("1" (HIDE (-1 -2 -4)) (("1" (SPLIT -1) (("1" (CASE "NOT member(M, cdr(LM))") (("1" (EXPAND "member" -1) (("1" (GROUND) (("1" (TYPEPRED "is_less_MM_list(fr, ret)") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -4 "MM") (("1" (SKEEP) (("1" (INST + "MM_1") (("1" (GROUND) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM_1" "MM" "fr") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "M") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -2 "M") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED " v(cdr[Measure_Matrix[N]](LM), ret)") (("2" (INST -3 "m") (("2" (GROUND) (("2" (EXPAND "member" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (M SKOLEM-CONST-DECL "{M: Measure_Matrix | member(M, LM) OR member(M, ret)}" |bounding_circuits_defs| NIL) (|is_less_MM_list| DEF-DECL "{b: bool |
   b IMPLIES EXISTS (MM: Measure_Matrix): member(MM, LM) AND MM <= M}" |bounding_circuits_defs| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|matrices_order| FORMULA-DECL NIL |measures| NIL) (MM SKOLEM-CONST-DECL "Measure_Matrix[N]" |bounding_circuits_defs| NIL) (LM SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|ret| SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|minimalize_iter| SUBTYPE "bounding_circuits_defs.minimalize_iter(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM), bounding_circuits_defs.ret)" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | booleans.OR(list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM), list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.ret)))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), (booleans.OR(list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.ret), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))))}")) (|minimalize_iter_TCC3-1| |nil| 3654423363 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("1" (TYPEPRED " v(cdr[Measure_Matrix[N]](LM), ret)") (("1" (SKEEP) (("1" (TYPEPRED (M)) (("1" (HIDE (-1 -2 -4)) (("1" (SPLIT -1) (("1" (CASE "NOT member(M, cdr(LM))") (("1" (EXPAND "member" -1) (("1" (GROUND) (("1" (TYPEPRED "is_less_MM_list(fr, ret)") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -4 "MM") (("1" (SKEEP) (("1" (INST + "MM_1") (("1" (GROUND) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM_1" "MM" "fr") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 "M") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -2 "M") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED " v(cdr[Measure_Matrix[N]](LM), ret)") (("2" (INST -3 "m") (("2" (GROUND) (("2" (EXPAND "member" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|minimalize_iter| SUBTYPE "bounding_circuits_defs.minimalize_iter(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM), bounding_circuits_defs.ret)" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | booleans.OR(list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM), list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.ret)))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), (booleans.OR(list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.ret), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))))}"))) (|minimalize_iter_TCC4| 0 (|minimalize_iter_TCC4-1| |nil| 3654423363 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "length" 3 2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|minimalize_iter| TERMINATION "bounding_circuits_defs.minimalize_iter(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM), list_adt[Measure_Matrix[N]].cons(bounding_circuits_defs.fr, bounding_circuits_defs.ret))" "NIL"))) (|minimalize_iter_TCC5| 0 (|minimalize_iter_TCC5-2| "" 3885251053 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("1" (TYPEPRED "v(cdr[Measure_Matrix[N]](LM),
                 cons[Measure_Matrix[N]](fr, ret))") (("1" (SKEEP) (("1" (TYPEPRED "M") (("1" (HIDE (-1 -2 -4)) (("1" (SPLIT -1) (("1" (CASE "NOT member(M, cdr(LM))") (("1" (EXPAND "member" -1) (("1" (GROUND) (("1" (INST -2 "fr") (("1" (GROUND) (("1" (SKEEP) (("1" (INST 2 "MM") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 " M") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -2 "M") (("2" (EXPAND "member" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "v(cdr[Measure_Matrix[N]](LM), cons[Measure_Matrix[N]](fr, ret))") (("2" (HIDE (-1 -2)) (("2" (INST?) (("2" (GROUND) (("1" (EXPAND "member" -1) (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (M SKOLEM-CONST-DECL "{M: Measure_Matrix | member(M, LM) OR member(M, ret)}" |bounding_circuits_defs| NIL) (LM SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|ret| SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|fr| SKOLEM-CONST-DECL "Measure_Matrix[N]" |bounding_circuits_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|minimalize_iter| SUBTYPE "bounding_circuits_defs.minimalize_iter(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM), list_adt[Measure_Matrix[N]].cons(bounding_circuits_defs.fr, bounding_circuits_defs.ret))" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | booleans.OR(list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM), list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.ret)))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), (booleans.OR(list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.ret), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))))}")) (|minimalize_iter_TCC5-1| |nil| 3654423363 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("1" (TYPEPRED "v(cdr[Measure_Matrix[N]](LM),
                 cons[Measure_Matrix[N]](fr, ret))") (("1" (SKEEP) (("1" (TYPEPRED (M)) (("1" (HIDE (-1 -2 -4)) (("1" (SPLIT -1) (("1" (CASE "NOT member(M, cdr(LM))") (("1" (EXPAND "member" -1) (("1" (GROUND) (("1" (INST -2 "fr") (("1" (GROUND) (("1" (SKEEP) (("1" (INST 2 "MM") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -3 " M") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -2 "M") (("2" (EXPAND "member" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1 2) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "v(cdr[Measure_Matrix[N]](LM), cons[Measure_Matrix[N]](fr, ret))") (("2" (HIDE (-1 -2)) (("2" (INST?) (("2" (GROUND) (("1" (EXPAND "member" -1) (("1" (EXPAND "member") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|minimalize_iter| SUBTYPE "bounding_circuits_defs.minimalize_iter(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.LM), list_adt[Measure_Matrix[N]].cons(bounding_circuits_defs.fr, bounding_circuits_defs.ret))" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | booleans.OR(list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM), list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.ret)))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), (booleans.OR(list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.ret), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))))}"))) (|minimalize_iter_TCC6| 0 (|minimalize_iter_TCC6-1| |nil| 3770219239 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL)) NIL (|minimalize_iter| SUBTYPE "bounding_circuits_defs.LM" "(list_adt[Measure_Matrix[N]].cons?)"))) (|minimalize_TCC1| 0 (|minimalize_TCC1-2| "" 3885251072 ("" (SKEEP) (("" (GROUND) (("1" (SKEEP) (("1" (TYPEPRED "M") (("1" (HIDE (-1 -2)) (("1" (TYPEPRED "minimalize_iter(LM, null[Measure_Matrix[N]])") (("1" (HIDE (-1 -3)) (("1" (INST -1 "M") (("1" (SKEEP) (("1" (TYPEPRED "minimalize_iter(minimalize_iter(LM, null[Measure_Matrix[N]]),
                                   null[Measure_Matrix[N]])") (("1" (HIDE (-1 -3)) (("1" (INST -1 "MM") (("1" (SKEEP) (("1" (INST 1 "MM_1") (("1" (GROUND) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM_1" "MM" "M") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "minimalize_iter(minimalize_iter(LM, null[Measure_Matrix[N]]),
                                   null[Measure_Matrix[N]])") (("2" (HIDE (-1 -2)) (("2" (INST -1 "m") (("2" (ASSERT) (("2" (EXPAND "member" -1 1) (("2" (HIDE -2) (("2" (TYPEPRED "minimalize_iter(LM, null[Measure_Matrix[N]])") (("2" (HIDE (-1 -2)) (("2" (INST - "m") (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minimalize_iter| DEF-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM) OR member(M, ret))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND
    (FORALL (m: Measure_Matrix):
       member(m, L) IMPLIES (member(m, ret) OR member(m, LM)))}" |bounding_circuits_defs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |measures| NIL) (LM SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (MM SKOLEM-CONST-DECL "Measure_Matrix[N]" |bounding_circuits_defs| NIL) (|matrices_order| FORMULA-DECL NIL |measures| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL)) SHOSTAK (|minimalize| SUBTYPE "bounding_circuits_defs.minimalize_iter(bounding_circuits_defs.minimalize_iter(bounding_circuits_defs.LM, list_adt[Measure_Matrix[N]].null), list_adt[Measure_Matrix[N]].null)" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))}")) (|minimalize_TCC1-1| |nil| 3654423541 ("" (SKEEP) (("" (GROUND) (("1" (SKEEP) (("1" (TYPEPRED (M)) (("1" (HIDE (-1 -2)) (("1" (TYPEPRED "minimalize_iter(LM, null[Measure_Matrix[N]])") (("1" (HIDE (-1 -3)) (("1" (INST -1 "M") (("1" (SKEEP) (("1" (TYPEPRED "minimalize_iter(minimalize_iter(LM, null[Measure_Matrix[N]]),
                                   null[Measure_Matrix[N]])") (("1" (HIDE (-1 -3)) (("1" (INST -1 "MM") (("1" (SKEEP) (("1" (INST 1 "MM_1") (("1" (GROUND) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM_1" "MM" "M") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "minimalize_iter(minimalize_iter(LM, null[Measure_Matrix[N]]),
                                   null[Measure_Matrix[N]])") (("2" (HIDE (-1 -2)) (("2" (INST -1 "m") (("2" (ASSERT) (("2" (EXPAND "member" -1 1) (("2" (HIDE -2) (("2" (TYPEPRED "minimalize_iter(LM, null[Measure_Matrix[N]])") (("2" (HIDE (-1 -2)) (("2" (INST - "m") (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|minimalize| SUBTYPE "bounding_circuits_defs.minimalize_iter(bounding_circuits_defs.minimalize_iter(bounding_circuits_defs.LM, list_adt[Measure_Matrix[N]].null), list_adt[Measure_Matrix[N]].null)" "{L: list_adt[Measure_Matrix[N]].list | booleans.AND(FORALL ((M: measures[bounding_circuits_defs.N].Measure_Matrix | list_props[Measure_Matrix[N]].member(M, bounding_circuits_defs.LM))): EXISTS (MM: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(MM, L), measures[bounding_circuits_defs.N].<=(MM, M)), FORALL (m: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(list_props[Measure_Matrix[N]].member(m, L), list_props[Measure_Matrix[N]].member(m, bounding_circuits_defs.LM)))}"))) (|list_prod_pre_TCC1| 0 (|list_prod_pre_TCC1-1| |nil| 3657884095 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "member") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL)) NIL (|list_prod_pre| SUBTYPE "list_adt[Measure_Matrix[N]].null" "{L: list_adt[Measure_Matrix[N]].list | FORALL (m1, m2: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(booleans.AND(list_props[Measure_Matrix[N]].member(m1, bounding_circuits_defs.l1), list_props[Measure_Matrix[N]].member(m2, bounding_circuits_defs.l2)), list_props[Measure_Matrix[N]].member(measures[bounding_circuits_defs.N].*(m1, m2), L))}"))) (|list_prod_pre_TCC2| 0 (|list_prod_pre_TCC2-1| |nil| 3657884095 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|list_prod_pre| TERMINATION "bounding_circuits_defs.list_prod_pre(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.l1), bounding_circuits_defs.l2)" "NIL"))) (|list_prod_pre_TCC3| 0 (|list_prod_pre_TCC3-1| |nil| 3657884095 ("" (SKEEP) (("" (SKEEP :PREDS? T) (("" (EXPAND "member" -5) (("" (LIFT-IF -5) (("" (GROUND) (("1" (LEMMA "member_append_l[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE 4) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST - "l2" "m2") (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "nth_member[Measure_Matrix]") (("1" (INST - "map[Measure_Matrix[N], Measure_Matrix[N]]
                 (LAMBDA (M: Measure_Matrix[N]):
                    *[N](car[Measure_Matrix[N]](l1), M))
                 (l2)" "m1*m2" "i") (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "map_nth_rw[Measure_Matrix, Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[Measure_Matrix, Measure_Matrix]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v(cdr[Measure_Matrix[N]](l1), l2)") (("2" (HIDE (-1 -4 -6)) (("2" (INST?) (("2" (LEMMA "member_append_r[Measure_Matrix]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|) (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|l2| SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|i| SKOLEM-CONST-DECL "below(length(l2))" |bounding_circuits_defs| NIL) (|l1| SKOLEM-CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|list_prod_pre| SUBTYPE "list_props[Measure_Matrix[N]].append(list_adt_map[Measure_Matrix[N], Measure_Matrix[N]].map(LAMBDA (M: measures[bounding_circuits_defs.N].Measure_Matrix): measures[bounding_circuits_defs.N].*(list_adt[Measure_Matrix[N]].car(bounding_circuits_defs.l1), M))(bounding_circuits_defs.l2), bounding_circuits_defs.list_prod_pre(list_adt[Measure_Matrix[N]].cdr(bounding_circuits_defs.l1), bounding_circuits_defs.l2))" "{L: list_adt[Measure_Matrix[N]].list | FORALL (m1, m2: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(booleans.AND(list_props[Measure_Matrix[N]].member(m1, bounding_circuits_defs.l1), list_props[Measure_Matrix[N]].member(m2, bounding_circuits_defs.l2)), list_props[Measure_Matrix[N]].member(measures[bounding_circuits_defs.N].*(m1, m2), L))}"))) (|list_prod_TCC1| 0 (|list_prod_TCC1-1| |nil| 3657884095 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED " list_prod_pre(l1, l2)") (("" (HIDE -1) (("" (INST?) (("" (ASSERT) (("" (TYPEPRED " minimalize(list_prod_pre(l1, l2))") (("" (HIDE -1) (("" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((<= CONST-DECL "bool" |measures| NIL) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|list_prod_pre| DEF-DECL "{L: list[Measure_Matrix[N]] |
   FORALL (m1, m2: Measure_Matrix):
     member(m1, l1) AND member(m2, l2) IMPLIES member(m1 * m2, L)}" |bounding_circuits_defs| NIL)) NIL (|list_prod| SUBTYPE "bounding_circuits_defs.minimalize(bounding_circuits_defs.list_prod_pre(bounding_circuits_defs.l1, bounding_circuits_defs.l2))" "{L: list_adt[Measure_Matrix[N]].list | FORALL (m1, m2: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.IMPLIES(booleans.AND(list_props[Measure_Matrix[N]].member(m1, bounding_circuits_defs.l1), list_props[Measure_Matrix[N]].member(m2, bounding_circuits_defs.l2)), EXISTS (M: measures[bounding_circuits_defs.N].Measure_Matrix): booleans.AND(list_props[Measure_Matrix[N]].member(M, L), measures[bounding_circuits_defs.N].<=(M, measures[bounding_circuits_defs.N].*(m1, m2))))}"))) (|decomp_weight_TCC1| 0 (|decomp_weight_TCC1-1| |nil| 3657446634 ("" (SKEEP) (("" (TYPEPRED "vc`v") (("" (EXPAND "vert?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|decomp_weight| SUBTYPE "bounding_circuits_defs.vc`v" "(c_digraphs_imp[bounding_circuits_defs.T].digraph_verts(dg(bounding_circuits_defs.G)))"))) (|decomp_weight_TCC2| 0 (|decomp_weight_TCC2-2| "" 3790335600 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|decomp_weight_TCC2-1| |nil| 3657446634 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|decomp_weight_TCC3| 0 (|decomp_weight_TCC3-2| "" 3790335600 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|decomp_weight_TCC3-1| |nil| 3657446634 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|decomp_weight_TCC4| 0 (|decomp_weight_TCC4-1| |nil| 3657446634 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) NIL (|decomp_weight| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|decomp_weight_TCC5| 0 (|decomp_weight_TCC5-2| "" 3790335601 ("" (ASSERT) NIL NIL) NIL SHOSTAK (|decomp_weight| SUBTYPE "0" "below[length[vert_circ[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]](dg(G))](cd)]")) (|decomp_weight_TCC5-1| |nil| 3657446634 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "0" "below[length[vert_circ[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]](dg(G))](cd)]"))) (|decomp_weight_TCC6| 0 (|decomp_weight_TCC6-4| |nil| 3661770964 ("" (ASSERT) (("" (SKEEP) (("" (TYPEPRED "nth
                 [vert_circ
                      [T, digraph_type[T], digraph_verts, digraph_edges,
                       digraph_size, digraph_make](dg(G))]
                 (cd, 0)`c") (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|)) NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC6-3| |nil| 3661770924 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC6-2| |nil| 3659963461 ("" (ASSERT) NIL NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC6-1| |nil| 3657446634 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ[T](dg(G))](cd, 0)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|decomp_weight_TCC7| 0 (|decomp_weight_TCC7-1| |nil| 3657446634 ("" (SUBTYPE-TCC) NIL NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|decomp_weight| SUBTYPE "0" "below[length[vert_circ[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]](dg(G))](cd)]"))) (|decomp_weight_TCC8| 0 (|decomp_weight_TCC8-3| |nil| 3661625596 ("" (ASSERT) (("" (SKEEP) (("" (TYPEPRED "nth
               [vert_circ
                    [T, digraph_type[T], digraph_verts, digraph_edges,
                     digraph_size, digraph_make](dg(G))]
               (cd, 0)`c") (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|)) NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC8-2| |nil| 3659963475 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ(dg(G))](cd, 1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC8-1| |nil| 3657446634 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ[T](dg(G))](cd, 1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`c" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|decomp_weight_TCC9| 0 (|decomp_weight_TCC9-4| "" 3790335605 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|decomp_weight_TCC9-3| |nil| 3661627129 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|decomp_weight_TCC9-2| |nil| 3659963520 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (NAME "ed" "gen_seq2
                      (dg(G), nth[vert_circ(dg(G))](cd, 0)`v,
                       nth[vert_circ(dg(G))](cd, 1)`v)") (("1" (REPLACE -1) (("1" (EXPAND "walk?" 2) (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "ed" -2) (("1" (EXPAND "gen_seq2" -2) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -6) (("1" (INST -6 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -6 1) (("1" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -6) (("1" (EXPAND "list2finseq" -6) (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -3 1 :DIR RL) (("1" (CASE "n=0") (("1" (REPLACES -1) (("1" (EXPAND "gen_seq2") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|decomp_weight_TCC9-1| |nil| 3657446634 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (NAME "ed" "gen_seq2[T]
               (dg(G), nth[vert_circ[T](dg(G))](cd, 0)`v,
                nth[vert_circ[T](dg(G))](cd, 1)`v)") (("1" (REPLACE -1) (("1" (EXPAND "walk?" 2) (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "ed" -2) (("1" (EXPAND "gen_seq2" -2) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -6) (("1" (INST -6 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -6 1) (("1" (REWRITE "map_length[vert_circ[T](dg(G)), vert[T](dg(G))]") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -6) (("1" (EXPAND "list2finseq" -6) (("1" (LEMMA "map_nth_rw[vert_circ[T](dg(G)), vert[T](dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ[T](dg(G)), vert[T](dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -3 1 :DIR RL) (("1" (CASE "n=0") (("1" (REPLACES -1) (("1" (EXPAND "gen_seq2") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|decomp_weight_TCC10| 0 (|decomp_weight_TCC10-2| "" 3790335605 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|decomp_weight_TCC10-1| |nil| 3657446634 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|decomp_weight| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|decomp_weight_TCC11| 0 (|decomp_weight_TCC11-1| |nil| 3657446634 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) NIL (|decomp_weight| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|decomp_weight_TCC12| 0 (|decomp_weight_TCC12-2| |nil| 3661771030 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ(dg(G))](cd, 0)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|)) NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`v" "(c_digraphs_imp[bounding_circuits_defs.T].digraph_verts(dg(bounding_circuits_defs.G)))")) (|decomp_weight_TCC12-1| |nil| 3657446634 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`v" "(c_digraphs_imp[bounding_circuits_defs.T].digraph_verts(dg(bounding_circuits_defs.G)))"))) (|decomp_weight_TCC13| 0 (|decomp_weight_TCC13-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|decomp_weight| SUBTYPE "1" "below[length[vert_circ[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]](dg(G))](cd)]"))) (|decomp_weight_TCC14| 0 (|decomp_weight_TCC14-3| |nil| 3661771059 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ(dg(G))](cd, 1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|)) NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 1)`v" "(c_digraphs_imp[bounding_circuits_defs.T].digraph_verts(dg(bounding_circuits_defs.G)))")) (|decomp_weight_TCC14-2| |nil| 3661626263 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ(dg(G))](cd, 0)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 1)`v" "(c_digraphs_imp[bounding_circuits_defs.T].digraph_verts(dg(bounding_circuits_defs.G)))")) (|decomp_weight_TCC14-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_weight| SUBTYPE "list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 1)`v" "(c_digraphs_imp[bounding_circuits_defs.T].digraph_verts(dg(bounding_circuits_defs.G)))"))) (|decomp_weight_TCC15| 0 (|decomp_weight_TCC15-3| "" 3885150010 ("" (SKEEP) (("" (TYPEPRED ("cd")) (("" (NAME "ed" "gen_seq2
                                           (dg(G), nth[vert_circ(dg(G))](cd, 0)`v,
                                            nth[vert_circ(dg(G))](cd, 1)`v)") (("1" (REPLACE -1) (("1" (EXPAND "walk?" 2) (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "ed" -2) (("1" (EXPAND "gen_seq2" -2) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -6) (("1" (INST -6 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -6 1) (("1" (WITH-TCCS (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]")) (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -6) (("1" (EXPAND "list2finseq" -6) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -3 1 :DIR RL) (("1" (CASE "n=0") (("1" (REPLACES -1) (("1" (EXPAND "gen_seq2") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ed| SKOLEM-CONST-DECL "Seq[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
    digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|decomp_weight| SUBTYPE "walks_[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make].gen_seq2(dg(bounding_circuits_defs.G), list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`v, list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 1)`v)" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC15-2| |nil| 3661771108 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (NAME "ed" "gen_seq2
                                           (dg(G), nth[vert_circ(dg(G))](cd, 0)`v,
                                            nth[vert_circ(dg(G))](cd, 1)`v)") (("1" (REPLACE -1) (("1" (EXPAND "walk?" 2) (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "ed" -2) (("1" (EXPAND "gen_seq2" -2) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -6) (("1" (INST -6 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -6 1) (("1" (WITH-TCCS (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]")) (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -6) (("1" (EXPAND "list2finseq" -6) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -3 1 :DIR RL) (("1" (CASE "n=0") (("1" (REPLACES -1) (("1" (EXPAND "gen_seq2") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "walks_[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make].gen_seq2(dg(bounding_circuits_defs.G), list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`v, list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 1)`v)" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC15-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_weight| SUBTYPE "walks_[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make].gen_seq2(dg(bounding_circuits_defs.G), list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 0)`v, list_props[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.cd, 1)`v)" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|decomp_weight_TCC16| 0 (|decomp_weight_TCC16-4| "" 3885150271 ("" (SKEEP) (("" (TYPEPRED ("cd")) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|decomp_weight| SUBTYPE "bounding_circuits_defs.cd" "(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cons?)")) (|decomp_weight_TCC16-3| |nil| 3661771236 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "bounding_circuits_defs.cd" "(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cons?)")) (|decomp_weight_TCC16-2| |nil| 3661626335 ("" (SKEEP) (("" (TYPEPRED " nth[vert_circ(dg(G))](cd, 1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "bounding_circuits_defs.cd" "(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cons?)")) (|decomp_weight_TCC16-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_weight| SUBTYPE "bounding_circuits_defs.cd" "(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cons?)"))) (|decomp_weight_TCC17| 0 (|decomp_weight_TCC17-3| |nil| 3661771287 ("" (LEMMA "cdr_decomp") (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|)) NIL (|decomp_weight| SUBTYPE "list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd)" "walk_decomp[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC17-2| |nil| 3661627348 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (NAME "ed" "gen_seq2
                             (dg(G), nth[vert_circ(dg(G))](cd, 0)`v,
                              nth[vert_circ(dg(G))](cd, 1)`v)") (("1" (REPLACE -1) (("1" (EXPAND "walk?" 2) (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "ed" -2) (("1" (EXPAND "gen_seq2" -2) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -6) (("1" (INST -6 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -6 1) (("1" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -6) (("1" (EXPAND "list2finseq" -6) (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -3 1 :DIR RL) (("1" (CASE "n=0") (("1" (REPLACES -1) (("1" (EXPAND "gen_seq2") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "gen_seq2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| SUBTYPE "list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd)" "walk_decomp[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))")) (|decomp_weight_TCC17-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_weight| SUBTYPE "list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd)" "walk_decomp[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))"))) (|decomp_weight_TCC18| 0 (|decomp_weight_TCC18-4| "" 3885150288 ("" (SKEEP) (("" (TYPEPRED ("cd")) (("" (EXPAND "length" 2 2) (("" (GROUND) (("" (EXPAND "length" -2) (("" (LIFT-IF 2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|decomp_weight| TERMINATION "bounding_circuits_defs.decomp_weight(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd))" "NIL")) (|decomp_weight_TCC18-3| |nil| 3661771487 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (EXPAND "length" 2 2) (("" (GROUND) (("" (EXPAND "length" -2) (("" (LIFT-IF 2) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| TERMINATION "bounding_circuits_defs.decomp_weight(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd))" "NIL")) (|decomp_weight_TCC18-2| |nil| 3661627390 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_weight| TERMINATION "bounding_circuits_defs.decomp_weight(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd))" "NIL")) (|decomp_weight_TCC18-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_weight| TERMINATION "bounding_circuits_defs.decomp_weight(list_adt[vert_circ[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.cd))" "NIL"))) (|decomp_weight_def_TCC1| 0 (|decomp_weight_def_TCC1-1| |nil| 3661779169 ("" (SKEEP) (("" (TYPEPRED "decomp_to_walk
               [T, digraph_type[T], digraph_verts, digraph_edges,
                digraph_size, digraph_make]
               (dg(G), cd)") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| |digraphs|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| |digraphs|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|)) NIL (|decomp_weight_def| SUBTYPE "circuit_decomp_[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make].decomp_to_walk(dg(bounding_circuits_defs.G), bounding_circuits_defs.cd)" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|decomp_weight_def_TCC2| 0 (|decomp_weight_def_TCC2-2| "" 3790335625 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|decomp_weight_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|decomp_weight_def_TCC2-1| |nil| 3661779169 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|decomp_weight_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|decomp_weight_def_TCC3| 0 (|decomp_weight_def_TCC3-2| "" 3790335625 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|decomp_weight_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|decomp_weight_def_TCC3-1| |nil| 3661779169 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|decomp_weight_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|decomp_weight_def_TCC4| 0 (|decomp_weight_def_TCC4-1| |nil| 3661779169 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|decomp_weight_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|decomp_weight_def| 0 (|decomp_weight_def-2| "" 3885150460 ("" (CASE "FORALL (n:posnat, cd: walk_decomp(dg(G))):
                     n=length(cd) IMPLIES decomp_weight(cd) = wgt_walk(G, decomp_to_walk(dg(G), cd))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(cd)") (("1" (SKEEP) (("1" (TYPEPRED "vc`v") (("1" (EXPAND "vert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (CASE "j=0") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (SKEEP) (("1" (EXPAND "decomp_weight") (("1" (ASSERT) (("1" (EXPAND "decomp_to_walk") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "decomp_to_walk" 2 1) (("2" (ASSERT) (("2" (REWRITE "wgt_comp") (("1" (EXPAND "decomp_weight" 2 1) (("1" (EXPAND "nth" 2 1) (("1" (TYPEPRED "decomp_to_walk(dg(G), cdr(cd))") (("1" (REPLACE -3) (("1" (TYPEPRED "car(cd)") (("1" (CASE "last(car(cd)`c) = car(cd)`v") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 1) (("1" (EXPAND "drop_circuits" 2 1) (("1" (EXPAND "first" 2 1) (("1" (EXPAND "finseq_appl" 2) (("1" (EXPAND "list2finseq" 2 1) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 1) (("1" (INST - "cdr(cd)") (("1" (EXPAND "length" -8) (("1" (ASSERT) (("1" (LIFT-IF -7) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("cd")) (("2" (EXPAND "length" -11) (("2" (LIFT-IF -11) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (REPLACES -1 1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "last") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "cd") (("2" (TYPEPRED "decomp_to_walk(dg(G), cdr(cd))") (("1" (REPLACE -3 1) (("1" (CASE "last(car(cd)`c) = car(cd)`v") (("1" (REPLACES -1) (("1" (EXPAND "drop_circuits" 1 1) (("1" (EXPAND "first " 1) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (HIDE (-1 -2 -3 -4 -5 -8 3)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -2 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -2 1) (("1" (WITH-TCCS (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]")) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("cd")) (("2" (EXPAND "length" -) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "car(cd)") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "last") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "id_is_identity") (("4" (ASSERT) NIL NIL)) NIL) ("5" (LEMMA "measure_matrix_assoc") (("5" (ASSERT) NIL NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP*) (("6" (TYPEPRED "decomp_to_walk
                     [T, digraph_type[T], digraph_verts, digraph_edges,
                      digraph_size, digraph_make]
                     (dg(G), cd)") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKEEP*) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (EXPAND "digraph_verts") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (SKEEP) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (ASSERT) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (TYPEPRED "decomp_to_walk
                   [T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make]
                   (dg(G), cd)") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP :PREDS? T) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (EXPAND "digraph_verts") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|wgt_comp| FORMULA-DECL NIL |weighted_digraphs_| |digraphs|) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|decomp_weight| DEF-DECL "Measure_Matrix" |bounding_circuits_defs| NIL) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| |digraphs|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| |digraphs|)) SHOSTAK) (|decomp_weight_def-1| |nil| 3661799940 ("" (CASE "FORALL (n:posnat, cd: walk_decomp(dg(G))):
                     n=length(cd) IMPLIES decomp_weight(cd) = wgt_walk(G, decomp_to_walk(dg(G), cd))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(cd)") (("1" (SKEEP) (("1" (TYPEPRED "vc`v") (("1" (EXPAND "vert?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (CASE "j=0") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (SKEEP) (("1" (EXPAND "decomp_weight") (("1" (ASSERT) (("1" (EXPAND "decomp_to_walk") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "decomp_to_walk" 2 1) (("2" (ASSERT) (("2" (REWRITE "wgt_comp") (("1" (EXPAND "decomp_weight" 2 1) (("1" (EXPAND "nth" 2 1) (("1" (TYPEPRED "decomp_to_walk(dg(G), cdr(cd))") (("1" (REPLACE -3) (("1" (TYPEPRED "car(cd)") (("1" (CASE "last(car(cd)`c) = car(cd)`v") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 1) (("1" (EXPAND "drop_circuits" 2 1) (("1" (EXPAND "first" 2 1) (("1" (EXPAND "finseq_appl" 2) (("1" (EXPAND "list2finseq" 2 1) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 1) (("1" (INST - "cdr(cd)") (("1" (EXPAND "length" -8) (("1" (ASSERT) (("1" (LIFT-IF -7) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (CD)) (("2" (EXPAND "length" -11) (("2" (LIFT-IF -11) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (REPLACES -1 1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "last") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "cd") (("2" (TYPEPRED "decomp_to_walk(dg(G), cdr(cd))") (("1" (REPLACE -3 1) (("1" (CASE "last(car(cd)`c) = car(cd)`v") (("1" (REPLACES -1) (("1" (EXPAND "drop_circuits" 1 1) (("1" (EXPAND "first " 1) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (HIDE (-1 -2 -3 -4 -5 -8 3)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (INST -2 "0") (("1" (ASSERT) (("1" (EXPAND "list2finseq" -2 1) (("1" (WITH-TCCS (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]")) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (CD)) (("2" (EXPAND "length" -) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "car(cd)") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "last") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "id_is_identity") (("4" (ASSERT) NIL NIL)) NIL) ("5" (LEMMA "measure_matrix_assoc") (("5" (ASSERT) NIL NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP*) (("6" (TYPEPRED "decomp_to_walk
                     [T, digraph_type[T], digraph_verts, digraph_edges,
                      digraph_size, digraph_make]
                     (dg(G), cd)") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKEEP*) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (EXPAND "digraph_verts") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (SKEEP) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (ASSERT) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (TYPEPRED "decomp_to_walk
                   [T, digraph_type[T], digraph_verts, digraph_edges,
                    digraph_size, digraph_make]
                   (dg(G), cd)") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP :PREDS? T) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (EXPAND "digraph_verts") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|walk_bounding_TCC1| 0 (|walk_bounding_TCC1-1| |nil| 3658703132 ("" (SKEEP) (("" (LEMMA "walk?_caret") (("" (INST?) (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "id_is_identity") NIL NIL) ("3" (USE "measure_matrix_assoc") NIL NIL)) NIL)) NIL)) NIL) ((|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| |digraphs|) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL)) NIL (|walk_bounding| SUBTYPE "finite_sequences[bounding_circuits_defs.T].^(bounding_circuits_defs.walk, (0, 1))" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|walk_bounding_TCC2| 0 (|walk_bounding_TCC2-1| |nil| 3658703132 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) NIL (|walk_bounding| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|walk_bounding_TCC3| 0 (|walk_bounding_TCC3-1| |nil| 3658703132 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) NIL (|walk_bounding| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|walk_bounding_TCC4| 0 (|walk_bounding_TCC4-1| |nil| 3658703132 ("" (TERMINATION-TCC) NIL NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_fun| CONST-DECL "Sign3" |measures| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{m: Measure_Matrix | eq(m, f)}" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|walk_bounding_TCC5| 0 (|walk_bounding_TCC5-1| |nil| 3658703132 ("" (SUBTYPE-TCC) NIL NIL) ((|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|form_matrix| CONST-DECL "{m: Measure_Matrix | eq(m, f)}" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding| SUBTYPE "(number_fields.-)(length(bounding_circuits_defs.walk), 1)" "nat"))) (|walk_bounding_TCC6| 0 (|walk_bounding_TCC6-2| |nil| 3661627907 ("" (SKEEP) (("" (LEMMA "walk?_caret") (("" (INST?) (("" (ASSERT) (("" (EXPAND "^") (("" (EXPAND "min") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| |digraphs|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding| SUBTYPE "finite_sequences[bounding_circuits_defs.T].^(bounding_circuits_defs.walk, (1, (number_fields.-)(length(bounding_circuits_defs.walk), 1)))" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))")) (|walk_bounding_TCC6-1| |nil| 3658703132 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK (|walk_bounding| SUBTYPE "finite_sequences[bounding_circuits_defs.T].^(bounding_circuits_defs.walk, (1, (number_fields.-)(length(bounding_circuits_defs.walk), 1)))" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))"))) (|walk_bounding_TCC7| 0 (|walk_bounding_TCC7-1| |nil| 3661624396 ("" (TERMINATION-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_fun| CONST-DECL "Sign3" |measures| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{m: Measure_Matrix | eq(m, f)}" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding| TERMINATION "bounding_circuits_defs.walk_bounding(finite_sequences[bounding_circuits_defs.T].^(bounding_circuits_defs.walk, (1, (number_fields.-)(length(bounding_circuits_defs.walk), 1))), bounding_circuits_defs.bs)" "NIL"))) (|walk_bounding_TCC8| 0 (|walk_bounding_TCC8-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding| SUBTYPE "0" "below[length(walk)]"))) (|walk_bounding_TCC9| 0 (|walk_bounding_TCC9-1| |nil| 3661624396 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding| SUBTYPE "finite_sequences[bounding_circuits_defs.T].finseq_appl(bounding_circuits_defs.walk)(0)" "vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))"))) (|walk_bounding_def_TCC1| 0 (|walk_bounding_def_TCC1-1| |nil| 3661801027 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (<= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding_def| SUBTYPE "bounding_circuits_defs.cc" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|walk_bounding_def_TCC2| 0 (|walk_bounding_def_TCC2-2| "" 3790335660 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|walk_bounding_def_TCC2-1| |nil| 3661801027 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|walk_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|walk_bounding_def_TCC3| 0 (|walk_bounding_def_TCC3-2| "" 3790335660 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|walk_bounding_def_TCC3-1| |nil| 3661801027 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|walk_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|walk_bounding_def_TCC4| 0 (|walk_bounding_def_TCC4-1| |nil| 3661801027 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|walk_bounding_def| 0 (|walk_bounding_def-4| "" 3885253074 ("" (SKOLEM 1 ("n" "_" "bs")) (("" (CASE "FORALL (m:posnat, walk: Walk(dg(G))):
              m=length(walk) AND ( FORALL (v2: vert(dg(G))):
                  FORALL (cc: prewalk
                              | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                    EXISTS (M2: Measure_Matrix):
                      member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                IMPLIES
                (FORALL ((cd: walk_decomp(dg(G))
                              | FORALL (j: below(length(cd))):
                                  nth(cd, j)`c`length <= n)):
                   drop_circuits(dg(G), cd) = walk IMPLIES
                    (EXISTS (M: Measure_Matrix):
                       member(M, walk_bounding(walk, bs)) AND
                        M <= decomp_weight(cd)))") (("1" (SKEEP) (("1" (INST - "length(walk)" "walk") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (ASSERT) (("3" (SKEEP :PREDS? T) (("3" (HIDE -1) (("3" (CASE "j=0") (("1" (HIDE -5) (("1" (EXPAND "walk_bounding") (("1" (ASSERT) (("1" (LEMMA "decomp_weight_def") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk") (("1" (EXPAND "finseq_appl") (("1" (INST -8 "walk`seq(0)") (("1" (TYPEPRED "car(cd)") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (EXPAND "member") (("1" (EXPAND "<=") (("1" (EXPAND "le") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "car(cd)`c") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "member" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - " 0 ") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (REPLACE -9 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth") (("2" (EXPAND "map") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "walk") (("2" (HIDE -6) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "walk^(1, length(walk)-1)") (("1" (EXPAND "^" -4 1) (("1" (EXPAND "min") (("1" (GROUND) (("1" (INST -1 "cdr(cd)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED "list_prod(map(LAMBDA (m1: Measure_Matrix):
                                             m1 * wgt_walk(G, walk ^ (0, 1)))
                                          (cons(id, bs(finseq_appl[T](walk)(0)))),
                                       walk_bounding(
                                                     walk ^ (1, length(walk) - 1),
                                                     bs))") (("1" (HIDE -1) (("1" (EXPAND "decomp_weight" 2) (("1" (INST -9 "walk`seq(0)") (("1" (INST -9 "nth(cd, 0)`c") (("1" (SKEEP) (("1" (INST -1 "M2* wgt_walk(G, walk ^ (0, 1))" "M") (("1" (ASSERT) (("1" (GROUND) (("1" (SKEEP) (("1" (INST 2 "M_1") (("1" (ASSERT) (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_right_preserves_order") (("1" (INST - " wgt_walk(G, walk ^ (0, 1))" "M2" "wgt_walk(G, nth(cd, 0)`c)") (("1" (ASSERT) (("1" (LEMMA "mult_right_preserves_order") (("1" (INST -1 " M" "M2 * wgt_walk(G, walk ^ (0, 1))" "       wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))") (("1" (ASSERT) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "  wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))" "M" "decomp_weight(cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE (-1 -3)) (("1" (EXPAND "transitive?") (("1" (INST-CP - "M_1" "M2 * wgt_walk(G, walk ^ (0, 1)) * M" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M") (("1" (ASSERT) (("1" (INST - " M_1" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M " "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) *
                                          decomp_weight(cdr(cd))") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (REPLACE -12 1 :DIR RL) (("1" (HIDE (-1 -2 -3 -4 -6)) (("1" (HIDE 3) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (GROUND) (("1" (TYPEPRED "x!1") (("1" (GROUND) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "gen_seq2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "member_nth[Measure_Matrix]") (("2" (INST - " bs(walk`seq(0))" " M2") (("2" (ASSERT) (("2" (SKEEP) (("2" (LEMMA "nth_member[Measure_Matrix]") (("2" (INST - "map(LAMBDA (m1: Measure_Matrix):
                                           m1 * wgt_walk(G, walk ^ (0, 1)))
                                        (cons(id, bs(finseq_appl[T](walk)(0))))" "M2* wgt_walk(G, walk ^ (0, 1))" "i+1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[Measure_Matrix, Measure_Matrix]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" 1) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[Measure_Matrix, Measure_Matrix]") (("2" (EXPAND "length") (("2" (TYPEPRED "i") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "0") (("2" (ASSERT) (("2" (TYPEPRED "nth(cd, 0)") (("1" (GROUND) (("1" (INST -2 "id * wgt_walk(G, walk ^ (0, 1))" "M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST 3 " M_1") (("1" (ASSERT) (("1" (REPLACE -3 3) (("1" (EXPAND "wgt_walk" 3 1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_aux") (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_left_preserves_order") (("1" (INST -1 "id * wgt_walk(G, walk ^ (0, 1))" "M " " decomp_weight(cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE -1 -3) (("1" (EXPAND "transitive?") (("1" (INST -1 "M_1 " "id * wgt_walk(G, walk ^ (0, 1)) * M " "id * wgt_walk(G, walk ^ (0, 1)) * decomp_weight(cdr(cd))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "drop_circuits " 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED "x!1") (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "gen_seq2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 1 :DIR RL) (("2" (EXPAND "drop_circuits " 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "map" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "nth " 2 2) (("2" (EXPAND "nth" -1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (TYPEPRED "walk") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (GROUND) (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (ASSERT) (("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (HIDE -6) (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (ASSERT) (("5" (EXPAND "vert?") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (CASE "length(cd) = walk`length") (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -7 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (REPLACE -8 1 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "nth" 2 2) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(cd) = walk`length") (("1" (ASSERT) (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (INST -3 "i+1") (("1" (EXPAND "list2finseq") (("1" (HIDE -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "map" -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "map" 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -5 "n!1+1") (("2" (EXPAND "map" -5 1) (("2" (EXPAND "list2finseq" -5 1) (("2" (EXPAND "list2finseq" -1 1) (("2" (EXPAND "length" -5 1) (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "map" -5) (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth" -5) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 "j!1+1") (("2" (EXPAND "nth " -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -7 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "length") (("4" (LIFT-IF -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP* :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "id_is_identity") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (LEMMA "measure_matrix_assoc") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (SKEEP) (("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "cc") (("7" (EXPAND "circuit_at?") (("7" (EXPAND "circuit?") (("7" (EXPAND "pre_circuit?") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "cc") (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|walk_bounding_def-3| |nil| 3661802428 ("" (SKOLEM 1 ("n" "_" "bs")) (("" (CASE "FORALL (m:posnat, walk: Walk(dg(G))):
              m=length(walk) AND ( FORALL (v2: vert(dg(G))):
                  FORALL (cc: prewalk
                              | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                    EXISTS (M2: Measure_Matrix):
                      member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                IMPLIES
                (FORALL ((cd: walk_decomp(dg(G))
                              | FORALL (j: below(length(cd))):
                                  nth(cd, j)`c`length <= n)):
                   drop_circuits(dg(G), cd) = walk IMPLIES
                    (EXISTS (M: Measure_Matrix):
                       member(M, walk_bounding(walk, bs)) AND
                        M <= decomp_weight(cd)))") (("1" (SKEEP) (("1" (INST - "length(walk)" "walk") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (ASSERT) (("3" (SKEEP :PREDS? T) (("3" (HIDE -1) (("3" (CASE "j=0") (("1" (HIDE -5) (("1" (EXPAND "walk_bounding") (("1" (ASSERT) (("1" (LEMMA "decomp_weight_def") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk") (("1" (EXPAND "finseq_appl") (("1" (INST -8 "walk`seq(0)") (("1" (TYPEPRED "car(cd)") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (EXPAND "member") (("1" (EXPAND "<=") (("1" (EXPAND "le") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "car(cd)`c") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "member" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - " 0 ") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (REPLACE -9 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth") (("2" (EXPAND "map") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "walk") (("2" (HIDE -6) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "walk^(1, length(walk)-1)") (("1" (EXPAND "^" -4 1) (("1" (EXPAND "min") (("1" (GROUND) (("1" (INST -1 "cdr(cd)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED "list_prod(map(LAMBDA (m1: Measure_Matrix):
                                             m1 * wgt_walk(G, walk ^ (0, 1)))
                                          (cons(id, bs(finseq_appl[T](walk)(0)))),
                                       walk_bounding(
                                                     walk ^ (1, length(walk) - 1),
                                                     bs))") (("1" (HIDE -1) (("1" (EXPAND "decomp_weight" 2) (("1" (INST -9 "walk`seq(0)") (("1" (INST -9 "nth(cd, 0)`c") (("1" (SKEEP) (("1" (INST -1 "M2* wgt_walk(G, walk ^ (0, 1))" "M") (("1" (ASSERT) (("1" (GROUND) (("1" (SKEEP) (("1" (INST 2 "M_1") (("1" (ASSERT) (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_right_preserves_order") (("1" (INST - " wgt_walk(G, walk ^ (0, 1))" "M2" "wgt_walk(G, nth(cd, 0)`c)") (("1" (ASSERT) (("1" (LEMMA "mult_right_preserves_order") (("1" (INST -1 " M" "M2 * wgt_walk(G, walk ^ (0, 1))" "       wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))") (("1" (ASSERT) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "  wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))" "M" "decomp_weight(cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE (-1 -3)) (("1" (EXPAND "transitive?") (("1" (INST-CP - "M_1" "M2 * wgt_walk(G, walk ^ (0, 1)) * M" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M") (("1" (ASSERT) (("1" (INST - " M_1" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M " "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) *
                                          decomp_weight(cdr(cd))") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (REPLACE -12 1 :DIR RL) (("1" (HIDE (-1 -2 -3 -4 -6)) (("1" (HIDE 3) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")) (("1" (INST?) (("1" (REPLACES -1) (("1" (GROUND) (("1" (TYPEPRED "x!1") (("1" (GROUND) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "gen_seq2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "member_nth[Measure_Matrix]") (("2" (INST - " bs(walk`seq(0))" " M2") (("2" (ASSERT) (("2" (SKEEP) (("2" (LEMMA "nth_member[Measure_Matrix]") (("2" (INST - "map(LAMBDA (m1: Measure_Matrix):
                                           m1 * wgt_walk(G, walk ^ (0, 1)))
                                        (cons(id, bs(finseq_appl[T](walk)(0))))" "M2* wgt_walk(G, walk ^ (0, 1))" "i+1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[Measure_Matrix, Measure_Matrix]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" 1) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[Measure_Matrix, Measure_Matrix]") (("2" (EXPAND "length") (("2" (TYPEPRED "i") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "0") (("2" (ASSERT) (("2" (TYPEPRED "nth(cd, 0)") (("1" (GROUND) (("1" (INST -2 "id * wgt_walk(G, walk ^ (0, 1))" "M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST 3 " M_1") (("1" (ASSERT) (("1" (REPLACE -3 3) (("1" (EXPAND "wgt_walk" 3 1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_aux") (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_left_preserves_order") (("1" (INST -1 "id * wgt_walk(G, walk ^ (0, 1))" "M " " decomp_weight(cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE -1 -3) (("1" (EXPAND "transitive?") (("1" (INST -1 "M_1 " "id * wgt_walk(G, walk ^ (0, 1)) * M " "id * wgt_walk(G, walk ^ (0, 1)) * decomp_weight(cdr(cd))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "drop_circuits " 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "gen_seq2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 1 :DIR RL) (("2" (EXPAND "drop_circuits " 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "map" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "nth " 2 2) (("2" (EXPAND "nth" -1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (TYPEPRED "walk") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (GROUND) (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "finseq_appl") (("5" (ASSERT) (("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (HIDE -6) (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (ASSERT) (("5" (EXPAND "vert?") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (CASE "length(cd) = walk`length") (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -7 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (REPLACE -8 1 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "nth" 2 2) (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(cd) = walk`length") (("1" (ASSERT) (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (INST -3 "i+1") (("1" (EXPAND "list2finseq") (("1" (HIDE -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "map" -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (I)) (("2" (EXPAND "map" 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -5 "n!1+1") (("2" (EXPAND "map" -5 1) (("2" (EXPAND "list2finseq" -5 1) (("2" (EXPAND "list2finseq" -1 1) (("2" (EXPAND "length" -5 1) (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "map" -5) (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth" -5) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 "j!1+1") (("2" (EXPAND "nth " -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -7 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "length") (("4" (LIFT-IF -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP* :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "id_is_identity") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (LEMMA "measure_matrix_assoc") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (SKEEP) (("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED (CC)) (("7" (EXPAND "circuit_at?") (("7" (EXPAND "circuit?") (("7" (EXPAND "pre_circuit?") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED (CC)) (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|decomp_weight| DEF-DECL "Measure_Matrix" |bounding_circuits_defs| NIL) (|walk_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| |digraphs|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|n| SKOLEM-CONST-DECL "nat" |bounding_circuits_defs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|decomp_weight_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cd| SKOLEM-CONST-DECL "{cd: walk_decomp(dg(G)) |
   FORALL (j: below(length(cd))): nth(cd, j)`c`length <= n}" |bounding_circuits_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|le| CONST-DECL "bool" |measures| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| |digraphs|) (|walk| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|list_prod| CONST-DECL "{L: list[Measure_Matrix[N]] |
   FORALL (m1, m2: Measure_Matrix):
     member(m1, l1) AND member(m2, l2) IMPLIES
      EXISTS (M: Measure_Matrix): member(M, L) AND M <= m1 * m2}" |bounding_circuits_defs| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|matrices_order| FORMULA-DECL NIL |measures| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|mult_left_preserves_order| FORMULA-DECL NIL |measures| NIL) (|mult_right_preserves_order| FORMULA-DECL NIL |measures| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "below[gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v)`length]" |bounding_circuits_defs| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|i| SKOLEM-CONST-DECL "below(length(bs(walk`seq(0))))" |bounding_circuits_defs| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|) (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|walk?_caret| FORMULA-DECL NIL |walks_| |digraphs|) (|x!1| SKOLEM-CONST-DECL "below[gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v)`length]" |bounding_circuits_defs| NIL) (|i| SKOLEM-CONST-DECL "below(length
        (list2finseq
             [vert[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
                   digraph_size[T], digraph_make[T]](dg(G))]
             (map[vert_circ
                      [T, digraph_type[T], digraph_verts[T],
                       digraph_edges[T], digraph_size[T],
                       digraph_make[T]](dg(G)),
                  vert[T, digraph_type[T], digraph_verts[T],
                       digraph_edges[T], digraph_size[T],
                       digraph_make[T]](dg(G))]
                  (LAMBDA (vc:
                             vert_circ
                                 [T, digraph_type[T], digraph_verts[T],
                                  digraph_edges[T], digraph_size[T],
                                  digraph_make[T]](dg(G))):
                     vc`v)
                  (cdr[vert_circ
                           [T, digraph_type[T], digraph_verts,
                            digraph_edges, digraph_size, digraph_make](dg
                                                                         (G))]
                       (cd)))))" |bounding_circuits_defs| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|)) NIL) (|walk_bounding_def-2| |nil| 3661801873 ("" (SKOLEM 1 ("n" "_" "bs")) (("" (CASE "FORALL (m:posnat, walk: Walk(dg(G))):
              m=length(walk) AND ( FORALL (v2: vert(dg(G))):
                  FORALL (cc: prewalk
                              | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                    EXISTS (M2: Measure_Matrix):
                      member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                IMPLIES
                (FORALL ((cd: walk_decomp(dg(G))
                              | FORALL (j: below(length(cd))):
                                  nth(cd, j)`c`length <= n)):
                   drop_circuits(dg(G), cd) = walk IMPLIES
                    (EXISTS (M: Measure_Matrix):
                       member(M, walk_bounding(walk, bs)) AND
                        M <= decomp_weight(cd)))") (("1" (SKEEP) (("1" (INST - "length(walk)" "walk") (("1" (ASSERT) (("1" (GROUND) NIL))))))) ("2" (HIDE 2) (("2" (INDUCT "m") (("1" (ASSERT) NIL) ("2" (ASSERT) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (ASSERT) (("3" (SKEEP :PREDS? T) (("3" (HIDE -1) (("3" (CASE "j=0") (("1" (HIDE -5) (("1" (EXPAND "walk_bounding") (("1" (ASSERT) (("1" (LEMMA "decomp_weight_def") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk") (("1" (EXPAND "finseq_appl") (("1" (INST -8 "walk`seq(0)") (("1" (TYPEPRED "car(cd)") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (EXPAND "member") (("1" (EXPAND "<=") (("1" (EXPAND "le") (("1" (PROPAX) NIL))))))))))))))))) ("2" (INST -9 "car(cd)`c") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "member" +) (("1" (PROPAX) NIL))))))))))))) ("2" (INST - " 0 ") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (REPLACE -9 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth") (("2" (EXPAND "map") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "length") (("2" (ASSERT) NIL))))))))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("2" (TYPEPRED "walk") (("2" (HIDE -6) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (INST -4 "walk^(1, length(walk)-1)") (("1" (EXPAND "^" -4 1) (("1" (EXPAND "min") (("1" (GROUND) (("1" (INST -1 "cdr(cd)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED "list_prod(map(LAMBDA (m1: Measure_Matrix):
                                             m1 * wgt_walk(G, walk ^ (0, 1)))
                                          (cons(id, bs(finseq_appl[T](walk)(0)))),
                                       walk_bounding(
                                                     walk ^ (1, length(walk) - 1),
                                                     bs))") (("1" (HIDE -1) (("1" (EXPAND "decomp_weight" 2) (("1" (INST -9 "walk`seq(0)") (("1" (INST -9 "nth(cd, 0)`c") (("1" (SKEEP) (("1" (INST -1 "M2* wgt_walk(G, walk ^ (0, 1))" "M") (("1" (ASSERT) (("1" (GROUND) (("1" (SKEEP) (("1" (INST 2 "M_1") (("1" (ASSERT) (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_right_preserves_order") (("1" (INST - " wgt_walk(G, walk ^ (0, 1))" "M2" "wgt_walk(G, nth(cd, 0)`c)") (("1" (ASSERT) (("1" (LEMMA "mult_right_preserves_order") (("1" (INST -1 " M" "M2 * wgt_walk(G, walk ^ (0, 1))" "       wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))") (("1" (ASSERT) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "  wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))" "M" "decomp_weight(G, cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE (-1 -3)) (("1" (EXPAND "transitive?") (("1" (INST-CP - "M_1" "M2 * wgt_walk(G, walk ^ (0, 1)) * M" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M") (("1" (ASSERT) (("1" (INST - " M_1" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M " "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) *
                                          decomp_weight(G, cdr(cd))") (("1" (ASSERT) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (REPLACE -12 1 :DIR RL) (("1" (HIDE (-1 -2 -3 -4 -6)) (("1" (HIDE 3) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (GROUND) (("1" (TYPEPRED "x!1") (("1" (GROUND) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL))))))))))) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "gen_seq2") (("2" (GROUND) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "member_nth[Measure_Matrix]") (("2" (INST - " bs(walk`seq(0))" " M2") (("2" (ASSERT) (("2" (SKEEP) (("2" (LEMMA "nth_member[Measure_Matrix]") (("2" (INST - "map(LAMBDA (m1: Measure_Matrix):
                                           m1 * wgt_walk(G, walk ^ (0, 1)))
                                        (cons(id, bs(finseq_appl[T](walk)(0))))" "M2* wgt_walk(G, walk ^ (0, 1))" "i+1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[Measure_Matrix, Measure_Matrix]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL))))))) ("2" (TYPEPRED "i") (("2" (EXPAND "length" 1) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))) ("2" (REWRITE "map_length[Measure_Matrix, Measure_Matrix]") (("2" (EXPAND "length") (("2" (TYPEPRED "i") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL))))))))))))))) ("2" (INST -6 "0") (("2" (ASSERT) (("2" (TYPEPRED "nth(cd, 0)") (("1" (GROUND) (("1" (INST -2 "id * wgt_walk(G, walk ^ (0, 1))" "M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST 3 " M_1") (("1" (ASSERT) (("1" (REPLACE -3 3) (("1" (EXPAND "wgt_walk" 3 1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_aux") (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_left_preserves_order") (("1" (INST -1 "id * wgt_walk(G, walk ^ (0, 1))" "M " " decomp_weight(cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE -1 -3) (("1" (EXPAND "transitive?") (("1" (INST -1 "M_1 " "id * wgt_walk(G, walk ^ (0, 1)) * M " "id * wgt_walk(G, walk ^ (0, 1)) * decomp_weight(cdr(cd))") (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "drop_circuits " 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL))))))))))) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "gen_seq2") (("2" (ASSERT) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL))))))))))))) ("2" (REPLACE -10 1 :DIR RL) (("2" (EXPAND "drop_circuits " 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "map" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL))) ("2" (EXPAND "nth " 2 2) (("2" (EXPAND "nth" -1 2) (("2" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("2" (HIDE -) (("2" (TYPEPRED "walk") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (GROUND) (("2" (EXPAND "vert?") (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL))))))))))) ("5" (EXPAND "finseq_appl") (("5" (ASSERT) (("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (HIDE -6) (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (ASSERT) (("5" (EXPAND "vert?") (("5" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (CASE "length(cd) = walk`length") (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL))))) ("2" (REPLACE -7 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (REPLACE -8 1 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL))) ("2" (EXPAND "nth" 2 2) (("2" (REPLACE -1) (("2" (PROPAX) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))) ("2" (CASE "length(cd) = walk`length") (("1" (ASSERT) (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (INST -3 "i+1") (("1" (EXPAND "list2finseq") (("1" (HIDE -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "map" -3) (("1" (PROPAX) NIL))))))))) ("2" (TYPEPRED (I)) (("2" (EXPAND "map" 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL))))))))))))))) ("2" (SKEEP) (("2" (INST -5 "n!1+1") (("2" (EXPAND "map" -5 1) (("2" (EXPAND "list2finseq" -5 1) (("2" (EXPAND "list2finseq" -1 1) (("2" (EXPAND "length" -5 1) (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "map" -5) (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth" -5) (("2" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (SKEEP) (("2" (INST -4 "j!1+1") (("2" (EXPAND "nth " -4) (("2" (PROPAX) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (REPLACE -7 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))) ("4" (EXPAND "length") (("4" (LIFT-IF -1) (("4" (ASSERT) NIL))))))))))))) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP* :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL))))))))))) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "id_is_identity") (("5" (PROPAX) NIL))))))))))) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (LEMMA "measure_matrix_assoc") (("6" (PROPAX) NIL))))))))))) ("7" (HIDE 2) (("7" (SKEEP) (("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED (CC)) (("7" (EXPAND "circuit_at?") (("7" (EXPAND "circuit?") (("7" (EXPAND "pre_circuit?") (("7" (ASSERT) NIL))))))))))))))))))))) ("3" (HIDE 2) (("3" (SKEEP) (("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL))))))))))) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL))))))))))) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED (CC)) (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (ASSERT) NIL)))))))))))))))))) NIL) NIL NIL) (|walk_bounding_def-1| |nil| 3661801791 ("" (SKOLEM 1 ("n" "_" "bs")) (("" (CASE "FORALL (m:posnat, walk: Walk(dg(G))):
              m=length(walk) AND ( FORALL (v2: vert(dg(G))):
                  FORALL (cc: prewalk
                              | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                    EXISTS (M2: Measure_Matrix):
                      member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                IMPLIES
                (FORALL ((cd: walk_decomp(dg(G))
                              | FORALL (j: below(length(cd))):
                                  nth(cd, j)`c`length <= n)):
                   drop_circuits(dg(G), cd) = walk IMPLIES
                    (EXISTS (M: Measure_Matrix):
                       member(M, walk_bounding(walk, bs)) AND
                        M <= decomp_weight(G, cd)))") (("1" (SKEEP) (("1" (INST - "length(walk)" "walk") (("1" (ASSERT) (("1" (GROUND) NIL))))))) ("2" (HIDE 2) (("2" (INDUCT "m") (("1" (ASSERT) NIL) ("2" (ASSERT) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (ASSERT) (("3" (SKEEP :PREDS? T) (("3" (HIDE -1) (("3" (CASE "j=0") (("1" (HIDE -5) (("1" (EXPAND "walk_bounding") (("1" (ASSERT) (("1" (LEMMA "decomp_weight_def") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk") (("1" (EXPAND "finseq_appl") (("1" (INST -8 "walk`seq(0)") (("1" (TYPEPRED "car(cd)") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (EXPAND "member") (("1" (EXPAND "<=") (("1" (EXPAND "le") (("1" (PROPAX) NIL))))))))))))))))) ("2" (INST -9 "car(cd)`c") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "member" +) (("1" (PROPAX) NIL))))))))))))) ("2" (INST - " 0 ") (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (REPLACE -9 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth") (("2" (EXPAND "map") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "length") (("2" (ASSERT) NIL))))))))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("2" (TYPEPRED "walk") (("2" (HIDE -6) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (INST -4 "walk^(1, length(walk)-1)") (("1" (EXPAND "^" -4 1) (("1" (EXPAND "min") (("1" (GROUND) (("1" (INST -1 "cdr(cd)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED "list_prod(map(LAMBDA (m1: Measure_Matrix):
                                             m1 * wgt_walk(G, walk ^ (0, 1)))
                                          (cons(id, bs(finseq_appl[T](walk)(0)))),
                                       walk_bounding(
                                                     walk ^ (1, length(walk) - 1),
                                                     bs))") (("1" (HIDE -1) (("1" (EXPAND "decomp_weight" 2) (("1" (INST -9 "walk`seq(0)") (("1" (INST -9 "nth(cd, 0)`c") (("1" (SKEEP) (("1" (INST -1 "M2* wgt_walk(G, walk ^ (0, 1))" "M") (("1" (ASSERT) (("1" (GROUND) (("1" (SKEEP) (("1" (INST 2 "M_1") (("1" (ASSERT) (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_right_preserves_order") (("1" (INST - " wgt_walk(G, walk ^ (0, 1))" "M2" "wgt_walk(G, nth(cd, 0)`c)") (("1" (ASSERT) (("1" (LEMMA "mult_right_preserves_order") (("1" (INST -1 " M" "M2 * wgt_walk(G, walk ^ (0, 1))" "       wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))") (("1" (ASSERT) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "  wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))" "M" "decomp_weight(G, cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE (-1 -3)) (("1" (EXPAND "transitive?") (("1" (INST-CP - "M_1" "M2 * wgt_walk(G, walk ^ (0, 1)) * M" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M") (("1" (ASSERT) (("1" (INST - " M_1" "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M " "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) *
                                          decomp_weight(G, cdr(cd))") (("1" (ASSERT) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (REPLACE -12 1 :DIR RL) (("1" (HIDE (-1 -2 -3 -4 -6)) (("1" (HIDE 3) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (GROUND) (("1" (TYPEPRED "x!1") (("1" (GROUND) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL))))))))))) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "gen_seq2") (("2" (GROUND) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "member_nth[Measure_Matrix]") (("2" (INST - " bs(walk`seq(0))" " M2") (("2" (ASSERT) (("2" (SKEEP) (("2" (LEMMA "nth_member[Measure_Matrix]") (("2" (INST - "map(LAMBDA (m1: Measure_Matrix):
                                           m1 * wgt_walk(G, walk ^ (0, 1)))
                                        (cons(id, bs(finseq_appl[T](walk)(0))))" "M2* wgt_walk(G, walk ^ (0, 1))" "i+1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[Measure_Matrix, Measure_Matrix]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL))))))) ("2" (TYPEPRED "i") (("2" (EXPAND "length" 1) (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))) ("2" (REWRITE "map_length[Measure_Matrix, Measure_Matrix]") (("2" (EXPAND "length") (("2" (TYPEPRED "i") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))))))))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL))))))))))))))) ("2" (INST -6 "0") (("2" (ASSERT) (("2" (TYPEPRED "nth(cd, 0)") (("1" (GROUND) (("1" (INST -2 "id * wgt_walk(G, walk ^ (0, 1))" "M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST 3 " M_1") (("1" (ASSERT) (("1" (REPLACE -3 3) (("1" (EXPAND "wgt_walk" 3 1) (("1" (EXPAND "gen_seq1") (("1" (EXPAND "wgt_aux") (("1" (CASE-REPLACE "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)") (("1" (LEMMA "mult_left_preserves_order") (("1" (INST -1 "id * wgt_walk(G, walk ^ (0, 1))" "M " " decomp_weight(cdr(cd))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (HIDE -1 -3) (("1" (EXPAND "transitive?") (("1" (INST -1 "M_1 " "id * wgt_walk(G, walk ^ (0, 1)) * M " "id * wgt_walk(G, walk ^ (0, 1)) * decomp_weight(cdr(cd))") (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))) ("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL))) ("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "gen_seq2") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "drop_circuits " 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "gen_seq2") (("1" (GROUND) NIL))))))))))) ("2" (TYPEPRED (X!1)) (("2" (EXPAND "gen_seq2") (("2" (ASSERT) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL))))))))))))) ("2" (REPLACE -10 1 :DIR RL) (("2" (EXPAND "drop_circuits " 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "map" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL))) ("2" (EXPAND "nth " 2 2) (("2" (EXPAND "nth" -1 2) (("2" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("2" (HIDE -) (("2" (TYPEPRED "walk") (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -2 "0") (("2" (GROUND) (("2" (EXPAND "vert?") (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL))))))))))) ("5" (EXPAND "finseq_appl") (("5" (ASSERT) (("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (HIDE -6) (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST?) (("5" (ASSERT) (("5" (EXPAND "vert?") (("5" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (CASE "length(cd) = walk`length") (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL))))) ("2" (REPLACE -7 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (REPLACE -8 1 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL))) ("2" (EXPAND "nth" 2 2) (("2" (REPLACE -1) (("2" (PROPAX) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (EXPAND "digraph_verts") (("2" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))) ("2" (CASE "length(cd) = walk`length") (("1" (ASSERT) (("1" (EXPAND " length" -1 1) (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (INST -3 "i+1") (("1" (EXPAND "list2finseq") (("1" (HIDE -4) (("1" (EXPAND "nth" -3) (("1" (EXPAND "map" -3) (("1" (PROPAX) NIL))))))))) ("2" (TYPEPRED (I)) (("2" (EXPAND "map" 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL))))))))))))))) ("2" (SKEEP) (("2" (INST -5 "n!1+1") (("2" (EXPAND "map" -5 1) (("2" (EXPAND "list2finseq" -5 1) (("2" (EXPAND "list2finseq" -1 1) (("2" (EXPAND "length" -5 1) (("2" (ASSERT) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "map" -5) (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth" -5) (("2" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (SKEEP) (("2" (INST -4 "j!1+1") (("2" (EXPAND "nth " -4) (("2" (PROPAX) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (REPLACE -7 1 :DIR RL) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(dg(G)), vert(dg(G))]") NIL))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))) ("4" (EXPAND "length") (("4" (LIFT-IF -1) (("4" (ASSERT) NIL))))))))))))) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP* :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (EXPAND "digraph_verts") (("4" (PROPAX) NIL))))))))))) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "id_is_identity") (("5" (PROPAX) NIL))))))))))) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (LEMMA "measure_matrix_assoc") (("6" (PROPAX) NIL))))))))))) ("7" (HIDE 2) (("7" (SKEEP) (("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED (CC)) (("7" (EXPAND "circuit_at?") (("7" (EXPAND "circuit?") (("7" (EXPAND "pre_circuit?") (("7" (ASSERT) NIL))))))))))))))))))))) ("3" (HIDE 2) (("3" (SKEEP) (("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL))))))))))))))) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL))))))))))) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL))))))))))) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED (CC)) (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (ASSERT) NIL)))))))))))))))))) NIL) NIL NIL)) (|walk_bounding_has_walk_wgt_TCC1| 0 (|walk_bounding_has_walk_wgt_TCC1-1| |nil| 3661799793 ("" (SUBTYPE-TCC) NIL NIL) ((|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding_has_walk_wgt| SUBTYPE "bounding_circuits_defs.walk" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|walk_bounding_has_walk_wgt_TCC2| 0 (|walk_bounding_has_walk_wgt_TCC2-2| "" 3790335735 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|walk_bounding_has_walk_wgt_TCC2-1| |nil| 3661799793 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|walk_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|walk_bounding_has_walk_wgt_TCC3| 0 (|walk_bounding_has_walk_wgt_TCC3-2| "" 3790335735 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|walk_bounding_has_walk_wgt_TCC3-1| |nil| 3661799793 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|walk_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|walk_bounding_has_walk_wgt_TCC4| 0 (|walk_bounding_has_walk_wgt_TCC4-1| |nil| 3661799793 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_bounding_has_walk_wgt| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|walk_bounding_has_walk_wgt| 0 (|walk_bounding_has_walk_wgt-3| "" 3885241037 ("" (SKOLEM 1 ("_" "bs")) (("" (CASE " FORALL (m:posnat, walk: Walk(dg(G))):
              m=walk`length IMPLIES  EXISTS (M: Measure_Matrix):
                 member(M, walk_bounding(walk, bs)) AND M <= wgt_walk(G, walk)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "walk`length") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (CASE "j=0") (("1" (SKEEP) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (GROUND) (("1" (EXPAND "walk_bounding") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (EXPAND "le") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "walk_bounding") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "<=") (("4" (EXPAND "le") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (INST -1 "walk^(1, length(walk)-1)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED " list_prod(map(LAMBDA (m1: Measure_Matrix):
                                         m1 * wgt_walk(G, walk ^ (0, 1)))
                                      (cons(id, bs(finseq_appl[T](walk)(0)))),
                                   walk_bounding(walk ^ (1, length(walk) - 1), bs))") (("1" (HIDE -1) (("1" (INST - "id* wgt_walk(G, walk ^ (0, 1)) " " M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "wgt_walk_decomposed") (("1" (INST - "G" "1" "walk") (("1" (ASSERT) (("1" (LEMMA "id_is_identity") (("1" (EXPAND "identity?") (("1" (INST -1 " wgt_walk(G, walk ^ (0, 1))") (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (HIDE -1) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "wgt_walk(G, walk ^ (0, 1))" "M " " wgt_walk(G, walk ^ (1, length(walk) - 1))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "M_1" "wgt_walk(G, walk ^ (0, 1)) * M " "       wgt_walk(G, walk ^ (0, 1)) *
                                                    wgt_walk(G, walk ^ (1, length(walk) - 1))") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (ASSERT) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST -2 "0") (("5" (EXPAND "vert?") (("5" (ASSERT) (("5" (EXPAND "finseq_appl") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|walk_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|member| DEF-DECL "bool" |list_props| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|le| CONST-DECL "bool" |measures| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wgt_aux| DEF-DECL "Weight" |weighted_digraphs_| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| |digraphs|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|wgt_walk_decomposed| FORMULA-DECL NIL |weighted_digraphs_| |digraphs|) (|matrices_order| FORMULA-DECL NIL |measures| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|mult_left_preserves_order| FORMULA-DECL NIL |measures| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_prod| CONST-DECL "{L: list[Measure_Matrix[N]] |
   FORALL (m1, m2: Measure_Matrix):
     member(m1, l1) AND member(m2, l2) IMPLIES
      EXISTS (M: Measure_Matrix): member(M, L) AND M <= m1 * m2}" |bounding_circuits_defs| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|walk| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK) (|walk_bounding_has_walk_wgt-2| "" 3790335744 ("" (SKOLEM 1 ("_" "bs")) (("" (CASE " FORALL (m:posnat, walk: Walk(dg(G))):
              m=walk`length IMPLIES  EXISTS (M: Measure_Matrix):
                 member(M, walk_bounding(walk, bs)) AND M <= wgt_walk(G, walk)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "walk`length") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (CASE "j=0") (("1" (SKEEP) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (GROUND) (("1" (EXPAND "walk_bounding") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (EXPAND "le") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "walk_bounding") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "<=") (("4" (EXPAND "le") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (INST -1 "walk^(1, length(walk)-1)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED " list_prod(map(LAMBDA (m1: Measure_Matrix):
                                         m1 * wgt_walk(G, walk ^ (0, 1)))
                                      (cons(id, bs(finseq_appl[T](walk)(0)))),
                                   walk_bounding(walk ^ (1, length(walk) - 1), bs))") (("1" (HIDE -1) (("1" (INST - "id* wgt_walk(G, walk ^ (0, 1)) " " M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "wgt_walk_decomposed") (("1" (INST - "G" "1" "walk") (("1" (ASSERT) (("1" (LEMMA "id_is_identity") (("1" (EXPAND "identity?") (("1" (INST -1 " wgt_walk(G, walk ^ (0, 1))") (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (HIDE -1) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "wgt_walk(G, walk ^ (0, 1))" "M " " wgt_walk(G, walk ^ (1, length(walk) - 1))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "M_1" "wgt_walk(G, walk ^ (0, 1)) * M " "       wgt_walk(G, walk ^ (0, 1)) *
                                                    wgt_walk(G, walk ^ (1, length(walk) - 1))") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST -2 "0") (("5" (EXPAND "vert?") (("5" (ASSERT) (("5" (EXPAND "finseq_appl") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|walk_bounding_has_walk_wgt-1| |nil| 3661800296 ("" (SKOLEM 1 ("_" "bs")) (("" (CASE " FORALL (m:posnat, walk: Walk(dg(G))):
              m=walk`length IMPLIES  EXISTS (M: Measure_Matrix):
                 member(M, walk_bounding(walk, bs)) AND M <= wgt_walk(G, walk)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "walk`length") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " m") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (CASE "j=0") (("1" (SKEEP) (("1" (EXPAND "wgt_walk") (("1" (EXPAND "wgt_aux") (("1" (INST 1 "id") (("1" (GROUND) (("1" (EXPAND "walk_bounding") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "<=") (("2" (EXPAND "le") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "walk_bounding") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (EXPAND "<=") (("4" (EXPAND "le") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (INST -1 "walk^(1, length(walk)-1)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "walk_bounding" 2) (("1" (TYPEPRED " list_prod(map(LAMBDA (m1: Measure_Matrix):
                                         m1 * wgt_walk(G, walk ^ (0, 1)))
                                      (cons(id, bs(finseq_appl[T](walk)(0)))),
                                   walk_bounding(walk ^ (1, length(walk) - 1), bs))") (("1" (HIDE -1) (("1" (INST - "id* wgt_walk(G, walk ^ (0, 1)) " " M") (("1" (GROUND) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "wgt_walk_decomposed") (("1" (INST - "G" "1" "walk") (("1" (ASSERT) (("1" (LEMMA "id_is_identity") (("1" (EXPAND "identity?") (("1" (INST -1 " wgt_walk(G, walk ^ (0, 1))") (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (HIDE -1) (("1" (LEMMA "mult_left_preserves_order") (("1" (INST - "wgt_walk(G, walk ^ (0, 1))" "M " " wgt_walk(G, walk ^ (1, length(walk) - 1))") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (FLATTEN) (("1" (EXPAND "transitive?") (("1" (INST -2 "M_1" "wgt_walk(G, walk ^ (0, 1)) * M " "       wgt_walk(G, walk ^ (0, 1)) *
                                                    wgt_walk(G, walk ^ (1, length(walk) - 1))") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (ASSERT) NIL NIL)) NIL) ("4" (LEMMA "walk?_caret") (("4" (INST?) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (EXPAND "min") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "walk") (("5" (EXPAND "walk?") (("5" (EXPAND "verts_in?") (("5" (FLATTEN) (("5" (INST -2 "0") (("5" (EXPAND "vert?") (("5" (ASSERT) (("5" (EXPAND "finseq_appl") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|walk_list_bounding_TCC1| 0 (|walk_list_bounding_TCC1-1| |nil| 3659094121 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_list_bounding| SUBTYPE "bounding_circuits_defs.wlist" "(list_adt[Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cons?)"))) (|walk_list_bounding_TCC2| 0 (|walk_list_bounding_TCC2-1| |nil| 3659094121 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_list_bounding| TERMINATION "bounding_circuits_defs.walk_list_bounding(list_adt[Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.wlist), bounding_circuits_defs.bs)" "NIL"))) (|walk_list_bounding_def_TCC1| 0 (|walk_list_bounding_def_TCC1-1| |nil| 3661778758 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (<= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_list_bounding_def| SUBTYPE "bounding_circuits_defs.cc" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|walk_list_bounding_def_TCC2| 0 (|walk_list_bounding_def_TCC2-2| "" 3790335748 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_list_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|walk_list_bounding_def_TCC2-1| |nil| 3661778758 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|walk_list_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|walk_list_bounding_def_TCC3| 0 (|walk_list_bounding_def_TCC3-2| "" 3790335748 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_list_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|walk_list_bounding_def_TCC3-1| |nil| 3661778758 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|walk_list_bounding_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|walk_list_bounding_def_TCC4| 0 (|walk_list_bounding_def_TCC4-1| |nil| 3661778758 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_list_bounding_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|walk_list_bounding_def| 0 (|walk_list_bounding_def-3| "" 3885184158 ("" (SKOLEM 1 ("n" "_" "bs")) (("" (CASE "identity?(*)(id) AND associative?(*)") (("1" (FLATTEN) (("1" (LABEL "mm" (-1 -2)) (("1" (HIDE "mm") (("1" (CASE "FORALL (m:nat, wlist: list[Walk(dg(G))]):
                                   m = length(wlist) AND (FORALL (v2: vert(dg(G))):
                                      FORALL (cc: prewalk
                                                  | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                                        EXISTS (M2: Measure_Matrix):
                                          member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                                    IMPLIES
                                    (FORALL (walk: Walk(dg(G)),
                                             (cd: walk_decomp(dg(G))
                                                  | FORALL (j: below(length(cd))):
                                                      nth(cd, j)`c`length <= n)):
                                       member(walk, wlist) AND drop_circuits(dg(G), cd) = walk IMPLIES
                                        (EXISTS (M: Measure_Matrix):
                                           member(M, walk_list_bounding(wlist, bs)) AND
                                            M <= decomp_weight(cd)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 " length(wlist)") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DEFTACTIC MEAS (THEN (REPEAT (SKEEP)) (REVEAL "mm") (FLATTEN) (ASSERT))) (("2" (DEFTACTIC VERT (THEN (HIDE-ALL-BUT 1) (REPEAT (SKEEP)) (TYPEPRED "vc`v") (EXPAND "vert?"))) (("2" (INDUCT "m") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "member") (("1" (LIFT-IF -3) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (DEFTACTIC CC (CIRC) (THEN (HIDE-ALL-BUT 1) (REPEAT (SKEEP)) (TYPEPRED CIRC) (EXPAND "circuit_at?") (EXPAND "circuit?") (EXPAND "pre-circuit?") (GROUND))) (("2" (INST -1 "cdr(wlist)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "member" -4) (("1" (LIFT-IF -4) (("1" (GROUND) (("1" (HIDE -2) (("1" (EXPAND "walk_list_bounding") (("1" (LEMMA "walk_bounding_def") (("1" (INST - "n" "walk" "bs") (("1" (GROUND) (("1" (INST -1 "cd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (LEMMA "member_append_l[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "walk" "cd") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST + "M") (("2" (EXPAND "walk_list_bounding" 2) (("2" (LEMMA "member_append_r[Measure_Matrix]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (MEAS) NIL NIL) ("5" (MEAS) NIL NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "cc") (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (REVEAL "mm") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (REVEAL "mm") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED ("cc")) (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "id_is_identity") (("2" (LEMMA "measure_matrix_assoc") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|associative?| CONST-DECL "bool" |operator_defs| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|decomp_weight| DEF-DECL "Measure_Matrix" |bounding_circuits_defs| NIL) (|walk_list_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| |digraphs|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (TRUE CONST-DECL "bool" |booleans| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|n| SKOLEM-CONST-DECL "nat" |bounding_circuits_defs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wlist| SKOLEM-CONST-DECL "list[Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
          digraph_make](dg(G))]" |bounding_circuits_defs| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|) (|walk_bounding_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|walk_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK) (|walk_list_bounding_def-2| |nil| 3661800896 ("" (SKOLEM 1 ("n" "_" "bs")) (("" (CASE "identity?(*)(id) AND associative?(*)") (("1" (FLATTEN) (("1" (LABEL "mm" (-1 -2)) (("1" (HIDE MM) (("1" (CASE "FORALL (m:nat, wlist: list[Walk(dg(G))]):
                                   m = length(wlist) AND (FORALL (v2: vert(dg(G))):
                                      FORALL (cc: prewalk
                                                  | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                                        EXISTS (M2: Measure_Matrix):
                                          member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                                    IMPLIES
                                    (FORALL (walk: Walk(dg(G)),
                                             (cd: walk_decomp(dg(G))
                                                  | FORALL (j: below(length(cd))):
                                                      nth(cd, j)`c`length <= n)):
                                       member(walk, wlist) AND drop_circuits(dg(G), cd) = walk IMPLIES
                                        (EXISTS (M: Measure_Matrix):
                                           member(M, walk_list_bounding(wlist, bs)) AND
                                            M <= decomp_weight(cd)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 " length(wlist)") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DEFTACTIC MEAS (THEN (REPEAT (SKEEP)) (REVEAL MM) (FLATTEN) (ASSERT))) (("2" (DEFTACTIC VERT (THEN (HIDE-ALL-BUT 1) (REPEAT (SKEEP)) (TYPEPRED "vc`v") (EXPAND "vert?"))) (("2" (INDUCT "m") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "member") (("1" (LIFT-IF -3) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (DEFTACTIC CC (CIRC) (THEN (HIDE-ALL-BUT 1) (REPEAT (SKEEP)) (TYPEPRED CIRC) (EXPAND "circuit_at?") (EXPAND "circuit?") (EXPAND "pre-circuit?") (GROUND))) (("2" (INST -1 "cdr(wlist)") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "member" -4) (("1" (LIFT-IF -4) (("1" (GROUND) (("1" (HIDE -2) (("1" (EXPAND "walk_list_bounding") (("1" (LEMMA "walk_bounding_def") (("1" (INST - "n" "walk" "bs") (("1" (GROUND) (("1" (INST -1 "cd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (LEMMA "member_append_l[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "walk" "cd") (("2" (ASSERT) (("2" (SKEEP) (("2" (INST + "M") (("2" (EXPAND "walk_list_bounding" 2) (("2" (LEMMA "member_append_r[Measure_Matrix]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (MEAS) NIL NIL) ("5" (MEAS) NIL NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "cc") (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP* :PREDS? T) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (EXPAND "digraph_verts") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (REVEAL MM) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (REVEAL MM) (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED (CC)) (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "id_is_identity") (("2" (LEMMA "measure_matrix_assoc") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|walk_list_bounding_def-1| |nil| 3661799821 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|walk_list_bounding_has_walk_wgt_TCC1| 0 (|walk_list_bounding_has_walk_wgt_TCC1-1| |nil| 3661799159 ("" (SUBTYPE-TCC) NIL NIL) ((|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_list_bounding_has_walk_wgt| SUBTYPE "bounding_circuits_defs.walk" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|walk_list_bounding_has_walk_wgt_TCC2| 0 (|walk_list_bounding_has_walk_wgt_TCC2-2| "" 3790335756 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_list_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|walk_list_bounding_has_walk_wgt_TCC2-1| |nil| 3661799159 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|walk_list_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|walk_list_bounding_has_walk_wgt_TCC3| 0 (|walk_list_bounding_has_walk_wgt_TCC3-2| "" 3790335756 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|walk_list_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|walk_list_bounding_has_walk_wgt_TCC3-1| |nil| 3661799159 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|walk_list_bounding_has_walk_wgt| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|walk_list_bounding_has_walk_wgt_TCC4| 0 (|walk_list_bounding_has_walk_wgt_TCC4-1| |nil| 3661799159 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_list_bounding_has_walk_wgt| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|walk_list_bounding_has_walk_wgt| 0 (|walk_list_bounding_has_walk_wgt-1| |nil| 3661799542 ("" (SKOLEM 1 ("_" "bs" "walk")) (("" (CASE "FORALL (m:nat, wlist: list[Walk(dg(G))]):
                      m= length(wlist) AND member(walk, wlist) IMPLIES
                       (EXISTS (M: Measure_Matrix):
                          member(M, walk_list_bounding(wlist, bs)) AND
                           M <= wgt_walk(G, walk))") (("1" (SKEEP) (("1" (INST?) (("1" (INST - " length(wlist)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "m") (("1" (SKEEP) (("1" (EXPAND "member") (("1" (LIFT-IF -2) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "member" -3) (("2" (LIFT-IF -3) (("2" (GROUND) (("1" (EXPAND "walk_list_bounding" 2) (("1" (HIDE -2) (("1" (LEMMA "walk_bounding_has_walk_wgt") (("1" (INST?) (("1" (SKEEP) (("1" (INST + "M") (("1" (ASSERT) (("1" (LEMMA "member_append_l[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "cdr(wlist)") (("2" (ASSERT) (("2" (GROUND) (("1" (SKEEP) (("1" (INST + "M") (("1" (ASSERT) (("1" (EXPAND "walk_list_bounding" 2) (("1" (LEMMA "member_append_r[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|walk_list_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|member| DEF-DECL "bool" |list_props| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|walk| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|) (|walk_bounding_has_walk_wgt| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|walk_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) NIL)) (|bound_circuits_at_def_TCC1| 0 (|bound_circuits_at_def_TCC1-1| |nil| 3661777355 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_at_def| SUBTYPE "bounding_circuits_defs.circ" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|bound_circuits_at_def_TCC2| 0 (|bound_circuits_at_def_TCC2-2| "" 3790335766 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_at_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|bound_circuits_at_def_TCC2-1| |nil| 3661777355 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL SHOSTAK (|bound_circuits_at_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|bound_circuits_at_def_TCC3| 0 (|bound_circuits_at_def_TCC3-2| "" 3790335766 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_at_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|bound_circuits_at_def_TCC3-1| |nil| 3661777355 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL NIL (|bound_circuits_at_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|bound_circuits_at_def_TCC4| 0 (|bound_circuits_at_def_TCC4-1| |nil| 3661777355 ("" (SUBTYPE-TCC) NIL NIL) ((|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_at_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|bound_circuits_at_def| 0 (|bound_circuits_at_def-3| |nil| 3661799009 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "bound_circuits_at") (("" (TYPEPRED "minimalize(walk_list_bounding(vc`cycles, bs))") (("" (HIDE (-1 -3)) (("" (GROUND) (("1" (LEMMA "walk_list_bounding_def") (("1" (INST - "n" "vc`cycles" "bs") (("1" (GROUND) (("1" (LEMMA "circuit_decomposition") (("1" (INST -1 "dg(G)" "vc`vert" "circ") (("1" (SKEEP) (("1" (INST -4 "drop_circuits(dg(G), cd)" "cd") (("1" (GROUND) (("1" (LEMMA "decomp_weight_def") (("1" (SKEEP) (("1" (INST -9 "M") (("1" (SKEEP) (("1" (INST 1 "MM") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM" "M" "wgt_walk(G, circ)") (("1" (GROUND) (("1" (INST -3 "cd") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "vc`cycles") (("2" (HIDE -1) (("2" (INST -1 "drop_circuits(dg(G), cd)") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -3 "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "vc`cycles") (("2" (HIDE -1) (("2" (INST -1 "circ") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (ASSERT) (("1" (LEMMA "walk_list_bounding_has_walk_wgt") (("1" (INST?) (("1" (INST -1 "circ") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -5 "M") (("1" (SKEEP) (("1" (INST 1 "MM") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM" "M" "wgt_walk(G, circ)") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cycle_at?") (("2" (EXPAND "cycle?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (<= CONST-DECL "bool" |measures| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|walk_list_bounding| DEF-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|circuit_decomposition| FORMULA-DECL NIL |circuit_decomp_| |digraphs|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|partial_order?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|preorder?| CONST-DECL "bool" |orders| NIL) (|matrices_order| FORMULA-DECL NIL |measures| NIL) (M SKOLEM-CONST-DECL "Measure_Matrix[N]" |bounding_circuits_defs| NIL) (|vc| SKOLEM-CONST-DECL "VertCycles
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|decomp_weight_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|Seq| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| |digraphs|) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| |digraphs|) (|cd| SKOLEM-CONST-DECL "walk_decomp
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |bounding_circuits_defs| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|walk_list_bounding_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (M SKOLEM-CONST-DECL "Measure_Matrix[N]" |bounding_circuits_defs| NIL) (|walk_list_bounding_has_walk_wgt| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|circ| SKOLEM-CONST-DECL "prewalk
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make]" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL)) NIL) (|bound_circuits_at_def-2| |nil| 3661778925 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "bound_circuits_at") (("" (TYPEPRED "minimalize(walk_list_bounding(vc`cycles, bs))") (("" (HIDE (-1 -3)) (("" (GROUND) (("1" (LEMMA "walk_list_bounding_def") (("1" (INST - "n" "vc`cycles" "bs") (("1" (GROUND) (("1" (LEMMA "circuit_decomposition") (("1" (INST -1 "dg(G)" "vc`vert" "circ") (("1" (SKEEP) (("1" (INST -4 "drop_circuits(dg(G), cd)" "cd") (("1" (GROUND) (("1" (LEMMA "decomp_weight_def") (("1" (INST - "G" "cd") (("1" (REPLACE -1 -2) (("1" (REPLACE -3 -2) (("1" (SKEEP) (("1" (INST -9 "M") (("1" (SKEEP) (("1" (INST 1 "MM") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM" "M" "wgt_walk(G, circ)") (("1" (GROUND) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))))))))))))))))))))))))))))))))) ("2" (TYPEPRED "vc`cycles") (("2" (HIDE -1) (("2" (EXPAND "cycles_at_wdg") (("2" (INST -1 "drop_circuits(dg(G), cd)") (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -3 "j") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (TYPEPRED "vc`cycles") (("2" (HIDE -1) (("2" (EXPAND "cycles_at_wdg") (("2" (INST -1 "circ") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (ASSERT) (("1" (LEMMA "walk_list_bounding_has_walk_wgt") (("1" (INST?) (("1" (INST -1 "circ") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -5 "M") (("1" (SKEEP) (("1" (INST 1 "MM") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM" "M" "wgt_walk(G, circ)") (("1" (ASSERT) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "cycle_at?") (("2" (EXPAND "cycle?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL)))))))))))))))))))))))))))) NIL) NIL NIL) (|bound_circuits_at_def-1| |nil| 3661778599 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "bound_circuits_at") (("" (TYPEPRED "minimalize(walk_list_bounding(G, vc`cycles, bs))") (("" (HIDE (-1 -3)) (("" (GROUND) (("1" (LEMMA "walk_list_bounding_def") (("1" (INST - "n" "vc`cycles" "bs") (("1" (GROUND) (("1" (LEMMA "circuit_decomposition") (("1" (INST -1 "dg(G)" "vc`vert" "circ") (("1" (SKEEP) (("1" (INST -4 "drop_circuits(dg(G), cd)" "cd") (("1" (GROUND) (("1" (LEMMA "decomp_weight_def") (("1" (INST - "G" "cd") (("1" (REPLACE -1 -2) (("1" (REPLACE -3 -2) (("1" (SKEEP) (("1" (INST -9 "M") (("1" (SKEEP) (("1" (INST 1 "MM") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM" "M" "wgt_walk(G, circ)") (("1" (GROUND) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))))))))))))))))))))))))))))))))) ("2" (TYPEPRED "vc`cycles") (("2" (HIDE -1) (("2" (EXPAND "cycles_at_wdg") (("2" (INST -1 "drop_circuits(dg(G), cd)") (("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -3 "j") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (TYPEPRED "vc`cycles") (("2" (HIDE -1) (("2" (EXPAND "cycles_at_wdg") (("2" (INST -1 "circ") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (ASSERT) (("1" (LEMMA "walk_list_bounding_has_walk_wgt") (("1" (INST?) (("1" (INST -1 "circ") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -5 "M") (("1" (SKEEP) (("1" (INST 1 "MM") (("1" (ASSERT) (("1" (LEMMA "matrices_order") (("1" (EXPAND "partial_order?") (("1" (EXPAND "preorder?") (("1" (EXPAND "transitive?") (("1" (FLATTEN) (("1" (INST -2 "MM" "M" "wgt_walk(G, circ)") (("1" (ASSERT) NIL) ("2" (LEMMA "id_is_identity") (("2" (PROPAX) NIL))) ("3" (LEMMA "measure_matrix_assoc") (("3" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "cycle_at?") (("2" (EXPAND "cycle?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL)))))))))))))))))))))))))))) NIL) NIL NIL)) (|index_of_vert_TCC1| 0 (|index_of_vert_TCC1-2| "" 3885251097 ("" (SKEEP) (("" (TYPEPRED "VL") (("" (EXPAND "every") (("" (LIFT-IF -1) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|index_of_vert| SUBTYPE "bounding_circuits_defs.VL" "(list_adt[bounding_circuits_defs.T].cons?)")) (|index_of_vert_TCC1-1| |nil| 3659136927 ("" (SKEEP) (("" (TYPEPRED (VL)) (("" (EXPAND "every") (("" (LIFT-IF -1) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|index_of_vert| SUBTYPE "bounding_circuits_defs.VL" "(list_adt[bounding_circuits_defs.T].cons?)"))) (|index_of_vert_TCC2| 0 (|index_of_vert_TCC2-2| "" 3790335774 ("" (SKEEP :PREDS? T) (("" (EXPAND "nth" 1 1) (("" (ASSERT) (("" (SKEEP) (("" (CASE " i=0") (("1" (REPLACES -1) (("1" (GROUND) (("1" (SKEEP) (("1" (INST - "j") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 :DIR RL) (("2" (INST -4 "0") (("2" (GROUND) (("2" (EXPAND "nth" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|index_of_vert| SUBTYPE "0" "{i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL)) | booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, j) = bounding_circuits_defs.v, i = j))}")) (|index_of_vert_TCC2-1| |nil| 3659136927 ("" (SKEEP :PREDS? T) (("" (INST?) (("" (EXPAND "nth" 1 1) (("" (ASSERT) (("" (SKEEP) (("" (CASE " i=0") (("1" (REPLACES -1) (("1" (GROUND) (("1" (SKEEP) (("1" (INST - "j") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 :DIR RL) (("2" (INST -4 "0") (("2" (GROUND) (("2" (EXPAND "nth" 2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|index_of_vert| SUBTYPE "0" "{i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL)) | booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, j) = bounding_circuits_defs.v, i = j))}"))) (|index_of_vert_TCC3| 0 (|index_of_vert_TCC3-2| "" 3885184232 ("" (SKEEP :PREDS? T) (("" (SKEEP) (("" (INST 2 "i-1") (("1" (GROUND) (("1" (EXPAND "nth" -3) (("1" (LIFT-IF -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -5 "j+1") (("1" (EXPAND " nth" -5) (("1" (LIFT-IF -5) (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "nth" -5) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("j")) (("2" (EXPAND " length" 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED ("VL")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST -4 "0") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED ("i")) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j| SKOLEM-CONST-DECL "below(length(cdr(VL)))" |bounding_circuits_defs| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|i| SKOLEM-CONST-DECL "below(length(VL))" |bounding_circuits_defs| NIL) (VL SKOLEM-CONST-DECL "{VL:
   list[vert[T, digraph_type[T], digraph_verts, digraph_edges,
             digraph_size, digraph_make](dg(G))] |
   EXISTS (i: below(length(VL))):
     nth(VL, i) = v AND
      FORALL (j: below(length(VL))): nth(VL, j) = nth(VL, i) IMPLIES j = i}" |bounding_circuits_defs| NIL) (|v| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
     digraph_size[T], digraph_make[T]](dg(G))" |bounding_circuits_defs| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|index_of_vert| SUBTYPE "list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}")) (|dslfknasldfnasd| "asdnflaskdnf" 3659173558 ("" (SKEEP :PREDS? T) (("" (SKEEP) (("" (INST 2 "i-1") (("1" (GROUND) (("1" (EXPAND "nth" -3) (("1" (LIFT-IF -3) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -5 "j+1") (("1" (EXPAND " nth" -5) (("1" (LIFT-IF -5) (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "nth" -5) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (J)) (("2" (EXPAND " length" 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED (VL)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST -4 "0") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED (I)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|index_of_vert| SUBTYPE "list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}")) (|index_of_vert_TCC3-1| |nil| 3659136927 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|index_of_vert| SUBTYPE "list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}"))) (|index_of_vert_TCC4| 0 (|index_of_vert_TCC4-2| "" 3885251118 ("" (SKEEP) (("" (EXPAND "length" 2 2) (("" (LIFT-IF 2) (("" (GROUND) (("" (TYPEPRED "VL") (("" (SKEEP) (("" (TYPEPRED "i") (("" (EXPAND "length") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|index_of_vert| TERMINATION "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL))" "NIL")) (|index_of_vert_TCC4-1| |nil| 3659136927 ("" (SKEEP) (("" (EXPAND "length" 2 2) (("" (LIFT-IF 2) (("" (GROUND) (("" (TYPEPRED (VL)) (("" (SKEEP) (("" (TYPEPRED "i") (("" (EXPAND "length") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|index_of_vert| TERMINATION "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL))" "NIL"))) (|index_of_vert_TCC5| 0 (|index_of_vert_TCC5-4| "" 3885184524 ("" (SKEEP) (("" (TYPEPRED " v1(v, cdr[vert(dg(G))](VL))") (("1" (GROUND) (("1" (EXPAND "length" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED "VL") (("1" (SKEEP) (("1" (GROUND) (("1" (TYPEPRED ("i")) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -4 "j-1") (("1" (EXPAND "nth" -1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (CASE "j=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND " length" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED ("VL")) (("1" (SKEEP) (("1" (TYPEPRED ("i")) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("VL")) (("2" (SKEEP) (("2" (TYPEPRED ("i")) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED ("VL")) (("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED ("i")) (("3" (EXPAND "length") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED ("VL")) (("3" (SKEEP) (("3" (INST + "i-1") (("1" (HIDE 3) (("1" (GROUND) (("1" (EXPAND "nth" -) (("1" (LIFT-IF -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 "j+1") (("1" (EXPAND "nth" -4) (("1" (LIFT-IF -4) (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (EXPAND "length" +) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED ("i")) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED ("i")) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|v| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts[T], digraph_edges[T],
     digraph_size[T], digraph_make[T]](dg(G))" |bounding_circuits_defs| NIL) (VL SKOLEM-CONST-DECL "{VL:
   list[vert[T, digraph_type[T], digraph_verts, digraph_edges,
             digraph_size, digraph_make](dg(G))] |
   EXISTS (i: below(length(VL))):
     nth(VL, i) = v AND
      FORALL (j: below(length(VL))): nth(VL, j) = nth(VL, i) IMPLIES j = i}" |bounding_circuits_defs| NIL) (|j| SKOLEM-CONST-DECL "below(length(VL))" |bounding_circuits_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "below(length(cdr[vert[T, digraph_type[T], digraph_verts, digraph_edges,
                      digraph_size, digraph_make](dg(G))]
                 (VL)))" |bounding_circuits_defs| NIL) (|i| SKOLEM-CONST-DECL "below(length(VL))" |bounding_circuits_defs| NIL)) SHOSTAK (|index_of_vert| SUBTYPE "(number_fields.+)(1, bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)))" "{i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL)) | booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, j) = bounding_circuits_defs.v, i = j))}")) (|index_of_vert_TCC5-3| |nil| 3661772729 ("" (SKEEP) (("" (TYPEPRED " v1(v, cdr[vert(dg(G))](VL))") (("1" (GROUND) (("1" (EXPAND "length" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED "VL") (("1" (SKEEP) (("1" (GROUND) (("1" (TYPEPRED (I)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -4 "j-1") (("1" (EXPAND "nth" -1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (CASE "j=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND " length" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED (VL)) (("1" (SKEEP) (("1" (TYPEPRED (I)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (VL)) (("2" (SKEEP) (("2" (TYPEPRED (I)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED (I)) (("3" (EXPAND "length") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (SKEEP) (("3" (INST + "i-1") (("1" (HIDE 3) (("1" (GROUND) (("1" (EXPAND "nth" -) (("1" (LIFT-IF -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 "j+1") (("1" (EXPAND "nth" -4) (("1" (LIFT-IF -4) (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (EXPAND "length" +) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED (I)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED (I)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|index_of_vert| SUBTYPE "(number_fields.+)(1, bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)))" "{i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL)) | booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, j) = bounding_circuits_defs.v, i = j))}")) (|index_of_vert_TCC5-2| |nil| 3659963540 ("" (SKEEP) (("" (TYPEPRED " v1(G, v, cdr[vert(dg(G))](VL))") (("1" (GROUND) (("1" (EXPAND "length" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED "VL") (("1" (SKEEP) (("1" (GROUND) (("1" (TYPEPRED (I)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -4 "j-1") (("1" (EXPAND "nth" -1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (CASE "j=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND " length" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED (VL)) (("1" (SKEEP) (("1" (TYPEPRED (I)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (VL)) (("2" (SKEEP) (("2" (TYPEPRED (I)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED (I)) (("3" (EXPAND "length") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (SKEEP) (("3" (INST + "i-1") (("1" (HIDE 3) (("1" (GROUND) (("1" (EXPAND "nth" -) (("1" (LIFT-IF -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 "j+1") (("1" (EXPAND "nth" -4) (("1" (LIFT-IF -4) (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (EXPAND "length" +) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED (I)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED (I)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|index_of_vert| SUBTYPE "(number_fields.+)(1, bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)))" "{i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL)) | booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, j) = bounding_circuits_defs.v, i = j))}")) (|index_of_vert_TCC5-1| |nil| 3659136927 ("" (SKEEP) (("" (TYPEPRED " v1(G, v, cdr[vert[T](dg(G))](VL))") (("1" (GROUND) (("1" (EXPAND "length" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED "VL") (("1" (SKEEP) (("1" (GROUND) (("1" (TYPEPRED (I)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -4 "j-1") (("1" (EXPAND "nth" -1) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (CASE "j=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND " length" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (TYPEPRED (VL)) (("1" (SKEEP) (("1" (TYPEPRED (I)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (VL)) (("2" (SKEEP) (("2" (TYPEPRED (I)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED (I)) (("3" (EXPAND "length") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (SKEEP) (("3" (INST + "i-1") (("1" (HIDE 3) (("1" (GROUND) (("1" (EXPAND "nth" -) (("1" (LIFT-IF -2) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -4 "j+1") (("1" (EXPAND "nth" -4) (("1" (LIFT-IF -4) (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j") (("2" (EXPAND "length" +) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED (I)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED (I)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|index_of_vert| SUBTYPE "(number_fields.+)(1, bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].cdr(bounding_circuits_defs.VL)))" "{i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL)) | booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(bounding_circuits_defs.VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(bounding_circuits_defs.VL, j) = bounding_circuits_defs.v, i = j))}"))) (|bound_circuits_list_def_TCC1| 0 (|bound_circuits_list_def_TCC1-1| |nil| 3661775835 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_list_def| SUBTYPE "bounding_circuits_defs.vl" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}"))) (|bound_circuits_list_def_TCC2| 0 (|bound_circuits_list_def_TCC2-3| "" 3790335781 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|)) SHOSTAK (|bound_circuits_list_def| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circuits_list(vl, vc_list, bs))]")) (|bound_circuits_list_def_TCC2-2| |nil| 3661803779 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("1" (EXPAND "bound_circuits_list") (("1" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("1" (TYPEPRED "vc_list") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "vl") (("2" (TYPEPRED "v") (("2" (EXPAND "vert_list") (("2" (INST -3 "v") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits_list_def| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circuits_list(vl, vc_list, bs))]")) (|bound_circuits_list_def_TCC2-1| |nil| 3661775835 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|bound_circuits_list_def| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circuits_list(vl, vc_list, bs))]"))) (|bound_circuits_list_def_TCC3| 0 (|bound_circuits_list_def_TCC3-1| |nil| 3661775835 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bound_circuits_list_def| SUBTYPE "bounding_circuits_defs.circ" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|bound_circuits_list_def_TCC4| 0 (|bound_circuits_list_def_TCC4-2| "" 3790335782 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_list_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|bound_circuits_list_def_TCC4-1| |nil| 3661775835 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|bound_circuits_list_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|bound_circuits_list_def_TCC5| 0 (|bound_circuits_list_def_TCC5-2| "" 3790335783 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_list_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|bound_circuits_list_def_TCC5-1| |nil| 3661775835 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|bound_circuits_list_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|bound_circuits_list_def_TCC6| 0 (|bound_circuits_list_def_TCC6-3| "" 3790335783 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_list_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]")) (|bound_circuits_list_def_TCC6-2| |nil| 3661776461 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|bound_circuits_list_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]")) (|bound_circuits_list_def_TCC6-1| |nil| 3661775835 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|bound_circuits_list_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|bound_circuits_list_def| 0 (|bound_circuits_list_def-2| |nil| 3661778006 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "bound_circuits_list" 1) (("" (LEMMA "map_nth_rw[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "vc_list") (("1" (TYPEPRED "index_of_vert(v, vl)") (("1" (LEMMA "bound_circuits_at_def") (("1" (INST - "n" "nth(vc_list, index_of_vert(v, vl))" "bs") (("1" (LABEL CORC -8) (("1" (HIDE CORC) (("1" (GROUND) (("1" (INST -6 "index_of_vert(v, vl)") (("1" (REPLACE -3 -6) (("1" (REPLACE -6 -1 :DIR RL) (("1" (REVEAL CORC) (("1" (INST -2 "circ") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "vl") (("2" (EXPAND "vert_list") (("2" (INST -2 "v") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (INST -2 "v") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (TRUE CONST-DECL "bool" |booleans| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|bound_circuits_at_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|vc_list| SKOLEM-CONST-DECL "VCList
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G), vl)" |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vl| SKOLEM-CONST-DECL "VertList
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|v| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL)) NIL) (|bound_circuits_list_def-1| |nil| 3661776954 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "bound_circuits_list" 1) (("" (LEMMA "map_nth_rw[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "vc_list") (("1" (EXPAND "vclist") (("1" (TYPEPRED "index_of_vert(v, vl)") (("1" (LEMMA "bound_circuits_at_def") (("1" (INST - "n" "nth(vc_list, index_of_vert(G, v, vl))" "bs") (("1" (LABEL CORC -7) (("1" (HIDE CORC) (("1" (GROUND) (("1" (INST -6 "index_of_vert(v, vl)") (("1" (REPLACE -3 -6) (("1" (REPLACE -6 -1 :DIR RL) (("1" (REVEAL CORC) (("1" (INST -2 "circ") (("1" (ASSERT) (("1" (GROUND) NIL))))))))))))))))))) ("2" (ASSERT) NIL))))) ("2" (TYPEPRED "vl") (("2" (EXPAND "vert_list") (("2" (INST -2 "v") NIL))))))))))))) ("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (TYPEPRED "vc_list") (("2" (EXPAND "vclist") (("2" (ASSERT) NIL))))))) ("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (INST -2 "v") NIL)))))))))))))) NIL) NIL NIL)) (|bound_circuits_iter_TCC1| 0 (|bound_circuits_iter_TCC2-3| |nil| 3661772785 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("1" (EXPAND "bound_circuits_list") (("1" (TYPEPRED "vc_list") (("1" (ASSERT) (("1" (TYPEPRED "vl") (("1" (EXPAND "vert_list") (("1" (INST -2 "v") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "vl") (("2" (EXPAND "vert_list") (("2" (INST -2 "v") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL)) NIL (|bound_circuits_iter| SUBTYPE "bounding_circuits_defs.vl" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}")) (|bound_circuits_iter_TCC2-2| |nil| 3661719764 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(G, v, vl)") (("" (REPLACE -4) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) (("" (EXPAND "vclist") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits_iter| SUBTYPE "bounding_circuits_defs.vl" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}")) (|bound_circuits_iter_TCC2-1| |nil| 3659185144 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(G, v, vl)") (("" (REPLACE -4) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) (("" (EXPAND "vclist") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits_iter| SUBTYPE "bounding_circuits_defs.vl" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}"))) (|bound_circuits_iter_TCC2| 0 (|bound_circuits_iter_TCC3-1| |nil| 3659185144 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("" (REPLACE -4) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length") (("" (TYPEPRED "vc_list") (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL)) NIL (|bound_circuits_iter| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bcl)]"))) (|bound_circuits_iter_TCC3| 0 (|bound_circuits_iter_TCC4-1| |nil| 3659185144 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_iter| SUBTYPE "(number_fields.-)(bounding_circuits_defs.i, 1)" "nat"))) (|bound_circuits_iter_TCC4| 0 (|bound_circuits_iter_TCC5-1| |nil| 3770219239 ("" (TERMINATION-TCC) NIL NIL) ((|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_iter| TERMINATION "bounding_circuits_defs.bound_circuits_iter(bounding_circuits_defs.vl, bounding_circuits_defs.vc_list, bounding_circuits_defs.nbs, (number_fields.-)(bounding_circuits_defs.i, 1))" "NIL"))) (|bound_circuits_iter_def_TCC1| 0 (|bound_circuits_iter_def_TCC1-1| |nil| 3661774396 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_iter_def| SUBTYPE "bounding_circuits_defs.circ" "Walk[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(bounding_circuits_defs.G))"))) (|bound_circuits_iter_def_TCC2| 0 (|bound_circuits_iter_def_TCC2-2| "" 3790335797 ("" (USE "measure_matrix_assoc") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_iter_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}")) (|bound_circuits_iter_def_TCC2-1| |nil| 3661774396 ("" (THEN (USE "measure_matrix_assoc") (ASSERT))) NIL NIL (|bound_circuits_iter_def| SUBTYPE "measures[bounding_circuits_defs.N].*" "{f: [[Measure_Matrix[N], Measure_Matrix[N]] -> Measure_Matrix[N]] | operator_defs[Measure_Matrix[N]].associative?(bounding_circuits_defs.f)}"))) (|bound_circuits_iter_def_TCC3| 0 (|bound_circuits_iter_def_TCC3-2| "" 3790335797 ("" (REWRITE "id_is_identity") (("" (ASSERT) NIL NIL)) NIL) ((N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL)) SHOSTAK (|bound_circuits_iter_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}")) (|bound_circuits_iter_def_TCC3-1| |nil| 3661774396 ("" (THEN (REWRITE "id_is_identity") (ASSERT))) NIL SHOSTAK (|bound_circuits_iter_def| SUBTYPE "measures[bounding_circuits_defs.N].id" "{zero: Measure_Matrix[N] | operator_defs[Measure_Matrix[N]].identity?(measures[bounding_circuits_defs.N].*)(bounding_circuits_defs.zero)}"))) (|bound_circuits_iter_def_TCC4| 0 (|bound_circuits_iter_def_TCC4-1| |nil| 3661774396 ("" (SUBTYPE-TCC) NIL NIL) ((|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|get| CONST-DECL "Sign3" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|le| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|verts_in?| CONST-DECL "bool" |walks_| |digraphs|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (/= CONST-DECL "boolean" |notequal| NIL) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits_iter_def| SUBTYPE "c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].get_wgt" "[[W: wgd_type[T, Measure_Matrix[N], measures.*, measures[N].id], (c_digraphs_imp[bounding_circuits_defs.T].digraph_edges(c_weighted_digraphs_def[bounding_circuits_defs.T, Measure_Matrix[N], measures[bounding_circuits_defs.N].*, measures[bounding_circuits_defs.N].id].wgd_dg(W)))] -> Measure_Matrix[N]]"))) (|bound_circuits_iter_def| 0 (|bound_circuits_iter_def-2| "" 3885185511 ("" (SKOLEM 1 ("_" "_" "vl" "vc_list" "_" "_")) (("" (INDUCT "i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (GROUND) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter" 1) (("1" (INST -1 "n+1" "v" "LAMBDA
                                                         (v: vert(dg(G))):
                                                         nth
                                                         (bound_circuits_list
                                                          (vl, vc_list, bs),
                                                          index_of_vert(v, vl))") (("1" (GROUND) (("1" (HIDE 2) (("1" (LEMMA "bound_circuits_list_def") (("1" (SKEEP) (("1" (INST -1 "n" "v2" "vl" "vc_list" "bs") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED ("cc")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v!1, vl)") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "j=0") (("1" (HIDE (-2 1)) (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (LEMMA "bound_circuits_list_def") (("1" (INST?) (("1" (INST -1 "n") (("1" (LABEL CORC -4) (("1" (HIDE CORC) (("1" (GROUND) (("1" (INST - "circ") (("1" (REVEAL CORC) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (EXPAND "cycle_at?") (("6" (EXPAND "cycle?") (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (SKEEP) (("7" (SKEEP) (("7" (LEMMA "id_is_identity") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (SKEEP) (("8" (SKEEP) (("8" (LEMMA "measure_matrix_assoc") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (SKEEP) (("9" (SKEEP) (("9" (TYPEPRED "cc") (("9" (EXPAND "circuit_at?") (("9" (EXPAND "circuit?") (("9" (EXPAND "pre_circuit?") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|vc_list| SKOLEM-CONST-DECL "VCList
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G), vl)" |bounding_circuits_defs| NIL) (|vl| SKOLEM-CONST-DECL "VertList
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|bound_circuits_iter| DEF-DECL "[vert(dg(G)) -> list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|member| DEF-DECL "bool" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bound_circuits_list_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|bound_circuits_iter_def-1| |nil| 3661803032 ("" (SKOLEM 1 ("_" "_" "vl" "vc_list" "_" "_")) (("" (INDUCT "i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (GROUND) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter" 1) (("1" (INST -1 "n+1" "v" "LAMBDA
                                                         (v: vert(dg(G))):
                                                         nth
                                                         (bound_circuits_list
                                                          (vl, vc_list, bs),
                                                          index_of_vert(v, vl))") (("1" (GROUND) (("1" (HIDE 2) (("1" (LEMMA "bound_circuits_list_def") (("1" (SKEEP) (("1" (INST -1 "n" "v2" "vl" "vc_list" "bs") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v!1, vl)") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "j=0") (("1" (HIDE (-2 1)) (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (LEMMA "bound_circuits_list_def") (("1" (INST?) (("1" (INST -1 "n") (("1" (LABEL CORC -4) (("1" (HIDE CORC) (("1" (GROUND) (("1" (INST - "circ") (("1" (REVEAL CORC) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "id_is_identity") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (LEMMA "measure_matrix_assoc") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (EXPAND "cycle_at?") (("6" (EXPAND "cycle?") (("6" (EXPAND "circuit_at?") (("6" (EXPAND "circuit?") (("6" (EXPAND "pre_circuit?") (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE 2) (("7" (SKEEP) (("7" (SKEEP) (("7" (LEMMA "id_is_identity") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (SKEEP) (("8" (SKEEP) (("8" (LEMMA "measure_matrix_assoc") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (SKEEP) (("9" (SKEEP) (("9" (TYPEPRED "cc") (("9" (EXPAND "circuit_at?") (("9" (EXPAND "circuit?") (("9" (EXPAND "pre_circuit?") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|bound_circuits_iter_stable| 0 (|bound_circuits_iter_stable-2| "" 3885185661 ("" (SKOLEM 1 ("vl" "vc_list" "_" "_")) (("" (INDUCT "i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (GROUND) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter" 1) (("1" (INST -1 "LAMBDA (v: vert(dg(G))):
                                         nth(bound_circuits_list(vl, vc_list, bs),
                                             index_of_vert(v, vl))") (("1" (GROUND) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -3 1 :DIR RL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "index_of_vert(x!1, vl)") (("1" (LEMMA " map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "list_extensionality[list[Measure_Matrix]]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("1" (EXPAND "bound_circuits_list") (("1" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("1" (TYPEPRED ("vc_list")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE (2 3)) (("2" (SKEEP) (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED ("vl")) (("3" (ASSERT) (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (SKEEP) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("1" (LEMMA "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (CASE-REPLACE "(LAMBDA (v: vert(dg(G))):
                                                                     nth(bound_circuits_list
                                                                         (vl, vc_list, bs),
                                                                         index_of_vert(v, vl))) = bs") (("1" (DECOMPOSE-EQUALITY 1) (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "index_of_vert(x!1, vl)") (("1" (LEMMA "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (HIDE (2 3)) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE (2 3)) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE (2 3)) (("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (SKEEP) (("2" (TYPEPRED "vc_list") (("2" (EXPAND "bound_circuits_list") (("2" (TYPEPRED "index_of_vert( v, vl)") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE (2 3)) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_list") (("2" (SKEEP) (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE 2) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED ("vl")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j=0") (("1" (REPLACE -1) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -3 :DIR RL) (("1" (DECOMPOSE-EQUALITY 2) (("1" (LEMMA "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACE -1) (("1" (TYPEPRED "index_of_vert(x!1, vl)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|bound_circuits_iter| DEF-DECL "[vert(dg(G)) -> list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|n| SKOLEM-CONST-DECL "below(length(map(LAMBDA (v: vert(dg(G))):
                   nth(bound_circuits_list(vl, vc_list, bs),
                       index_of_vert(v, vl)))
                (vl)))" |bounding_circuits_defs| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|vc_list| SKOLEM-CONST-DECL "VCList
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G), vl)" |bounding_circuits_defs| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|vl| SKOLEM-CONST-DECL "VertList
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|bs| SKOLEM-CONST-DECL "[vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
      digraph_make](dg(G)) ->
   list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL)) SHOSTAK) (|bound_circuits_iter_stable-1| |nil| 3661803321 ("" (SKOLEM 1 ("vl" "vc_list" "_" "_")) (("" (INDUCT "i") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (GROUND) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter" 1) (("1" (INST -1 "LAMBDA (v: vert(dg(G))):
                                         nth(bound_circuits_list(vl, vc_list, bs),
                                             index_of_vert(v, vl))") (("1" (GROUND) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -3 1 :DIR RL) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "index_of_vert(x!1, vl)") (("1" (LEMMA " map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "list_extensionality[list[Measure_Matrix]]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("1" (EXPAND "bound_circuits_list") (("1" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("1" (TYPEPRED (VC_LIST)) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE (2 3)) (("2" (SKEEP) (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED (VL)) (("3" (ASSERT) (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (SKEEP) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("1" (LEMMA "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (CASE-REPLACE "(LAMBDA (v: vert(dg(G))):
                                                                     nth(bound_circuits_list
                                                                         (vl, vc_list, bs),
                                                                         index_of_vert(v, vl))) = bs") (("1" (DECOMPOSE-EQUALITY 1) (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "index_of_vert(x!1, vl)") (("1" (LEMMA "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (HIDE (2 3)) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE (2 3)) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE (2 3)) (("3" (TYPEPRED "vl") (("3" (EXPAND "vert_list") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (2 3)) (("2" (SKEEP) (("2" (TYPEPRED "vc_list") (("2" (EXPAND "bound_circuits_list") (("2" (TYPEPRED "index_of_vert( v, vl)") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE (2 3)) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_list") (("2" (SKEEP) (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (HIDE 2) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (VL)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j=0") (("1" (REPLACE -1) (("1" (SKEEP) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -3 :DIR RL) (("1" (DECOMPOSE-EQUALITY 2) (("1" (LEMMA "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACE -1) (("1" (TYPEPRED "index_of_vert(x!1, vl)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "index_of_vert(v, vl)") (("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (TYPEPRED "vl") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|bound_circuits_TCC1| 0 (|bound_circuits_TCC1-1| |nil| 3659198706 ("" (SUBTYPE-TCC) NIL NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| |digraphs|) (^ CONST-DECL "real" |exponentiation| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits| SUBTYPE "matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)" "upto(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G))"))) (|bound_circuits_TCC2| 0 (|bound_circuits_TCC2-1| |nil| 3659198706 ("" (SUBTYPE-TCC) NIL NIL) ((|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|MM_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| |digraphs|) (^ CONST-DECL "real" |exponentiation| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits| SUBTYPE "matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)" "upto(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G))"))) (|bound_circuits_TCC3| 0 (|bound_circuits_TCC3-1| |nil| 3659198706 ("" (SUBTYPE-TCC) NIL NIL) ((|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|MM_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| |digraphs|) (^ CONST-DECL "real" |exponentiation| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits| SUBTYPE "matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)" "upto(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G))"))) (|bound_circuits_TCC4| 0 (|bound_circuits_TCC4-5| "" 3885185730 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_stable") (("" (INST?) (("" (INST - "CircBound(G) - bs`1") (("1" (ASSERT) (("1" (LEMMA "bound_circuits_iter_def") (("1" (INST?) (("1" (INST - "bs`1" "_") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "v2") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED ("cc")) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -6 -1 :DIR RL) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (REPLACE -12 -1 :DIR RL) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "mm_list_bool" -2) (("1" (LEMMA "map_nth_rw[vert(dg(G)),list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "index_of_vert(v2, vl)") (("1" (REPLACES -2) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -12) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "v2") (("2" (INST -4 "cc") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST -1 "cc") (("2" (SKEEP -) (("2" (INST 1 "M2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (<= CONST-DECL "bool" |reals| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|member| DEF-DECL "bool" |list_props| NIL) (|positive?| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|BoundingSets| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|cc| SKOLEM-CONST-DECL "{cc |
   (circuit_at?
        [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
         digraph_make]
        (dg(G), cc, v2)
     AND length(cc) <= CircBound(G))
    OR
    cycle_at?
        [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
         digraph_make]
        (dg(G), cc, v2)}" |bounding_circuits_defs| NIL) (|v2| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|every_nth| FORMULA-DECL NIL |list_props| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|bound_circ_list| SKOLEM-CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|vl| SKOLEM-CONST-DECL "VertList
    [T, digraph_type[T], digraph_verts[T], digraph_edges[T],
     digraph_size[T], digraph_make[T]](dg(G))" |bounding_circuits_defs| NIL) (|v2| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mm_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|MM_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|v2| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|cc| SKOLEM-CONST-DECL "{cc |
   (circuit_at?
        [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
         digraph_make]
        (dg(G), cc, v2)
     AND length(cc) <= CircBound(G))
    OR
    cycle_at?
        [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
         digraph_make]
        (dg(G), cc, v2)}" |bounding_circuits_defs| NIL) (|bound_circuits_iter_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bs| SKOLEM-CONST-DECL "BoundingSets[T, N](G)" |bounding_circuits_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bound_circuits_iter_stable| FORMULA-DECL NIL |bounding_circuits_defs| NIL)) SHOSTAK (|bound_circuits| SUBTYPE "(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G), booleans.TRUE, bounding_circuits_defs.bs`3)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC4-4| "" 3804733541 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_stable") (("" (INST?) (("" (INST - "CircBound(G) - bs`1") (("1" (ASSERT) (("1" (LEMMA "bound_circuits_iter_def") (("1" (INST?) (("1" (INST - "bs`1" "_") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "v2") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -6 -1 :DIR RL) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (REPLACE -12 -1 :DIR RL) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "mm_list_bool" -2) (("1" (LEMMA "map_nth_rw[vert(dg(G)),list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "index_of_vert(v2, vl)") (("1" (REPLACES -2) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -12) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "v2") (("2" (INST -4 "cc") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST -1 "cc") (("2" (SKEEP -) (("2" (INST 1 "M2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bound_circuits| SUBTYPE "(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G), booleans.TRUE, bounding_circuits_defs.bs`3)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC4-3| |nil| 3661773744 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_stable") (("" (INST?) (("" (INST - "CircBound(G) - bs`1") (("1" (ASSERT) (("1" (LEMMA "bound_circuits_iter_def") (("1" (INST?) (("1" (INST - "bs`1" "_") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "v2") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -6 -1 :DIR RL) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (REPLACE -10 -1 :DIR RL) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "mm_list_bool" -2) (("1" (LEMMA "map_nth_rw[vert(dg(G)),list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "index_of_vert(v2, vl)") (("1" (REPLACES -2) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -14) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "v2") (("2" (INST -4 "cc") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST -1 "cc") (("2" (SKEEP -) (("2" (INST 1 "M2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G), booleans.TRUE, bounding_circuits_defs.bs`3)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC4-2| |nil| 3661719997 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_stable") (("" (INST?) (("" (INST - "CircBound(G) - bs`1") (("1" (ASSERT) (("1" (LEMMA "bound_circuits_iter_def") (("1" (INST?) (("1" (INST - "bs`1" "_") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "v2") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -6 -1 :DIR RL) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (REPLACE -10 -1 :DIR RL) (("1" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "mm_list_bool" -2) (("1" (LEMMA "map_nth_rw[vert(dg(G)),list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "index_of_vert(G, v2, vl)") (("1" (REPLACES -2) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -14) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "v2") (("2" (INST -4 "cc") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST -1 "cc") (("2" (SKEEP -) (("2" (INST 1 "M2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G), booleans.TRUE, bounding_circuits_defs.bs`3)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC4-1| |nil| 3659198706 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_stable") (("" (INST?) (("" (INST - "CircBound(G) - bs`1") (("1" (ASSERT) (("1" (LEMMA "bound_circuits_iter_def") (("1" (INST?) (("1" (INST - "bs`1" "_") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "v2") (("1" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACE -6 -1 :DIR RL) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (REPLACE -10 -1 :DIR RL) (("1" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACE -1) (("1" (EXPAND "mm_list_bool" -2) (("1" (LEMMA "map_nth_rw[vert(dg(G)),list[Measure_Matrix]]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "index_of_vert(G, v2, vl)") (("1" (REPLACES -2) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -14) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "vl") (("3" (ASSERT) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "v2") (("2" (INST -4 "cc") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST -1 "cc") (("2" (SKEEP -) (("2" (INST 1 "M2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (ASSERT) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "bs`1") (("2" (ASSERT) (("2" (CASE "bs`1 = CircBound(G)") (("1" (TYPEPRED "bs") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "cc") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G), booleans.TRUE, bounding_circuits_defs.bs`3)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)"))) (|bound_circuits_TCC5| 0 (|bound_circuits_TCC5-1| |nil| 3659198706 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (<= CONST-DECL "bool" |reals| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|member| DEF-DECL "bool" |list_props| NIL) (|positive?| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|BoundingSets| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|le| CONST-DECL "bool" |measures| NIL) (|positive_fun?| CONST-DECL "bool" |measures| NIL) (|form_matfun| CONST-DECL "{f | eq(m, f)}" |measures| NIL) (|get| CONST-DECL "Sign3" |measures| NIL) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|MM_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_circuits| SUBTYPE "bounding_circuits_defs.vl" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}"))) (|bound_circuits_TCC6| 0 (|bound_circuits_TCC6-4| "" 3804738367 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("" (REPLACES -5) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|BoundingSets| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|positive?| CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|bound_circuits| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circ_list)]")) (|bound_circuits_TCC6-3| |nil| 3661775465 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("" (REPLACES -6) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circ_list)]")) (|bound_circuits_TCC6-2| |nil| 3661720026 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(G, v, vl)") (("" (REPLACES -6) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) (("" (EXPAND "vclist") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circ_list)]")) (|bound_circuits_TCC6-1| |nil| 3659198706 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(G, v, vl)") (("" (REPLACES -6) (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) (("" (EXPAND "vclist") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bound_circ_list)]"))) (|bound_circuits_TCC7| 0 (|bound_circuits_TCC7-5| "" 3885185791 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_def") (("" (INST -1 "bs`1" "_" "vl" "vc_list" "bs`3" "1") (("" (SKEEP) (("" (SKEEP) (("" (INST -1 "v2") (("" (TYPEPRED "bs") (("" (ASSERT) (("" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED ("cc")) (("1" (GROUND) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -9 2) (("1" (SIMPLIFY 2) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1 -2) (("1" (REPLACE -9 -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "i") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REPLACE -12 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -8 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_iter") (("2" (EXPAND "bound_circuits_iter") (("2" (REPLACE -8 2) (("2" (SIMPLIFY 2) (("2" (SKEEP) (("2" (INST 2 "M") (("2" (ASSERT) (("2" (EXPAND "MM_list_bool") (("2" (LEMMA "every_nth[bool]") (("2" (INST?) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) (("2" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REPLACE -11 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACES -10 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|member| DEF-DECL "bool" |list_props| NIL) (|positive?| CONST-DECL "bool" |measures| NIL) (<= CONST-DECL "bool" |measures| NIL) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|BoundingSets| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}" |real_defs| NIL) (|MM_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|mm_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bound_circ_list| SKOLEM-CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|vl| SKOLEM-CONST-DECL "VertList
    [T, digraph_type[T], digraph_verts[T], digraph_edges[T],
     digraph_size[T], digraph_make[T]](dg(G))" |bounding_circuits_defs| NIL) (|v2| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|every_nth| FORMULA-DECL NIL |list_props| NIL) (|bound_circuits_iter| DEF-DECL "[vert(dg(G)) -> list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|bound_circuits_iter_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bound_circuits| SUBTYPE "(real_defs.min((number_fields.+)(bounding_circuits_defs.bs`1, 1), matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)), booleans.TRUE, bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC7-4| "" 3804786834 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_def") (("" (INST -1 "bs`1" "_" "vl" "vc_list" "bs`3" "1") (("" (SKEEP) (("" (SKEEP) (("" (INST -1 "v2") (("" (TYPEPRED "bs") (("" (ASSERT) (("" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (GROUND) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -9 2) (("1" (SIMPLIFY 2) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1 -2) (("1" (REPLACE -9 -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "i") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REPLACE -12 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -8 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_iter") (("2" (EXPAND "bound_circuits_iter") (("2" (REPLACE -8 2) (("2" (SIMPLIFY 2) (("2" (SKEEP) (("2" (INST 2 "M") (("2" (ASSERT) (("2" (EXPAND "MM_list_bool") (("2" (LEMMA "every_nth[bool]") (("2" (INST?) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) (("2" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REPLACE -11 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACES -10 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bound_circuits| SUBTYPE "(real_defs.min((number_fields.+)(bounding_circuits_defs.bs`1, 1), matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)), booleans.TRUE, bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC7-3| |nil| 3661775527 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_def") (("" (INST -1 "bs`1" "_" "vl" "vc_list" "bs`3" "1") (("" (SKEEP) (("" (SKEEP) (("" (INST -1 "v2") (("" (TYPEPRED "bs") (("" (ASSERT) (("" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (GROUND) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -9 2) (("1" (SIMPLIFY 2) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1 -2) (("1" (REPLACE -10 -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "i") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REPLACE -13 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -9 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_iter") (("2" (EXPAND "bound_circuits_iter") (("2" (REPLACE -8 2) (("2" (SIMPLIFY 2) (("2" (SKEEP) (("2" (INST 2 "M") (("2" (ASSERT) (("2" (EXPAND "MM_list_bool") (("2" (LEMMA "every_nth[bool]") (("2" (INST?) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) (("2" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REPLACE -12 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACES -11 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "(real_defs.min((number_fields.+)(bounding_circuits_defs.bs`1, 1), matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)), booleans.TRUE, bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC7-2| |nil| 3661720043 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_def") (("" (INST -1 "G" "bs`1" "_" "vl" "vc_list" "bs`3" "1") (("" (SKEEP) (("" (SKEEP) (("" (INST -1 "v2") (("" (TYPEPRED "bs") (("" (ASSERT) (("" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (GROUND) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -9 2) (("1" (SIMPLIFY 2) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1 -2) (("1" (REPLACE -10 -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "i") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REPLACE -13 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -9 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (EXPAND "vclist") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_iter") (("2" (EXPAND "bound_circuits_iter") (("2" (REPLACE -8 2) (("2" (SIMPLIFY 2) (("2" (SKEEP) (("2" (INST 2 "M") (("2" (ASSERT) (("2" (EXPAND "MM_list_bool") (("2" (LEMMA "every_nth[bool]") (("2" (INST?) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) (("2" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REPLACE -12 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACES -11 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "(real_defs.min((number_fields.+)(bounding_circuits_defs.bs`1, 1), matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)), booleans.TRUE, bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|bound_circuits_TCC7-1| |nil| 3659198706 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA "bound_circuits_iter_def") (("" (INST -1 "G" "bs`1" "_" "vl" "vc_list" "bs`3" "1") (("" (SKEEP) (("" (SKEEP) (("" (INST -1 "v2") (("" (TYPEPRED "bs") (("" (ASSERT) (("" (GROUND) (("1" (SKEEP) (("1" (INST -1 "cc") (("1" (TYPEPRED (CC)) (("1" (GROUND) (("1" (EXPAND "bound_circuits_iter") (("1" (EXPAND "bound_circuits_iter") (("1" (REPLACE -9 2) (("1" (SIMPLIFY 2) (("1" (SKEEP) (("1" (INST 2 "M") (("1" (ASSERT) (("1" (EXPAND "MM_list_bool") (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1 -2) (("1" (REPLACE -10 -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -2 "i") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REPLACE -13 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACE -9 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (EXPAND "vclist") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bound_circuits_iter") (("2" (EXPAND "bound_circuits_iter") (("2" (REPLACE -8 2) (("2" (SIMPLIFY 2) (("2" (SKEEP) (("2" (INST 2 "M") (("2" (ASSERT) (("2" (EXPAND "MM_list_bool") (("2" (LEMMA "every_nth[bool]") (("2" (INST?) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) (("2" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[ list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REPLACE -12 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (REPLACES -11 1) (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (SKEEP) (("2" (INST? -) (("2" (ASSERT) (("2" (SKEEP -) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_circuits| SUBTYPE "(real_defs.min((number_fields.+)(bounding_circuits_defs.bs`1, 1), matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G)), booleans.TRUE, bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)"))) (|start_bounding_TCC1| 0 (|start_bounding_TCC1-1| |nil| 3659269721 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|vert| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|start_bounding_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|start_bounding| SUBTYPE "bounding_circuits_defs.vl" "{VL: list_adt[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].list | EXISTS (i: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.AND(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i) = bounding_circuits_defs.v, FORALL (j: naturalnumbers.below(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].length(VL))): booleans.IMPLIES(list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, j) = list_props[vert[bounding_circuits_defs.T, digraph_type[T], c_digraphs_imp[bounding_circuits_defs.T].digraph_verts, c_digraphs_imp[bounding_circuits_defs.T].digraph_edges, c_digraphs_imp[bounding_circuits_defs.T].digraph_size, c_digraphs_imp[bounding_circuits_defs.T].digraph_make](dg(bounding_circuits_defs.G))].nth(VL, i), j = i))}"))) (|start_bounding_TCC2| 0 (|start_bounding_TCC2-3| |nil| 3661775566 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(v, vl)") (("" (REPLACES -4) (("" (EXPAND "start_bounding_list") (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|bs0| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|start_bounding_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|)) NIL (|start_bounding| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bc1)]")) (|start_bounding_TCC2-2| |nil| 3661720070 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(G, v, vl)") (("" (REPLACES -4) (("" (EXPAND "start_bounding_list") (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) (("" (EXPAND "vclist") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|start_bounding| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bc1)]")) (|start_bounding_TCC2-1| |nil| 3659269721 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "index_of_vert(G, v, vl)") (("" (REPLACES -4) (("" (EXPAND "start_bounding_list") (("" (EXPAND "bound_circuits_list") (("" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("" (TYPEPRED "vc_list") (("" (ASSERT) (("" (EXPAND "vclist") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|start_bounding| SUBTYPE "bounding_circuits_defs.index_of_vert(bounding_circuits_defs.v, bounding_circuits_defs.vl)" "below[length[list[Measure_Matrix[N]]](bc1)]"))) (|start_bounding_TCC3| 0 (|start_bounding_TCC3-1| |nil| 3659269721 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|minimalize| CONST-DECL "{L: list[Measure_Matrix[N]] |
   (FORALL ((M: Measure_Matrix | member(M, LM))):
      EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
    AND (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}" |bounding_circuits_defs| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|start_bounding_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| |digraphs|) (^ CONST-DECL "real" |exponentiation| NIL) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|start_bounding| SUBTYPE "1" "upto(matrix_wdg[bounding_circuits_defs.T, bounding_circuits_defs.N].CircBound(bounding_circuits_defs.G))"))) (|start_bounding_TCC4| 0 (|start_bounding_TCC4-4| "" 3790335977 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (REPLACE -1 -2) (("" (REPLACE -2 1) (("" (SIMPLIFY 1) (("" (EXPAND "start_bounding_list" 1) (("" (LEMMA "bound_circuits_list_def") (("" (INST?) (("" (TYPEPRED "cc") (("" (INST -3 "0") (("" (LABEL CIRC -2) (("" (HIDE CIRC) (("" (GROUND) (("1" (INST -1 "cc") (("1" (REVEAL CIRC) (("1" (ASSERT) (("1" (REPLACE -4 -6) (("1" (EXPAND "start_bounding_list" -6) (("1" (EXPAND "MM_list_bool") (("1" (CASE "(EXISTS (M: Measure_Matrix):
                            member(M,
                                   nth(bound_circuits_list(vl, vc_list, bs0),
                                       index_of_vert(v2, vl)))
                             AND M <= wgt_walk(G, cc))") (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (HIDE (-3 -4)) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 1)) (("5" (SKEEP) (("5" (EXPAND "cycle_at?") (("5" (EXPAND "cycle?") (("5" (EXPAND "circuit_at?") (("5" (EXPAND "circuit?") (("5" (EXPAND "pre_circuit?") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (TYPEPRED "index_of_vert(v2, vl)") (("6" (EXPAND "bound_circuits_list") (("6" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("6" (TYPEPRED "vc_list") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (TYPEPRED "vl") (("7" (ASSERT) (("7" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bound_circuits_list_def| FORMULA-DECL NIL |bounding_circuits_defs| NIL) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (<= CONST-DECL "bool" |reals| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|MM_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|circuit?| CONST-DECL "bool" |circuits_| |digraphs|) (|cycle?| CONST-DECL "bool" |cycles_| |digraphs|) (|measure_matrix_assoc| FORMULA-DECL NIL |measures| NIL) (|id_is_identity| FORMULA-DECL NIL |measures| NIL) (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|every_nth| FORMULA-DECL NIL |list_props| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|bound_circuits_at| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|positive?| CONST-DECL "bool" |measures| NIL) (|v2| SKOLEM-CONST-DECL "vert[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](dg(G))" |bounding_circuits_defs| NIL) (|vl| SKOLEM-CONST-DECL "VertList
    [T, digraph_type[T], digraph_verts[T], digraph_edges[T],
     digraph_size[T], digraph_make[T]](dg(G))" |bounding_circuits_defs| NIL) (|vc_list| SKOLEM-CONST-DECL "VCList
    [T, digraph_type[T], digraph_verts[T], digraph_edges[T],
     digraph_size[T], digraph_make[T]](dg(G), vl)" |bounding_circuits_defs| NIL) (|mm_list_bool| CONST-DECL "bool" |bounding_circuits_defs| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|identity?| CONST-DECL "bool" |operator_defs| NIL) (|associative?| CONST-DECL "bool" |operator_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|bound_circuits_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL) (|index_of_vert| DEF-DECL "{i: below(length(VL)) |
   nth(VL, i) = v AND
    FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j}" |bounding_circuits_defs| NIL) (<= CONST-DECL "bool" |measures| NIL) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bs0| CONST-DECL "list[Measure_Matrix[N]]" |bounding_circuits_defs| NIL) (|VCList| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|VertCycles| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| |digraphs|) (|VertList| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert_list| CONST-DECL "bool" |digraphs_| |digraphs|) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|start_bounding_list| CONST-DECL "list[list[Measure_Matrix[N]]]" |bounding_circuits_defs| NIL)) SHOSTAK (|start_bounding| SUBTYPE "(1, bounding_circuits_defs.MM_list_bool(bounding_circuits_defs.bc1), bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|start_bounding_TCC4-3| |nil| 3661776573 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (REPLACE -1 -2) (("" (REPLACE -2 1) (("" (SIMPLIFY 1) (("" (EXPAND "start_bounding_list" 1) (("" (LEMMA "bound_circuits_list_def") (("" (INST?) (("" (TYPEPRED "cc") (("" (INST -3 "0") (("" (LABEL CIRC -2) (("" (HIDE CIRC) (("" (GROUND) (("1" (INST -1 "cc") (("1" (REVEAL CIRC) (("1" (ASSERT) (("1" (REPLACE -4 -6) (("1" (EXPAND "start_bounding_list" -6) (("1" (EXPAND "MM_list_bool") (("1" (CASE "(EXISTS (M: Measure_Matrix):
                            member(M,
                                   nth(bound_circuits_list(vl, vc_list, bs0),
                                       index_of_vert(v2, vl)))
                             AND M <= wgt_walk(G, cc))") (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (HIDE (-3 -4)) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(v2, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 1)) (("5" (SKEEP) (("5" (EXPAND "cycle_at?") (("5" (EXPAND "cycle?") (("5" (EXPAND "circuit_at?") (("5" (EXPAND "circuit?") (("5" (EXPAND "pre_circuit?") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (TYPEPRED "index_of_vert(v2, vl)") (("1" (EXPAND "bound_circuits_list") (("1" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("1" (TYPEPRED "vc_list") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "vl") (("2" (EXPAND "vert_list") (("2" (INST -2 "v2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (TYPEPRED "vl") (("7" (ASSERT) (("7" (INST?) (("7" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|start_bounding| SUBTYPE "(1, bounding_circuits_defs.MM_list_bool(bounding_circuits_defs.bc1), bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|start_bounding_TCC4-2| |nil| 3661720109 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (REPLACE -1 -2) (("" (REPLACE -2 1) (("" (SIMPLIFY 1) (("" (EXPAND "start_bounding_list" 1) (("" (LEMMA "bound_circuits_list_def") (("" (INST?) (("" (TYPEPRED "cc") (("" (INST -3 "0") (("" (LABEL CIRC -2) (("" (HIDE CIRC) (("" (GROUND) (("1" (INST -1 "cc") (("1" (REVEAL CIRC) (("1" (ASSERT) (("1" (REPLACE -4 -6) (("1" (EXPAND "start_bounding_list" -6) (("1" (EXPAND "MM_list_bool") (("1" (CASE "(EXISTS (M: Measure_Matrix):
                   member(M,
                          nth(bound_circuits_list(G, vl, vc_list, bs0(G)),
                              index_of_vert(G, v2, vl)))
                    AND M <= wgt_walk(G, cc))") (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (HIDE (-3 -4)) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 1)) (("5" (SKEEP) (("5" (EXPAND "cycle_at?") (("5" (EXPAND "cycle?") (("5" (EXPAND "circuit_at?") (("5" (EXPAND "circuit?") (("5" (EXPAND "pre_circuit?") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (TYPEPRED "index_of_vert(G, v2, vl)") (("6" (EXPAND "bound_circuits_list") (("6" (REWRITE "map_length[VertCycles(dg(G)), list[Measure_Matrix]]") (("6" (TYPEPRED "vc_list") (("6" (ASSERT) (("6" (EXPAND "vclist") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (TYPEPRED "vl") (("7" (ASSERT) (("7" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|start_bounding| SUBTYPE "(1, bounding_circuits_defs.MM_list_bool(bounding_circuits_defs.bc1), bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)")) (|start_bounding_TCC4-1| |nil| 3659269721 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (REPLACE -1 -2) (("" (REPLACE -2 1) (("" (SIMPLIFY 1) (("" (EXPAND "start_bounding_list" 1) (("" (LEMMA "bound_circuits_list_def") (("" (INST?) (("" (TYPEPRED "cc") (("" (INST -3 "0") (("" (LABEL CIRC -2) (("" (HIDE CIRC) (("" (GROUND) (("1" (INST -1 "cc") (("1" (REVEAL CIRC) (("1" (ASSERT) (("1" (REPLACE -4 -6) (("1" (EXPAND "start_bounding_list" -6) (("1" (EXPAND "MM_list_bool") (("1" (CASE "(EXISTS (M: Measure_Matrix):
          member(M,
                 nth(bound_circuits_list(G, vl, vc_list, bs0(G)),
                     index_of_vert(G, v2, vl)))
           AND M <= wgt_walk(G, cc))") (("1" (SKEEP) (("1" (INST 1 "M") (("1" (ASSERT) (("1" (HIDE (-3 -4)) (("1" (LEMMA "member_nth[Measure_Matrix]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "every_nth[bool]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "index_of_vert(G, v2, vl)") (("1" (LEMMA "map_nth_rw[list[Measure_Matrix], bool]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "mm_list_bool") (("1" (LEMMA "every_nth[Measure_Matrix]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) (("1" (INST -1 "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[ list[Measure_Matrix], bool]") (("2" (EXPAND "bound_circuits_list") (("2" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("2" (TYPEPRED "index_of_vert(G, v2, vl)") (("2" (TYPEPRED "vc_list") (("2" (ASSERT) (("2" (EXPAND "vclist") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (LEMMA "id_is_identity") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP) (("4" (LEMMA "measure_matrix_assoc") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (-1 1)) (("5" (SKEEP) (("5" (EXPAND "cycle_at?") (("5" (EXPAND "cycle?") (("5" (EXPAND "circuit_at?") (("5" (EXPAND "circuit?") (("5" (EXPAND "pre_circuit?") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (TYPEPRED "index_of_vert(G, v2, vl)") (("6" (EXPAND "bound_circuits_list") (("6" (REWRITE "map_length[Vert_Cycles(G), list[Measure_Matrix]]") (("6" (TYPEPRED "vc_list") (("6" (ASSERT) (("6" (EXPAND "vclist") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (TYPEPRED "vl") (("7" (ASSERT) (("7" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|start_bounding| SUBTYPE "(1, bounding_circuits_defs.MM_list_bool(bounding_circuits_defs.bc1), bounding_circuits_defs.nbs)" "BoundingSets[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)"))) (|bounding_from_graph_lists_TCC1| 0 (|bounding_from_graph_lists_TCC1-1| |nil| 3660126112 ("" (SKEEP*) (("" (EXPAND "bound_circuits") (("" (LIFT-IF 1) (("" (GROUND) (("" (TYPEPRED "n") (("" (TYPEPRED "BS`1") (("" (TYPEPRED "BS") (("" (ASSERT) (("" (REPLACES -2) (("" (HIDE (-1 -2 -4)) (("" (HIDE 1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bound_circuits| CONST-DECL "BoundingSets(G)" |bounding_circuits_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|BoundingSets| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|wgt_walk| CONST-DECL "Weight" |weighted_digraphs_| |digraphs|) (|make_c_wdg| CONST-DECL "wgd_type" |c_weighted_digraphs_def| |digraphs|) (|get_value| DEF-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|has_key?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|get_wgt| CONST-DECL "Weight" |c_weighted_digraphs_def| |digraphs|) (|edges| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|c_digraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (|Walk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|wgd_dg| CONST-DECL "[wgd_type -> digraph_type]" |c_weighted_digraphs_def| |digraphs|) (|walk?| CONST-DECL "bool" |walks_| |digraphs|) (|wgd_type| TYPE-EQ-DECL NIL |c_weighted_digraphs_def| |digraphs|) (<= CONST-DECL "bool" |measures| NIL) (|positive?| CONST-DECL "bool" |measures| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|cycle_at?| CONST-DECL "bool" |cycles_| |digraphs|) (|circuit_at?| CONST-DECL "bool" |circuits_| |digraphs|) (|prewalk| TYPE-EQ-DECL NIL |walks_| |digraphs|) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| |digraphs|) (|vert?| CONST-DECL "bool" |digraphs_| |digraphs|) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" |c_digraphs_imp| |digraphs|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| |digraphs|) (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]" |c_digraphs_imp| |digraphs|) (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]" |c_digraphs_imp| |digraphs|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|size| CONST-DECL "nat" |c_digraphs_def| |digraphs|) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (G FORMAL-CONST-DECL "wdg" |bounding_circuits_defs| NIL) (|CircBound| CONST-DECL "posnat" |matrix_wdg| NIL) (|wdg| TYPE-EQ-DECL NIL |matrix_wdg| NIL) (|all_edges_in_map?| CONST-DECL "bool" |c_weighted_digraphs_def| |digraphs|) (|id| CONST-DECL "Measure_Matrix" |measures| NIL) (* CONST-DECL "Measure_Matrix" |measures| NIL) (|Measure_Matrix| TYPE-EQ-DECL NIL |measures| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (N FORMAL-CONST-DECL "posnat" |bounding_circuits_defs| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Sign3| TYPE-EQ-DECL NIL |sign3| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cdigraph| CONST-DECL "bool" |c_digraphs_def| |digraphs|) (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| |digraphs|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| |digraphs|) (T FORMAL-TYPE-DECL NIL |bounding_circuits_defs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|bounding_from_graph_lists| SUBTYPE "bounding_circuits_defs.bound_circuits(bounding_circuits_defs.vl, bounding_circuits_defs.vc_list)" "BoundingStepsFun[bounding_circuits_defs.T, bounding_circuits_defs.N](bounding_circuits_defs.G)"))))
