(|exp_series|
 (|IMP_taylor_series_TCC1| 0
  (|IMP_taylor_series_TCC1-1| |nil| 3568830993 ("" (ASSUMING-TCC) NIL NIL)
   ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL
   (|IMP_taylor_series| ASSUMING "series@taylor_series[real].taylor_series"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (|IMP_taylor_series_TCC2| 0
  (|IMP_taylor_series_TCC2-1| |nil| 3568830993 ("" (ASSERT) NIL NIL)
   ((|not_one_element_real| FORMULA-DECL NIL |deriv_domain| |analysis|)) NIL
   (|IMP_taylor_series| ASSUMING "series@taylor_series[real].taylor_series"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (|IMP_taylor_series_TCC3| 0
  (|IMP_taylor_series_TCC3-1| |nil| 3568830993 ("" (ASSUMING-TCC) NIL NIL) NIL
   NIL
   (|IMP_taylor_series| ASSUMING "series@taylor_series[real].taylor_series"
    "open: ASSUMPTION FORALL (x: taylor_series.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), taylor_series.T_pred(y))")))
 (|IMP_taylor_series_TCC4| 0
  (|IMP_taylor_series_TCC4-1| |nil| 3568830993 ("" (ASSUMING-TCC) NIL NIL) NIL
   NIL
   (|IMP_taylor_series| ASSUMING "series@taylor_series[real].taylor_series"
    "ball: ASSUMPTION FORALL (x: taylor_series.T): booleans.IMPLIES(taylor_series.T_pred(x), taylor_series.T_pred((number_fields.-)(x)))")))
 (|nderiv_exp| 0
  (|nderiv_exp-2| "" 3790093855
   ("" (INDUCT "n")
    (("1" (LEMMA "exp_deriv")
      (("1" (FLATTEN)
        (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (EXPAND "nderiv" 1) (("2" (PROPAX) NIL NIL)) NIL)
     ("3" (SKOSIMP*)
      (("3" (LEMMA "exp_deriv")
        (("3" (FLATTEN)
          (("3" (PROP)
            (("1" (EXPAND "derivable_n_times?" 1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "nderiv" 1) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|nderiv_exp-1| |nil| 3298644142
   ("" (INDUCT "n")
    (("1" (LEMMA "exp_deriv")
      (("1" (FLATTEN)
        (("1" (EXPAND "derivable_n_times?")
          (("1" (ASSERT)
            (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (EXPAND "nderiv" 1)
      (("2" (EXPAND "nderiv")
        (("2" (LEMMA "exp_deriv") (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
      NIL)
     ("3" (SKOSIMP*)
      (("3" (LEMMA "exp_deriv")
        (("3" (FLATTEN)
          (("3" (PROP)
            (("1" (EXPAND "derivable_n_times?" 1) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "nderiv" 1) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP*) NIL NIL) ("5" (SKOSIMP*) NIL NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|exp_inf_deriv| 0
  (|exp_inf_deriv-1| |nil| 3298647578
   ("" (EXPAND "inf_deriv_fun?")
    (("" (INDUCT "n")
      (("1" (LEMMA "nderiv_exp") (("1" (INST?) (("1" (FLATTEN) NIL NIL)) NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (EXPAND "derivable_n_times?" 1)
          (("2" (LEMMA "exp_deriv")
            (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|exp_series_prep_TCC1| 0
  (|exp_series_prep_TCC1-1| |nil| 3298643720
   ("" (SKOSIMP*)
    (("" (ASSERT)
      (("" (LEMMA "nderiv_exp") (("" (INST?) (("" (FLATTEN) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nderiv_exp| FORMULA-DECL NIL |exp_series| NIL))
   SHOSTAK
   (|exp_series_prep| SUBTYPE "ln_exp.exp"
    "nderiv_fun[real]((number_fields.+)(1, exp_series.n))")))
 (|exp_series_prep_TCC2| 0
  (|exp_series_prep_TCC2-1| |nil| 3298643720
   ("" (REWRITE "exp_inf_deriv") NIL NIL)
   ((|exp_inf_deriv| FORMULA-DECL NIL |exp_series| NIL)) SHOSTAK
   (|exp_series_prep| SUBTYPE "ln_exp.exp" "(taylors[real].inf_deriv_fun?)")))
 (|exp_series_prep| 0
  (|exp_series_prep-4| "" 3790093860
   ("" (SKOSIMP*)
    (("" (LEMMA "squeezing_abs_0")
      (("" (INST?)
        (("1" (ASSERT)
          (("1"
            (CASE
                "EXISTS (M: posreal): (FORALL (t: between[real](0,x!1)): exp(t) <= M)")
            (("1" (SKOSIMP*)
              (("1" (INST -2 "(LAMBDA n: M!1*abs(x!1)^(n+1)/factorial(n+1))")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (PROP)
                      (("1" (LEMMA "conv_x_to_n_div_fact")
                        (("1" (INST - "abs(x!1)")
                          (("1" (LEMMA "convergence_shift")
                            (("1" (INST?)
                              (("1" (INST - "1")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "cnv_seq_scal")
                                    (("1" (INST?)
                                      (("1" (INST - "M!1")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "*")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (EXPAND "Taylor_rem")
                          (("2" (REWRITE "abs_div")
                            (("2" (EXPAND "abs" 1 2)
                              (("2" (CROSS-MULT 1)
                                (("2" (NAME-REPLACE "C" "GET_C(exp, x!1, n!1)")
                                  (("2" (FIELD 1)
                                    (("2" (CANCEL-TERMS 1)
                                      (("2" (INST - "C")
                                        (("2" (REWRITE "abs_hat")
                                          (("1" (EXPAND "abs" 1 1)
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "nderiv_exp")
                                                (("1" (INST - "n!1+1")
                                                  (("1" (FLATTEN)
                                                    (("1" (REPLACE -2)
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE -1 -2)
                                                          (("1"
                                                            (EXPAND "abs" 1 1)
                                                            (("1"
                                                              (MULT-BY -1
                                                               "abs(x!1) ^ (1 + n!1)")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (CASE-REPLACE "x!1 = 0")
                                            (("1" (EXPAND "^")
                                              (("1" (EXPAND "expt")
                                                (("1" (EXPAND "abs")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (HIDE -1)
                (("2" (INST + "exp(abs(x!1))")
                  (("2" (SKOSIMP*)
                    (("2" (LEMMA "exp_increasing")
                      (("2" (EXPAND "increasing?")
                        (("2" (INST?)
                          (("2" (ASSERT)
                            (("2" (HIDE 2)
                              (("2" (TYPEPRED "x!1")
                                (("2" (TYPEPRED "t!1")
                                  (("2" (EXPAND "abs")
                                    (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "exp_inf_deriv") NIL NIL)
         ("3" (SKOSIMP*)
          (("3" (LEMMA "exp_inf_deriv")
            (("3" (EXPAND "inf_deriv_fun?") (("3" (INST?) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|exp_series_prep-3| |nil| 3298638694
   ("" (SKOSIMP*)
    (("" (LEMMA "squeezing_abs_0")
      (("" (INST?)
        (("1" (ASSERT)
          (("1"
            (CASE
                "EXISTS (M: posreal): (FORALL (t: between[real](0,x!1)): exp(t) <= M)")
            (("1" (SKOSIMP*)
              (("1" (INST -2 "(LAMBDA n: M!1*abs(x!1)^(n+1)/factorial(n+1))")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (PROP)
                      (("1" (LEMMA "conv_x_to_n_div_fact")
                        (("1" (INST - "abs(x!1)")
                          (("1" (LEMMA "convergence_shift")
                            (("1" (INST?)
                              (("1" (INST - "1")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "cnv_seq_scal")
                                    (("1" (INST?)
                                      (("1" (INST - "M!1")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "*")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (EXPAND "Taylor_rem")
                          (("2" (REWRITE "abs_div")
                            (("2" (EXPAND "abs" 1 2)
                              (("2" (CROSS-MULT 1)
                                (("2" (ASSERT)
                                  (("2"
                                    (NAME-REPLACE "C" "GET_C(exp, x!1, n!1)")
                                    (("2" (FIELD 1)
                                      (("2" (CANCEL-TERMS 1)
                                        (("2" (INST - "C")
                                          (("2" (REWRITE "abs_hat")
                                            (("1" (EXPAND "abs" 1 1)
                                              (("1" (ASSERT)
                                                (("1" (LEMMA "nderiv_exp")
                                                  (("1" (INST - "n!1+1")
                                                    (("1" (FLATTEN)
                                                      (("1" (REPLACE -2)
                                                        (("1" (ASSERT)
                                                          (("1" (HIDE -1 -2)
                                                            (("1"
                                                              (EXPAND "abs" 1
                                                                      1)
                                                              (("1"
                                                                (MULT-BY -1
                                                                 "abs(x!1) ^ (1 + n!1)")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (CASE-REPLACE "x!1 = 0")
                                              (("1" (EXPAND "^")
                                                (("1" (EXPAND "expt")
                                                  (("1" (EXPAND "abs")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (HIDE -1)
                (("2" (INST + "exp(abs(x!1))")
                  (("2" (SKOSIMP*)
                    (("2" (LEMMA "exp_increasing")
                      (("2" (EXPAND "increasing?")
                        (("2" (INST?)
                          (("2" (ASSERT)
                            (("2" (HIDE 2)
                              (("2" (TYPEPRED "x!1")
                                (("2" (TYPEPRED "t!1")
                                  (("2" (EXPAND "abs")
                                    (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "exp_inf_deriv") NIL NIL)
         ("3" (SKOSIMP*)
          (("3" (LEMMA "exp_inf_deriv")
            (("3" (EXPAND "inf_deriv_fun?") (("3" (INST?) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   NIL)
  (|exp_series_prep-2| |nil| 3298638280
   ("" (SKOSIMP*)
    (("" (LEMMA "squeezing_abs_0")
      (("" (INST?)
        (("1" (ASSERT)
          (("1"
            (CASE "EXISTS (M: posreal): FORALL t: 0 <= t IMPLIES exp(t) <= M")
            (("1" (SKOSIMP*)
              (("1" (INST -2 "(LAMBDA n: M!1*abs(x!1)^(n+1)/factorial(n+1))")
                (("1" (ASSERT)
                  (("1" (PROP)
                    (("1" (HIDE 2) (("1" (POSTPONE) NIL NIL)) NIL)
                     ("2" (SKOSIMP*)
                      (("2" (HIDE 2)
                        (("2" (EXPAND "Taylor_rem")
                          (("2" (REWRITE "nderiv_exp")
                            (("2" (REWRITE "abs_div")
                              (("1" (EXPAND "abs" 1 2)
                                (("1" (CROSS-MULT 1)
                                  (("1" (ASSERT)
                                    (("1"
                                      (NAME-REPLACE "C" "GET_C(exp, x!1, n!1)")
                                      (("1" (FIELD 1)
                                        (("1" (POSTPONE) NIL NIL)) NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (INST + "x!2+1")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("3" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKOSIMP*)
                                    (("2" (INST + "x!2+1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (POSTPONE) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST + "x!2+1") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("3" (POSTPONE) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (POSTPONE) NIL NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*) (("2" (INST + "x!2+1") (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL)
  (|exp_series_prep-1| |nil| 3298633339
   ("" (SKOSIMP*)
    (("" (LEMMA "squeezing_abs_0")
      (("" (INST?)
        (("1" (ASSERT)
          (("1"
            (CASE
                "EXISTS (M: posreal): FORALL t: 0 <= x!1 IMPLIES exp(t) <= M")
            (("1" (SKOSIMP*)
              (("1" (INST -2 "(LAMBDA n: M!1*abs(x!1)^(n+1)/factorial(n+1))")
                (("1" (ASSERT)
                  (("1" (PROP)
                    (("1" (HIDE 2) (("1" (POSTPONE) NIL NIL)) NIL)
                     ("2" (SKOSIMP*)
                      (("2" (HIDE 2)
                        (("2" (EXPAND "Taylor_rem")
                          (("2" (REWRITE "nderiv_exp")
                            (("2" (REWRITE "abs_div")
                              (("1" (EXPAND "abs" 1 2)
                                (("1" (CROSS-MULT 1)
                                  (("1" (ASSERT)
                                    (("1"
                                      (NAME-REPLACE "C" "GET_C(exp, x!1, n!1)")
                                      (("1" (FIELD 1)
                                        (("1" (INST - "C")
                                          (("1" (POSTPONE) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (POSTPONE) NIL NIL)
                                       ("3" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (POSTPONE) NIL NIL)
                                   ("3" (POSTPONE) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST + "x!2+1") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("3" (POSTPONE) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (POSTPONE) NIL NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*) (("2" (INST + "x!2+1") (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("3" (POSTPONE) NIL NIL)
         ("4" (SKOSIMP*) (("4" (POSTPONE) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|conv_exp| 0
  (|conv_exp-2| |nil| 3445687755
   ("" (LEMMA "is_taylor_prep")
    (("" (INST - "exp")
      (("" (ASSERT)
        (("" (CASE-REPLACE "Taylor_seq[real](exp) = exp_seq")
          (("1" (ASSERT)
            (("1" (REWRITE "exp_inf_deriv")
              (("1" (SKOSIMP*)
                (("1" (LEMMA "exp_series_prep")
                  (("1" (INST?)
                    (("1" (EXPAND "convergent?") (("1" (INST + "0") NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE -1 2)
            (("2" (EXPAND "Taylor_seq")
              (("2" (EXPAND "exp_seq")
                (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                  (("1" (LEMMA "nderiv_exp")
                    (("1" (INST?)
                      (("1" (FLATTEN)
                        (("1" (REPLACE -2) (("1" (REWRITE "exp_0") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (LEMMA "nderiv_exp")
                      (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (REWRITE "exp_inf_deriv") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL)
   NIL)
  (|conv_exp-1| |nil| 3298646416
   ("" (LEMMA "is_taylor_prep")
    (("" (INST - "exp")
      (("" (ASSERT)
        (("" (CASE-REPLACE "Taylor_seq[real](exp) = exp_seq")
          (("1" (ASSERT)
            (("1" (REWRITE "exp_inf_deriv")
              (("1" (SKOSIMP*)
                (("1" (LEMMA "exp_series_prep")
                  (("1" (INST?)
                    (("1" (EXPAND "convergent") (("1" (INST + "0") NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE -1 2)
            (("2" (EXPAND "Taylor_seq")
              (("2" (EXPAND "exp_seq")
                (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                  (("1" (LEMMA "nderiv_exp")
                    (("1" (INST?)
                      (("1" (FLATTEN)
                        (("1" (REPLACE -2) (("1" (REWRITE "exp_0") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (LEMMA "nderiv_exp")
                      (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (REWRITE "exp_inf_deriv") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL) SHOSTAK))
 (|exp_series_TCC1| 0
  (|exp_series_TCC1-1| |nil| 3298643720 ("" (REWRITE "conv_exp") NIL NIL)
   ((|conv_exp| FORMULA-DECL NIL |exp_series| NIL)) SHOSTAK
   (|exp_series| SUBTYPE "exp_series.exp_seq"
    "(power_series_conv[real].conv_powerseries?)")))
 (|exp_series| 0
  (|exp_series-1| |nil| 3298643739
   ("" (LEMMA "is_taylor[real]")
    (("" (INST?)
      (("" (ASSERT)
        (("" (SPLIT -1)
          (("1" (REPLACE -1)
            (("1" (CASE-REPLACE "Taylor_seq[real](exp) = exp_seq")
              (("1" (HIDE 2)
                (("1" (EXPAND "Taylor_seq")
                  (("1" (EXPAND "exp_seq")
                    (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T)
                      (("1" (LEMMA "nderiv_exp")
                        (("1" (INST - "x!1")
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (REPLACE -2)
                                (("1" (REWRITE "exp_0") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (LEMMA "nderiv_exp")
                          (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "exp_inf_deriv") NIL NIL)
           ("3" (SKOSIMP*) (("3" (REWRITE "exp_series_prep") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL)
   SHOSTAK))
 (|exp_estimate_TCC1| 0
  (|exp_estimate_TCC1-1| |nil| 3302449689
   ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK (|exp_estimate| SUBTYPE "1" "T_low[nat]")))
 (|exp_estimate_TCC2| 0
  (|exp_estimate_TCC2-1| |nil| 3403261760
   ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|exp_estimate| SUBTYPE "exp_series.nn"
    "{i: integers.int | booleans.OR(exp_series.x /= 0, reals.>=(i, 0))}")))
 (|exp_taylors_TCC1| 0
  (|exp_taylors_TCC1-1| |nil| 3302449689
   ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK
   (|exp_taylors| SUBTYPE "((number_fields.+)(exp_series.n, 1))"
    "{i: integers.int | booleans.OR(exp_series.x /= 0, reals.>=(i, 0))}")))
 (|exp_taylors| 0
  (|exp_taylors-3| "" 3790093861
   ("" (SKOSIMP*)
    (("" (LEMMA "Taylors[real]" ("f" "exp" "n" "n!1" "aa" "0" "bb" "x!1"))
      ((""
        (LEMMA "sigma_eq[nat]"
         ("low" "1" "high" "n!1" "F" "LAMBDA (nn:nat):
                           IF nn > n!1 THEN 0
                           ELSIF nn = 0 THEN exp(0)
                           ELSE nderiv(nn, exp)(0) * (x!1 - 0) ^ nn / factorial(nn)
                           ENDIF"
          "G" "LAMBDA (nn: nat): x!1 ^ nn / factorial(nn)"))
        (("1" (ASSERT)
          (("1" (EXPAND "exp_estimate")
            (("1" (SPLIT -1)
              (("1" (REWRITE "sigma_first" -2)
                (("1" (REPLACE -1)
                  (("1" (HIDE -1)
                    (("1" (LEMMA "nderiv_exp" ("n" "n!1+1"))
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (HIDE 2)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "nderiv_exp")
                      (("2" (INST?)
                        (("2" (FLATTEN)
                          (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (ASSERT)
            (("2" (HIDE - 4)
              (("2" (LEMMA "nderiv_exp")
                (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|exp_taylors-2| |nil| 3352447184
   ("" (SKOSIMP*)
    (("" (LEMMA "Taylors[real]" ("f" "exp" "n" "n!1" "aa" "0" "bb" "x!1"))
      ((""
        (LEMMA "sigma_eq[nat]"
         ("low" "1" "high" "n!1" "F" "LAMBDA (nn:nat):
                           IF nn > n!1 THEN 0
                           ELSIF nn = 0 THEN exp(0)
                           ELSE nderiv(nn, exp)(0) * (x!1 - 0) ^ nn / factorial(nn)
                           ENDIF"
          "G" "LAMBDA (nn: nat): x!1 ^ nn / factorial(nn)"))
        (("1" (ASSERT)
          (("1" (EXPAND "exp_estimate")
            (("1" (SPLIT -1)
              (("1" (REWRITE "sigma_first" -2)
                (("1" (REPLACE -1)
                  (("1" (HIDE -1)
                    (("1" (LEMMA "nderiv_exp" ("n" "n!1+1"))
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (CASE-REPLACE "n!1 = 0")
                  (("1" (ASSERT)
                    (("1" (EXPAND "sigma")
                      (("1" (SPLIT -3)
                        (("1" (LEMMA "nderiv_exp")
                          (("1" (INST?)
                            (("1" (FLATTEN)
                              (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "nderiv_exp")
                          (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (HIDE 2)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "nderiv_exp")
                      (("2" (INST?)
                        (("2" (FLATTEN)
                          (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (ASSERT)
            (("2" (HIDE - 4)
              (("2" (LEMMA "nderiv_exp")
                (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL)
   NIL)
  (|exp_taylors-1| |nil| 3302448557
   ("" (SKOSIMP*)
    (("" (LEMMA "Taylors" ("f" "exp" "n" "n!1" "aa" "0" "bb" "x!1"))
      ((""
        (LEMMA "sigma_eq[nat]"
         ("low" "1" "high" "n!1" "F" "LAMBDA (nn:nat):
                        IF nn > n!1 THEN 0
                        ELSIF nn = 0 THEN exp(0)
                        ELSE nderiv(nn, exp)(0) * (x!1 - 0) ^ nn / factorial(nn)
                        ENDIF"
          "G" "LAMBDA (nn: nat): x!1 ^ nn / factorial(nn)"))
        (("1" (ASSERT)
          (("1" (EXPAND "exp_estimate")
            (("1" (SPLIT -1)
              (("1" (REWRITE "sigma_first" -2)
                (("1" (REPLACE -1)
                  (("1" (HIDE -1)
                    (("1" (LEMMA "nderiv_exp" ("n" "n!1+1"))
                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (CASE-REPLACE "n!1 = 0")
                  (("1" (ASSERT)
                    (("1" (EXPAND "sigma")
                      (("1" (SPLIT -3)
                        (("1" (LEMMA "nderiv_exp")
                          (("1" (INST?)
                            (("1" (FLATTEN)
                              (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "nderiv_exp")
                          (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (HIDE 2)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "nderiv_exp")
                      (("2" (INST?)
                        (("2" (FLATTEN)
                          (("2" (REPLACE -2) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (ASSERT)
            (("2" (HIDE - 4)
              (("2" (LEMMA "nderiv_exp")
                (("2" (INST?) (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL) NIL))
 (|exp_taylors_err_TCC1| 0
  (|exp_taylors_err_TCC1-1| |nil| 3302449689
   ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK
   (|exp_taylors_err| SUBTYPE "((number_fields.+)(exp_series.n, 1))"
    "{i: integers.int | booleans.OR(real_defs.abs(exp_series.x) /= 0, reals.>=(i, 0))}")))
 (|exp_taylors_err| 0
  (|exp_taylors_err-3| "" 3790093863
   ("" (SKOSIMP*)
    (("" (LEMMA "exp_taylors" ("x" "x!1" "n" "n!1"))
      (("" (SKOSIMP*)
        (("" (TYPEPRED "c!1")
          (("" (LEMMA "trichotomy" ("x" "x!1"))
            ((""
              (CASE
                  "exp(x!1) - exp_estimate(x!1, n!1) = exp(c!1) * x!1 ^ (n!1 + 1) / factorial(n!1 + 1)")
              (("1" (REPLACE -1)
                (("1" (REWRITE "abs_div" 1)
                  (("1" (EXPAND "abs" 1 2)
                    (("1"
                      (LEMMA "both_sides_div_pos_le1"
                       ("x" "abs(exp(c!1) * x!1 ^ (1 + n!1))" "y"
                        "max(exp(x!1),1) * x!1 ^ (1 + n!1)" "pz"
                        "factorial(1 + n!1)"))
                      (("1" (HIDE -1 -2 -7)
                        (("1" (REWRITE "abs_mult")
                          (("1" (EXPAND "abs" 1 1)
                            (("1" (CASE "exp(c!1)<=max(exp(x!1),1)")
                              (("1" (SPLIT -2)
                                (("1"
                                  (LEMMA "expt_pos" ("px" "x!1" "i" "1+n!1"))
                                  (("1" (EXPAND "abs" 1)
                                    (("1" (LEMMA "exp_strict_increasing")
                                      (("1" (EXPAND "strict_increasing?")
                                        (("1" (INST-CP - "0" "c!1")
                                          (("1" (INST - "c!1" "x!1")
                                            (("1" (REWRITE "exp_0")
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN -6)
                                                  (("1" (EXPAND "max")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "both_sides_times_pos_lt1"
                                                         ("x" "exp(c!1)" "y"
                                                          "exp(x!1)" "pz"
                                                          "x!1^(1+n!1)"))
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_div_pos_lt1"
                                                             ("x"
                                                              "exp(c!1) * x!1 ^ (1 + n!1)"
                                                              "y"
                                                              "exp(x!1) * x!1 ^ (1 + n!1)"
                                                              "pz"
                                                              "factorial(1+n!1)"))
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (REPLACE -1)
                                  (("2" (REPLACE -5)
                                    (("2" (REWRITE "exp_0")
                                      (("2" (EXPAND "max")
                                        (("2" (EXPAND "^")
                                          (("2" (EXPAND "expt")
                                            (("2" (EXPAND "abs")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (LEMMA "exp_strict_increasing")
                                  (("3" (EXPAND "strict_increasing?")
                                    (("3" (ASSERT)
                                      (("3" (HIDE -4 -6)
                                        (("3" (FLATTEN -4)
                                          (("3" (INST-CP - "x!1" "c!1")
                                            (("3" (INST - "c!1" "0")
                                              (("3" (REWRITE "exp_0")
                                                (("3" (EXPAND "max")
                                                  (("3" (ASSERT)
                                                    (("3" (TYPEPRED "exp(c!1)")
                                                      (("3" (HIDE -1 -3)
                                                        (("3"
                                                          (CASE
                                                              "abs(x!1 ^ (1 + n!1)) = abs(x!1) ^ (1 + n!1)")
                                                          (("1"
                                                            (LEMMA
                                                             "posreal_div_posreal_is_posreal"
                                                             ("px"
                                                              "abs(x!1) ^ (1 + n!1)"
                                                              "py"
                                                              "factorial(1 + n!1)"))
                                                            (("1"
                                                              (LEMMA
                                                               "both_sides_times_pos_le1"
                                                               ("x" "exp(c!1)"
                                                                "y" "1" "pz"
                                                                "abs(x!1) ^ (1 + n!1) / factorial(1 + n!1)"))
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (LEMMA
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "abs(x!1)"
                                                                  "i" "1+n!1"))
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (CASE
                                                                  "FORALL (n:nat): abs(x!1^n) = abs(x!1)^n")
                                                              (("1"
                                                                (INST -
                                                                 "1+n!1")
                                                                NIL NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 (-4 1))
                                                                (("2"
                                                                  (INDUCT "n")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "expt_x0")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "^")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "expt"
                                                                         1)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "abs_mult"
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "max")
                                  (("2" (LEMMA "exp_strict_increasing")
                                    (("2" (EXPAND "strict_increasing?")
                                      (("2" (SPLIT -2)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN -3)
                                            (("1" (INST-CP - "0" "c!1")
                                              (("1" (INST - "c!1" "x!1")
                                                (("1" (REWRITE "exp_0")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REPLACE -1)
                                            (("2" (REPLACE -3)
                                              (("2" (REWRITE "exp_0")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (ASSERT)
                                          (("3" (FLATTEN -4)
                                            (("3" (INST-CP - "x!1" "c!1")
                                              (("3" (INST - "c!1" "0")
                                                (("3" (REWRITE "exp_0")
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|exp_taylors_err-2| |nil| 3302449661
   ("" (SKOSIMP*)
    (("" (LEMMA "exp_taylors" ("x" "x!1" "n" "n!1"))
      (("" (SKOSIMP*)
        (("" (TYPEPRED "c!1")
          (("" (LEMMA "trichotomy" ("x" "x!1"))
            ((""
              (CASE
                  "exp(x!1) - exp_estimate(x!1, n!1) = exp(c!1) * x!1 ^ (n!1 + 1) / factorial(n!1 + 1)")
              (("1" (REPLACE -1)
                (("1" (REWRITE "abs_div" 1)
                  (("1" (EXPAND "abs" 1 2)
                    (("1"
                      (LEMMA "both_sides_div_pos_le1"
                       ("x" "abs(exp(c!1) * x!1 ^ (1 + n!1))" "y"
                        "max(exp(x!1),1) * x!1 ^ (1 + n!1)" "pz"
                        "factorial(1 + n!1)"))
                      (("1" (HIDE -1 -2 -7)
                        (("1" (REWRITE "abs_mult")
                          (("1" (EXPAND "abs" 1 1)
                            (("1" (CASE "exp(c!1)<=max(exp(x!1),1)")
                              (("1" (SPLIT -2)
                                (("1"
                                  (LEMMA "expt_pos" ("px" "x!1" "i" "1+n!1"))
                                  (("1" (EXPAND "abs" 1)
                                    (("1" (LEMMA "exp_strict_increasing")
                                      (("1" (EXPAND "strict_increasing?")
                                        (("1" (INST-CP - "0" "c!1")
                                          (("1" (INST - "c!1" "x!1")
                                            (("1" (REWRITE "exp_0")
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN -6)
                                                  (("1" (EXPAND "max")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "both_sides_times_pos_lt1"
                                                         ("x" "exp(c!1)" "y"
                                                          "exp(x!1)" "pz"
                                                          "x!1^(1+n!1)"))
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_div_pos_lt1"
                                                             ("x"
                                                              "exp(c!1) * x!1 ^ (1 + n!1)"
                                                              "y"
                                                              "exp(x!1) * x!1 ^ (1 + n!1)"
                                                              "pz"
                                                              "factorial(1+n!1)"))
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (REPLACE -1)
                                  (("2" (REPLACE -5)
                                    (("2" (REWRITE "exp_0")
                                      (("2" (EXPAND "max")
                                        (("2" (EXPAND "^")
                                          (("2" (EXPAND "expt")
                                            (("2" (EXPAND "abs")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (LEMMA "exp_strict_increasing")
                                  (("3" (EXPAND "strict_increasing?")
                                    (("3" (ASSERT)
                                      (("3" (HIDE -4 -6)
                                        (("3" (FLATTEN -4)
                                          (("3" (INST-CP - "x!1" "c!1")
                                            (("3" (INST - "c!1" "0")
                                              (("3" (REWRITE "exp_0")
                                                (("3" (EXPAND "max")
                                                  (("3" (ASSERT)
                                                    (("3" (TYPEPRED "exp(c!1)")
                                                      (("3" (HIDE -1 -3)
                                                        (("3"
                                                          (CASE
                                                              "abs(x!1 ^ (1 + n!1)) = abs(x!1) ^ (1 + n!1)")
                                                          (("1"
                                                            (LEMMA
                                                             "posreal_div_posreal_is_posreal"
                                                             ("px"
                                                              "abs(x!1) ^ (1 + n!1)"
                                                              "py"
                                                              "factorial(1 + n!1)"))
                                                            (("1"
                                                              (LEMMA
                                                               "both_sides_times_pos_le1"
                                                               ("x" "exp(c!1)"
                                                                "y" "1" "pz"
                                                                "abs(x!1) ^ (1 + n!1) / factorial(1 + n!1)"))
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (LEMMA
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "abs(x!1)"
                                                                  "i" "1+n!1"))
                                                                (("1" (PROPAX)
                                                                  NIL NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "abs")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (CASE
                                                                  "FORALL (n:nat): abs(x!1^n) = abs(x!1)^n")
                                                              (("1"
                                                                (INST -
                                                                 "1+n!1")
                                                                NIL NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 (-4 1))
                                                                (("2"
                                                                  (INDUCT "n")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "expt_x0")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "^")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "expt"
                                                                         1)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "abs_mult"
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "max")
                                  (("2" (LEMMA "exp_strict_increasing")
                                    (("2" (EXPAND "strict_increasing?")
                                      (("2" (SPLIT -2)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN -3)
                                            (("1" (INST-CP - "0" "c!1")
                                              (("1" (INST - "c!1" "x!1")
                                                (("1" (REWRITE "exp_0")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (REPLACE -1)
                                            (("2" (REPLACE -3)
                                              (("2" (REWRITE "exp_0")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (ASSERT)
                                          (("3" (FLATTEN -4)
                                            (("3" (INST-CP - "x!1" "c!1")
                                              (("3" (INST - "c!1" "0")
                                                (("3" (REWRITE "exp_0")
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL)
   NIL)
  (|exp_taylors_err-1| |nil| 3302449625
   ("" (SKOSIMP*)
    (("" (LEMMA "exp_taylors" ("x" "x!1" "n" "n!1"))
      (("" (SKOSIMP*)
        (("" (TYPEPRED "c!1")
          (("" (LEMMA "trichotomy" ("x" "x!1"))
            ((""
              (CASE
                  "exp(x!1) - exp_series_n(x!1, n!1) = exp(c!1) * x!1 ^ (n!1 + 1) / factorial(n!1 + 1)")
              (("1" (REPLACE -1)
                (("1" (REWRITE "abs_div" 1)
                  (("1" (EXPAND "abs" 1 2)
                    (("1"
                      (LEMMA "both_sides_div_pos_le1"
                       ("x" "abs(exp(c!1) * x!1 ^ (1 + n!1))" "y"
                        "max(exp(x!1),1) * x!1 ^ (1 + n!1)" "pz"
                        "factorial(1 + n!1)"))
                      (("1" (HIDE -1 -2 -7)
                        (("1" (REWRITE "abs_mult")
                          (("1" (EXPAND "abs" 1 1)
                            (("1" (CASE "exp(c!1)<=max(exp(x!1),1)")
                              (("1" (SPLIT -2)
                                (("1"
                                  (LEMMA "expt_pos" ("px" "x!1" "i" "1+n!1"))
                                  (("1" (EXPAND "abs" 1)
                                    (("1" (LEMMA "exp_strict_increasing")
                                      (("1" (EXPAND "strict_increasing?")
                                        (("1" (INST-CP - "0" "c!1")
                                          (("1" (INST - "c!1" "x!1")
                                            (("1" (REWRITE "exp_0")
                                              (("1" (ASSERT)
                                                (("1" (FLATTEN -6)
                                                  (("1" (EXPAND "max")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "both_sides_times_pos_lt1"
                                                         ("x" "exp(c!1)" "y"
                                                          "exp(x!1)" "pz"
                                                          "x!1^(1+n!1)"))
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_div_pos_lt1"
                                                             ("x"
                                                              "exp(c!1) * x!1 ^ (1 + n!1)"
                                                              "y"
                                                              "exp(x!1) * x!1 ^ (1 + n!1)"
                                                              "pz"
                                                              "factorial(1+n!1)"))
                                                            (("1" (ASSERT)
                                                              NIL)))))))))))))))))))))))))))
                                   ("2" (ASSERT) NIL)))
                                 ("2" (REPLACE -1)
                                  (("2" (REPLACE -5)
                                    (("2" (REWRITE "exp_0")
                                      (("2" (EXPAND "max")
                                        (("2" (EXPAND "^")
                                          (("2" (EXPAND "expt")
                                            (("2" (EXPAND "abs")
                                              (("2" (ASSERT) NIL)))))))))))))))
                                 ("3" (LEMMA "exp_strict_increasing")
                                  (("3" (EXPAND "strict_increasing?")
                                    (("3" (ASSERT)
                                      (("3" (HIDE -4 -6)
                                        (("3" (FLATTEN -4)
                                          (("3" (INST-CP - "x!1" "c!1")
                                            (("3" (INST - "c!1" "0")
                                              (("3" (REWRITE "exp_0")
                                                (("3" (EXPAND "max")
                                                  (("3" (ASSERT)
                                                    (("3" (TYPEPRED "exp(c!1)")
                                                      (("3" (HIDE -1 -3)
                                                        (("3"
                                                          (CASE
                                                              "abs(x!1 ^ (1 + n!1)) = abs(x!1) ^ (1 + n!1)")
                                                          (("1"
                                                            (LEMMA
                                                             "posreal_div_posreal_is_posreal"
                                                             ("px"
                                                              "abs(x!1) ^ (1 + n!1)"
                                                              "py"
                                                              "factorial(1 + n!1)"))
                                                            (("1"
                                                              (LEMMA
                                                               "both_sides_times_pos_le1"
                                                               ("x" "exp(c!1)"
                                                                "y" "1" "pz"
                                                                "abs(x!1) ^ (1 + n!1) / factorial(1 + n!1)"))
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (REPLACE -3
                                                                           1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL)))))
                                                               ("2" (PROPAX)
                                                                NIL)))
                                                             ("2" (HIDE 2)
                                                              (("2"
                                                                (LEMMA
                                                                 "expt_pos"
                                                                 ("px"
                                                                  "abs(x!1)"
                                                                  "i" "1+n!1"))
                                                                (("1" (PROPAX)
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "abs")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL)))))))))))
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (CASE
                                                                  "FORALL (n:nat): abs(x!1^n) = abs(x!1)^n")
                                                              (("1"
                                                                (INST -
                                                                 "1+n!1")
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 (-4 1))
                                                                (("2"
                                                                  (INDUCT "n")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "expt_x0")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "expt_x0")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs")
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL)))))))
                                                                   ("2"
                                                                    (SKOSIMP*)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "^")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "expt"
                                                                         1)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "abs_mult"
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL)))))))))))))))))))))))))))))))))))))))))))))
                               ("2" (HIDE 2)
                                (("2" (EXPAND "max")
                                  (("2" (LEMMA "exp_strict_increasing")
                                    (("2" (EXPAND "strict_increasing?")
                                      (("2" (SPLIT -2)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN -3)
                                            (("1" (INST-CP - "0" "c!1")
                                              (("1" (INST - "c!1" "x!1")
                                                (("1" (REWRITE "exp_0")
                                                  (("1" (ASSERT) NIL)))))))))))
                                         ("2" (ASSERT)
                                          (("2" (REPLACE -1)
                                            (("2" (REPLACE -3)
                                              (("2" (REWRITE "exp_0")
                                                (("2" (ASSERT) NIL)))))))))
                                         ("3" (ASSERT)
                                          (("3" (FLATTEN -4)
                                            (("3" (INST-CP - "x!1" "c!1")
                                              (("3" (INST - "c!1" "0")
                                                (("3" (REWRITE "exp_0")
                                                  (("3" (ASSERT)
                                                    NIL)))))))))))))))))))))))))))))))))))))
               ("2" (ASSERT) NIL))))))))))))
    NIL)
   NIL NIL))
 (|exp_estimate_increasing| 0
  (|exp_estimate_increasing-1| |nil| 3559669148
   ("" (NAME "TT" "LAMBDA (x:real): -1<=x")
    ((""
      (CASE
          "FORALL (n:nat): FORALL (m:nat): m<=n IMPLIES increasing?(LAMBDA (x:(TT)): exp_estimate(x,m)) AND exp_estimate(-1,m)>=0")
      (("1" (SKEEP)
        (("1" (INST - "n")
          (("1" (INST - "n")
            (("1" (ASSERT)
              (("1" (FLATTEN)
                (("1" (EXPAND "increasing?")
                  (("1" (INST - "x" "y")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (EXPAND "TT") (("2" (ASSERT) NIL NIL)) NIL)
                     ("3" (EXPAND "TT") (("3" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "n")
          (("1" (SKEEP)
            (("1" (CASE "m = 0")
              (("1" (REPLACE -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (SKEEP)
              (("2" (CASE "NOT j = m-1")
                (("1" (INST - "m") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (REPLACE -1)
                  (("2" (ASSERT)
                    (("2" (HIDE -3)
                      (("2" (HIDE -1)
                        (("2" (CASE "NOT exp_estimate(-1,m)>=0")
                          (("1" (HIDE 2)
                            (("1" (LEMMA "even_or_odd")
                              (("1" (INST - "m")
                                (("1" (GROUND)
                                  (("1" (EXPAND "even?")
                                    (("1" (SKEEP -1)
                                      (("1" (REPLACES -1)
                                        (("1" (INST - "2*j!1-1")
                                          (("1" (ASSERT)
                                            (("1" (FLATTEN)
                                              (("1" (HIDE -1)
                                                (("1" (EXPAND "exp_estimate")
                                                  (("1" (EXPAND "sigma" +)
                                                    (("1" (ASSERT)
                                                      (("1" (CASE "j!1 = 0")
                                                        (("1" (REPLACES -1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2"
                                                            (CASE "1 > 2*j!1")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (CASE
                                                                    "(-1) ^ (2 * j!1) / factorial(2 * j!1) >= 0")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2" (HIDE 5)
                                                                  (("2"
                                                                    (CROSS-MULT
                                                                     1)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "even_m1_pow")
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (CASE "NOT j!1 = 0")
                                              (("1" (CASE "j!1 >= 1")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (EXPAND "exp_estimate")
                                                    (("2" (EXPAND "sigma")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (REPLACE -1)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (EXPAND "exp_estimate")
                                                      (("2" (EXPAND "sigma")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST - "m-2")
                                    (("1" (ASSERT)
                                      (("1" (FLATTEN)
                                        (("1" (HIDE -2)
                                          (("1" (EXPAND "odd?")
                                            (("1" (SKEEP -1)
                                              (("1" (CASE "NOT j!1 >= 0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (REPLACES -2)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "exp_estimate")
                                                        (("2"
                                                          (EXPAND "sigma" +)
                                                          (("2"
                                                            (EXPAND "sigma" +)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (CASE
                                                                    "j!1 = 0")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (CASE
                                                                        "-((-1) ^ (1 + 2 * j!1)) / factorial(1 + 2 * j!1)
       <= (-1) ^ (2 * j!1) / factorial(2 * j!1)")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE 4)
                                                                      (("2"
                                                                        (HIDE
                                                                         -2)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "even_m1_pow")
                                                                          (("2"
                                                                            (INST
                                                                             -
                                                                             "2*j!1")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (REPLACES
                                                                                 -1)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "not_even_m1_pow")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -
                                                                                     "1+2*j!1")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (REPLACES
                                                                                         -1)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (CROSS-MULT
                                                                                             1)
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "factorial(2*j!1)")
                                                                                              (("2"
                                                                                                (MULT-BY
                                                                                                 -1
                                                                                                 "2*j!1")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "factorial"
                                                                                                   +
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (CASE "m = 0")
                                        (("1" (REPLACES -1)
                                          (("1" (HIDE -)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (CASE "m = 1")
                                          (("1" (REPLACES -1)
                                            (("1" (HIDE -)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (LEMMA "poly_increasing")
                              (("2" (EXPAND "increasing?")
                                (("2" (SKOSIMP*)
                                  (("2" (INST - "exp_seq" "m" "x!1" "y!1")
                                    (("2" (ASSERT)
                                      (("2"
                                        (CASE
                                            "polynomial(exp_seq,m) = LAMBDA (gg:real): exp_estimate(gg,m)")
                                        (("1" (REPLACE -1)
                                          (("1" (ASSERT)
                                            (("1" (HIDE 2)
                                              (("1" (SKOSIMP*)
                                                (("1" (INST - "m-1")
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1" (INST - "-1" "c!1")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (TYPEPRED "x!1")
                                                            (("1" (EXPAND "TT")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (CASE
                                                                      "polynomial(poly_deriv(exp_seq),m-1) = LAMBDA (gg:real): exp_estimate(gg,m-1)")
                                                                  (("1"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "exp_estimate")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "polynomial")
                                                                          (("2"
                                                                            (LEMMA
                                                                             "sigma_split")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (INST
                                                                                 -
                                                                                 "0")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (REPLACE
                                                                                     -1)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       -1)
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "FORALL (a1,a2,b1,b2:real): a1=b1 AND a2=b2 IMPLIEs a1+a2 = b1+b2")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           -1)
                                                                                          (("1"
                                                                                            (HIDE-ALL-BUT
                                                                                             1)
                                                                                            (("1"
                                                                                              (GRIND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE-ALL-BUT
                                                                                             1)
                                                                                            (("2"
                                                                                              (REWRITE
                                                                                               "sigma_eq")
                                                                                              (("2"
                                                                                                (HIDE
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (SKOSIMP*)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "exp_seq")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "poly_deriv")
                                                                                                      (("2"
                                                                                                        (CASE
                                                                                                            "(1+n!1)/factorial(1+n!1) = 1/factorial(n!1)")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "factorial"
                                                                                                             +
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (SKOSIMP*)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (EXPAND "TT")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (TYPEPRED "x!1")
                                                              (("2"
                                                                (EXPAND "TT")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3" (EXPAND "TT")
                                                          (("3" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT 1)
                                          (("2" (DECOMPOSE-EQUALITY)
                                            (("2" (EXPAND "polynomial")
                                              (("2" (LEMMA "sigma_split")
                                                (("2" (INST?)
                                                  (("2" (INST - "0")
                                                    (("2" (ASSERT)
                                                      (("2" (REPLACES -1)
                                                        (("2"
                                                          (EXPAND
                                                           "exp_estimate")
                                                          (("2"
                                                            (CASE
                                                                "FORALL (a1,a2,b1,b2:real): a1=b1 AND a2=b2 IMPLIEs a1+a2 = b1+b2")
                                                            (("1" (REWRITE -1)
                                                              (("1"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2"
                                                                  (REWRITE
                                                                   "sigma_eq")
                                                                  (("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (SKOSIMP*)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "exp_seq")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE 2)
                                                              (("2" (SKOSIMP*)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|exp_estimate| CONST-DECL "real" |exp_series| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|y| SKOLEM-CONST-DECL "real" |exp_series| NIL)
    (TT SKOLEM-CONST-DECL "[real -> bool]" |exp_series| NIL)
    (|x| SKOLEM-CONST-DECL "real" |exp_series| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|j!1| SKOLEM-CONST-DECL "int" |exp_series| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|even_m1_pow| FORMULA-DECL NIL |exponentiation| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (> CONST-DECL "bool" |reals| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|not_even_m1_pow| FORMULA-DECL NIL |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|factorial_1| FORMULA-DECL NIL |factorial| |ints|)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|m| SKOLEM-CONST-DECL "nat" |exp_series| NIL)
    (|poly_increasing| FORMULA-DECL NIL |polynomials| |reals|)
    (|poly_deriv| CONST-DECL "real" |polynomials| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|c!1| SKOLEM-CONST-DECL "real" |exp_series| NIL)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|exp_seq| CONST-DECL "real" |exp_series| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|exp_estimate_positive| 0
  (|exp_estimate_positive-2| "" 3790093868
   ("" (CASE "FORALL (m:posnat): exp_estimate(-1,m)>=0")
    (("1" (CASE "FORALL (m:posnat): m>1 IMPLIES exp_estimate(-1,m) > 0")
      (("1" (SKEEP)
        (("1" (INST - "n")
          (("1" (ASSERT)
            (("1" (LEMMA "exp_estimate_increasing")
              (("1" (INST - "n" "-1" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (COPY -1)
          (("2" (SKEEP)
            (("2" (INST - "m")
              (("2" (CASE "NOT exp_estimate(-1,m) = 0")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE (-2 1))
                  (("2" (LEMMA "even_or_odd")
                    (("2" (INST - "m")
                      (("2" (GROUND)
                        (("1" (EXPAND "even?")
                          (("1" (SKEEP -1)
                            (("1" (REPLACES -1)
                              (("1" (ASSERT)
                                (("1" (INST - "2*j-1")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "exp_estimate")
                                      (("1" (EXPAND "sigma" - 1)
                                        (("1"
                                          (CASE
                                              "(-1) ^ (2 * j) / factorial(2 * j) > 0")
                                          (("1" (ASSERT)
                                            (("1"
                                              (NAME "rd"
                                                    "1 + sigma(1, 2 * j - 1, LAMBDA (nn: nat): (-1) ^ nn / factorial(nn))")
                                              (("1" (REPLACES -1)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (CROSS-MULT 1)
                                            (("2" (LEMMA "even_m1_pow")
                                              (("2" (INST - "2*j")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "odd?")
                          (("2" (SKEEP -1)
                            (("2" (CASE "NOT j >= 1")
                              (("1" (CASE "j = 1")
                                (("1" (REPLACES -1)
                                  (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (INST - "m-2")
                                (("1" (EXPAND "exp_estimate")
                                  (("1" (EXPAND "sigma" - 1)
                                    (("1" (EXPAND "sigma" - 1)
                                      (("1"
                                        (NAME "aa"
                                              "1 + sigma(1, m - 2, LAMBDA (nn: nat): (-1) ^ nn / factorial(nn))")
                                        (("1" (REPLACES -1)
                                          (("1"
                                            (CASE
                                                "((-1) ^ (m - 1)) / factorial(m - 1) > (-(-1) ^ m) / factorial(m)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (LEMMA "even_m1_pow")
                                              (("2" (REPLACES -3)
                                                (("2" (ASSERT)
                                                  (("2" (INST - "2*j")
                                                    (("2" (ASSERT)
                                                      (("2" (REPLACES -1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (LEMMA
                                                             "not_even_m1_pow")
                                                            (("2"
                                                              (INST - "1+2*j")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REPLACES -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (CROSS-MULT
                                                                       1)
                                                                      (("2"
                                                                        (MULT-BY
                                                                         -3
                                                                         "factorial(2*j)")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "factorial"
                                                                           + 1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2"
        (CASE
            "FORALL (mm: nat): FORALL (kk:nat): kk<=mm IMPLIES exp_estimate(-1, kk) >= 0")
        (("1" (SKEEP)
          (("1" (INST - "m") (("1" (INST - "m") (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (INDUCT "mm")
            (("1" (GRIND) NIL NIL)
             ("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (CASE "NOT kk = j+1")
                  (("1" (INST - "kk") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE -3)
                    (("2" (ASSERT)
                      (("2" (REPLACES -1)
                        (("2" (CASE "j = 0")
                          (("1" (REPLACES -1)
                            (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                           ("2" (LEMMA "even_or_odd")
                            (("2" (INST - "1+j")
                              (("2" (GROUND)
                                (("1" (EXPAND "even?")
                                  (("1" (SKOSIMP*)
                                    (("1" (INST - "2*j!1-1")
                                      (("1" (ASSERT)
                                        (("1" (REPLACES -1)
                                          (("1" (EXPAND "exp_estimate")
                                            (("1" (EXPAND "sigma" +)
                                              (("1" (ASSERT)
                                                (("1"
                                                  (CASE
                                                      "(-1) ^ (2 * j!1) / factorial(2 * j!1) >= 0")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (CROSS-MULT 1)
                                                    (("2" (LEMMA "even_m1_pow")
                                                      (("2" (INST?)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "odd?")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST - "j-1")
                                      (("2" (REPLACES -1)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "exp_estimate")
                                            (("2" (EXPAND "sigma" +)
                                              (("2" (CASE "1> 1+2*j!1")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (EXPAND "sigma" +)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (CASE
                                                            "-((-1) ^ (1 + 2 * j!1)) / factorial(1 + 2 * j!1)
       < (-1) ^ (2 * j!1) / factorial(2 * j!1)")
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (HIDE (-1 5))
                                                          (("2"
                                                            (LEMMA
                                                             "even_m1_pow")
                                                            (("2"
                                                              (INST - "2*j!1")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REPLACES -1)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "not_even_m1_pow")
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("2"
                                                                            (CROSS-MULT
                                                                             1)
                                                                            (("2"
                                                                              (CASE
                                                                                  "1+2*j!1 > 1")
                                                                              (("1"
                                                                                (MULT-BY
                                                                                 -1
                                                                                 "factorial(2*j!1)")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "factorial"
                                                                                   +
                                                                                   2)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|j!1| SKOLEM-CONST-DECL "int" |exp_series| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|n| SKOLEM-CONST-DECL "nat" |exp_series| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|exp_estimate_increasing| FORMULA-DECL NIL |exp_series| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_mult_pos_gt2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nprat_div_posrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL)
    (|not_even_m1_pow| FORMULA-DECL NIL |exponentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |exp_series| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|)
    (|even_m1_pow| FORMULA-DECL NIL |exponentiation| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp_estimate| CONST-DECL "real" |exp_series| NIL))
   SHOSTAK)
  (|exp_estimate_positive-1| |nil| 3568453550
   ("" (CASE "FORALL (m:posnat): exp_estimate(-1,m)>=0")
    (("1" (CASE "FORALL (m:posnat): m>1 IMPLIES exp_estimate(-1,m) > 0")
      (("1" (SKEEP)
        (("1" (INST - "n")
          (("1" (ASSERT)
            (("1" (LEMMA "exp_estimate_increasing")
              (("1" (INST - "n" "-1" "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (COPY -1)
          (("2" (SKEEP)
            (("2" (INST - "m")
              (("2" (CASE "NOT exp_estimate(-1,m) = 0")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE (-2 1))
                  (("2" (LEMMA "even_or_odd")
                    (("2" (INST - "m")
                      (("2" (GROUND)
                        (("1" (EXPAND "even?")
                          (("1" (SKEEP -1)
                            (("1" (REPLACES -1)
                              (("1" (ASSERT)
                                (("1" (INST - "2*j-1")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "exp_estimate")
                                      (("1" (EXPAND "sigma" - 1)
                                        (("1"
                                          (CASE
                                              "(-1) ^ (2 * j) / factorial(2 * j) > 0")
                                          (("1" (ASSERT)
                                            (("1"
                                              (NAME "rd"
                                                    "1 + sigma(1, 2 * j - 1, LAMBDA (nn: nat): (-1) ^ nn / factorial(nn))")
                                              (("1" (REPLACES -1)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (CROSS-MULT 1)
                                            (("2" (LEMMA "even_m1_pow")
                                              (("2" (INST - "2*j")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "odd?")
                          (("2" (SKEEP -1)
                            (("2" (CASE "NOT j >= 1")
                              (("1" (CASE "j = 1")
                                (("1" (REPLACES -1)
                                  (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (INST - "m-2")
                                (("1" (EXPAND "exp_estimate")
                                  (("1" (EXPAND "sigma" - 1)
                                    (("1" (EXPAND "sigma" - 1)
                                      (("1"
                                        (NAME "aa"
                                              "1 + sigma(1, m - 2, LAMBDA (nn: nat): (-1) ^ nn / factorial(nn))")
                                        (("1" (REPLACES -1)
                                          (("1"
                                            (CASE
                                                "((-1) ^ (m - 1)) / factorial(m - 1) > (-(-1) ^ m) / factorial(m)")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (LEMMA "even_m1_pow")
                                              (("2" (REPLACES -3)
                                                (("2" (ASSERT)
                                                  (("2" (INST - "2*j")
                                                    (("2" (ASSERT)
                                                      (("2" (REPLACES -1)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (LEMMA
                                                             "not_even_m1_pow")
                                                            (("2"
                                                              (INST - "1+2*j")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REPLACES -1)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (CROSS-MULT
                                                                       1)
                                                                      (("2"
                                                                        (MULT-BY
                                                                         -3
                                                                         "factorial(2*j)")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "factorial"
                                                                           + 1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2"
        (CASE
            "FORALL (mm: nat): FORALL (kk:nat): kk<=mm IMPLIES exp_estimate(-1, kk) >= 0")
        (("1" (SKEEP)
          (("1" (INST - "m") (("1" (INST - "m") (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (INDUCT "mm")
            (("1" (GRIND) NIL NIL)
             ("2" (SKEEP)
              (("2" (SKEEP)
                (("2" (CASE "NOT kk = j+1")
                  (("1" (INST - "kk") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE -3)
                    (("2" (ASSERT)
                      (("2" (ASSERT)
                        (("2" (REPLACES -1)
                          (("2" (CASE "j = 0")
                            (("1" (REPLACES -1)
                              (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                             ("2" (LEMMA "even_or_odd")
                              (("2" (INST - "1+j")
                                (("2" (GROUND)
                                  (("1" (EXPAND "even?")
                                    (("1" (SKOSIMP*)
                                      (("1" (INST - "2*j!1-1")
                                        (("1" (ASSERT)
                                          (("1" (REPLACES -1)
                                            (("1" (EXPAND "exp_estimate")
                                              (("1" (EXPAND "sigma" +)
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE
                                                        "(-1) ^ (2 * j!1) / factorial(2 * j!1) >= 0")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2" (CROSS-MULT 1)
                                                      (("2"
                                                        (LEMMA "even_m1_pow")
                                                        (("2" (INST?)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "odd?")
                                    (("2" (SKOSIMP*)
                                      (("2" (INST - "j-1")
                                        (("2" (REPLACES -1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "exp_estimate")
                                              (("2" (EXPAND "sigma" +)
                                                (("2" (CASE "1> 1+2*j!1")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (EXPAND "sigma" +)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (CASE
                                                              "-((-1) ^ (1 + 2 * j!1)) / factorial(1 + 2 * j!1)
       < (-1) ^ (2 * j!1) / factorial(2 * j!1)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (HIDE (-1 5))
                                                            (("2"
                                                              (LEMMA
                                                               "even_m1_pow")
                                                              (("2"
                                                                (INST -
                                                                 "2*j!1")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "not_even_m1_pow")
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (REPLACES
                                                                             -1)
                                                                            (("2"
                                                                              (CROSS-MULT
                                                                               1)
                                                                              (("2"
                                                                                (CASE
                                                                                    "1+2*j!1 > 1")
                                                                                (("1"
                                                                                  (MULT-BY
                                                                                   -1
                                                                                   "factorial(2*j!1)")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "factorial"
                                                                                     +
                                                                                     2)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|exp_estimate_0| 0
  (|exp_estimate_0-1| |nil| 3568629731
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "exp_estimate")
        (("2" (EXPAND "sigma" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|hat_02n| FORMULA-DECL NIL |power_series| |series|)
    (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|)
    (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|exp_estimate| CONST-DECL "real" |exp_series| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|exp_est_is_nat| 0
  (|exp_est_is_nat-2| "" 3790093869
   ("" (INDUCT "n")
    (("1" (TYPEPRED "n!1") (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (TYPEPRED "n!1") (("2" (PROPAX) NIL NIL)) NIL)
     ("3" (TYPEPRED "n!1") (("3" (PROPAX) NIL NIL)) NIL)
     ("4" (FLATTEN) (("4" (GROUND) NIL NIL)) NIL)
     ("5" (SKEEP)
      (("5" (CASE "j=0")
        (("1" (REPLACES -1)
          (("1" (HIDE (-1 -2))
            (("1" (SIMPLIFY)
              (("1" (EXPAND "factorial")
                (("1" (EXPAND "factorial")
                  (("1" (EXPAND "exp_estimate")
                    (("1" (EXPAND "sigma")
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "factorial")
                          (("1" (EXPAND "factorial")
                            (("1" (EXPAND "^")
                              (("1" (EXPAND "expt")
                                (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "exp_estimate")
          (("2" (REWRITE "sigma_last" +)
            (("2" (SIMPLIFY 2)
              (("2"
                (CASE-REPLACE "factorial(1 + j) * (1 / factorial(1 + j)) =1")
                (("1"
                  (CASE-REPLACE "factorial(1 + j) *
                              sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn)) = (j+1)*(factorial(j)*sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn)))")
                  (("1" (ASSERT)
                    (("1" (ASSERT)
                      (("1"
                        (CASE "EXISTS (q:rat): q= factorial(j) *
                                    sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))")
                        (("1" (SKEEP)
                          (("1"
                            (CASE "EXISTS (z:int): z= factorial(j) *
                                      sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))")
                            (("1" (SKEEP :PREDS? T)
                              (("1" (REPLACE -2 :DIR RL)
                                (("1" (GROUND) NIL NIL)) NIL))
                              NIL)
                             ("2" (INST 1 "q")
                              (("2" (HIDE 3)
                                (("2" (LEMMA "int_minus_int_is_int")
                                  (("2"
                                    (INST -1 "factorial(j) +
                                  factorial(j) *
                                   sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))"
                                     "factorial(j)")
                                    (("2" (SIMPLIFY -1)
                                      (("2" (GROUND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2"
                          (INST 1
                           " factorial(j) * sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))")
                          NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 3)
                    (("2" (EXPAND "factorial" 1 1) (("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 3) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat"
     |rationals| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals|
     NIL)
    (|q| SKOLEM-CONST-DECL "rat" |exp_series| NIL)
    (|int_minus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|)
    (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|factorial_0| FORMULA-DECL NIL |factorial| |ints|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|exp_estimate| CONST-DECL "real" |exp_series| NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK)
  (|exp_est_is_nat-1| |nil| 3658861295
   ("" (INDUCT "n")
    (("1" (TYPEPRED (N!1)) (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (TYPEPRED (N!1)) (("2" (PROPAX) NIL NIL)) NIL)
     ("3" (TYPEPRED (N!1)) (("3" (PROPAX) NIL NIL)) NIL)
     ("4" (FLATTEN) (("4" (GROUND) NIL NIL)) NIL)
     ("5" (SKEEP)
      (("5" (CASE "j=0")
        (("1" (REPLACES -1)
          (("1" (HIDE (-1 -2))
            (("1" (SIMPLIFY)
              (("1" (EXPAND "factorial")
                (("1" (EXPAND "factorial")
                  (("1" (EXPAND "exp_estimate")
                    (("1" (EXPAND "sigma")
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "factorial")
                          (("1" (EXPAND "factorial")
                            (("1" (EXPAND "^")
                              (("1" (EXPAND "expt")
                                (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "exp_estimate")
          (("2" (REWRITE "sigma_last" +)
            (("2" (SIMPLIFY 2)
              (("2"
                (CASE-REPLACE "factorial(1 + j) * (1 / factorial(1 + j)) =1")
                (("1"
                  (CASE-REPLACE "factorial(1 + j) *
                              sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn)) = (j+1)*(factorial(j)*sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn)))")
                  (("1" (ASSERT)
                    (("1" (ASSERT)
                      (("1" (FLATTEN)
                        (("1"
                          (CASE "EXISTS (q:rat): q= factorial(j) *
                                    sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))")
                          (("1" (SKEEP)
                            (("1"
                              (CASE "EXISTS (z:int): z= factorial(j) *
                                      sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))")
                              (("1" (SKEEP :PREDS? T)
                                (("1" (REPLACE -2 :DIR RL)
                                  (("1" (GROUND) NIL NIL)) NIL))
                                NIL)
                               ("2" (INST 1 "q")
                                (("2" (HIDE 3)
                                  (("2" (LEMMA "int_minus_int_is_int")
                                    (("2"
                                      (INST -1 "factorial(j) +
                                  factorial(j) *
                                   sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))"
                                       "factorial(j)")
                                      (("1" (SIMPLIFY -1)
                                        (("1" (GROUND) NIL NIL)) NIL)
                                       ("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2"
                            (INST 1
                             " factorial(j) * sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))")
                            (("2" (LEMMA "rat_minus_rat_is_rat")
                              (("2"
                                (INST -1 "factorial(j) +
                                 factorial(j) *
                                  sigma(1, j, LAMBDA (nn: nat): 1 / factorial(nn))"
                                 "factorial(j)")
                                (("2" (SIMPLIFY -1) (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 3)
                    (("2" (EXPAND "factorial" 1 1) (("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 3) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL)
   NIL))
 (|e_is_irrational| 0
  (|e_is_irrational-1| |nil| 3658861314
   ("" (LEMMA "rational_pred_ax2")
    (("" (INST -1 "e")
      (("" (SKEEP)
        (("" (EXPAND "e")
          (("" (LEMMA "exp_taylors")
            (("" (BOTH-SIDES * "factorial(4*p)" -2)
              (("1" (EXPAND "factorial" -2 2)
                (("1"
                  (CASE-REPLACE
                   "4 * (factorial(4 * p - 1) * (i / p) * p) = 4 * (factorial(4 * p - 1) * i)")
                  (("1" (HIDE -1)
                    (("1" (INST -1 "4*p" "1")
                      (("1" (SKEEP :PREDS? T)
                        (("1" (REPLACE -3 -4)
                          (("1" (HIDE (-3 -5))
                            (("1" (ASSERT)
                              (("1" (MOVE-TERMS -3 L 2)
                                (("1" (MOVE-TERMS -3 R 1)
                                  (("1"
                                    (CASE-REPLACE
                                     "factorial(4 * p) * (exp(c) / factorial(1 + 4 * p)) = exp(c) / (1 + 4 * p)")
                                    (("1" (HIDE -1)
                                      (("1" (LEMMA "exp_est_is_nat")
                                        (("1" (INST -1 "4*p")
                                          (("1" (FLATTEN)
                                            (("1" (MOVE-TERMS -6 L 1)
                                              (("1" (MOVE-TERMS -6 L 1)
                                                (("1" (MOVE-TERMS -6 R 1)
                                                  (("1" (SIMPLIFY -6)
                                                    (("1"
                                                      (CASE-REPLACE
                                                       "-1 * -(exp(c) / (1 + 4 * p)) = (exp(c) / (1 + 4 * p))")
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (CASE-REPLACE
                                                           " -(factorial(4 * p) * exp_estimate(1, 4 * p)) -
                            -(4 * (factorial(4 * p - 1) * i)) = (4 * (factorial(4 * p - 1) * i)) -(factorial(4 * p) * exp_estimate(1, 4 * p))")
                                                          (("1" (HIDE -1)
                                                            (("1"
                                                              (LEMMA
                                                               "int_minus_int_is_int")
                                                              (("1"
                                                                (INST -1
                                                                 "(4 * (factorial(4 * p - 1) * i))"
                                                                 "(factorial(4 * p) * exp_estimate(1, 4 * p))")
                                                                (("1"
                                                                  (LEMMA
                                                                   "rat_minus_rat_is_rat")
                                                                  (("1"
                                                                    (INST -1
                                                                     "(4 * (factorial(4 * p - 1) * i))"
                                                                     "(factorial(4 * p) * exp_estimate(1, 4 * p))")
                                                                    (("1"
                                                                      (HIDE
                                                                       (-3 -4
                                                                        -5))
                                                                      (("1"
                                                                        (CASE
                                                                            "0<exp(c) / (1 + 4 * p)")
                                                                        (("1"
                                                                          (CASE
                                                                              "exp(c) / (1 + 4 * p)<1")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -7
                                                                             :DIR
                                                                             RL)
                                                                            (("1"
                                                                              (CASE
                                                                                  "1<= exp(c) / (1 + 4 * p)")
                                                                              (("1"
                                                                                (GROUND)
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (CASE
                                                                                    "FORALL (i,j:int): i<j IMPLIES i+1<=j")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "0"
                                                                                   "exp(c) / (1 + 4 * p)")
                                                                                  (("1"
                                                                                    (GROUND)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (GROUND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (SKEEP)
                                                                                  (("2"
                                                                                    (GROUND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "exp_increasing")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "increasing?")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "c"
                                                                                 "1")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     " e_bnds")
                                                                                    (("2"
                                                                                      (FLATTEN)
                                                                                      (("2"
                                                                                        (CROSS-MULT
                                                                                         1)
                                                                                        (("2"
                                                                                          (GROUND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (LEMMA
                                                                           "exp_increasing")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "increasing?")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "0"
                                                                               "c")
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "exp_0")
                                                                                (("2"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (GROUND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "factorial" 1 2)
                                      (("2" (GROUND)
                                        (("2" (CROSS-MULT 1) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GROUND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GROUND) (("2" (GROUND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|e| CONST-DECL "posreal" |ln_exp| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|times_div2| FORMULA-DECL NIL |real_props| NIL)
    (|div_cancel4| FORMULA-DECL NIL |real_props| NIL)
    (|exp_1| FORMULA-DECL NIL |ln_exp| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|factorial| DEF-DECL "posnat" |factorial| |ints|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| NIL)
    (|ln| CONST-DECL "real" |ln_exp| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|times_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|div_cancel3| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|int_minus_int_is_int| JUDGEMENT-TCC NIL |integers| NIL)
    (|rat_minus_rat_is_rat| JUDGEMENT-TCC NIL |rationals| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|exp_0| FORMULA-DECL NIL |ln_exp| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|c| SKOLEM-CONST-DECL "between[real](0, 1)" |exp_series| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|e_bnds| FORMULA-DECL NIL |ln_exp| NIL)
    (|exp_increasing| FORMULA-DECL NIL |ln_exp| NIL)
    (|p| SKOLEM-CONST-DECL "posnat" |exp_series| NIL)
    (|exp_est_is_nat| FORMULA-DECL NIL |exp_series| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|between| TYPE-EQ-DECL NIL |taylors| |analysis|)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|exp_estimate| CONST-DECL "real" |exp_series| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|exp_taylors| FORMULA-DECL NIL |exp_series| NIL)
    (|rational_pred_ax2| FORMULA-DECL NIL |rational_props| NIL))
   NIL)))

