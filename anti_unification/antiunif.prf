(|antiunif|
 (|vars_TCC1| 0
  (|vars_TCC1-1| NIL 3936159727
   ("" (SKEEP)
    (("" (TYPEPRED "vars(eq`lhs)" "vars(eq`rhs)")
      (("" (LEMMA "finite_union[variable]")
        (("" (INST -1 "vars(eq`lhs)" "vars(eq`rhs)")
          ((""
            (CASE-REPLACE
             "∪[variable](vars(eq`lhs), vars(eq`rhs)) = union[variable](vars(eq`lhs), vars(eq`rhs))")
            (("" (HIDE-ALL-BUT 1)
              (("" (GRIND) (("" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL))
   NIL
   (|vars| SUBTYPE
    "sets[variable].∪(first_order_terms_properties.vars(antiunif.eq`lhs), first_order_terms_properties.vars(antiunif.eq`rhs))"
    "finite_set[variable]")))
 (|AUEquation_classification| 0
  (|AUEquation_classification-1| NIL 3933235533
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL))
   SHOSTAK))
 (|vars_TCC2| 0
  (|vars_TCC2-1| NIL 3936161219
   ("" (SKEEP)
    (("" (CASE-REPLACE "∅[variable] = emptyset[variable]")
      (("1" (REWRITE "finite_emptyset[variable]") NIL NIL)
       ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (∅ CONST-DECL "set" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL))
   NIL (|vars| SUBTYPE "sets[variable].∅" "finite_set[variable]")))
 (|vars_TCC3| 0
  (|vars_TCC1-1| NIL 3919950967 ("" (TCC)) NIL NIL
   (|vars| SUBTYPE "antiunif.s" "(list_adt[AUEquation].cons?)")))
 (|vars_TCC4| 0
  (|vars_TCC2-1| NIL 3919950967 ("" (TCC))
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL
   (|vars| TERMINATION "antiunif.vars(list_adt[AUEquation].cdr(antiunif.s))"
    "NIL")))
 (|vars_TCC5| 0
  (|vars_TCC5-1| NIL 3936161219
   ("" (SKEEP)
    (("" (TYPEPRED " v(cdr[AUEquation](s))" "vars(car[AUEquation](s))")
      (("" (LEMMA "finite_union[variable]")
        (("" (INST -1 "vars(car[AUEquation](s))" "v(cdr[AUEquation](s))")
          (("" (HIDE -2 -3 1)
            (("" (ASSERT)
              ((""
                (CASE
                    "union[variable](vars(car[AUEquation](s)), v(cdr[AUEquation](s))) = ∪[variable](vars(car[AUEquation](s)), v(cdr[AUEquation](s)))")
                (("1" (ASSERT) NIL NIL)
                 ("2" (HIDE -1 2)
                  (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|strict_well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL))
   NIL
   (|vars| SUBTYPE
    "sets[variable].∪(antiunif.vars(list_adt[AUEquation].car(antiunif.s)), antiunif.vars(list_adt[AUEquation].cdr(antiunif.s)))"
    "finite_set[variable]")))
 (|vars_in_append_List_eq| 0
  (|vars_in_append_List_eq-1| NIL 3939707163
   ("" (INDUCT "s1")
    (("1" (GRIND)
      (("1" (CASE-REPLACE "∅[variable] = emptyset")
        (("1" (REWRITE "union_commutative")
          (("1" (REWRITE "union_empty") NIL NIL)) NIL)
         ("2" (DECOMPOSE-EQUALITY) NIL NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "append" 1)
          (("2" (EXPAND "vars" 1 (1 2))
            (("2" (INST?)
              (("2" (REPLACES -1)
                (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((∪ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|subset_vars_eq_listEqs| 0
  (|subset_vars_eq_listEqs-1| NIL 3939443580
   ("" (INDUCT "s")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (CASE "eq=cons1_var")
          (("1" (REPLACES -1)
            (("1" (HIDE -1)
              (("1" (EXPAND "vars" 1 2)
                (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (EXPAND "member" -2)
            (("2" (ASSERT)
              (("2" (INST?)
                (("2" (ASSERT)
                  (("2" (EXPAND "vars" 2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (∅ CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|eq_member_eq_label_in_labels| 0
  (|eq_member_eq_label_in_labels-1| NIL 3938620762
   ("" (INDUCT "le")
    (("1" (GRIND) NIL NIL)
     ("2" (EXPAND "member" 1 3)
      (("2" (SKEEP)
        (("2" (SKEEP)
          (("2" (PROP)
            (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
             ("2" (INST?)
              (("2" (ASSERT)
                (("2" (EXPAND "labels" 1)
                  (("2" (REWRITE "add_as_union")
                    (("2" (EXPAND "member") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|eqs_label_eq_this_label| 0
  (|eqs_label_eq_this_label-1| NIL 3940417326
   ("" (INDUCT "le")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "labels" -2)
          (("2" (REWRITE "add_as_union")
            (("2" (CASE "lbl = cons1_var`label")
              (("1" (INST 1 "cons1_var")
                (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)
               ("2" (INST -1 "lbl")
                (("2" (PROP)
                  (("1" (SKEEP)
                    (("1" (INST 2 "eq")
                      (("1" (ASSERT)
                        (("1" (EXPAND "member" 2) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|union| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (∅ CONST-DECL "set" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|card_lbls_in_List_eq| 0
  (|card_lbls_in_List_eq-1| NIL 3936186781
   ("" (INDUCT "le")
    (("1" (GRIND)
      (("1" (LEMMA "card_emptyset[variable]")
        (("1" (CASE-REPLACE "∅ = emptyset[variable]")
          (("1" (ASSERT) NIL NIL) ("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (EXPAND "labels" 1)
        (("2" (EXPAND "length" 1)
          (("2" (REWRITE "card_add[variable]")
            (("2" (LIFT-IF)
              (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (∅ CONST-DECL "set" |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|card_emptyset| FORMULA-DECL NIL |finite_sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|append_labels_is_union_labels| 0
  (|append_labels_is_union_labels-1| NIL 3938675663
   ("" (INDUCT "eqs1")
    (("1" (GRIND)
      (("1" (REWRITE "union_commutative")
        (("1" (LEMMA "union_empty[variable]")
          (("1" (INST?)
            (("1" (GRIND)
              (("1" (CASE-REPLACE "∅[variable] = emptyset")
                (("1" (GRIND) NIL NIL) ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "append" 1)
          (("2" (EXPAND "labels" 1 1)
            (("2" (REWRITE "add_as_union")
              (("2" (EXPAND "labels" 1 2)
                (("2" (REWRITE "add_as_union")
                  (("2" (INST?)
                    (("2" (REPLACES -1)
                      (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|disjoint_valid_append_validEqs| 0
  (|disjoint_valid_append_validEqs-1| NIL 3938673603
   ("" (SKEEP)
    (("" (EXPAND "validEqs?")
      (("" (FLATTEN)
        (("" (HIDE -1)
          (("" (REWRITE "length_append")
            ((""
              (CASE
                  "labels(append(eqs1, eqs2)) = union(labels(eqs1),labels(eqs2))")
              (("1" (REPLACES -1)
                (("1" (REWRITE "card_union")
                  (("1"
                    (CASE
                        "card(intersection(labels(eqs1), labels(eqs2))) >= 1")
                    (("1" (LEMMA "card_lbls_in_List_eq")
                      (("1" (INST-CP -1 "eqs1")
                        (("1" (INST -1 "eqs2") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "card_1_has_1[variable]")
                      (("2" (INST?)
                        (("2" (ASSERT)
                          (("2" (EXPAND "disjoint?")
                            (("2" (EXPAND "empty?")
                              (("2" (SKEEP)
                                (("2" (INST 1 "x")
                                  (("2" (EXPAND "member")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REWRITE "append_labels_is_union_labels") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|card_union| FORMULA-DECL NIL |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|card_1_has_1| FORMULA-DECL NIL |finite_sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|card_lbls_in_List_eq| FORMULA-DECL NIL |antiunif| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   SHOSTAK))
 (|non_member_label_validEqs| 0
  (|non_member_label_validEqs-1| NIL 3938676519
   ("" (SKEEP)
    (("" (TYPEPRED "eqs")
      (("" (LEMMA "disjoint_valid_append_validEqs")
        (("" (INST -1 "cons(car(eqs), null)" "cdr(eqs)")
          (("" (PROP)
            (("1" (EXPAND "labels" -1 1)
              (("1" (EXPAND "labels" -1 1)
                (("1" (REWRITE "add_as_union")
                  (("1" (REWRITE "union_commutative")
                    (("1" (CASE-REPLACE "∅[variable] = emptyset")
                      (("1" (REWRITE "union_empty")
                        (("1" (HIDE -1 -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (HIDE -)
                        (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "append" 1)
              (("2" (EXPAND "append")
                (("2" (CASE "eqs = cons[AUEquation](car(eqs), cdr(eqs))")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (HIDE-ALL-BUT (-2 1))
                    (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|disjoint_valid_append_validEqs| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|validity_cdr_ValidEqs| 0
  (|validity_cdr_ValidEqs-1| NIL 3939966417
   ("" (SKEEP)
    (("" (TYPEPRED "eqs")
      (("" (EXPAND "validEqs?")
        (("" (EXPAND "labels" -1)
          (("" (REWRITE "add_as_union")
            (("" (EXPAND "length" -1)
              (("" (FLATTEN)
                (("" (SPLIT)
                  (("1" (HIDE -2)
                    (("1" (EXPAND "empty?")
                      (("1" (SKEEP)
                        (("1" (INST?)
                          (("1" (EXPAND "member")
                            (("1" (EXPAND "vars" 1) (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "non_member_label_validEqs")
                    (("2" (INST?)
                      (("2" (LEMMA "card_disj_union")
                        (("2"
                          (INST -1 "labels(cdr(eqs))"
                           "singleton(car(eqs)`label)")
                          (("2" (PROP)
                            (("1" (REPLACES -1)
                              (("1" (REWRITE "card_singleton")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-3 1 2))
                              (("2" (EXPAND "disjoint?")
                                (("2" (EXPAND "empty?")
                                  (("2" (EXPAND "member")
                                    (("2" (SKEEP)
                                      (("2" (EXPAND "intersection")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|card_singleton| FORMULA-DECL NIL |finite_sets| NIL)
    (|card_disj_union| FORMULA-DECL NIL |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_member_label_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL))
   SHOSTAK))
 (|validity_Eq_in_ValidEqs| 0
  (|validity_Eq_in_ValidEqs-1| NIL 3939964096
   ("" (INDUCT "eqs")
    (("1" (TYPEPRED "eqs!1") (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "i = 0")
          (("1" (REPLACES -1)
            (("1" (HIDE -1)
              (("1" (EXPAND "nth")
                (("1" (EXPAND "validEqs?")
                  (("1" (FLATTEN)
                    (("1" (HIDE -2)
                      (("1" (EXPAND "validEquation?")
                        (("1" (EXPAND "vars" -1)
                          (("1" (EXPAND "labels")
                            (("1" (REWRITE "add_as_union")
                              (("1" (EXPAND "empty?")
                                (("1" (EXPAND "member")
                                  (("1" (INST -1 "cons1_var`label")
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "null?(cons2_var)")
            (("1" (TYPEPRED "i")
              (("1" (HIDE -3 2 -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (PROP)
              (("1" (INST -1 "i - 1")
                (("1" (EXPAND "nth" 3) (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (HIDE -1 4)
                  (("2" (TYPEPRED "i") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (HIDE 2 3 4)
                (("2" (LEMMA "validity_cdr_ValidEqs")
                  (("2" (INST -1 "cons(cons1_var, cons2_var)")
                    (("2" (REWRITE "list_cdr_cons") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∅ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∩ CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|non_member_var_nth_label| 0
  (|non_member_var_nth_label-1| NIL 3939814957
   ("" (INDUCT "eqs")
    (("1" (TYPEPRED "eqs!1") (("1" (PROPAX) NIL NIL)) NIL)
     ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE-REPLACE "i = 0")
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (TYPEPRED "cons(cons1_var, cons2_var)")
            (("2" (HIDE -1)
              (("2" (LEMMA "validity_cdr_ValidEqs")
                (("2" (INST -1 "cons(cons1_var, cons2_var)")
                  (("2" (REWRITE "list_cdr_cons")
                    (("2" (ASSERT)
                      (("2" (INST -2 "i-1" "v")
                        (("1" (PROP)
                          (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL)
                           ("2" (EXPAND "member" 2)
                            (("2" (EXPAND "labels" 2) (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "i")
                          (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∅ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∩ CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|validity_append_valid_Eqs| 0
  (|validity_append_valid_Eqs-1| NIL 3940420254
   ("" (INDUCT "l1")
    (("1" (SKEEP)
      (("1" (EXPAND "append")
        (("1" (ASSERT)
          (("1" (HIDE -)
            (("1" (GRIND)
              (("1" (CASE-REPLACE "∅ = emptyset[variable]")
                (("1" (REWRITE "card_emptyset") NIL NIL)
                 ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (INST -1 "l2")
          (("2" (SPLIT)
            (("1" (FLATTEN)
              (("1" (ASSERT)
                (("1" (HIDE -2)
                  (("1" (EXPAND "validEqs?" 1)
                    (("1" (SPLIT)
                      (("1" (EXPAND "validEqs?")
                        (("1" (FLATTEN)
                          (("1" (HIDE -2 -4)
                            (("1" (REWRITE "vars_in_append_List_eq")
                              (("1" (EXPAND "empty?")
                                (("1" (SKEEP)
                                  (("1" (EXPAND "member")
                                    (("1" (INST?)
                                      (("1" (INST?)
                                        (("1"
                                          (REWRITE
                                           "append_labels_is_union_labels")
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "validEqs?")
                        (("2" (FLATTEN)
                          (("2" (HIDE -1 -3)
                            (("2" (EXPAND "labels" 1)
                              (("2" (REWRITE "card_add")
                                (("2" (EXPAND "length" 1)
                                  (("2" (ASSERT)
                                    (("2" (REPLACES -1)
                                      (("2" (LIFT-IF)
                                        (("2" (ASSERT)
                                          (("2" (PROP)
                                            (("2" (REVEAL -4)
                                              (("2" (EXPAND "validEqs?")
                                                (("2" (FLATTEN)
                                                  (("2" (HIDE -1)
                                                    (("2" (REVEAL -2)
                                                      (("2"
                                                        (EXPAND "append" -4)
                                                        (("2"
                                                          (EXPAND "length" -4)
                                                          (("2"
                                                            (EXPAND "labels "
                                                                    -4)
                                                            (("2"
                                                              (REWRITE
                                                               "card_add")
                                                              (("2" (LIFT-IF)
                                                                (("2"
                                                                  (CASE
                                                                      "labels(append(cons2_var, l2))(cons1_var`label)")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "card_lbls_in_List_eq")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "append(cons2_var, l2)")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE -1 -2
                                                                     -4)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "append_labels_is_union_labels")
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "append" -1)
              (("2" (LEMMA "validity_cdr_ValidEqs")
                (("2" (INST -1 "cons(cons1_var, append(cons2_var, l2))")
                  (("2" (REWRITE "list_cdr_cons") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|vars_in_append_List_eq| FORMULA-DECL NIL |antiunif| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|card_lbls_in_List_eq| FORMULA-DECL NIL |antiunif| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∅ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∩ CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|card_emptyset| FORMULA-DECL NIL |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL))
 (|eq_repeated_in?_TCC1| 0
  (|eq_repeated_in?_TCC1-1| NIL 3933134833 ("" (TERMINATION-TCC) NIL NIL)
   ((|repeated_eq?| CONST-DECL "bool" |antiunif| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL))
   NIL
   (|eq_repeated_in?| TERMINATION
    "antiunif.eq_repeated_in?(antiunif.eq, list_adt[AUEquation].cdr(antiunif.s))"
    "NIL")))
 (|cdr_first_eq_red| 0
  (|cdr_first_eq_red-1| NIL 3936151352
   ("" (SKEEP)
    (("" (LEMMA "list_inclusive[AUEquation]")
      (("" (INST -1 "cdr(s)")
        (("" (PROP)
          (("" (HIDE 1)
            (("" (TYPEPRED "s")
              (("" (EXPAND "first_eq_repeated?")
                (("" (FLATTEN)
                  (("" (EXPAND "eq_repeated_in?") (("" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|list_inclusive| FORMULA-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|red_eq_in_TCC1| 0
  (|red_eq_in_TCC2-1| NIL 3933134833
   ("" (SKEEP) (("" (REWRITE "cdr_first_eq_red") NIL NIL)) NIL)
   ((|cdr_first_eq_red| FORMULA-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL))
   NIL
   (|red_eq_in| SUBTYPE "list_adt[AUEquation].cdr(antiunif.s)"
    "(list_adt[AUEquation].cons?)")))
 (|red_eq_in_TCC2| 0
  (|red_eq_in_TCC3-1| NIL 3933134833
   ("" (SKEEP)
    (("" (TYPEPRED "s")
      (("" (EXPAND "first_eq_repeated?")
        (("" (FLATTEN)
          (("" (EXPAND "eq_repeated_in?")
            (("" (PROP)
              (("1" (EXPAND "eq_repeated_in?") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (EXPAND "eq_repeated_in?" -1)
                (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL))
   NIL
   (|red_eq_in| SUBTYPE
    "list_adt[AUEquation].cons(list_adt[AUEquation].car(antiunif.s), list_adt[AUEquation].cdr(list_adt[AUEquation].cdr(antiunif.s)))"
    "(antiunif.first_eq_repeated?)")))
 (|red_eq_in_TCC3| 0
  (|red_eq_in_TCC4-1| NIL 3933134833
   ("" (SKEEP)
    (("" (TYPEPRED "s")
      (("" (EXPAND "length" 2)
        (("" (LIFT-IF)
          (("" (PROP)
            (("1" (EXPAND "first_eq_repeated?") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "length" 2 2)
              (("2" (LIFT-IF)
                (("2" (PROP)
                  (("1" (LEMMA " cdr_first_eq_red")
                    (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cdr_first_eq_red| FORMULA-DECL NIL |antiunif| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|red_eq_in| TERMINATION
    "antiunif.red_eq_in(list_adt[AUEquation].cons(list_adt[AUEquation].car(antiunif.s), list_adt[AUEquation].cdr(list_adt[AUEquation].cdr(antiunif.s))))"
    "NIL")))
 (|red_eq_in_lhs_rhs_equality| 0
  (|red_eq_in_lhs_rhs_equality-1| NIL 3938597993
   ("" (MEASURE-INDUCT+ "length(s)" ("s"))
    (("" (TYPEPRED "x!1")
      (("" (CASE "length(x!1) = 0")
        (("1" (HIDE -3)
          (("1" (EXPAND "first_eq_repeated?")
            (("1" (FLATTEN) (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "length(x!1) = 1")
          (("1" (EXPAND "first_eq_repeated?")
            (("1" (EXPAND "eq_repeated_in?")
              (("1" (HIDE -3)
                (("1" (FLATTEN) (("1" (HIDE -4 2) (("1" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "red_eq_in" 3)
            (("2" (CASE "repeated_eq?(car(x!1), car(cdr(x!1)))")
              (("1" (ASSERT)
                (("1" (EXPAND "repeated_eq?")
                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (INST?)
                  (("1" (SPLIT -2)
                    (("1" (LEMMA "list_car_cons[AUEquation]")
                      (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                     ("2" (HIDE-ALL-BUT (1 3 4))
                      (("2" (GRIND)
                        (("2" (EXPAND "length" 1 2)
                          (("2" (GRIND)
                            (("2" (EXPAND "length" 1 2)
                              (("2" (GRIND)
                                (("2" (GRIND)
                                  (("2" (EXPAND "length" 1)
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "first_eq_repeated?" -1)
                    (("2" (EXPAND "eq_repeated_in?" -1)
                      (("2" (EXPAND "first_eq_repeated?")
                        (("2" (FLATTEN) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE-ALL-BUT (1 2 3))
                (("3" (GRIND)
                  (("3" (EXPAND "length") (("3" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|repeated_eq?| CONST-DECL "bool" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list_car_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|red_eq_in_cdr| 0
  (|red_eq_in_cdr-1| NIL 3938602794
   ("" (MEASURE-INDUCT+ "length(s)" ("s"))
    (("" (TYPEPRED "x!1")
      (("" (CASE "length(x!1) = 0")
        (("1" (HIDE -3)
          (("1" (EXPAND "first_eq_repeated?")
            (("1" (FLATTEN) (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "length(x!1) = 1")
          (("1" (HIDE -3 2)
            (("1" (EXPAND "first_eq_repeated?")
              (("1" (FLATTEN)
                (("1" (EXPAND "eq_repeated_in?")
                  (("1" (FLATTEN) (("1" (HIDE -4) (("1" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "red_eq_in" 3)
            (("2" (LIFT-IF)
              (("2" (PROP)
                (("1" (HIDE -)
                  (("1" (GRIND)
                    (("1" (EXPAND "member")
                      (("1" (GRIND)
                        (("1" (EXPAND "length") (("1" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST -2 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("2" (PROP)
                    (("1" (REWRITE "list_cdr_cons[AUEquation]")
                      (("1" (EXPAND "member" 2)
                        (("1" (LIFT-IF)
                          (("1" (PROP)
                            (("1" (HIDE -2 -3 1)
                              (("1" (GRIND)
                                (("1" (EXPAND "length") (("1" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1 2 3)
                      (("2" (EXPAND "length" 1)
                        (("2" (LIFT-IF)
                          (("2" (GRIND)
                            (("2" (EXPAND "length" 2 2)
                              (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|nonrepeated?_TCC1| 0
  (|nonrepeated?_TCC1-1| NIL 3933134833
   ("" (SKEEP)
    (("" (EXPAND "length")
      (("" (LIFT-IF)
        (("" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|nonrepeated?| SUBTYPE "antiunif.s" "(list_adt[AUEquation].cons?)")))
 (|nonrepeated?_TCC2| 0
  (|nonrepeated?_TCC2-1| NIL 3933134833
   ("" (SKEEP)
    (("" (EXPAND "eq_repeated_in?")
      (("" (PROP)
        (("1" (EXPAND "<<")
          (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
         ("2" (EXPAND "repeated_eq?")
          (("2" (EXPAND "eq_repeated_in?")
            (("2" (EXPAND "<<")
              (("2" (LIFT-IF)
                (("2" (PROP)
                  (("1" (GRIND) NIL NIL)
                   ("2" (EXPAND "repeated_eq?")
                    (("2" (EXPAND "eq_repeated_in?")
                      (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("3" (GRIND) NIL NIL)
                   ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|nonrepeated?| TERMINATION
    "antiunif.nonrepeated?(list_adt[AUEquation].cdr(antiunif.s))" "NIL")))
 (|disjoint_labels_unsolved_solved| 0
  (|disjoint_labels_unsolved_solved-2| NIL 3940413182
   ("" (SKEEP)
    (("" (LEMMA "disjoint_valid_append_validEqs")
      (("" (TYPEPRED "c")
        (("" (EXPAND "validConfiguration?")
          (("" (PROP) (("" (INST?) (("" (PROP) NIL NIL)) NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|disjoint_valid_append_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL)
  (|disjoint_labels_unsolved_solved-1| NIL 3940413018
   ("" (SKEEP)
    (("" (LEMMA "disjoint_valid_append_validEqs")
      (("" (TYPEPRED "c")
        (("" (EXPAND "validConfiguration?")
          (("" (PROP) (("" (INST?) (("" (PROP) NIL))))))))))))
    NIL)
   NIL NIL))
 (|validity_car_conf_unsolved_TCC1| 0
  (|validity_car_conf_unsolved_TCC1-1| NIL 3937534635
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|validity_car_conf_unsolved| SUBTYPE "antiunif.c`unsolved"
    "(list_adt[AUEquation].cons?)")))
 (|validity_car_conf_unsolved| 0
  (|validity_car_conf_unsolved-1| NIL 3940413275
   ("" (SKEEP)
    (("" (TYPEPRED "c")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN) (("" (HIDE -2 -3 -4) (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL))
 (|validity_cdr_conf_unsolved| 0
  (|validity_cdr_conf_unsolved-1| NIL 3939963927
   ("" (SKEEP)
    (("" (TYPEPRED "c")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN)
          (("" (HIDE -2 -3 -4)
            (("" (LEMMA "validity_cdr_ValidEqs")
              (("" (INST?)
                (("1" (LEMMA "validity_Eq_in_ValidEqs")
                  (("1" (INST -1 "cdr(c`unsolved)" "_")
                    (("1" (HIDE-ALL-BUT (-1 -4 -5 1))
                      (("1" (LEMMA "member_nth[AUEquation]")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (SKEEP)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "validity_append_valid_Eqs")
                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL)
    (|validity_Eq_in_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|invariance_labels_in_validConf| 0
  (|invariance_labels_in_validConf-2| NIL 3940413393
   ("" (SKEEP)
    (("" (BETA)
      (("" (TYPEPRED "c")
        (("" (SKEEP)
          (("" (EXPAND "validConfiguration?")
            (("" (FLATTEN)
              (("" (HIDE -1 -3)
                (("" (TYPEPRED "l")
                  (("" (NAME-REPLACE "sig" "c`substitution")
                    (("" (NAME-REPLACE "lb_set" "append(c`unsolved, c`solved)")
                      (("" (LEMMA "supset_dom_correct2")
                        (("" (INST?)
                          (("" (CASE "empty?(dom(sig) ∩ labels(lb_set))")
                            (("1" (EXPAND "empty?" -1)
                              (("1" (INST?)
                                (("1" (EXPAND "member")
                                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-1 -3 1))
                              (("2" (EXPAND "empty?")
                                (("2" (SKEEP)
                                  (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL))
   NIL)
  (|invariance_labels_in_validConf-1| NIL 3926513887
   ("" (SKEEP)
    (("" (BETA)
      (("" (TYPEPRED "c")
        (("" (SKEEP)
          (("" (EXPAND "validConfiguration?")
            (("" (FLATTEN)
              (("" (HIDE -1 -3)
                (("" (TYPEPRED "l")
                  (("" (NAME-REPLACE "sig" "c`substitution")
                    (("" (NAME-REPLACE "lb_set" "append(c`unsolved, c`solved)")
                      (("" (LEMMA "supset_dom_correct2")
                        (("" (INST?)
                          (("" (CASE "empty?(dom(sig) ∩ labels(lb_set))")
                            (("1" (EXPAND "empty?" -1)
                              (("1" (INST?)
                                (("1" (EXPAND "member")
                                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-1 -3 1))
                              (("2" (EXPAND "empty?")
                                (("2" (SKEEP)
                                  (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|cdr_is_validConf| 0
  (|cdr_is_validConf-1| NIL 3936184104
   ("" (SKEEP)
    (("" (TYPEPRED "c")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN)
          (("" (ASSERT)
            (("" (SPLIT)
              (("1" (LEMMA "validity_cdr_ValidEqs")
                (("1" (EXPAND "append" -2)
                  (("1"
                    (INST -1 "cons[AUEquation]
                    (car(c`unsolved),
                     append[AUEquation](cdr(c`unsolved), c`solved))")
                    (("1" (REWRITE "list_cdr_cons") NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-2 -5 1))
                (("2" (EXPAND "append" -1)
                  (("2" (EXPAND "labels" -1)
                    (("2" (REWRITE "add_as_union")
                      (("2" (EXPAND "empty?")
                        (("2" (SKEEP)
                          (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE-ALL-BUT (-4 -5 1))
                (("3" (EXPAND "append " -1)
                  (("3" (EXPAND "vars" -1) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL))
   SHOSTAK))
 (|labels_allEquations_as_union| 0
  (|labels_allEquations_as_union-1| NIL 3937623689
   ("" (MEASURE-INDUCT+ "length(c`unsolved)" ("c"))
    (("" (CASE "x!1`unsolved = null")
      (("1" (HIDE -2)
        (("1" (GRIND)
          (("1" (CASE-REPLACE "∅[variable] = emptyset")
            (("1" (REWRITE "union_commutative")
              (("1" (REWRITE "union_empty") NIL NIL)) NIL)
             ("2" (DECOMPOSE-EQUALITY) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "append")
        (("2" (LIFT-IF)
          (("2" (PROP)
            (("1" (ASSERT) NIL NIL)
             ("2" (EXPAND "labels" 2 1)
              (("2" (INST -1 "x!1 with[ unsolved:= cdr(x!1`unsolved)] ")
                (("1" (PROP)
                  (("1" (LIFT-IF)
                    (("1" (PROP)
                      (("1" (REWRITE "add_as_union")
                        (("1" (GRIND)
                          (("1" (REWRITE "add_as_union")
                            (("1"
                              (CASE-REPLACE
                               "union(∅, singleton(car(x!1`unsolved)`label)) = singleton(car(x!1`unsolved)`label)")
                              (("1" (HIDE -)
                                (("1" (REWRITE "union_commutative") NIL NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT 1)
                                (("2" (REWRITE "union_commutative")
                                  (("2" (CASE-REPLACE "∅[variable] = emptyset")
                                    (("1" (REWRITE "union_empty") NIL NIL)
                                     ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (BETA)
                        (("2" (EXPAND "append" 3 1)
                          (("2" (LIFT-IF)
                            (("2" (PROP)
                              (("2" (REPLACES -1)
                                (("2" (REWRITE "add_as_union")
                                  (("2" (EXPAND "labels" 2 3)
                                    (("2" (ASSERT)
                                      (("2" (REWRITE "add_as_union")
                                        (("2" (HIDE-ALL-BUT 2)
                                          (("2" (REWRITE* "union_associative")
                                            (("2" (REWRITE "union_commutative")
                                              NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (BETA)
                    (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (REWRITE "cdr_is_validConf") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|cdr_is_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|union_associative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|freshness_membship| 0
  (|freshness_membship-1| NIL 3936849041
   ("" (SKEEP)
    (("" (TYPEPRED "V")
      (("" (EXPAND "freshLabel")
        ((""
          (CASE
              " nonempty?[variable](LAMBDA (v: variable): NOT member[variable](v, V))")
          (("1" (REWRITE "choose_is_epsilon[variable]" :DIR RL)
            (("1" (TYPEPRED "choose(LAMBDA (v: variable): NOT member(v, V))")
              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
            NIL)
           ("2" (EXPAND "nonempty?")
            (("2" (EXPAND "empty?")
              (("2" (CASE "empty?(V)")
                (("1" (INST -2 "0") (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (INST -1 "max(V) + 1")
                  (("2" (LEMMA "max_def")
                    (("2" (INST -1 "V" "max(V)") (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|choose_is_epsilon| FORMULA-DECL NIL |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|non_empty_finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|max| CONST-DECL "{a: nat | S(a) AND (FORALL x: S(x) IMPLIES x <= a)}"
     |max_finite_set_nat| |ints|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|maximum?| CONST-DECL "bool" |max_finite_set_nat| |ints|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|max_def| FORMULA-DECL NIL |max_finite_set_nat| |ints|)
    (|injective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|freshness_epsilon_ext| 0
  (|freshness_epsilon_ext-1| NIL 3936846692
   ("" (SKEEP)
    (("" (CASE "is_finite(union(vars(c), V))")
      (("1" (EXPAND "freshLabel")
        (("1" (REWRITE "freshness_membship") NIL NIL)) NIL)
       ("2" (HIDE -)
        (("2" (TYPEPRED "V" "vars(c)") (("2" (REWRITE "finite_union") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|freshness_membship| FORMULA-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL))
   SHOSTAK))
 (|freshness_epsilon| 0
  (|freshness_epsilon-1| NIL 3936160671
   ("" (SKEEP)
    (("" (EXPAND "freshLabel") (("" (REWRITE "freshness_membship") NIL NIL))
      NIL))
    NIL)
   ((|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|freshness_membship| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|freshness_vars| 0
  (|freshness_vars-1| NIL 3936182839
   ("" (SKEEP)
    (("" (LEMMA "freshness_epsilon")
      (("" (INST?) (("" (EXPAND "vars " 1) (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|freshness_labels| 0
  (|freshness_labels-1| NIL 3936182952
   ("" (SKEEP)
    (("" (LEMMA "freshness_epsilon") (("" (INST?) (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|freshness_nth_label_TCC1| 0
  (|freshness_nth_label_TCC1-2| NIL 3940413688
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (LEMMA "length_append[AUEquation]")
        (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL))
   NIL
   (|freshness_nth_label| SUBTYPE "antiunif.i"
    "below[length[AUEquation](append[AUEquation](c`unsolved, c`solved))]"))
  (|freshness_nth_label_TCC1-1| NIL 3936970698 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|freshness_nth_label| SUBTYPE "antiunif.i"
    "below[length[AUEquation](append[AUEquation](c`unsolved, c`solved))]")))
 (|freshness_nth_label| 0
  (|freshness_nth_label-1| NIL 3937016973
   ("" (LEMMA "freshness_labels")
    (("" (SKEEP)
      (("" (INST?)
        (("" (LEMMA "non_member_var_nth_label")
          (("" (INST?)
            (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (HIDE -1 2)
              (("2" (TYPEPRED "c")
                (("2" (EXPAND "validConfiguration?") (("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|non_member_var_nth_label| FORMULA-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|freshness_labels| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|freshness_car_label| 0
  (|freshness_car_label-1| NIL 3937016694
   ("" (SKEEP)
    (("" (LEMMA "freshness_nth_label")
      (("" (INST -1 "c" "0")
        (("1" (TYPEPRED "c")
          (("1" (EXPAND "nth")
            (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (TYPEPRED "c")
          (("2" (ASSERT) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|freshness_nth_label| FORMULA-DECL NIL |antiunif| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL))
   SHOSTAK))
 (|freshness_labels_ext| 0
  (|freshness_labels_ext-1| NIL 3936851661
   ("" (SKEEP)
    (("" (LEMMA "freshness_epsilon_ext")
      (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|freshness_epsilon_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|freshness_subs| 0
  (|freshness_subs-1| NIL 3936359796
   ("" (SKEEP)
    (("" (LEMMA "freshness_epsilon") (("" (INST?) (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|freshness_subs_ext| 0
  (|freshness_subs_ext-1| NIL 3936852609
   ("" (SKEEP)
    (("" (LEMMA "freshness_epsilon_ext") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|freshness_epsilon_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   SHOSTAK))
 (|freshness_subs_dom_ext| 0
  (|freshness_subs_dom_ext-1| NIL 3937023311
   ("" (SKEEP)
    (("" (LEMMA "freshness_subs_ext")
      (("" (INST?)
        (("" (LEMMA "supset_dom_correct2")
          (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|freshness_subs_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|epsilon| CONST-DECL "T" |epsilons| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|car_lbl_fresh_in_cdr| 0
  (|car_lbl_fresh_in_cdr-1| NIL 3936853101
   ("" (SKEEP)
    (("" (TYPEPRED "c")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN)
          (("" (EXPAND "validEqs?")
            (("" (FLATTEN)
              (("" (LEMMA "cdr_is_validConf")
                (("" (INST?)
                  (("" (EXPAND "validConfiguration?")
                    (("" (FLATTEN)
                      (("" (EXPAND "validEqs?")
                        (("" (FLATTEN)
                          (("" (HIDE -1 -3 -5 -6 -8 -10)
                            (("" (HIDE -2 -4)
                              (("" (EXPAND "append" -2)
                                (("" (EXPAND "length" -2)
                                  (("" (EXPAND "labels" -2)
                                    (("" (REWRITE "card_add[variable]")
                                      (("" (LIFT-IF)
                                        (("" (EXPAND "member")
                                          (("" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cdr_is_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|car_lbl_fresh_dom| 0
  (|car_lbl_fresh_dom-1| NIL 3937023739
   ("" (SKEEP)
    (("" (LEMMA "supset_dom_correct2")
      (("" (INST?)
        (("" (TYPEPRED "c")
          (("" (EXPAND "validConfiguration?")
            (("" (FLATTEN) (("" (HIDE -1 -3) (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|emptyness_conf_vars_with_lbls_and_fresh_variables| 0
  (|emptyness_conf_vars_with_lbls_and_fresh_variables-1| NIL 3936878066
   ("" (SKEEP)
    (("" (TYPEPRED "c")
      (("" (EXPAND "validConfiguration?")
        (("" (EXPAND "validEqs?")
          (("" (FLATTEN)
            (("" (HIDE -2 -3 -5)
              (("" (EXPAND "empty?")
                (("" (SKEEP)
                  (("" (INST -1 "x")
                    (("" (INST -3 "x")
                      (("" (EXPAND "member")
                        (("" (PROP)
                          (("1" (EXPAND "intersection")
                            (("1" (FLATTEN)
                              (("1" (EXPAND "member")
                                (("1" (HIDE-ALL-BUT (-3 1))
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "intersection")
                            (("2" (FLATTEN)
                              (("2" (EXPAND "member")
                                (("2" (EXPAND "union")
                                  (("2" (PROP)
                                    (("1" (EXPAND "member")
                                      (("1" (PROPAX) NIL NIL)) NIL)
                                     ("2" (EXPAND "member")
                                      (("2" (EXPAND "append" 2 2)
                                        (("2" (EXPAND "labels" 2)
                                          (("2" (REWRITE "add_as_union")
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "∩")
                                                (("2" (SPLIT)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "∈")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "∈")
                                                    (("2" (EXPAND "union")
                                                      (("2" (EXPAND "member")
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|emptyness_conf_supdom_with_lbls_and_fresh_variables| 0
  (|emptyness_conf_supdom_with_lbls_and_fresh_variables-1| NIL 3936949986
   ("" (SKEEP)
    (("" (EXPAND "empty?")
      (("" (SKEEP)
        (("" (EXPAND "member")
          (("" (EXPAND "intersection")
            (("" (FLATTEN)
              (("" (EXPAND "member")
                (("" (EXPAND "union")
                  (("" (PROP)
                    (("1" (EXPAND "member")
                      (("1" (INST -2 "x")
                        (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL)
                     ("2" (EXPAND "member")
                      (("2" (TYPEPRED "c")
                        (("2" (EXPAND "validConfiguration?")
                          (("2" (FLATTEN)
                            (("2" (HIDE-ALL-BUT (-2 -5 -6 -8))
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL))
   SHOSTAK))
 (|emptyness_conf_supdom_with_car_lbls_and_fresh_variables| 0
  (|emptyness_conf_supdom_with_car_lbls_and_fresh_variables-1| NIL 3937017844
   ("" (SKEEP)
    (("" (BETA)
      (("" (PROP)
        (("" (REWRITE "union_commutative")
          (("" (REWRITE "intersection_commutative")
            (("" (REWRITE "distribute_intersection_union")
              (("" (REWRITE "intersection_commutative")
                ((""
                  (LEMMA "emptyness_conf_supdom_with_lbls_and_fresh_variables")
                  (("" (INST?)
                    (("" (PROP)
                      (("" (REWRITE "emptyset_is_empty?")
                        (("" (REPLACES -1)
                          ((""
                            (CASE-REPLACE "union(emptyset,
                   intersection(union(set_lbl,
                                      labels(append(cdr(c`unsolved),
                                                    c`solved))),
                                singleton(car(c`unsolved)`label))) = intersection(union(set_lbl,
                                      labels(append(cdr(c`unsolved),
                                                    c`solved))),
                                singleton(car(c`unsolved)`label))")
                            (("1" (HIDE -1)
                              (("1" (REWRITE "intersection_commutative")
                                (("1" (REWRITE "distribute_intersection_union")
                                  (("1" (EXPAND "empty?")
                                    (("1" (SKEEP)
                                      (("1" (EXPAND "member")
                                        (("1" (EXPAND "union")
                                          (("1" (PROP)
                                            (("1" (EXPAND "member")
                                              (("1" (EXPAND "intersection")
                                                (("1" (EXPAND "member")
                                                  (("1" (EXPAND "singleton")
                                                    (("1" (FLATTEN)
                                                      (("1" (INST -3 "x")
                                                        (("1" (ASSERT)
                                                          (("1" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "member")
                                              (("2" (EXPAND "intersection")
                                                (("2" (EXPAND "member")
                                                  (("2" (FLATTEN)
                                                    (("2" (EXPAND "singleton")
                                                      (("2"
                                                        (LEMMA
                                                         "car_lbl_fresh_in_cdr")
                                                        (("2" (INST?)
                                                          (("2"
                                                            (EXPAND "member")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1 2)
                              (("2" (LEMMA "union_commutative[variable]")
                                (("2"
                                  (INST -1 "emptyset"
                                   "intersection(union(set_lbl,
                               labels(append(cdr(c`unsolved), c`solved))),
                         singleton(car(c`unsolved)`label))")
                                  (("2" (REPLACES -1)
                                    (("2" (REWRITE "union_empty") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|distribute_intersection_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyness_conf_supdom_with_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|car_lbl_fresh_in_cdr| FORMULA-DECL NIL |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|intersection_commutative| FORMULA-DECL NIL |sets_lemmas| NIL))
   SHOSTAK))
 (|emptyness_conf_var_with_lbls_decomposeFuns| 0
  (|emptyness_conf_var_with_lbls_decomposeFuns-1| NIL 3936928970
   ("" (SKEEP)
    (("" (LEMMA "emptyness_conf_vars_with_lbls_and_fresh_variables")
      (("" (INST -1 "c" "singleton(lbl)")
        (("" (PROP)
          (("1" (REWRITE "add_as_union")
            (("1" (LEMMA "union_commutative[variable]")
              (("1"
                (INST -1 "singleton(lbl)"
                 "labels(append(cdr(c`unsolved), c`solved))")
                (("1" (REPLACES -1) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (EXPAND "member")
              (("2" (EXPAND "singleton") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|emptyness_conf_vars_with_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|emptyness_conf_var_with_lbls_decomposePairs| 0
  (|emptyness_conf_var_with_lbls_decomposePairs-1| NIL 3936875342
   ("" (SKEEP)
    (("" (BETA)
      (("" (LEMMA "emptyness_conf_vars_with_lbls_and_fresh_variables")
        ((""
          (INST -1 "c" "add(freshLabel(c),singleton(freshLabel(union(vars(c),
                                                   singleton(freshLabel(c))))))")
          (("" (PROP)
            (("1" (REWRITE* "add_as_union")
              (("1" (EXPAND "empty?")
                (("1" (SKEEP)
                  (("1" (INST?)
                    (("1" (EXPAND "member") (("1" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (SKEEP)
                (("2" (CASE "lbl= freshLabel(c)")
                  (("1" (LEMMA "freshness_epsilon")
                    (("1" (INST -1 "c") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                   ("2"
                    (CASE "lbl= freshLabel(union(vars(c),
                                            singleton(freshLabel(c))))")
                    (("1" (HIDE -2)
                      (("1" (LEMMA "freshness_membship")
                        (("1"
                          (INST -1 "union(vars(c), singleton(freshLabel(c)))")
                          (("1" (EXPAND "member")
                            (("1" (EXPAND "union" 1 1)
                              (("1" (PROP)
                                (("1" (EXPAND "member")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|freshness_membship| FORMULA-DECL NIL |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|emptyness_conf_vars_with_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL))
   SHOSTAK))
 (|emptyness_conf_var| 0
  (|emptyness_conf_var-1| NIL 3940414748
   ("" (LEMMA "emptyness_conf_vars_with_lbls_and_fresh_variables")
    (("" (SKEEP)
      (("" (INST -1 "c" "emptyset")
        (("" (PROP)
          (("1" (GRIND) NIL NIL)
           ("2" (SKEEP)
            (("2" (EXPAND "member")
              (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|emptyness_conf_vars_with_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL))
   NIL))
 (|niceness_preserv_conditions| 0
  (|niceness_preserv_conditions-1| NIL 3936931393
   ("" (SKEEP)
    (("" (BETA)
      (("" (PROP)
        (("1" (TYPEPRED "c")
          (("1" (EXPAND "validConfiguration?")
            (("1" (PROP)
              (("1" (HIDE -1 -3)
                (("1" (EXPAND "empty?")
                  (("1" (EXPAND "member")
                    (("1" (EXPAND "union" -3)
                      (("1" (PROP)
                        (("1" (EXPAND "member")
                          (("1" (INST -4 "car(c`unsolved)`label")
                            (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL)
                         ("2" (EXPAND "member")
                          (("2" (INST -2 "car(c`unsolved)`label")
                            (("2" (EXPAND "append")
                              (("2" (EXPAND "labels") (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "empty?")
          (("2" (SKEEP) (("2" (INST -2 "x") (("2" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   SHOSTAK))
 (|niceness_preserv_conditions_decomposeFuns_TCC1| 0
  (|niceness_preserv_conditions_decomposeFuns_TCC1-1| NIL 3937016764
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|niceness_preserv_conditions_decomposeFuns| SUBTYPE "antiunif.c`unsolved"
    "(list_adt[AUEquation].cons?)")))
 (|niceness_preserv_conditions_decomposeFuns| 0
  (|niceness_preserv_conditions_decomposeFuns-1| NIL 3936930975
   ("" (SKEEP)
    (("" (BETA)
      (("" (LEMMA "niceness_preserv_conditions")
        (("" (INST -1 "c" "singleton(freshLabel(c))")
          (("1" (BETA)
            (("1"
              (CASE "(FORALL (lbl: variable):
         member(lbl, singleton(freshLabel(c))) IMPLIES
          NOT member(lbl, vars(c)))")
              (("1" (PROP) NIL NIL)
               ("2" (HIDE -1 2)
                (("2" (SKEEP)
                  (("2" (LEMMA "freshness_epsilon")
                    (("2" (INST -1 "c")
                      (("2" (EXPAND "member")
                        (("2" (EXPAND "singleton") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "c")
            (("2" (EXPAND "matchingFuns_conf?")
              (("2" (EXPAND "matchingFuns?") (("2" (FLATTEN) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|niceness_preserv_conditions| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|nice_sub_decomposeFuns| 0
  (|nice_sub_decomposeFuns-1| NIL 3936953368
   ("" (SKEEP)
    (("" (BETA)
      (("" (LEMMA "niceness_preservation")
        ((""
          (INST -1 "car(c`unsolved)`label"
           "app(sym(car(c`unsolved)`lhs), variable(freshLabel(c)))"
           "c`substitution")
          (("" (LEMMA "niceness_preserv_conditions_decomposeFuns")
            (("" (INST?)
              (("" (BETA)
                (("" (EXPAND "vars" -2 (1 2))
                  (("" (EXPAND "vars" -2 (1 2)) (("" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|niceness_preserv_conditions_decomposeFuns| FORMULA-DECL NIL |antiunif|
     NIL)
    (|niceness_preservation| FORMULA-DECL NIL |first_order_substitution| NIL))
   SHOSTAK))
 (|uns_solv_vars_matchingFuns_conf_TCC1| 0
  (|uns_solv_vars_matchingFuns_conf_TCC1-1| NIL 3936934503
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|uns_solv_vars_matchingFuns_conf| SUBTYPE "antiunif.lhs"
    "(first_order_term_adt[constant, variable, f_symbol].app?)")))
 (|uns_solv_vars_matchingFuns_conf_TCC2| 0
  (|uns_solv_vars_matchingFuns_conf_TCC2-1| NIL 3936934503
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|uns_solv_vars_matchingFuns_conf| SUBTYPE "antiunif.rhs"
    "(first_order_term_adt[constant, variable, f_symbol].app?)")))
 (|uns_solv_vars_matchingFuns_conf| 0
  (|uns_solv_vars_matchingFuns_conf-1| NIL 3936934610
   ("" (SKEEP)
    (("" (BETA)
      (("" (EXPAND "append" 1 1)
        (("" (TYPEPRED "c")
          (("" (EXPAND "matchingFuns_conf?")
            (("" (EXPAND "matchingFuns?")
              (("" (EXPAND "matchingFuns?")
                (("" (FLATTEN)
                  (("" (ASSERT)
                    (("" (EXPAND "vars" 1 1)
                      (("" (EXPAND "vars" 1 1)
                        (("" (HIDE -1)
                          (("" (DECOMPOSE-EQUALITY 1)
                            (("" (IFF) (("" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|arg| ADT-ACCESSOR-DECL "[(app?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL))
   SHOSTAK))
 (|decomposeFuns_TCC1| 0
  (|decomposeFuns_TCC1-1| NIL 3937537223
   ("" (SKEEP)
    (("" (LEMMA "nice_sub_decomposeFuns")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nice_sub_decomposeFuns| FORMULA-DECL NIL |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   NIL
   (|decomposeFuns| SUBTYPE
    "list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.eq`label, first_order_term_adt[constant, variable, f_symbol].app(first_order_terms_properties.sym(antiunif.eq`lhs), first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl))), antiunif.c`substitution)"
    "(first_order_substitution.nice?)")))
 (|decomposeFuns_TCC2| 0
  (|decomposeFuns_TCC2-2| NIL 3940413926
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (TYPEPRED "c")
            (("1" (EXPAND "validConfiguration?")
              (("1" (FLATTEN)
                (("1" (EXPAND "validEqs?")
                  (("1" (PROP)
                    (("1" (TYPEPRED "c")
                      (("1" (EXPAND "append" 1)
                        (("1" (EXPAND "vars" 1)
                          (("1" (EXPAND "vars" 1 1)
                            (("1" (EXPAND "makeEq" 1 (1 2))
                              (("1" (LEMMA "uns_solv_vars_matchingFuns_conf")
                                (("1" (INST?)
                                  (("1" (BETA)
                                    (("1"
                                      (CASE-REPLACE
                                       " (vars(arg[constant, variable, f_symbol](lhs)) ∪
               vars(arg[constant, variable, f_symbol](rhs))
               ∪
               vars(append[AUEquation]
                        (cdr[AUEquation](c`unsolved), c`solved)))= union(vars(arg(car(c`unsolved)`lhs)),
             union(vars(arg(car(c`unsolved)`rhs)),
                   vars(append(cdr(c`unsolved), c`solved))))")
                                      (("1" (REPLACE -2 1 RL)
                                        (("1" (EXPAND "labels" 1)
                                          (("1" (EXPAND "makeEq" 1)
                                            (("1"
                                              (LEMMA
                                               "emptyness_conf_var_with_lbls_decomposeFuns")
                                              (("1" (INST?)
                                                (("1" (PROP)
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "vars(append(c`unsolved, c`solved)) ∩
              add(lbl,
                  labels(append[AUEquation]
                             (cdr[AUEquation](c`unsolved), c`solved))) = intersection(vars(append(c`unsolved, c`solved)),
                          add(lbl,
                              labels(append(cdr(c`unsolved), c`solved))))")
                                                    (("1"
                                                      (DECOMPOSE-EQUALITY 1)
                                                      (("1" (HIDE -4)
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (LEMMA "freshness_epsilon")
                                                    (("2" (INST?)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (EXPAND "matchingFuns_conf?")
                                                  (("2"
                                                    (EXPAND "matchingFuns?")
                                                    (("2" (FLATTEN) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -2 -7 2)
                                        (("2" (DECOMPOSE-EQUALITY 1)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "append" 1)
                      (("2" (EXPAND "length" 1)
                        (("2" (EXPAND "labels" 1)
                          (("2" (EXPAND "makeEq")
                            (("2" (REWRITE "card_add[variable]")
                              (("2" (LIFT-IF)
                                (("2" (LEMMA "freshness_labels")
                                  (("2" (INST -1 "c")
                                    (("2" (PROP)
                                      (("1" (HIDE-ALL-BUT (-1 -7 -11 2))
                                        (("1" (GRIND) NIL NIL)) NIL)
                                       ("2" (ASSERT)
                                        (("2" (LEMMA " cdr_is_validConf ")
                                          (("2" (INST -1 "c")
                                            (("1"
                                              (EXPAND "validConfiguration?")
                                              (("1" (EXPAND "validEqs?")
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (EXPAND "matchingFuns_conf?")
                                              (("2" (EXPAND "matchingFuns?")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "supset_dom")
            (("2" (REWRITE "add_as_union")
              (("2" (REWRITE "union_commutative")
                (("2"
                  (LEMMA
                   "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                  (("2" (INST -1 "c" "singleton(lbl)")
                    (("1" (BETA)
                      (("1" (PROP)
                        (("1" (EXPAND "append" 1)
                          (("1" (EXPAND "labels" 1)
                            (("1" (EXPAND "makeEq")
                              (("1" (REWRITE "add_as_union")
                                (("1"
                                  (CASE-REPLACE
                                   "union(singleton(eq`label), supset_dom(c`substitution)) ∩
              union(labels(append[AUEquation]
                               (cdr[AUEquation](c`unsolved), c`solved)),
                    singleton(lbl)) = intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(singleton(lbl),
                                labels(append(cdr(c`unsolved), c`solved))))")
                                  (("1" (HIDE -1 2)
                                    (("1" (DECOMPOSE-EQUALITY)
                                      (("1" (IFF) (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (SKEEP)
                            (("2" (EXPAND "member")
                              (("2" (EXPAND "singleton")
                                (("2" (LEMMA "freshness_epsilon")
                                  (("2" (INST?)
                                    (("2" (EXPAND "member")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "c")
                      (("2" (EXPAND "matchingFuns_conf?")
                        (("2" (EXPAND "matchingFuns?") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "validConfiguration?") (("3" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("4" (TYPEPRED "c")
            (("4" (EXPAND "validConfiguration?")
              (("4" (FLATTEN)
                (("4" (EXPAND "validEqs?")
                  (("4" (FLATTEN)
                    (("4"
                      (CASE-REPLACE "vars(append(cons[AUEquation]
                              (makeEq(arg[constant, variable, f_symbol]
                                          (lhs),
                                      arg[constant, variable, f_symbol]
                                          (rhs),
                                      lbl),
                               cdr[AUEquation](c`unsolved)),
                          c`solved)) = vars(append(c`unsolved, c`solved))")
                      (("1" (HIDE -1)
                        (("1" (EXPAND "matchingFuns_conf?")
                          (("1" (EXPAND "matchingFuns?")
                            (("1" (FLATTEN)
                              (("1" (EXPAND "supset_dom" 1)
                                (("1" (REWRITE "add_as_union")
                                  (("1" (HIDE -2 -3 -4)
                                    (("1"
                                      (CASE
                                          "member(singleton(eq`label),labels(append(c`unsolved, c`solved)))")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (HIDE -1 -2 -4 -8 2)
                                        (("2" (EXPAND "append")
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "labels")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 -2 -3 -4 -5 2)
                        (("2" (EXPAND "matchingFuns_conf?")
                          (("2" (EXPAND "matchingFuns?")
                            (("2" (FLATTEN)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "makeEq")
        (("2" (EXPAND "subs" 1 1)
          (("2" (LEMMA "car_lbl_fresh_dom")
            (("2" (INST?)
              (("1" (LEMMA "subs_no_effect_t_var")
                (("1"
                  (INST -1 "car(c`unsolved)`label" "c`substitution"
                   "app[constant, variable, f_symbol]
                (sym(eq`lhs),
                 variable[constant, variable, f_symbol](lbl))")
                  (("1" (ASSERT)
                    (("1" (REPLACES -2)
                      (("1" (EXPAND "subs" -1)
                        (("1" (EXPAND "subs" -1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "c")
                  (("2" (EXPAND "matchingFuns_conf?")
                    (("2" (EXPAND "matchingFuns?") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "size" 1 1)
        (("3" (EXPAND "map")
          (("3" (EXPAND "size" 1 1)
            (("3" (EXPAND "makeEq")
              (("3" (TYPEPRED "c")
                (("3" (EXPAND "matchingFuns_conf?")
                  (("3" (EXPAND "matchingFuns?")
                    (("3" (EXPAND "size" 1 4)
                      (("3" (EXPAND "map" 1 2)
                        (("3" (ASSERT)
                          (("3" (FLATTEN)
                            (("3" (ASSERT)
                              (("3" (EXPAND "matchingFuns?")
                                (("3" (FLATTEN)
                                  (("3" (EXPAND "size" 1 4)
                                    (("3" (EXPAND "size" 1 5)
                                      (("3" (ASSERT)
                                        (("3" (EXPAND "size" 1 4)
                                          (("3" (ASSERT)
                                            (("3" (EXPAND "sum" 1 2)
                                              (("3" (EXPAND "sum" 1 1)
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|freshness_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|cdr_is_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|arg| ADT-ACCESSOR-DECL "[(app?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|emptyness_conf_var_with_lbls_decomposeFuns| FORMULA-DECL NIL |antiunif|
     NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|uns_solv_vars_matchingFuns_conf| FORMULA-DECL NIL |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyness_conf_supdom_with_car_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|singleton_elt| CONST-DECL "T" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|singleton_rew| FORMULA-DECL NIL |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|car_lbl_fresh_dom| FORMULA-DECL NIL |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|size| DEF-DECL "posnat" |first_order_terms_properties| NIL)
    (|sum| DEF-DECL "nat" |list_aux_equational_reasoning_nat| |nominal|))
   NIL
   (|decomposeFuns| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cons(antiunif.makeEq(first_order_term_adt[constant, variable, f_symbol].arg(antiunif.lhs), first_order_term_adt[constant, variable, f_symbol].arg(antiunif.rhs), antiunif.lbl), list_adt[AUEquation].cdr(antiunif.c`unsolved)), substitution := list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.eq`label, first_order_term_adt[constant, variable, f_symbol].app(first_order_terms_properties.sym(antiunif.eq`lhs), first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl))), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | booleans.AND(list_adt[AUEquation].cons?(cp`unsolved), booleans.AND(list_adt[AUEquation].cdr(antiunif.c`unsolved) = list_adt[AUEquation].cdr(cp`unsolved), booleans.AND(first_order_substitution.subs(cp`substitution)(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(antiunif.c`unsolved)`label)) = first_order_term_adt[constant, variable, f_symbol].app(first_order_terms_properties.sym((list_adt[AUEquation].car(antiunif.c`unsolved))`lhs), first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(cp`unsolved)`label)), reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved)))))}"))
  (|decomposeFuns_TCC2-1| NIL 3937537223
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (TYPEPRED "c")
            (("1" (EXPAND "validConfiguration?")
              (("1" (FLATTEN)
                (("1" (EXPAND "validEqs?")
                  (("1" (PROP)
                    (("1" (TYPEPRED "c")
                      (("1" (EXPAND "append" 1)
                        (("1" (EXPAND "vars" 1)
                          (("1" (EXPAND "vars" 1 1)
                            (("1" (EXPAND "makeEq" 1 (1 2))
                              (("1" (LEMMA "uns_solv_vars_matchingFuns_conf")
                                (("1" (INST?)
                                  (("1" (BETA)
                                    (("1"
                                      (CASE-REPLACE
                                       " (vars(arg[constant, variable, f_symbol](lhs)) ∪
               vars(arg[constant, variable, f_symbol](rhs))
               ∪
               vars(append[AUEquation]
                        (cdr[AUEquation](c`unsolved), c`solved)))= union(vars(arg(car(c`unsolved)`lhs)),
             union(vars(arg(car(c`unsolved)`rhs)),
                   vars(append(cdr(c`unsolved), c`solved))))")
                                      (("1" (REPLACE -2 1 RL)
                                        (("1" (EXPAND "labels" 1)
                                          (("1" (EXPAND "makeEq" 1)
                                            (("1"
                                              (LEMMA
                                               "emptyness_conf_var_with_lbls_decomposeFuns")
                                              (("1" (INST?)
                                                (("1" (PROP)
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "vars(append(c`unsolved, c`solved)) ∩
              add(lbl,
                  labels(append[AUEquation]
                             (cdr[AUEquation](c`unsolved), c`solved))) = intersection(vars(append(c`unsolved, c`solved)),
                          add(lbl,
                              labels(append(cdr(c`unsolved), c`solved))))")
                                                    (("1"
                                                      (DECOMPOSE-EQUALITY 1)
                                                      (("1" (HIDE -4)
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (LEMMA "freshness_epsilon")
                                                    (("2" (INST?)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (EXPAND "matchingFuns_conf?")
                                                  (("2"
                                                    (EXPAND "matchingFuns?")
                                                    (("2" (FLATTEN) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -2 -7 2)
                                        (("2" (DECOMPOSE-EQUALITY 1)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "append" 1)
                      (("2" (EXPAND "length" 1)
                        (("2" (EXPAND "labels" 1)
                          (("2" (EXPAND "makeEq")
                            (("2" (REWRITE "card_add[variable]")
                              (("2" (LIFT-IF)
                                (("2" (LEMMA "freshness_labels")
                                  (("2" (INST -1 "c")
                                    (("2" (PROP)
                                      (("1" (HIDE-ALL-BUT (-1 -7 -11 2))
                                        (("1" (GRIND) NIL NIL)) NIL)
                                       ("2" (ASSERT)
                                        (("2" (LEMMA " cdr_is_validConf ")
                                          (("2" (INST -1 "c")
                                            (("1"
                                              (EXPAND "validConfiguration?")
                                              (("1" (EXPAND "validEqs?")
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (EXPAND "matchingFuns_conf?")
                                              (("2" (EXPAND "matchingFuns?")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "supset_dom")
            (("2" (REWRITE "add_as_union")
              (("2" (REWRITE "union_commutative")
                (("2"
                  (LEMMA
                   "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                  (("2" (INST -1 "c" "singleton(lbl)")
                    (("1" (BETA)
                      (("1" (PROP)
                        (("1" (EXPAND "append" 1)
                          (("1" (EXPAND "labels" 1)
                            (("1" (EXPAND "makeEq")
                              (("1" (REWRITE "add_as_union")
                                (("1"
                                  (CASE-REPLACE
                                   "union(singleton(eq`label), supset_dom(c`substitution)) ∩
              union(labels(append[AUEquation]
                               (cdr[AUEquation](c`unsolved), c`solved)),
                    singleton(lbl)) = intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(singleton(lbl),
                                labels(append(cdr(c`unsolved), c`solved))))")
                                  (("1" (HIDE -1 2)
                                    (("1" (DECOMPOSE-EQUALITY)
                                      (("1" (IFF) (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (SKEEP)
                            (("2" (EXPAND "member")
                              (("2" (EXPAND "singleton")
                                (("2" (LEMMA "freshness_epsilon")
                                  (("2" (INST?)
                                    (("2" (EXPAND "member")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "c")
                      (("2" (EXPAND "matchingFuns_conf?")
                        (("2" (EXPAND "matchingFuns?") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "validConfiguration?") (("3" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("4" (EXPAND "empty?")
            (("4" (SKEEP)
              (("4" (EXPAND "member")
                (("4" (EXPAND "makeEq")
                  (("4" (EXPAND "append")
                    (("4" (EXPAND "vars" -1)
                      (("4" (EXPAND "supset_dom")
                        (("4" (REWRITE "add_as_union")
                          (("4" (EXPAND "vars" -1 1)
                            (("4" (REPLACES -3)
                              (("4" (REPLACES -3)
                                (("4" (REPLACES -2) (("4" (POSTPONE) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "makeEq")
        (("2" (EXPAND "subs" 1 1)
          (("2" (LEMMA "car_lbl_fresh_dom")
            (("2" (INST?)
              (("1" (LEMMA "subs_no_effect_t_var")
                (("1"
                  (INST -1 "car(c`unsolved)`label" "c`substitution"
                   "app[constant, variable, f_symbol]
                (sym(eq`lhs),
                 variable[constant, variable, f_symbol](lbl))")
                  (("1" (ASSERT)
                    (("1" (REPLACES -2)
                      (("1" (EXPAND "subs" -1)
                        (("1" (EXPAND "subs" -1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "c")
                  (("2" (EXPAND "matchingFuns_conf?")
                    (("2" (EXPAND "matchingFuns?") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "size" 1 1)
        (("3" (EXPAND "map")
          (("3" (EXPAND "size" 1 1)
            (("3" (EXPAND "makeEq")
              (("3" (TYPEPRED "c")
                (("3" (EXPAND "matchingFuns_conf?")
                  (("3" (EXPAND "matchingFuns?")
                    (("3" (EXPAND "size" 1 4)
                      (("3" (EXPAND "map" 1 2)
                        (("3" (ASSERT)
                          (("3" (FLATTEN)
                            (("3" (ASSERT)
                              (("3" (EXPAND "matchingFuns?")
                                (("3" (FLATTEN)
                                  (("3" (EXPAND "size" 1 4)
                                    (("3" (EXPAND "size" 1 5)
                                      (("3" (ASSERT)
                                        (("3" (EXPAND "size" 1 4)
                                          (("3" (ASSERT)
                                            (("3" (EXPAND "sum" 1 2)
                                              (("3" (EXPAND "sum " 1 1)
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|arg| ADT-ACCESSOR-DECL "[(app?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|size| DEF-DECL "posnat" |first_order_terms_properties| NIL)
    (|sum| DEF-DECL "nat" |list_aux_equational_reasoning_nat| |nominal|))
   NIL
   (|decomposeFuns| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cons(antiunif.makeEq(first_order_term_adt[constant, variable, f_symbol].arg(antiunif.lhs), first_order_term_adt[constant, variable, f_symbol].arg(antiunif.rhs), antiunif.lbl), list_adt[AUEquation].cdr(antiunif.c`unsolved)), substitution := list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.eq`label, first_order_term_adt[constant, variable, f_symbol].app(first_order_terms_properties.sym(antiunif.eq`lhs), first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl))), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | booleans.AND(list_adt[AUEquation].cons?(cp`unsolved), booleans.AND(list_adt[AUEquation].cdr(antiunif.c`unsolved) = list_adt[AUEquation].cdr(cp`unsolved), booleans.AND(first_order_substitution.subs(cp`substitution)(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(antiunif.c`unsolved)`label)) = first_order_term_adt[constant, variable, f_symbol].app(first_order_terms_properties.sym((list_adt[AUEquation].car(antiunif.c`unsolved))`lhs), first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(cp`unsolved)`label)), reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved)))))}")))
 (|niceness_preserv_conditions_decomposePairs_TCC1| 0
  (|niceness_preserv_conditions_decomposePairs_TCC1-1| NIL 3937537223
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|niceness_preserv_conditions_decomposePairs| SUBTYPE "antiunif.c`unsolved"
    "(list_adt[AUEquation].cons?)")))
 (|niceness_preserv_conditions_decomposePairs| 0
  (|niceness_preserv_conditions_decomposePairs-1| NIL 3937026335
   ("" (SKEEP)
    (("" (LEMMA "niceness_preserv_conditions")
      (("" (BETA)
        (("" (INST?)
          (("1"
            (CASE "FORALL (lbl: variable):
         member(lbl,
                {x: variable |
                   x = freshLabel(c) OR
                    x =
                     freshLabel(union(vars(c), singleton(freshLabel(c))))})
          IMPLIES NOT member(lbl, vars(c))")
            (("1" (PROP) NIL NIL)
             ("2" (HIDE -1 2)
              (("2" (SKEEP)
                (("2" (EXPAND "member")
                  (("2" (PROP)
                    (("1" (LEMMA "freshness_epsilon")
                      (("1" (INST?)
                        (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "freshness_epsilon_ext")
                      (("2" (INST -1 "c" "singleton(freshLabel(c))")
                        (("2" (EXPAND "member")
                          (("2" (EXPAND "union") (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "is_finite")
              (("2"
                (INST 1 "2" "(LAMBDA(x: ({x: variable |
                     x = freshLabel(c) OR
                      x =
                       freshLabel(union[variable]
                                      (vars(c),
                                       singleton[variable]
                                           (freshLabel(c))))})): IF x = freshLabel(c) THEN 0 ELSE 1 ENDIF )")
                (("2" (EXPAND "injective?")
                  (("2" (SKEEP)
                    (("2" (LIFT-IF)
                      (("2" (LIFT-IF)
                        (("2" (LIFT-IF)
                          (("2" (PROP)
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                             ("3" (ASSERT) NIL NIL)
                             ("4" (TYPEPRED "x1" "x2")
                              (("4" (PROP) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "matchingPairs_conf?")
              (("3" (EXPAND "matchingPairs?") (("3" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|niceness_preserv_conditions| FORMULA-DECL NIL |antiunif| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|freshness_epsilon_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|nice_sub_decomposePairs| 0
  (|nice_sub_decomposePairs-1| NIL 3940414058
   ("" (SKEEP)
    (("" (BETA)
      (("" (LEMMA "niceness_preservation")
        ((""
          (INST -1 "car(c`unsolved)`label" "pair(variable(freshLabel(c)),
                       variable(freshLabel(union(vars(c),
                                                 singleton(freshLabel(c))))))"
           "c`substitution")
          (("" (LEMMA "niceness_preserv_conditions_decomposePairs")
            (("" (INST?)
              (("" (BETA)
                (("" (ASSERT)
                  (("" (PROP)
                    (("1" (HIDE -2 2)
                      (("1" (EXPAND "vars" -1 1)
                        (("1" (EXPAND "vars" -1 1)
                          (("1" (EXPAND "vars" -1 1)
                            (("1" (EXPAND "member") (("1" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2 3)
                      (("2" (EXPAND "empty?")
                        (("2" (SKEEP)
                          (("2" (INST?)
                            (("2" (EXPAND "member")
                              (("2" (EXPAND "vars" -1 1)
                                (("2" (EXPAND "vars" -1 1)
                                  (("2" (EXPAND "vars" -1 1)
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|niceness_preserv_conditions_decomposePairs| FORMULA-DECL NIL |antiunif|
     NIL)
    (|niceness_preservation| FORMULA-DECL NIL |first_order_substitution| NIL))
   NIL))
 (|uns_solv_vars_matchingPairs_conf_TCC1| 0
  (|uns_solv_vars_matchingPairs_conf_TCC1-1| NIL 3937537223
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|uns_solv_vars_matchingPairs_conf| SUBTYPE "antiunif.lhs"
    "(first_order_term_adt[constant, variable, f_symbol].pair?)")))
 (|uns_solv_vars_matchingPairs_conf_TCC2| 0
  (|uns_solv_vars_matchingPairs_conf_TCC2-1| NIL 3937537223
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|uns_solv_vars_matchingPairs_conf| SUBTYPE "antiunif.rhs"
    "(first_order_term_adt[constant, variable, f_symbol].pair?)")))
 (|uns_solv_vars_matchingPairs_conf| 0
  (|uns_solv_vars_matchingPairs_conf-1| NIL 3937036672
   ("" (SKEEP)
    (("" (BETA)
      (("" (DECOMPOSE-EQUALITY)
        (("" (TYPEPRED "c")
          (("" (EXPAND "matchingPairs_conf?")
            (("" (EXPAND "matchingPairs?")
              (("" (FLATTEN)
                (("" (EXPAND "append" 1 1)
                  (("" (ASSERT)
                    (("" (EXPAND "vars" 1 1)
                      (("" (EXPAND "matchingPairs?")
                        (("" (FLATTEN)
                          (("" (EXPAND "vars" 1 1)
                            (("" (EXPAND "vars" 1 1)
                              (("" (ASSERT)
                                (("" (IFF)
                                  (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|term1| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|term2| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|decomposePairs_TCC1| 0
  (|decomposePairs_TCC1-1| NIL 3937537223
   ("" (SKEEP)
    (("" (LEMMA "nice_sub_decomposePairs")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nice_sub_decomposePairs| FORMULA-DECL NIL |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   NIL
   (|decomposePairs| SUBTYPE
    "list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.eq`label, first_order_term_adt[constant, variable, f_symbol].pair(first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl1), first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl2))), antiunif.c`substitution)"
    "(first_order_substitution.nice?)")))
 (|decomposePairs_TCC2| 0
  (|decomposePairs_TCC2-1| NIL 3937537223
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (TYPEPRED "c")
            (("1" (EXPAND "validConfiguration?")
              (("1" (FLATTEN)
                (("1" (EXPAND "validEqs?")
                  (("1" (PROP)
                    (("1" (TYPEPRED "c")
                      (("1" (EXPAND "append" 1)
                        (("1" (EXPAND "vars" 1)
                          (("1" (EXPAND "makeEq" 1 (1 2))
                            (("1" (EXPAND "vars" 1 1)
                              (("1" (LEMMA "uns_solv_vars_matchingPairs_conf")
                                (("1" (EXPAND "append" 1 1)
                                  (("1" (EXPAND "vars" 1 3)
                                    (("1" (EXPAND "vars" 1 3)
                                      (("1" (INST?)
                                        (("1" (BETA)
                                          (("1"
                                            (CASE-REPLACE
                                             "(vars(term1[constant, variable, f_symbol](lhs)) ∪
               vars(term1[constant, variable, f_symbol](rhs))
               ∪
               (vars(term2[constant, variable, f_symbol](lhs)) ∪
                 vars(term2[constant, variable, f_symbol](rhs))
                 ∪
                 vars(append[AUEquation]
                          (cdr[AUEquation](c`unsolved), c`solved)))) = union(vars(term1(car(c`unsolved)`lhs)),
             union(vars(term1(car(c`unsolved)`rhs)),
                   union(vars(term2(car(c`unsolved)`lhs)),
                         union(vars(term2(car(c`unsolved)`rhs)),
                               vars(append(cdr(c`unsolved), c`solved))))))")
                                            (("1" (REPLACE -2 1 RL)
                                              (("1" (EXPAND "labels" 1)
                                                (("1" (EXPAND "makeEq" 1)
                                                  (("1" (EXPAND "append" 1 2)
                                                    (("1" (EXPAND "labels" 1)
                                                      (("1"
                                                        (LEMMA
                                                         "emptyness_conf_var_with_lbls_decomposePairs")
                                                        (("1" (INST?)
                                                          (("1" (BETA)
                                                            (("1"
                                                              (REPLACE -15 -1
                                                                       RL)
                                                              (("1"
                                                                (REPLACE -16 -1
                                                                         RL)
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "(vars(append(c`unsolved, c`solved)) ∩
              add(lbl1,
                  add(lbl2,
                      labels(append[AUEquation]
                                 (cdr[AUEquation](c`unsolved), c`solved))))) = (intersection(vars(append(c`unsolved, c`solved)),
                          add(lbl1,
                              add(lbl2,
                                  labels(append(cdr(c`unsolved),
                                                c`solved))))))")
                                                                  (("1"
                                                                    (HIDE 2 -1
                                                                     -2 -3 -4
                                                                     -5)
                                                                    (("1"
                                                                      (DECOMPOSE-EQUALITY)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1 -2
                                                                         -3 -4
                                                                         -5)
                                                                        (("1"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND
                                                             "matchingPairs_conf?")
                                                            (("2"
                                                              (EXPAND
                                                               "matchingPairs?")
                                                              (("2" (FLATTEN)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE -2 -7 2)
                                              (("2" (DECOMPOSE-EQUALITY 1)
                                                (("2" (HIDE -2)
                                                  (("2" (HIDE -5)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "append" 1 2)
                      (("2" (EXPAND "makeEq")
                        (("2" (EXPAND "length" 1 1)
                          (("2" (EXPAND "append" 1 2)
                            (("2" (EXPAND "length" 1 1)
                              (("2" (EXPAND "append" 1 1)
                                (("2" (EXPAND "labels" 1 1)
                                  (("2" (EXPAND "append" 1 1)
                                    (("2" (EXPAND "labels" 1 1)
                                      (("2" (LEMMA "cdr_is_validConf ")
                                        (("2" (INST?)
                                          (("1" (EXPAND "validConfiguration?")
                                            (("1" (EXPAND "validEqs?")
                                              (("1" (FLATTEN)
                                                (("1" (HIDE -1 -3 -4 -5 -6)
                                                  (("1" (REPLACE -1 1 RL)
                                                    (("1" (REWRITE "card_add")
                                                      (("1"
                                                        (CASE "NOT add(lbl2,
              labels(append[AUEquation]
                         (cdr[AUEquation](c`unsolved), c`solved)))
             (lbl1)")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REWRITE
                                                             "card_add")
                                                            (("1" (LIFT-IF)
                                                              (("1"
                                                                (CASE
                                                                    "NOT labels(append[AUEquation](cdr[AUEquation](c`unsolved), c`solved))
               (lbl2)")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -4 -5 -6
                                                                    -11 -12))
                                                                  (("2"
                                                                    (LEMMA
                                                                     "freshness_labels_ext")
                                                                    (("2"
                                                                      (INST -1
                                                                       "c"
                                                                       "singleton(lbl1)")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "freshLabel"
                                                                         1)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -6 1
                                                                           RL)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "member")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "append"
                                                                               1)
                                                                              (("2"
                                                                                (LIFT-IF)
                                                                                (("2"
                                                                                  (TYPEPRED
                                                                                   "c")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "matchingPairs_conf?")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "matchingPairs?")
                                                                                      (("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "labels"
                                                                                             1)
                                                                                            (("2"
                                                                                              (REWRITE
                                                                                               "add_as_union")
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT
                                                           (-4 -5 -1 -11 -12))
                                                          (("2"
                                                            (LEMMA
                                                             "freshness_labels")
                                                            (("2" (INST?)
                                                              (("2"
                                                                (REPLACE -4 1
                                                                         RL)
                                                                (("2"
                                                                  (REWRITE
                                                                   "add_as_union")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "union"
                                                                     -1)
                                                                    (("2"
                                                                      (SPLIT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "append"
                                                                         1)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "c")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "matchingPairs_conf?")
                                                                            (("1"
                                                                              (EXPAND
                                                                               "matchingPairs?")
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "labels"
                                                                                     1)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "add_as_union")
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (LEMMA
                                                                         " freshness_membship")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "union(vars(c), singleton(lbl1))")
                                                                          (("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -5
                                                                               1
                                                                               RL)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "singleton")
                                                                                  (("2"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-1
                                                                                      1))
                                                                                    (("2"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT (-6 1))
                                            (("2"
                                              (EXPAND "matchingPairs_conf?")
                                              (("2" (EXPAND "matchingPairs?")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "supset_dom")
            (("2" (REWRITE "add_as_union")
              (("2" (REWRITE "union_commutative")
                (("2"
                  (LEMMA
                   "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                  (("2" (INST -1 "c" "union(singleton(lbl1), singleton(lbl2))")
                    (("1" (BETA)
                      (("1" (PROP)
                        (("1" (EXPAND "append" 1)
                          (("1" (EXPAND "labels" 1)
                            (("1" (EXPAND "makeEq")
                              (("1" (REWRITE "add_as_union")
                                (("1"
                                  (CASE-REPLACE
                                   "union(singleton(eq`label), supset_dom(c`substitution)) ∩
              union(labels(append[AUEquation]
                               (cons[AUEquation]
                                    ((# lhs
                                          := term2[constant, variable,
                                                   f_symbol]
                                                 (lhs),
                                        rhs
                                          := term2[constant, variable,
                                                   f_symbol]
                                                 (rhs),
                                        label := lbl2 #),
                                     cdr[AUEquation](c`unsolved)),
                                c`solved)),
                    singleton(lbl1)) = intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(union(singleton(lbl1), singleton(lbl2)),
                                labels(append(cdr(c`unsolved), c`solved))))")
                                  (("1" (HIDE -1 2)
                                    (("1" (DECOMPOSE-EQUALITY)
                                      (("1" (IFF) (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKEEP)
                          (("2" (EXPAND "member")
                            (("2" (EXPAND "union" -1)
                              (("2" (PROP)
                                (("1" (EXPAND "member")
                                  (("1" (EXPAND "singleton")
                                    (("1" (LEMMA "freshness_epsilon")
                                      (("1" (INST?)
                                        (("1" (EXPAND "member")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "member")
                                  (("2" (LEMMA "freshness_epsilon_ext")
                                    (("2" (INST?)
                                      (("2" (EXPAND "member")
                                        (("2" (EXPAND "union")
                                          (("2" (PROP)
                                            (("2" (EXPAND "member")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "c")
                      (("2" (EXPAND "matchingPairs_conf?")
                        (("2" (EXPAND "matchingPairs?")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "validConfiguration?") (("3" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("4" (TYPEPRED "c")
            (("4" (EXPAND "validConfiguration?")
              (("4" (FLATTEN)
                (("4" (EXPAND "validEqs?")
                  (("4" (FLATTEN)
                    (("4"
                      (CASE-REPLACE "vars(append(cons[AUEquation]
                              (makeEq(term1[constant, variable, f_symbol]
                                          (lhs),
                                      term1[constant, variable, f_symbol]
                                          (rhs),
                                      lbl1),
                               cons[AUEquation]
                                   (makeEq(term2[constant, variable,
                                                 f_symbol]
                                               (lhs),
                                           term2[constant, variable,
                                                 f_symbol]
                                               (rhs),
                                           lbl2),
                                    cdr[AUEquation](c`unsolved))),
                          c`solved)) = vars(append(c`unsolved, c`solved))")
                      (("1" (HIDE -1)
                        (("1" (EXPAND "matchingPairs_conf?")
                          (("1" (EXPAND "matchingPairs?")
                            (("1" (FLATTEN)
                              (("1" (EXPAND "supset_dom" 1)
                                (("1" (REWRITE "add_as_union")
                                  (("1" (HIDE -2 -3 -4)
                                    (("1"
                                      (CASE
                                          "member(singleton(eq`label),labels(append(c`unsolved, c`solved)))")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (HIDE -1 -2 -4 -8 -9 2)
                                        (("2" (EXPAND "append " 1)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "labels" 1)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 -2 -3 -4 -5 2)
                        (("2" (EXPAND "matchingPairs_conf?")
                          (("2" (EXPAND "matchingPairs?")
                            (("2" (FLATTEN)
                              (("2" (DECOMPOSE-EQUALITY)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "makeEq")
        (("2" (EXPAND "subs" 1 1)
          (("2" (LEMMA "car_lbl_fresh_dom")
            (("2" (INST -1 "c")
              (("1" (LEMMA "subs_no_effect_t_var")
                (("1"
                  (INST -1 "car(c`unsolved)`label" "c`substitution"
                   "pair[constant, variable, f_symbol]
                (variable[constant, variable, f_symbol](lbl1),
                 variable[constant, variable, f_symbol](lbl2))")
                  (("1" (ASSERT)
                    (("1" (REPLACES -2)
                      (("1" (EXPAND "subs" -1)
                        (("1" (EXPAND "subs" -1) (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "c")
                (("2" (EXPAND "matchingPairs_conf?")
                  (("2" (EXPAND "matchingPairs?") (("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "size" 1 1)
        (("3" (EXPAND "map")
          (("3" (EXPAND "size" 1 1)
            (("3" (EXPAND "makeEq")
              (("3" (TYPEPRED "c")
                (("3" (EXPAND "matchingPairs_conf?")
                  (("3" (EXPAND "matchingPairs?")
                    (("3" (EXPAND "size" 1 4)
                      (("3" (EXPAND "map" 1 2)
                        (("3" (FLATTEN)
                          (("3" (ASSERT)
                            (("3" (EXPAND "matchingPairs?")
                              (("3" (FLATTEN)
                                (("3" (EXPAND "size" 1 4)
                                  (("3" (EXPAND "size" 1 5)
                                    (("3" (ASSERT)
                                      (("3" (EXPAND "size" 1 4)
                                        (("3" (ASSERT)
                                          (("3" (EXPAND "sum" 1 2)
                                            (("3" (EXPAND "sum" 1 1)
                                              (("3" (EXPAND "map" 1 1)
                                                (("3" (ASSERT)
                                                  (("3" (EXPAND "size" 1 3)
                                                    (("3" (EXPAND "sum" 1 1)
                                                      (("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|card_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|freshness_membship| FORMULA-DECL NIL |antiunif| NIL)
    (|freshness_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|freshness_labels_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr_is_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∩ CONST-DECL "set" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|emptyness_conf_var_with_lbls_decomposePairs| FORMULA-DECL NIL |antiunif|
     NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|term2| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|term1| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|uns_solv_vars_matchingPairs_conf| FORMULA-DECL NIL |antiunif| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|emptyness_conf_supdom_with_car_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL)
    (|freshness_epsilon_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|freshness_epsilon| FORMULA-DECL NIL |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|singleton_elt| CONST-DECL "T" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|singleton_rew| FORMULA-DECL NIL |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|car_lbl_fresh_dom| FORMULA-DECL NIL |antiunif| NIL)
    (|sum| DEF-DECL "nat" |list_aux_equational_reasoning_nat| |nominal|)
    (|size| DEF-DECL "posnat" |first_order_terms_properties| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|decomposePairs| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cons(antiunif.makeEq(first_order_term_adt[constant, variable, f_symbol].term1(antiunif.lhs), first_order_term_adt[constant, variable, f_symbol].term1(antiunif.rhs), antiunif.lbl1), list_adt[AUEquation].cons(antiunif.makeEq(first_order_term_adt[constant, variable, f_symbol].term2(antiunif.lhs), first_order_term_adt[constant, variable, f_symbol].term2(antiunif.rhs), antiunif.lbl2), list_adt[AUEquation].cdr(antiunif.c`unsolved))), substitution := list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.eq`label, first_order_term_adt[constant, variable, f_symbol].pair(first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl1), first_order_term_adt[constant, variable, f_symbol].variable(antiunif.lbl2))), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) |      list_adt[AUEquation].cons?(cp`unsolved) AND list_adt[AUEquation].cons?(list_adt[AUEquation].cdr(cp`unsolved)) AND (list_adt[AUEquation].cdr(list_adt[AUEquation].cdr(cp`unsolved)) = list_adt[AUEquation].cdr(antiunif.c`unsolved)) AND (first_order_substitution.subs(cp`substitution)(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(antiunif.c`unsolved)`label)) = first_order_term_adt[constant, variable, f_symbol].pair(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(cp`unsolved)`label), first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(list_adt[AUEquation].cdr(cp`unsolved))`label))) AND (reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved)))}")))
 (|nice_sub_trivialSyn_Eqs_TCC1| 0
  (|nice_sub_trivialSyn_Eqs_TCC1-1| NIL 3939115553 ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|nice_sub_trivialSyn_Eqs| SUBTYPE "antiunif.c`unsolved"
    "(list_adt[AUEquation].cons?)")))
 (|nice_sub_trivialSyn_Eqs| 0
  (|nice_sub_trivialSyn_Eqs-2| NIL 3939436497
   ("" (SKEEP)
    (("" (BETA)
      (("" (EXPAND "nice?")
        (("" (TYPEPRED "c")
          (("" (EXPAND "validConfiguration?")
            (("" (EXPAND "syntacticallyEq_conf?")
              (("" (EXPAND "syntacticallyEq?")
                (("" (FLATTEN)
                  (("" (SPLIT)
                    (("1" (EXPAND "validEqs?")
                      (("1" (FLATTEN)
                        (("1" (HIDE -3 -4 -5 -6 -8)
                          (("1" (EXPAND "append")
                            (("1" (ASSERT)
                              (("1" (EXPAND "vars" -2)
                                (("1" (EXPAND "vars" -2 1)
                                  (("1" (EXPAND "labels")
                                    (("1" (REWRITE "add_as_union")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -2 -4 -5 -7)
                      (("2" (EXPAND "append")
                        (("2" (ASSERT)
                          (("2" (EXPAND "labels")
                            (("2" (REWRITE "add_as_union")
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE-ALL-BUT (-4 -5 1))
                      (("3" (EXPAND "append")
                        (("3" (ASSERT)
                          (("3" (EXPAND "vars" -1)
                            (("3" (EXPAND "vars" -1 1)
                              (("3" (EXPAND "disjoint?")
                                (("3" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL))
   NIL)
  (|nice_sub_trivialSyn_Eqs-1| NIL 3937040814
   ("" (SKEEP)
    (("" (BETA)
      (("" (LEMMA "niceness_preservation")
        ((""
          (INST -1 "car(c`unsolved)`label" "car(c`unsolved)`lhs"
           "c`substitution")
          (("" (POSTPONE) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|trivialSyn_Eqs_TCC1| 0
  (|trivialSyn_Eqs_TCC1-2| NIL 3940414155
   ("" (SKEEP)
    (("" (LEMMA "nice_sub_trivialSyn_Eqs")
      (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nice_sub_trivialSyn_Eqs| FORMULA-DECL NIL |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   NIL
   (|trivialSyn_Eqs| SUBTYPE
    "list_adt[[variable, Term]].cons((antiunif.eq`label, antiunif.lhs), antiunif.c`substitution)"
    "(first_order_substitution.nice?)"))
  (|trivialSyn_Eqs_TCC1-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|trivialSyn_Eqs| SUBTYPE
    "list_adt[[variable, Term]].cons((antiunif.eq`label, antiunif.lhs), antiunif.c`substitution)"
    "(first_order_substitution.nice?)")))
 (|trivialSyn_Eqs_TCC2| 0
  (|trivialSyn_Eqs_TCC2-3| NIL 3940414297
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (EXPAND "validEqs?")
            (("1" (PROP)
              (("1" (TYPEPRED "c")
                (("1" (LEMMA "emptyness_conf_var")
                  (("1" (INST?)
                    (("1"
                      (CASE-REPLACE
                       "vars(append(cdr[AUEquation](c`unsolved), c`solved)) ∩
              labels(append(cdr[AUEquation](c`unsolved), c`solved)) = intersection(vars(append(c`unsolved, c`solved)),
                          (labels(append(cdr(c`unsolved), c`solved))))")
                      (("1" (HIDE -2 -7 2)
                        (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "syntacticallyEq_conf?")
                      (("2" (EXPAND "syntacticallyEq?") (("2" (PROP) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "freshness_labels")
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (LEMMA " cdr_is_validConf ")
                      (("2" (INST?)
                        (("1" (EXPAND "validConfiguration?")
                          (("1" (EXPAND "validEqs?") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "c")
                          (("2" (EXPAND "syntacticallyEq_conf?")
                            (("2" (EXPAND "syntacticallyEq?")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "supset_dom")
            (("2" (REWRITE "add_as_union")
              (("2" (REWRITE "union_commutative")
                (("2"
                  (LEMMA
                   "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                  (("2" (INST -1 "c" "emptyset")
                    (("1" (BETA)
                      (("1" (PROP)
                        (("1"
                          (CASE-REPLACE
                           "(union(singleton(eq`label), supset_dom(c`substitution)) ∩
              labels(append(cdr[AUEquation](c`unsolved), c`solved))) = (intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(emptyset,
                                labels(append(cdr(c`unsolved), c`solved)))))")
                          (("1" (HIDE -1 2)
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (IFF) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (SKEEP)
                            (("2" (EXPAND "member")
                              (("2" (EXPAND "emptyset")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "c")
                      (("2" (EXPAND "syntacticallyEq_conf?")
                        (("2" (EXPAND "syntacticallyEq?")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "validConfiguration?") (("3" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("4" (TYPEPRED "c")
            (("4" (EXPAND "validConfiguration?")
              (("4" (FLATTEN)
                (("4" (EXPAND "validEqs?")
                  (("4" (FLATTEN)
                    (("4" (EXPAND "syntacticallyEq_conf?")
                      (("4" (EXPAND "syntacticallyEq?")
                        (("4" (FLATTEN)
                          (("4" (EXPAND "supset_dom" 1)
                            (("4" (REWRITE "add_as_union")
                              (("4" (HIDE -2 -3 -4)
                                (("4"
                                  (CASE
                                      "member(singleton(eq`label),labels(append(c`unsolved, c`solved)))")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (HIDE-ALL-BUT (-3 -5 -6 1))
                                    (("2" (EXPAND "append")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "labels")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "subs" 1 1)
        (("2" (LEMMA "car_lbl_fresh_dom")
          (("2" (INST?)
            (("1" (LEMMA "subs_no_effect_t_var")
              (("1"
                (INST -1 "car(c`unsolved)`label" "c`substitution"
                 "car[AUEquation](c`unsolved)`lhs")
                (("1" (ASSERT)
                  (("1" (REPLACES -2)
                    (("1" (EXPAND "subs" -1)
                      (("1" (EXPAND "subs" -1) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "c")
              (("2" (EXPAND "syntacticallyEq_conf?")
                (("2" (EXPAND "syntacticallyEq?") (("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "size" 1 1)
        (("3" (TYPEPRED "c")
          (("3" (EXPAND "syntacticallyEq_conf?")
            (("3" (EXPAND "syntacticallyEq?")
              (("3" (EXPAND "size" 1 2)
                (("3" (FLATTEN)
                  (("3" (EXPAND "syntacticallyEq?")
                    (("3" (FLATTEN)
                      (("3" (ASSERT)
                        (("3" (HIDE 1 2)
                          (("3" (EXPAND "validConfiguration?")
                            (("3" (HIDE -1) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|emptyness_conf_var| FORMULA-DECL NIL |antiunif| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cdr_is_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|freshness_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyness_conf_supdom_with_car_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|singleton_elt| CONST-DECL "T" |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|singleton_rew| FORMULA-DECL NIL |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|car_lbl_fresh_dom| FORMULA-DECL NIL |antiunif| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|sum| DEF-DECL "nat" |list_aux_equational_reasoning_nat| |nominal|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|trivialSyn_Eqs| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), substitution := list_adt[[variable, Term]].cons((antiunif.eq`label, antiunif.lhs), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | booleans.AND(first_order_substitution.subs(cp`substitution)(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(antiunif.c`unsolved)`label)) = list_adt[AUEquation].car(antiunif.c`unsolved)`lhs, reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved)))}"))
  (|trivialSyn_Eqs_TCC2-2| NIL 3940414237
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (EXPAND "validEqs?")
            (("1" (PROP)
              (("1" (TYPEPRED "c")
                (("1"
                  (CASE-REPLACE
                   "vars(append(cdr[AUEquation](c`unsolved), c`solved)) ∩
              labels(append(cdr[AUEquation](c`unsolved), c`solved)) = intersection(vars(append(c`unsolved, c`solved)),
                          (labels(append(cdr(c`unsolved), c`solved))))")
                  (("1" (HIDE -2 -7 2)
                    (("1" (DECOMPOSE-EQUALITY)
                      (("1" (GRIND)
                        (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)
                         ("3" (POSTPONE) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (POSTPONE) NIL NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "freshness_labels")
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (LEMMA " cdr_is_validConf ")
                      (("2" (INST?)
                        (("1" (EXPAND "validConfiguration?")
                          (("1" (EXPAND "validEqs?") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "c")
                          (("2" (EXPAND "syntacticallyEq_conf?")
                            (("2" (EXPAND "syntacticallyEq?")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "supset_dom")
            (("2" (REWRITE "add_as_union")
              (("2" (REWRITE "union_commutative")
                (("2"
                  (LEMMA
                   "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                  (("2" (INST -1 "c" "emptyset")
                    (("1" (BETA)
                      (("1" (PROP)
                        (("1"
                          (CASE-REPLACE
                           "(union(singleton(eq`label), supset_dom(c`substitution)) ∩
              labels(append(cdr[AUEquation](c`unsolved), c`solved))) = (intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(emptyset,
                                labels(append(cdr(c`unsolved), c`solved)))))")
                          (("1" (HIDE -1 2)
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (IFF) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (SKEEP)
                            (("2" (EXPAND "member")
                              (("2" (EXPAND "emptyset")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "c")
                      (("2" (EXPAND "syntacticallyEq_conf?")
                        (("2" (EXPAND "syntacticallyEq?")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "validConfiguration?") (("3" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("4" (TYPEPRED "c")
            (("4" (EXPAND "validConfiguration?")
              (("4" (FLATTEN)
                (("4" (EXPAND "validEqs?")
                  (("4" (FLATTEN)
                    (("4" (EXPAND "syntacticallyEq_conf?")
                      (("4" (EXPAND "syntacticallyEq?")
                        (("4" (FLATTEN)
                          (("4" (EXPAND "supset_dom" 1)
                            (("4" (REWRITE "add_as_union")
                              (("4" (HIDE -2 -3 -4)
                                (("4"
                                  (CASE
                                      "member(singleton(eq`label),labels(append(c`unsolved, c`solved)))")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (HIDE-ALL-BUT (-3 -5 -6 1))
                                    (("2" (EXPAND "append")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "labels")
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "subs" 1 1)
        (("2" (LEMMA "car_lbl_fresh_dom")
          (("2" (INST?)
            (("1" (LEMMA "subs_no_effect_t_var")
              (("1"
                (INST -1 "car(c`unsolved)`label" "c`substitution"
                 "car[AUEquation](c`unsolved)`lhs")
                (("1" (ASSERT)
                  (("1" (REPLACES -2)
                    (("1" (EXPAND "subs" -1)
                      (("1" (EXPAND "subs" -1) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "c")
              (("2" (EXPAND "syntacticallyEq_conf?")
                (("2" (EXPAND "syntacticallyEq?") (("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "size" 1 1)
        (("3" (TYPEPRED "c")
          (("3" (EXPAND "syntacticallyEq_conf?")
            (("3" (EXPAND "syntacticallyEq?")
              (("3" (EXPAND "size" 1 2)
                (("3" (FLATTEN)
                  (("3" (EXPAND "syntacticallyEq?")
                    (("3" (FLATTEN)
                      (("3" (ASSERT)
                        (("3" (HIDE 1 2)
                          (("3" (EXPAND "validConfiguration?")
                            (("3" (HIDE -1) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|trivialSyn_Eqs| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), substitution := list_adt[[variable, Term]].cons((antiunif.eq`label, antiunif.lhs), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | booleans.AND(first_order_substitution.subs(cp`substitution)(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(antiunif.c`unsolved)`label)) = list_adt[AUEquation].car(antiunif.c`unsolved)`lhs, reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved)))}"))
  (|trivialSyn_Eqs_TCC2-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|trivialSyn_Eqs| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), substitution := list_adt[[variable, Term]].cons((antiunif.eq`label, antiunif.lhs), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | booleans.AND(first_order_substitution.subs(cp`substitution)(first_order_term_adt[constant, variable, f_symbol].variable(list_adt[AUEquation].car(antiunif.c`unsolved)`label)) = list_adt[AUEquation].car(antiunif.c`unsolved)`lhs, reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved)))}")))
 (|syntEq_inter_vars_unsolv_labels_solv| 0
  (|syntEq_inter_vars_unsolv_labels_solv-1| NIL 3937621904
   ("" (SKEEP)
    (("" (CASE-REPLACE "labels(trivialSyn_Eqs(c)`solved) = labels(c`solved)")
      (("1" (TYPEPRED "c")
        (("1" (EXPAND "validConfiguration?")
          (("1" (EXPAND "validEqs?")
            (("1" (FLATTEN)
              (("1" (HIDE -2 -3 -4 -5 -7)
                (("1" (EXPAND "empty?")
                  (("1" (SKEEP)
                    (("1" (INST -1 "x")
                      (("1"
                        (CASE-REPLACE "vars(append(c`unsolved, c`solved)) ∩
              labels(append(c`unsolved, c`solved)) = intersection(vars(append(c`unsolved, c`solved)), labels(append(c`unsolved, c`solved)))")
                        (("1" (HIDE -1)
                          (("1" (EXPAND "member")
                            (("1" (EXPAND "intersection")
                              (("1" (EXPAND "member")
                                (("1" (FLATTEN)
                                  (("1" (SPLIT)
                                    (("1" (EXPAND "append")
                                      (("1" (EXPAND "syntacticallyEq_conf?")
                                        (("1" (EXPAND "syntacticallyEq?")
                                          (("1" (ASSERT)
                                            (("1" (LIFT-IF)
                                              (("1" (PROP)
                                                (("1" (GRIND) NIL NIL)
                                                 ("2" (EXPAND "vars" 2)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (REWRITE "labels_allEquations_as_union")
                                      (("2" (HIDE -1 -2)
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|labels_allEquations_as_union| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|labels_trivialSyn_Eqs| 0
  (|labels_trivialSyn_Eqs-1| NIL 3937709618
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL))
   SHOSTAK))
 (|syntEq_car_lhs_member_img| 0
  (|syntEq_car_lhs_member_img-2| NIL 3939436245
   ("" (SKEEP)
    (("" (EXPAND "member")
      (("" (EXPAND "trivialSyn_Eqs")
        (("" (EXPAND "img")
          (("" (INST 1 "car(c`unsolved)`label")
            (("1" (EXPAND "member")
              (("1" (EXPAND "dom")
                (("1" (EXPAND "subs")
                  (("1"
                    (CASE
                        " subs(cons((car(c`unsolved)`label, car(c`unsolved)`lhs),
                 c`substitution))
           (variable(car(c`unsolved)`label))
        = car(c`unsolved)`lhs")
                    (("1" (ASSERT)
                      (("1" (REPLACES -1)
                        (("1" (PROP)
                          (("1" (TYPEPRED "c")
                            (("1" (EXPAND "validConfiguration?")
                              (("1" (EXPAND "validEqs?")
                                (("1" (FLATTEN)
                                  (("1" (HIDE -2 -3 -4 -5)
                                    (("1" (EXPAND "append")
                                      (("1" (EXPAND "syntacticallyEq_conf?")
                                        (("1" (EXPAND "syntacticallyEq?")
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "vars")
                                                (("1" (EXPAND "vars" -1 1)
                                                  (("1" (EXPAND "labels")
                                                    (("1"
                                                      (REWRITE "add_as_union")
                                                      (("1" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (LEMMA "subs_no_effect_t_var")
                        (("2"
                          (INST -1 "car(c`unsolved)`label" "c`substitution"
                           "car(c`unsolved)`lhs")
                          (("2" (EXPAND "subs" -1)
                            (("2" (ASSERT)
                              (("2" (HIDE 1)
                                (("2" (TYPEPRED "c")
                                  (("2" (EXPAND "validConfiguration?")
                                    (("2" (FLATTEN)
                                      (("2" (HIDE -1 -3 -4)
                                        (("2" (LEMMA "supset_dom_correct2")
                                          (("2" (INST?) (("2" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE 2)
                      (("3" (TYPEPRED "c")
                        (("3" (EXPAND "syntacticallyEq_conf?")
                          (("3" (EXPAND "syntacticallyEq?")
                            (("3" (FLATTEN) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "c")
              (("2" (EXPAND "syntacticallyEq_conf?")
                (("2" (EXPAND "syntacticallyEq?") (("2" (FLATTEN) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL))
   NIL)
  (|syntEq_car_lhs_member_img-1| NIL 3937987365
   ("" (SKEEP)
    (("" (EXPAND "member")
      (("" (EXPAND "trivialSyn_Eqs")
        (("" (EXPAND "img")
          (("" (INST 1 "car(c`unsolved)`label")
            (("1" (EXPAND "member")
              (("1"
                (CASE " subs(cons((car(c`unsolved)`label, car(c`unsolved)`lhs),
                 c`substitution))
           (car(c`unsolved)`label)
        = car(c`unsolved)`lhs
")
                (("1" (ASSERT)
                  (("1" (EXPAND "dom")
                    (("1" (PROP)
                      (("1" (REPLACES -1)
                        (("1" (TYPEPRED "c")
                          (("1" (EXPAND "validConfiguration?")
                            (("1" (EXPAND "validEqs?")
                              (("1" (FLATTEN)
                                (("1" (HIDE -2 -4)
                                  (("1" (EXPAND "empty?")
                                    (("1" (HIDE -2)
                                      (("1" (INST -1 "car(c`unsolved)`label")
                                        (("1" (EXPAND "member")
                                          (("1"
                                            (CASE "var?(car(c`unsolved)`lhs)")
                                            (("1"
                                              (CASE-REPLACE
                                               "vars(append(c`unsolved, c`solved)) ∩
        labels(append(c`unsolved, c`solved)) = intersection(vars(append(c`unsolved, c`solved)),
        labels(append(c`unsolved, c`solved)))")
                                              (("1" (HIDE -1)
                                                (("1" (EXPAND "intersection")
                                                  (("1" (SPLIT)
                                                    (("1" (EXPAND "vars" 1)
                                                      (("1" (LIFT-IF)
                                                        (("1" (PROP)
                                                          (("1"
                                                            (EXPAND
                                                             "syntacticallyEq_conf?")
                                                            (("1"
                                                              (EXPAND
                                                               "syntacticallyEq?")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   (-1 -3))
                                                                  (("1" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (POSTPONE) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (POSTPONE) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (POSTPONE) NIL NIL))
                                              NIL)
                                             ("2" (POSTPONE) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
                NIL))
              NIL)
             ("2" (POSTPONE) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|domain_trivialSyn_Eqs| 0
  (|domain_trivialSyn_Eqs-2| NIL 3939436368
   ("" (SKEEP)
    (("" (BETA)
      (("" (LEMMA "nice_sub_trivialSyn_Eqs")
        (("" (INST?)
          (("" (BETA)
            (("" (EXPAND "trivialSyn_Eqs")
              (("" (LEMMA "nice_basic_sub_append")
                ((""
                  (INST -1 "car(c`unsolved)`label" "c`substitution"
                   "car(c`unsolved)`lhs")
                  (("" (BETA) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nice_basic_sub_append| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|nice_sub_trivialSyn_Eqs| FORMULA-DECL NIL |antiunif| NIL))
   NIL)
  (|domain_trivialSyn_Eqs-1| NIL 3937653361
   ("" (SKEEP)
    (("" (BETA)
      (("" (EXPAND "trivialSyn_Eqs")
        (("" (TYPEPRED "c")
          (("" (EXPAND "validConfiguration?")
            (("" (EXPAND "validEqs?") (("" (POSTPONE) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|nice_sub_Solved_Eq_TCC1| 0
  (|nice_sub_Solved_Eq_TCC1-1| NIL 3939466679 ("" (SUBTYPE-TCC) NIL NIL)
   ((|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|nice_sub_Solved_Eq| SUBTYPE "antiunif.c`unsolved"
    "(list_adt[AUEquation].cons?)")))
 (|nice_sub_Solved_Eq_TCC2| 0
  (|nice_sub_Solved_Eq_TCC2-1| NIL 3939466679 ("" (SUBTYPE-TCC) NIL NIL)
   ((|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|nice_sub_Solved_Eq| SUBTYPE
    "list_adt[AUEquation].cons(antiunif.sol_eq, antiunif.c`solved)"
    "(antiunif.first_eq_repeated?)")))
 (|nice_sub_Solved_Eq| 0
  (|nice_sub_Solved_Eq-1| NIL 3939815742
   ("" (SKEEP)
    (("" (BETA)
      (("" (EXPAND "nice?")
        (("" (EXPAND "vars")
          (("" (TYPEPRED "c")
            (("" (EXPAND "validConfiguration?")
              (("" (FLATTEN)
                (("" (HIDE -3 -4)
                  ((""
                    (CASE
                        "member(car(c`unsolved)`label,labels(append(c`unsolved, c`solved))) AND member(red_eq_in(cons(car(c`unsolved),
                                            c`solved))`label,labels(append(c`unsolved, c`solved)))")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "member" -1)
                        (("1" (EXPAND "member" -2)
                          (("1" (EXPAND "empty?")
                            (("1" (SPLIT)
                              (("1" (LEMMA "disjoint_valid_append_validEqs")
                                (("1" (INST -1 "c`unsolved" "c`solved ")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "red_eq_in_cdr")
                                      (("1"
                                        (INST -1
                                         "cons(car(c`unsolved), c`solved)")
                                        (("1" (REWRITE "list_cdr_cons")
                                          (("1" (HIDE -4 -5 -7)
                                            (("1" (EXPAND "member" -3)
                                              (("1" (EXPAND "singleton")
                                                (("1" (EXPAND "disjoint?")
                                                  (("1" (EXPAND "empty?")
                                                    (("1"
                                                      (INST -2
                                                       "car(c`unsolved)`label")
                                                      (("1"
                                                        (LEMMA
                                                         "eq_member_eq_label_in_labels")
                                                        (("1"
                                                          (INST-CP -1
                                                           "c`solved"
                                                           "red_eq_in(cons(car(c`unsolved), c`solved))")
                                                          (("1"
                                                            (INST -1
                                                             "c`unsolved"
                                                             "car(c`unsolved)")
                                                            (("1" (ASSERT)
                                                              (("1" (PROP)
                                                                (("1" (HIDE -5)
                                                                  (("1" (GRIND)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-5 1))
                                                                  (("2"
                                                                    (EXPAND
                                                                     "SolvedEq_conf?")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "SolvedEq?")
                                                                      (("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "member")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "member")
                                (("2" (INST -5 "car(c`unsolved)`label")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("3"
                                (INST -4 "red_eq_in(cons(car(c`unsolved),
                                         c`solved))`label")
                                (("3" (EXPAND "member")
                                  (("3" (EXPAND "disjoint?")
                                    (("3" (EXPAND "empty?")
                                      (("3" (SKEEP)
                                        (("3" (EXPAND "member")
                                          (("3" (EXPAND "intersection")
                                            (("3" (EXPAND "member")
                                              (("3" (EXPAND "singleton")
                                                (("3" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (SPLIT)
                        (("1" (HIDE -1 -2 -4) (("1" (GRIND) NIL NIL)) NIL)
                         ("2" (REWRITE "append_labels_is_union_labels")
                          (("2" (LEMMA "red_eq_in_cdr")
                            (("2" (INST -1 "cons(car(c`unsolved), c`solved)")
                              (("2" (REWRITE "list_cdr_cons")
                                (("2" (HIDE -5)
                                  (("2" (LEMMA "eq_member_eq_label_in_labels")
                                    (("2"
                                      (INST -1 "c`solved"
                                       "red_eq_in(cons(car(c`unsolved), c`solved))")
                                      (("2" (ASSERT) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE 2)
                      (("3" (PROP)
                        (("3" (EXPAND "first_eq_repeated?")
                          (("3" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|red_eq_in_cdr| FORMULA-DECL NIL |antiunif| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|repeated_eq?| CONST-DECL "bool" |antiunif| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|eq_member_eq_label_in_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|disjoint_valid_append_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL))
   SHOSTAK))
 (|solve_TCC1| 0
  (|solve_TCC1-1| NIL 3940414925
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA " nice_sub_Solved_Eq")
        (("" (INST?) (("" (PROP) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|nice_sub_Solved_Eq| FORMULA-DECL NIL |antiunif| NIL))
   NIL
   (|solve| SUBTYPE
    "list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.sol_eq`label, first_order_term_adt[constant, variable, f_symbol].variable(antiunif.red_eq`label)), antiunif.c`substitution)"
    "(first_order_substitution.nice?)"))
  (|solve_TCC3-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|solve| SUBTYPE
    "list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.sol_eq`label, first_order_term_adt[constant, variable, f_symbol].variable(antiunif.red_eq`label)), antiunif.c`substitution)"
    "(first_order_substitution.nice?)")))
 (|solve_TCC2| 0
  (|solve_TCC2-1| NIL 3940414972
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (PROP)
        (("1" (EXPAND "validConfiguration?")
          (("1" (PROP)
            (("1" (EXPAND "validEqs?")
              (("1" (PROP)
                (("1" (TYPEPRED "c")
                  (("1" (LEMMA "emptyness_conf_var")
                    (("1" (INST?)
                      (("1"
                        (CASE-REPLACE
                         "vars(append(cdr[AUEquation](c`unsolved), c`solved)) ∩
              labels(append(cdr[AUEquation](c`unsolved), c`solved)) = intersection(vars(append(c`unsolved, c`solved)),
                          (labels(append(cdr(c`unsolved), c`solved))))")
                        (("1" (HIDE -2 2)
                          (("1" (DECOMPOSE-EQUALITY)
                            (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "c")
                        (("2" (EXPAND "SolvedEq_conf?")
                          (("2" (EXPAND "SolvedEq?") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "freshness_labels")
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (LEMMA " cdr_is_validConf ")
                        (("2" (INST?)
                          (("1" (EXPAND "validConfiguration?")
                            (("1" (EXPAND "validEqs?") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "c")
                            (("2" (EXPAND "SolvedEq_conf?")
                              (("2" (EXPAND "SolvedEq?")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "supset_dom")
              (("2" (REWRITE "add_as_union")
                (("2" (REWRITE "union_commutative")
                  (("2"
                    (LEMMA
                     "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                    (("2" (INST -1 "c" "emptyset")
                      (("1" (BETA)
                        (("1" (PROP)
                          (("1"
                            (CASE-REPLACE
                             "(union(singleton(sol_eq`label), supset_dom(c`substitution)) ∩
              labels(append(cdr[AUEquation](c`unsolved), c`solved))) = (intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(emptyset,
                                labels(append(cdr(c`unsolved), c`solved)))))")
                            (("1" (HIDE -1 2)
                              (("1" (DECOMPOSE-EQUALITY)
                                (("1" (HIDE -1)
                                  (("1" (IFF) (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (SKEEP)
                              (("2" (EXPAND "member")
                                (("2" (EXPAND "emptyset")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "c")
                        (("2" (EXPAND "SolvedEq_conf?")
                          (("2" (EXPAND "SolvedEq?") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (TYPEPRED "c")
              (("3" (EXPAND "SolvedEq_conf?")
                (("3" (EXPAND "SolvedEq?")
                  (("3" (EXPAND "validConfiguration?") (("3" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (TYPEPRED "c")
              (("4" (EXPAND "validConfiguration?")
                (("4" (FLATTEN)
                  (("4" (EXPAND "validEqs?")
                    (("4" (FLATTEN)
                      (("4" (EXPAND "SolvedEq_conf?")
                        (("4" (EXPAND "SolvedEq?")
                          (("4" (FLATTEN)
                            (("4" (EXPAND "supset_dom" 1)
                              (("4" (REWRITE "add_as_union")
                                (("4" (HIDE -2 -3 -4)
                                  (("4"
                                    (CASE
                                        "member(singleton(sol_eq`label),labels(append(c`unsolved, c`solved)))")
                                    (("1" (HIDE -6) (("1" (GRIND) NIL NIL))
                                      NIL)
                                     ("2" (HIDE -1 -2 -4 2)
                                      (("2" (EXPAND "append")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "labels")
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "size" 1 1)
          (("2" (TYPEPRED "c")
            (("2" (EXPAND "SolvedEq_conf?")
              (("2" (EXPAND "SolvedEq?")
                (("2" (EXPAND "size" 1 2)
                  (("2" (FLATTEN)
                    (("2" (EXPAND "SolvedEq?")
                      (("2" (HIDE 1)
                        (("2" (EXPAND "validConfiguration?")
                          (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|sum| DEF-DECL "nat" |list_aux_equational_reasoning_nat| |nominal|)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|singleton_rew| FORMULA-DECL NIL |sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|singleton_elt| CONST-DECL "T" |sets| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|emptyness_conf_supdom_with_car_lbls_and_fresh_variables| FORMULA-DECL NIL
     |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|freshness_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|cdr_is_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|repeated_eq?| CONST-DECL "bool" |antiunif| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|emptyness_conf_var| FORMULA-DECL NIL |antiunif| NIL))
   NIL
   (|solve| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), substitution := list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.sol_eq`label, first_order_term_adt[constant, variable, f_symbol].variable(antiunif.red_eq`label)), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved))}"))
  (|solve_TCC4-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|solve| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), substitution := list_adt[[variable, first_order_term[constant, variable, f_symbol]]].cons((antiunif.sol_eq`label, first_order_term_adt[constant, variable, f_symbol].variable(antiunif.red_eq`label)), antiunif.c`substitution)]"
    "{cp: (antiunif.validConfiguration?) | reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved))}")))
 (|solve_TCC3| 0
  (|solve_TCC3-2| NIL 3940423155
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (EXPAND "validEqs?")
            (("1"
              (CASE "labels(append(cdr[AUEquation](c`unsolved),
                         cons[AUEquation]
                             (car[AUEquation](c`unsolved), c`solved))) = labels(append(c`unsolved, c`solved))")
              (("1" (PROP)
                (("1"
                  (CASE "vars(append(cdr[AUEquation](c`unsolved),
                         cons[AUEquation]
                             (car[AUEquation](c`unsolved), c`solved))) = vars(append(c`unsolved, c`solved))")
                  (("1" (TYPEPRED "c")
                    (("1" (EXPAND "validConfiguration?")
                      (("1" (FLATTEN)
                        (("1" (HIDE -2 -3 -4 -5)
                          (("1" (EXPAND "validEqs?")
                            (("1" (FLATTEN)
                              (("1" (HIDE -2)
                                (("1" (REPLACES -2)
                                  (("1" (REPLACES -2) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -1 2 3)
                    (("2" (TYPEPRED "c")
                      (("2" (REWRITE* "vars_in_append_List_eq")
                        (("2" (EXPAND "vars" 1 (2 3))
                          (("2" (EXPAND "SolvedEq_conf?")
                            (("2" (EXPAND "SolvedEq?")
                              (("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (HIDE -1 -3)
                                    (("2" (DECOMPOSE-EQUALITY)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (TYPEPRED "c")
                    (("2" (EXPAND "validConfiguration?")
                      (("2" (EXPAND "validEqs?")
                        (("2" (FLATTEN)
                          (("2" (REPLACES -2)
                            (("2" (HIDE -1 -2 -3 -4 2)
                              (("2" (LEMMA "length_append[AUEquation]")
                                (("2"
                                  (INST-CP -1 "cdr[AUEquation](c`unsolved)" "
                     cons[AUEquation]
                         (car[AUEquation](c`unsolved), c`solved)")
                                  (("2" (REPLACES -2)
                                    (("2" (INST?)
                                      (("2" (REPLACES -1)
                                        (("2" (EXPAND "length" 1 4)
                                          (("2" (EXPAND "SolvedEq_conf?")
                                            (("2" (EXPAND "SolvedEq?")
                                              (("2" (FLATTEN)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2 3)
                (("2" (EXPAND "append" 1 2)
                  (("2" (TYPEPRED "c")
                    (("2" (EXPAND "SolvedEq_conf?")
                      (("2" (EXPAND "SolvedEq?")
                        (("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "labels" 1 2)
                              (("2" (LEMMA "append_labels_is_union_labels")
                                (("2"
                                  (INST -1 "cdr[AUEquation](c`unsolved)"
                                   "cons[AUEquation]
                        (car[AUEquation](c`unsolved), c`solved)")
                                  (("2" (REPLACES -1)
                                    (("2" (EXPAND "labels" 1 2)
                                      (("2" (REWRITE "add_as_union")
                                        (("2"
                                          (LEMMA
                                           "append_labels_is_union_labels")
                                          (("2" (INST?)
                                            (("2" (REPLACES -1)
                                              (("2" (DECOMPOSE-EQUALITY 1)
                                                (("2" (HIDE -1)
                                                  (("2" (HIDE -2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "c")
            (("2" (EXPAND "validConfiguration?")
              (("2" (FLATTEN)
                (("2" (HIDE -1 -3 -4 2)
                  (("2" (REWRITE* "append_labels_is_union_labels")
                    (("2" (EXPAND "labels" -1 1)
                      (("2" (EXPAND "SolvedEq_conf?")
                        (("2" (EXPAND "SolvedEq?")
                          (("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (EXPAND "labels " 1 2)
                                (("2" (REWRITE* "add_as_union")
                                  (("2" (EXPAND "empty?")
                                    (("2" (SKEEP)
                                      (("2" (INST?) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (EXPAND "validSolvedEqs?")
            (("3" (TYPEPRED "c")
              (("3" (EXPAND "SolvedEq_conf?")
                (("3" (EXPAND "validConfiguration?")
                  (("3" (EXPAND "eq_repeated_in?")
                    (("3" (SPLIT)
                      (("1" (EXPAND "allSolvedEqs?")
                        (("1" (EXPAND "SolvedEq?" -2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "validSolvedEqs?")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SPLIT 2)
                        (("1" (HIDE -)
                          (("1" (EXPAND "nonrepeated?")
                            (("1" (FLATTEN)
                              (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (EXPAND "nonrepeated?")
                            (("2" (FLATTEN)
                              (("2" (SPLIT)
                                (("1" (EXPAND "first_eq_repeated?")
                                  (("1" (EXPAND "eq_repeated_in?" -1)
                                    (("1" (PROP) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (EXPAND "validSolvedEqs?")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (TYPEPRED "c")
            (("4" (EXPAND "validConfiguration?")
              (("4" (FLATTEN)
                (("4" (HIDE -1 -2 -3 2)
                  (("4" (EXPAND "append" -1)
                    (("4" (EXPAND "SolvedEq_conf?")
                      (("4" (EXPAND "SolvedEq?")
                        (("4" (FLATTEN)
                          (("4" (ASSERT)
                            (("4" (EXPAND "vars" -1)
                              (("4" (REWRITE* "vars_in_append_List_eq")
                                (("4" (EXPAND "vars" 1 2)
                                  (("4" (EXPAND "empty?")
                                    (("4" (SKEEP)
                                      (("4" (INST?) (("4" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "size" 1 1)
        (("2" (TYPEPRED "c")
          (("2" (EXPAND "SolvedEq_conf?")
            (("2" (EXPAND "SolvedEq?")
              (("2" (EXPAND "size" 1 2)
                (("2" (FLATTEN)
                  (("2" (EXPAND "SolvedEq?")
                    (("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (HIDE 1 2 3 5)
                          (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sum| DEF-DECL "nat" |list_aux_equational_reasoning_nat| |nominal|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|validSolvedEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|nonrepeated?| DEF-DECL "bool" |antiunif| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|allSolvedEqs?| DEF-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|vars_in_append_List_eq| FORMULA-DECL NIL |antiunif| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|solve| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), solved := list_adt[AUEquation].cons(list_adt[AUEquation].car(antiunif.c`unsolved), antiunif.c`solved)]"
    "{cp: (antiunif.validConfiguration?) | reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved))}"))
  (|solve_TCC3-1| NIL 3940415042
   ("" (SKEEP)
    (("" (PROP)
      (("1" (EXPAND "validConfiguration?")
        (("1" (PROP)
          (("1" (EXPAND "validEqs?")
            (("1"
              (CASE "labels(append(cdr[AUEquation](c`unsolved),
                         cons[AUEquation]
                             (car[AUEquation](c`unsolved), c`solved))) = labels(append(c`unsolved, c`solved))")
              (("1" (PROP)
                (("1"
                  (CASE "vars(append(cdr[AUEquation](c`unsolved),
                         cons[AUEquation]
                             (car[AUEquation](c`unsolved), c`solved))) = vars(append(c`unsolved, c`solved))")
                  (("1" (TYPEPRED "c")
                    (("1" (EXPAND "validConfiguration?")
                      (("1" (FLATTEN)
                        (("1" (HIDE -2 -3 -4 -5)
                          (("1" (EXPAND "validEqs?")
                            (("1" (FLATTEN)
                              (("1" (HIDE -2)
                                (("1" (REPLACES -2)
                                  (("1" (REPLACES -2) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -1 2 3)
                    (("2" (TYPEPRED "c")
                      (("2" (REWRITE* "vars_in_append_List_eq")
                        (("2" (EXPAND "vars" 1 (2 3))
                          (("2" (EXPAND "SolvedEq_conf?")
                            (("2" (EXPAND "SolvedEq?")
                              (("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (HIDE -1 -3)
                                    (("2" (DECOMPOSE-EQUALITY)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (TYPEPRED "c")
                    (("2" (EXPAND "validConfiguration?")
                      (("2" (EXPAND "validEqs?")
                        (("2" (FLATTEN)
                          (("2" (REPLACES -2)
                            (("2" (HIDE -1 -2 -3 -4 2)
                              (("2" (LEMMA "length_append[AUEquation]")
                                (("2"
                                  (INST-CP -1 "cdr[AUEquation](c`unsolved)" "
                     cons[AUEquation]
                         (car[AUEquation](c`unsolved), c`solved)")
                                  (("2" (REPLACES -2)
                                    (("2" (INST?)
                                      (("2" (REPLACES -1)
                                        (("2" (EXPAND "length" 1 4)
                                          (("2" (EXPAND "SolvedEq_conf?")
                                            (("2" (EXPAND "SolvedEq?")
                                              (("2" (FLATTEN)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2 3)
                (("2" (EXPAND "append" 1 2)
                  (("2" (TYPEPRED "c")
                    (("2" (EXPAND "SolvedEq_conf?")
                      (("2" (EXPAND "SolvedEq?")
                        (("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "labels" 1 2)
                              (("2" (LEMMA "append_labels_is_union_labels")
                                (("2"
                                  (INST -1 "cdr[AUEquation](c`unsolved)"
                                   "cons[AUEquation]
                        (car[AUEquation](c`unsolved), c`solved)")
                                  (("2" (REPLACES -1)
                                    (("2" (EXPAND "labels" 1 2)
                                      (("2" (REWRITE "add_as_union")
                                        (("2"
                                          (LEMMA
                                           "append_labels_is_union_labels")
                                          (("2" (INST?)
                                            (("2" (REPLACES -1)
                                              (("2" (DECOMPOSE-EQUALITY 1)
                                                (("2" (HIDE -1)
                                                  (("2" (HIDE -2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (LEMMA "append_labels_is_union_labels")
              (("2" (INST?)
                (("2" (REPLACES -1)
                  (("2" (EXPAND "labels" 1 2)
                    (("2" (REWRITE "add_as_union")
                      (("2" (REWRITE "union_commutative")
                        (("2" (REWRITE "union_commutative")
                          (("2" (REWRITE "union_commutative")
                            (("2"
                              (LEMMA
                               "emptyness_conf_supdom_with_car_lbls_and_fresh_variables")
                              (("2" (INST -1 "c" "emptyset")
                                (("1" (BETA)
                                  (("1" (PROP)
                                    (("1"
                                      (CASE-REPLACE
                                       "(supset_dom(c`substitution) ∩
              union(labels(cdr[AUEquation](c`unsolved)),
                    union(singleton(car[AUEquation](c`unsolved)`label),
                          labels(c`solved)))) = intersection(union(singleton(car(c`unsolved)`label),
                                supset_dom(c`substitution)),
                          union(emptyset,
                                labels(append(cdr(c`unsolved), c`solved))))")
                                      (("1" (HIDE -1 2)
                                        (("1"
                                          (LEMMA
                                           "append_labels_is_union_labels")
                                          (("1" (INST?)
                                            (("1" (REPLACES -1)
                                              (("1" (POSTPONE) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (SKEEP)
                                      (("2" (EXPAND "member")
                                        (("2" (EXPAND "emptyset")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "c")
                                  (("2" (EXPAND "SolvedEq_conf?")
                                    (("2" (EXPAND "SolvedEq?")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "c")
            (("3" (EXPAND "validConfiguration?")
              (("3" (FLATTEN)
                (("3" (EXPAND "SolvedEq_conf?")
                  (("3" (EXPAND "SolvedEq?")
                    (("3" (FLATTEN)
                      (("3" (HIDE 2)
                        (("3" (EXPAND "SolvedEq?")
                          (("3" (HIDE 1) (("3" (POSTPONE) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (TYPEPRED "c")
            (("4" (EXPAND "validConfiguration?")
              (("4" (FLATTEN)
                (("4" (EXPAND "validEqs?")
                  (("4" (FLATTEN)
                    (("4" (EXPAND "SolvedEq_conf?")
                      (("4" (EXPAND "SolvedEq?")
                        (("4" (FLATTEN)
                          (("4" (HIDE -2 -3 -4)
                            (("4" (HIDE 2)
                              (("4" (REWRITE* "vars_in_append_List_eq")
                                (("4" (EXPAND "vars" 1 2)
                                  (("4"
                                    (CASE-REPLACE
                                     "vars(car[AUEquation](c`unsolved)) ∪ vars(c`solved) = union(vars(car[AUEquation](c`unsolved)),vars(c`solved))")
                                    (("1" (HIDE -1)
                                      (("1" (REWRITE "union_commutative")
                                        (("1"
                                          (CASE-REPLACE
                                           " union(vars(cdr[AUEquation](c`unsolved)),
                    union(vars(car[AUEquation](c`unsolved)),
                          vars(c`solved))) = union(vars(c`solved), vars(c`unsolved))")
                                          (("1" (HIDE 2)
                                            (("1" (HIDE -1 -2 -3 -4)
                                              (("1" (POSTPONE) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (POSTPONE) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "size" 1 1)
        (("2" (TYPEPRED "c")
          (("2" (EXPAND "SolvedEq_conf?")
            (("2" (EXPAND "SolvedEq?")
              (("2" (EXPAND "size" 1 2)
                (("2" (FLATTEN)
                  (("2" (EXPAND "SolvedEq?")
                    (("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (HIDE 1 2 3 5)
                          (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|solve| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), solved := list_adt[AUEquation].cons(list_adt[AUEquation].car(antiunif.c`unsolved), antiunif.c`solved)]"
    "{cp: (antiunif.validConfiguration?) | reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved))}"))
  (|solve_TCC5-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|solve| SUBTYPE
    "antiunif.c WITH [unsolved := list_adt[AUEquation].cdr(antiunif.c`unsolved), solved := list_adt[AUEquation].cons(list_adt[AUEquation].car(antiunif.c`unsolved), antiunif.c`solved)]"
    "{cp: (antiunif.validConfiguration?) | reals.<(antiunif.size(cp`unsolved), antiunif.size(antiunif.c`unsolved))}")))
 (|antiunify_TCC1| 0
  (|antiunify_TCC1-1| NIL 3938242049 ("" (SUBTYPE-TCC) NIL NIL)
   ((|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|antiunify| SUBTYPE "antiunif.c" "(antiunif.SolvedEq_conf?)")))
 (|build_subs_left_TCC1| 0
  (|build_subs_left_TCC2-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL)
   ((∈ CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|build_subs_left| SUBTYPE "antiunif.eqs" "(list_adt[AUEquation].cons?)")))
 (|build_subs_left_TCC2| 0
  (|build_subs_left_TCC3-1| NIL 3937537223
   ("" (LEMMA "validity_cdr_ValidEqs")
    (("" (SKEEP)
      (("" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL))
   NIL
   (|build_subs_left| SUBTYPE "list_adt[AUEquation].cdr(antiunif.eqs)"
    "(antiunif.validEqs?)")))
 (|build_subs_left_TCC3| 0
  (|build_subs_left_TCC4-1| NIL 3937537223 ("" (TERMINATION-TCC) NIL NIL)
   ((∈ CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|build_subs_left| TERMINATION
    "antiunif.build_subs_left(list_adt[AUEquation].cdr(antiunif.eqs))" "NIL")))
 (|build_subs_left_TCC4| 0
  (|build_subs_left_TCC6-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL)
   ((|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|build_subs_left| SUBTYPE "antiunif.eqs" "(list_adt[AUEquation].cons?)")))
 (|super_domain_subs_left| 0
  (|super_domain_subs_left-1| NIL 3939271886
   ("" (MEASURE-INDUCT+ "length(eqs)" ("eqs"))
    (("" (CASE "x!1 = null")
      (("1" (HIDE -2) (("1" (GRIND) (("1" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
        NIL)
       ("2" (EXPAND "labels" 2)
        (("2" (ASSERT)
          (("2" (INST -1 "cdr(x!1)")
            (("1" (PROP)
              (("1" (EXPAND "build_subs_left" 2)
                (("1" (EXPAND "supset_dom" 2) (("1" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL))
              NIL)
             ("2" (LEMMA "validity_append_valid_Eqs")
              (("2" (HIDE 3)
                (("2" (INST -1 "cons(car(x!1), null)" "cdr(x!1)")
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|build_subs_left| DEF-DECL "sub" |antiunif| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|domain_subs_left| 0
  (|domain_subs_left-1| NIL 3937628590
   ("" (LEMMA "super_domain_subs_left")
    (("" (SKEEP)
      (("" (INST?)
        (("" (LEMMA "supset_dom_correct2")
          (("" (INST?)
            (("" (EXPAND "subset?")
              (("" (SKEEP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|build_subs_left| DEF-DECL "sub" |antiunif| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|super_domain_subs_left| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|nice_subs_left| 0
  (|nice_subs_left-1| NIL 3939268161
   ("" (MEASURE-INDUCT+ "length(eqs)" ("eqs"))
    (("" (CASE "null?(x!1)")
      (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (CASE "null?(cdr(x!1))")
        (("1" (HIDE -2) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (EXPAND "build_subs_left" 3)
          (("2" (ASSERT)
            (("2" (INST?)
              (("2" (PROP)
                (("1" (EXPAND "nice?" 3)
                  (("1" (PROP)
                    (("1" (TYPEPRED "x!1")
                      (("1" (LEMMA "validity_Eq_in_ValidEqs")
                        (("1" (INST -1 "x!1" "0")
                          (("1" (HIDE-ALL-BUT (-1 -3 2))
                            (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "super_domain_subs_left")
                      (("2" (INST -1 "cdr(x!1)")
                        (("2" (REPLACES -1)
                          (("2" (REWRITE "non_member_label_validEqs") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (REWRITE "super_domain_subs_left")
                      (("3" (HIDE -1)
                        (("3" (TYPEPRED "x!1")
                          (("3" (EXPAND "validEqs?")
                            (("3" (FLATTEN)
                              (("3" (HIDE -2)
                                (("3" (HIDE 2)
                                  (("3" (EXPAND "empty?")
                                    (("3" (EXPAND "disjoint?")
                                      (("3" (EXPAND "empty?")
                                        (("3" (SKEEP)
                                          (("3" (INST?) (("3" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|super_domain_subs_left| FORMULA-DECL NIL |antiunif| NIL)
    (|non_member_label_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|validity_Eq_in_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|build_subs_left| DEF-DECL "sub" |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|super_domain_subs_right| 0
  (|super_domain_subs_right-1| NIL 3939273369
   ("" (MEASURE-INDUCT+ "length(eqs)" ("eqs"))
    (("" (CASE "x!1 = null")
      (("1" (HIDE -2) (("1" (GRIND) (("1" (DECOMPOSE-EQUALITY) NIL NIL)) NIL))
        NIL)
       ("2" (EXPAND "labels" 2)
        (("2" (ASSERT)
          (("2" (INST -1 "cdr(x!1)")
            (("1" (PROP)
              (("1" (EXPAND "build_subs_right" 2)
                (("1" (EXPAND "supset_dom" 2) (("1" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL))
              NIL)
             ("2" (LEMMA "validity_append_valid_Eqs")
              (("2" (HIDE 3)
                (("2" (INST -1 "cons(car(x!1), null)" "cdr(x!1)")
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|build_subs_right| DEF-DECL "sub" |antiunif| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|domain_subs_right| 0
  (|domain_subs_right-1| NIL 3937710127
   ("" (LEMMA "super_domain_subs_right")
    (("" (SKEEP)
      (("" (INST?)
        (("" (LEMMA "supset_dom_correct2")
          (("" (INST?)
            (("" (EXPAND "subset?")
              (("" (SKEEP) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|build_subs_right| DEF-DECL "sub" |antiunif| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|super_domain_subs_right| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|nice_subs_right| 0
  (|nice_subs_right-1| NIL 3939273546
   ("" (MEASURE-INDUCT+ "length(eqs)" ("eqs"))
    (("" (CASE "null?(x!1)")
      (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (CASE "null?(cdr(x!1))")
        (("1" (HIDE -2) (("1" (TYPEPRED "x!1") (("1" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (EXPAND "build_subs_right" 3)
          (("2" (ASSERT)
            (("2" (INST?)
              (("2" (PROP)
                (("1" (EXPAND "nice?" 3)
                  (("1" (PROP)
                    (("1" (TYPEPRED "x!1")
                      (("1" (LEMMA "validity_Eq_in_ValidEqs")
                        (("1" (INST -1 "x!1" "0")
                          (("1" (HIDE-ALL-BUT (-1 -3 2))
                            (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "super_domain_subs_right")
                      (("2" (INST -1 "cdr(x!1)")
                        (("2" (REPLACES -1)
                          (("2" (REWRITE "non_member_label_validEqs") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (REWRITE "super_domain_subs_right")
                      (("3" (HIDE -1)
                        (("3" (TYPEPRED "x!1")
                          (("3" (EXPAND "validEqs?")
                            (("3" (FLATTEN)
                              (("3" (HIDE -2)
                                (("3" (HIDE 2)
                                  (("3" (EXPAND "empty?")
                                    (("3" (EXPAND "disjoint?")
                                      (("3" (EXPAND "empty?")
                                        (("3" (SKEEP)
                                          (("3" (INST?) (("3" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|super_domain_subs_right| FORMULA-DECL NIL |antiunif| NIL)
    (|non_member_label_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|validity_Eq_in_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (∅ CONST-DECL "set" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|build_subs_right| DEF-DECL "sub" |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|images_of_build_subs_left_right| 0
  (|images_of_build_subs_left_right-1| NIL 3939440979
   ("" (MEASURE-INDUCT+ "length(eqs)" ("eqs"))
    (("" (SKEEP)
      (("" (CASE "length(x!1) = 0")
        (("1" (HIDE -2 1)
          (("1" (EXPAND "member")
            (("1" (EXPAND "length") (("1" (GRIND) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (EXPAND "build_subs_left" 2)
          (("2" (EXPAND "build_subs_right" 2)
            (("2" (CASE "cons?(x!1)")
              (("1" (ASSERT)
                (("1" (INST -2 "cdr(x!1)")
                  (("1" (INST?)
                    (("1" (CASE "length(cdr(x!1)) < length(x!1)")
                      (("1" (ASSERT)
                        (("1" (CASE "member(eq, cdr(x!1))")
                          (("1" (ASSERT)
                            (("1" (EXPAND "subs")
                              (("1" (EXPAND "subs" 2)
                                (("1" (FLATTEN)
                                  (("1" (REPLACES -4)
                                    (("1" (REPLACES -4)
                                      (("1" (HIDE -2 1 -1)
                                        (("1" (TYPEPRED "x!1")
                                          (("1" (EXPAND "validEqs?")
                                            (("1" (FLATTEN)
                                              (("1" (HIDE -2)
                                                (("1"
                                                  (CASE
                                                      "subset?(vars(eq), vars(x!1))")
                                                  (("1"
                                                    (LEMMA
                                                     "basic_sub_no_effect")
                                                    (("1"
                                                      (INST-CP -1
                                                       "car(x!1)`label"
                                                       "car(x!1)`lhs" "eq`lhs")
                                                      (("1"
                                                        (INST -1
                                                         "car(x!1)`label"
                                                         "car(x!1)`rhs"
                                                         "eq`rhs")
                                                        (("1" (SPLIT -1)
                                                          (("1" (SPLIT -2)
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE -2 1)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE -2 1)
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -1 2)
                                                    (("2"
                                                      (REWRITE
                                                       "subset_vars_eq_listEqs")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (EXPAND "member" -4)
                            (("2" (ASSERT)
                              (("2" (REPLACES -4)
                                (("2" (EXPAND "subs")
                                  (("2" (EXPAND "subs")
                                    (("2"
                                      (CASE
                                          "subs(build_subs_left(cdr(x!1)))(variable(car(x!1)`label)) = variable(car(x!1)`label)  AND subs(build_subs_right(cdr(x!1)))(variable(car(x!1)`label)) = variable(car(x!1)`label)")
                                      (("1" (FLATTEN)
                                        (("1" (REPLACES -1)
                                          (("1" (REPLACES -1)
                                            (("1" (EXPAND "subs")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT (-2 1))
                                        (("2" (LEMMA "subs_no_effect_t")
                                          (("2"
                                            (INST-CP -1
                                             "build_subs_left(cdr(x!1))"
                                             "variable(car(x!1)`label)")
                                            (("1"
                                              (INST -1
                                               "build_subs_right(cdr(x!1))"
                                               "variable(car(x!1)`label)")
                                              (("1" (SPLIT -1)
                                                (("1" (SPLIT -2)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE -1 2)
                                                    (("2"
                                                      (LEMMA
                                                       "domain_subs_left")
                                                      (("2" (INST?)
                                                        (("2"
                                                          (LEMMA
                                                           "non_member_label_validEqs")
                                                          (("2" (INST?)
                                                            (("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE -1 2)
                                                  (("2"
                                                    (LEMMA "domain_subs_right")
                                                    (("2" (INST?)
                                                      (("2"
                                                        (LEMMA
                                                         "non_member_label_validEqs")
                                                        (("2" (INST?)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (REWRITE
                                                 "validity_cdr_ValidEqs")
                                                NIL NIL))
                                              NIL)
                                             ("2"
                                              (REWRITE "validity_cdr_ValidEqs")
                                              NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE-ALL-BUT (-2 1))
                                        (("3" (REWRITE "validity_cdr_ValidEqs")
                                          NIL NIL))
                                        NIL)
                                       ("4" (REWRITE "validity_cdr_ValidEqs")
                                        NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (-1 1))
                    (("2" (REWRITE "validity_cdr_ValidEqs") NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∩ CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|basic_sub_no_effect| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset_vars_eq_listEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|subs_no_effect_t| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|domain_subs_right| FORMULA-DECL NIL |antiunif| NIL)
    (|domain_subs_left| FORMULA-DECL NIL |antiunif| NIL)
    (|non_member_label_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|validity_cdr_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|build_subs_left| DEF-DECL "sub" |antiunif| NIL)
    (|build_subs_right| DEF-DECL "sub" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_normality| 0
  (|antiunify_normality-1| NIL 3937467484
   ("" (SKEEP)
    (("" (TYPEPRED "c")
      (("" (EXPAND "normal_configuration?")
        (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL))
   SHOSTAK))
 (|antiunify_derivability| 0
  (|antiunify_derivability-1| NIL 3937474425
   ("" (SKEEP)
    (("" (EXPAND "normal_configuration?")
      (("" (EXPAND "matchingFuns_conf?")
        (("" (EXPAND "matchingPairs_conf?")
          (("" (EXPAND "syntacticallyEq_conf?")
            (("" (EXPAND "SolvedEq_conf?")
              (("" (EXPAND "SolvedEq?")
                (("" (EXPAND "SolvedEq?")
                  (("" (EXPAND "matchingFuns?")
                    (("" (EXPAND "matchingPairs?")
                      (("" (EXPAND "syntacticallyEq?") (("" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|matchingPairs_classification| 0
  (|matchingPairs_classification-1| NIL 3937539388
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|syntacticallyEq_classification| 0
  (|syntacticallyEq_classification-1| NIL 3937556470 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|SolvedEq_classification| 0
  (|SolvedEq_classification-1| NIL 3937904537
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|antiunify_monotony_solved_equations| 0
  (|antiunify_monotony_solved_equations-1| NIL 3938688614
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (CASE "normal_configuration?(x!1)")
      (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (LEMMA "antiunify_derivability")
        (("2" (INST?)
          (("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (PROP)
                (("1" (EXPAND "antiunify" 2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "normal_configuration?")
                      (("1" (ASSERT)
                        (("1" (INST -2 "decomposeFuns(x!1)")
                          (("1" (TYPEPRED "eq")
                            (("1" (INST -3 "eq")
                              (("1" (ASSERT) NIL NIL)
                               ("2" (EXPAND "decomposeFuns" 1)
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "matchingPairs_classification")
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (EXPAND "matchingPairs_conf?")
                        (("2" (EXPAND "matchingPairs?")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "antiunify" 3)
                              (("2" (ASSERT)
                                (("2" (INST -3 "decomposePairs(x!1)")
                                  (("2" (INST -3 "eq")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (EXPAND "decomposePairs" 1)
                                      (("2" (TYPEPRED "eq")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (LEMMA "syntacticallyEq_classification")
                  (("3" (INST?)
                    (("3" (ASSERT)
                      (("3" (FLATTEN)
                        (("3" (EXPAND "syntacticallyEq_conf?")
                          (("3" (EXPAND "syntacticallyEq?")
                            (("3" (FLATTEN)
                              (("3" (EXPAND "antiunify" 4)
                                (("3" (ASSERT)
                                  (("3" (INST -3 "trivialSyn_Eqs(x!1)")
                                    (("3" (INST -3 "eq")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (EXPAND "trivialSyn_Eqs" 1)
                                        (("2" (TYPEPRED "eq")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (LEMMA "SolvedEq_classification")
                  (("4" (INST?)
                    (("4" (ASSERT)
                      (("4" (FLATTEN)
                        (("4" (EXPAND "SolvedEq_conf?")
                          (("4" (EXPAND "SolvedEq?")
                            (("4" (FLATTEN)
                              (("4" (EXPAND "antiunify" 5)
                                (("4" (ASSERT)
                                  (("4" (INST -3 "solve(x!1)")
                                    (("4" (EXPAND "solve" 5)
                                      (("4" (LIFT-IF)
                                        (("4" (PROP)
                                          (("1" (INST -4 "eq")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (EXPAND "solve" 1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (INST -3 "eq")
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (EXPAND "solve" 1)
                                              (("2" (ASSERT)
                                                (("2" (TYPEPRED "eq")
                                                  (("2" (HIDE 3)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_domain_disjoint_sol_labels| 0
  (|antiunify_domain_disjoint_sol_labels-1| NIL 3938688793
   ("" (SKEEP)
    (("" (LEMMA "antiunify_monotony_solved_equations")
      (("" (INST?)
        (("" (TYPEPRED "antiunify(c)")
          (("" (EXPAND "validConfiguration?")
            (("" (FLATTEN)
              (("" (HIDE -1 -3 -4)
                (("" (EXPAND "disjoint?")
                  (("" (EXPAND "empty?")
                    (("" (SKEEP)
                      (("" (INST -1 "x")
                        (("" (LEMMA "eqs_label_eq_this_label")
                          (("" (INST -1 "c`solved" "x")
                            (("" (PROP)
                              (("1" (SKEEP)
                                (("1" (INST?)
                                  (("1"
                                    (CASE
                                        "member(x, labels(append(antiunify(c)`unsolved, antiunify(c)`solved)))")
                                    (("1" (LEMMA " supset_dom_correct2")
                                      (("1" (INST?) (("1" (GRIND) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2"
                                      (LEMMA " eq_member_eq_label_in_labels")
                                      (("2"
                                        (INST -1 "antiunify(c)`solved" "eq")
                                        (("2" (ASSERT)
                                          (("2" (REPLACE -3 -1)
                                            (("2" (HIDE 2)
                                              (("2"
                                                (REWRITE
                                                 "append_labels_is_union_labels")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunify_monotony_solved_equations| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|eqs_label_eq_this_label| FORMULA-DECL NIL |antiunif| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|eq_member_eq_label_in_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (∩ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|antiunify_sub_decomposition| 0
  (|antiunify_sub_decomposition-1| NIL 3937459738
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (LEMMA "antiunify_derivability")
      (("" (INST?)
        (("" (PROP)
          (("1" (EXPAND "antiunify" 1)
            (("1" (ASSERT)
              (("1" (EXPAND "matchingFuns_conf?")
                (("1" (EXPAND "matchingFuns?")
                  (("1" (ASSERT)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (INST -3 "decomposeFuns(x!1)")
                          (("1" (PROP)
                            (("1" (SKEEP)
                              (("1" (EXPAND "decomposeFuns" -1 2)
                                (("1"
                                  (INST 1 "append(theta,
              cons((car(x!1`unsolved)`label,
                    app(sym(car(x!1`unsolved)`lhs),
                        variable(freshLabel(x!1)))),
                   null))")
                                  (("1" (REPLACES -1)
                                    (("1" (REWRITE "append_assoc[basic_sub]")
                                      (("1" (EXPAND "append" 1 3)
                                        (("1" (EXPAND "append" 1 3)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2"
                                    (TYPEPRED
                                     " antiunify(decomposeFuns(x!1))`substitution")
                                    (("2"
                                      (CASE-REPLACE " append(theta,
              cons((car(x!1`unsolved)`label,
                    app(sym(car(x!1`unsolved)`lhs),
                        variable(freshLabel(x!1)))),
                   x!1`substitution)) =  append(append(theta,
              cons((car(x!1`unsolved)`label,
                    app(sym(car(x!1`unsolved)`lhs),
                        variable(freshLabel(x!1)))),
                   null)),x!1`substitution)")
                                      (("1" (LEMMA "nice_append")
                                        (("1"
                                          (INST -1 "x!1`substitution"
                                           "append(theta,
                     cons((car(x!1`unsolved)`label,
                           app(sym(car(x!1`unsolved)`lhs),
                               variable(freshLabel(x!1)))),
                          null))")
                                          (("1" (PROP) (("1" (ASSERT) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "append_assoc[basic_sub]")
                                        (("2" (EXPAND "append" 1 3)
                                          (("2" (EXPAND "append" 1 3)
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "antiunify" 1)
            (("2" (EXPAND "matchingPairs_conf?")
              (("2" (EXPAND "matchingPairs?")
                (("2" (ASSERT)
                  (("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (LEMMA "matchingPairs_classification")
                        (("2" (INST?)
                          (("2" (PROP)
                            (("1" (ASSERT)
                              (("1" (INST -3 "decomposePairs(x!1)")
                                (("1" (PROP)
                                  (("1" (SKEEP)
                                    (("1" (EXPAND "decomposePairs" -1 2)
                                      (("1"
                                        (CASE "append(theta,
              cons((car(x!1`unsolved)`label,
                    pair(variable(freshLabel(x!1)),
                         variable(freshLabel(union(vars(x!1),
                                                   singleton(freshLabel(x!1))))))),
                   x!1`substitution)) =  append(append(theta,
              cons((car(x!1`unsolved)`label,
                    pair(variable(freshLabel(x!1)),
                         variable(freshLabel(union(vars(x!1),
                                                   singleton(freshLabel(x!1))))))),
                   null)),x!1`substitution)")
                                        (("1"
                                          (INST 2 "append(theta,
                     cons((car(x!1`unsolved)`label,
                           pair(variable(freshLabel(x!1)),
                                variable(freshLabel(union(vars(x!1),
                                                          singleton(freshLabel(x!1))))))),
                          null))")
                                          (("1" (REPLACES -2) NIL NIL)
                                           ("2"
                                            (TYPEPRED
                                             " antiunify(decomposePairs(x!1))`substitution")
                                            (("2" (LEMMA "nice_append")
                                              (("2"
                                                (INST -1 "x!1`substitution"
                                                 "append(theta,
                     cons((car(x!1`unsolved)`label,
                           pair(variable(freshLabel(x!1)),
                                variable(freshLabel(union(vars(x!1),
                                                          singleton(freshLabel(x!1))))))),
                          null))")
                                                (("2" (PROP)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (REWRITE "append_assoc[basic_sub]")
                                          (("2" (EXPAND "append" 1 3)
                                            (("2" (EXPAND "append" 1 3)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL)
                                 ("2" (EXPAND "matchingPairs_conf?")
                                  (("2" (EXPAND "matchingPairs?")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "matchingPairs_conf?")
                              (("2" (EXPAND "matchingPairs?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("3" (HIDE-ALL-BUT (-1 -2))
                              (("3" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (EXPAND "antiunify" 1)
            (("3" (ASSERT)
              (("3" (EXPAND "syntacticallyEq_conf?")
                (("3" (EXPAND "syntacticallyEq?")
                  (("3" (FLATTEN)
                    (("3" (ASSERT)
                      (("3" (LEMMA "syntacticallyEq_classification")
                        (("3" (INST?)
                          (("3" (PROP)
                            (("1" (ASSERT)
                              (("1" (INST -3 "trivialSyn_Eqs(x!1)")
                                (("1" (PROP)
                                  (("1" (SKEEP)
                                    (("1" (EXPAND "trivialSyn_Eqs" -1 2)
                                      (("1"
                                        (CASE " append(theta,
              cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                   x!1`substitution)) =  append(append(theta,
              cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                   null)),x!1`substitution)")
                                        (("1"
                                          (INST 3 "append(theta,
              cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                   null))")
                                          (("1" (REPLACE -2 3)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (LEMMA "nice_append")
                                            (("2"
                                              (INST -1 "x!1`substitution"
                                               "append(theta,
                     cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                          null))")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (REWRITE "append_assoc[basic_sub]")
                                          (("2" (EXPAND "append" 1 3)
                                            (("2" (EXPAND "append" 1 3)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "syntacticallyEq_conf?")
                              (("2" (EXPAND "syntacticallyEq?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("3" (EXPAND "normal_configuration?")
                              (("3" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (EXPAND "antiunify" 1)
            (("4" (ASSERT)
              (("4" (EXPAND "SolvedEq_conf?")
                (("4" (EXPAND "SolvedEq?")
                  (("4" (FLATTEN)
                    (("4" (ASSERT)
                      (("4" (LEMMA "SolvedEq_classification")
                        (("4" (INST?)
                          (("4" (PROP)
                            (("1" (ASSERT)
                              (("1" (INST -3 "solve(x!1)")
                                (("1" (PROP)
                                  (("1" (SKEEP)
                                    (("1" (EXPAND "solve" -1 2)
                                      (("1" (LIFT-IF)
                                        (("1" (PROP)
                                          (("1"
                                            (CASE "append(theta,
             cons((car(x!1`unsolved)`label,
                    variable(red_eq_in(cons(car(x!1`unsolved),
                                            x!1`solved))`label)),
                   x!1`substitution)) =  append(append(theta,
              cons((car(x!1`unsolved)`label,
                    variable(red_eq_in(cons(car(x!1`unsolved),
                                            x!1`solved))`label)),
                   null)),x!1`substitution)")
                                            (("1"
                                              (INST 4 "append(theta,
                     cons((car(x!1`unsolved)`label,
                           variable(red_eq_in(cons(car(x!1`unsolved),
                                                   x!1`solved))`label)),
                          null))")
                                              (("1" (ASSERT) NIL NIL)
                                               ("2" (LEMMA "nice_append")
                                                (("2"
                                                  (INST -1 "x!1`substitution"
                                                   "append(theta,
                     cons((car(x!1`unsolved)`label,
                           variable(red_eq_in(cons(car(x!1`unsolved),
                                                   x!1`solved))`label)),
                          null))")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (REWRITE
                                               "append_assoc[basic_sub]")
                                              (("2" (EXPAND "append" 1 3)
                                                (("2" (EXPAND "append" 1 3)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST 5 "theta") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "SolvedEq_conf?")
                              (("2" (EXPAND "SolvedEq?")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("3" (EXPAND "normal_configuration?")
                              (("3" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("5" (HIDE -2)
            (("5" (INST 1 "null") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|nice_append| FORMULA-DECL NIL |first_order_substitution| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_sub_preserves_terms| 0
  (|antiunify_sub_preserves_terms-1| NIL 3938156186
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (SKEEP)
      (("" (CASE "null?(x!1`unsolved)")
        (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
         ("2" (LEMMA "antiunify_derivability")
          (("2" (INST?)
            (("2" (EXPAND "normal_configuration?")
              (("2" (ASSERT)
                (("2" (EXPAND "member")
                  (("2" (EXPAND "img" -3)
                    (("2" (SKEEP)
                      (("2" (PROP)
                        (("1" (INST -2 "decomposeFuns(x!1)")
                          (("1" (INST -2 "t")
                            (("1" (TYPEPRED "decomposeFuns(x!1)")
                              (("1" (ASSERT)
                                (("1" (SPLIT)
                                  (("1" (EXPAND "antiunify" 2)
                                    (("1" (LEMMA "antiunify_sub_decomposition")
                                      (("1" (INST -1 "decomposeFuns(x!1)")
                                        (("1" (SKEEP)
                                          (("1" (REPLACES -1)
                                            (("1" (EXPAND "decomposeFuns" -1 2)
                                              (("1" (REPLACES -1)
                                                (("1" (REPLACE -8 2 RL)
                                                  (("1" (EXPAND "subs" 2 1)
                                                    (("1"
                                                      (TYPEPRED
                                                       "x!1`substitution")
                                                      (("1"
                                                        (LEMMA
                                                         "nice_idempotent")
                                                        (("1" (INST?)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "idempotent?")
                                                              (("1" (INST?)
                                                                (("1"
                                                                  (REPLACE -1
                                                                           2)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -10 2)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "basic_sub_no_effect")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "car(x!1`unsolved)`label"
                                                                         "app(sym(car(x!1`unsolved)`lhs), variable(freshLabel(x!1)))"
                                                                         "t")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (HIDE-ALL-BUT
                                                                             (-1
                                                                              -12
                                                                              1))
                                                                            (("1"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "decomposeFuns" 1)
                                    (("2" (EXPAND "img")
                                      (("2" (INST 1 "X")
                                        (("2" (EXPAND "subs" 1)
                                          (("2" (EXPAND "subs" 1)
                                            (("2" (EXPAND "subs" -8)
                                              (("2" (REPLACE -8 1)
                                                (("2"
                                                  (LEMMA "basic_sub_no_effect")
                                                  (("2"
                                                    (INST -1
                                                     "car(x!1`unsolved)`label"
                                                     "app(sym(car(x!1`unsolved)`lhs), variable(freshLabel(x!1)))"
                                                     "t")
                                                    (("2" (SPLIT -1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "member" 1)
                                                          (("1" (EXPAND "dom")
                                                            (("1"
                                                              (EXPAND "member"
                                                                      -8)
                                                              (("1"
                                                                (EXPAND "subs"
                                                                        1)
                                                                (("1"
                                                                  (EXPAND
                                                                   "subs" 1)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -10 -2)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (HIDE-ALL-BUT
                                                         (-1 -10 2))
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (EXPAND "decomposeFuns" 1)
                                    (("3" (EXPAND "makeEq")
                                      (("3" (EXPAND "labels")
                                        (("3" (REWRITE* "add_as_union")
                                          (("3"
                                            (REWRITE*
                                             "distribute_intersection_union")
                                            (("3"
                                              (CASE-REPLACE
                                               "intersection(vars(t), labels(cdr(x!1`unsolved))) = emptyset")
                                              (("1" (HIDE -10)
                                                (("1"
                                                  (REWRITE "union_commutative")
                                                  (("1" (REWRITE "union_empty")
                                                    (("1"
                                                      (LEMMA "freshness_subs")
                                                      (("1" (INST -1 "x!1")
                                                        (("1" (EXPAND "empty?")
                                                          (("1" (SKEEP)
                                                            (("1"
                                                              (EXPAND "member"
                                                                      -2)
                                                              (("1"
                                                                (EXPAND
                                                                 "intersection"
                                                                 -2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "member" -2)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "singleton")
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "member"
                                                                         1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -3
                                                                           -2)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "union")
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (HIDE
                                                                                 1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "member"
                                                                                   1)
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-2
                                                                                      -10
                                                                                      -11
                                                                                      1))
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "subset?(vars(t), vars(img(x!1`substitution)))")
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (CASE
                                                                                            "member(t, img(x!1`substitution))")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "subset?")
                                                                                          (("1"
                                                                                            (SKEEP)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "vars_correct")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "x!2"
                                                                                                 "img(x!1`substitution)"
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "img"
                                                                                           1)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "member"
                                                                                             1)
                                                                                            (("2"
                                                                                              (INST?)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE-ALL-BUT (-9 1 3))
                                                (("2"
                                                  (LEMMA
                                                   "nonempty_union1[variable]")
                                                  (("2"
                                                    (INST -1
                                                     " intersection(vars(t), labels(cdr(x!1`unsolved)))"
                                                     "intersection(vars(t),
                                singleton(car(x!1`unsolved)`label))")
                                                    (("1" (EXPAND "nonempty?")
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL)
                                                     ("2" (EXPAND "nonempty?")
                                                      (("2"
                                                        (REWRITE
                                                         "emptyset_is_empty?")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "matchingPairs_classification")
                          (("2" (INST?)
                            (("2" (EXPAND "normal_configuration?")
                              (("2" (ASSERT)
                                (("2" (EXPAND "antiunify" 3)
                                  (("2" (INST -2 "decomposePairs(x!1)")
                                    (("2" (INST?)
                                      (("2" (ASSERT)
                                        (("2" (PROP)
                                          (("1" (REPLACES -1)
                                            (("1" (EXPAND "decomposePairs")
                                              (("1" (EXPAND "subs" 3 1)
                                                (("1" (REPLACE -3 3 RL)
                                                  (("1"
                                                    (TYPEPRED
                                                     "x!1`substitution")
                                                    (("1"
                                                      (LEMMA "nice_idempotent")
                                                      (("1" (INST?)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND
                                                             "idempotent?")
                                                            (("1" (INST?)
                                                              (("1"
                                                                (REPLACE -1 3)
                                                                (("1"
                                                                  (REPLACE -5
                                                                           3)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "basic_sub_no_effect")
                                                                    (("1"
                                                                      (INST -1
                                                                       "car(x!1`unsolved)`label"
                                                                       "pair(variable(freshLabel(x!1)),
                 variable(freshLabel(union(vars(x!1),
                                           singleton(freshLabel(x!1))))))"
                                                                       "t")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (HIDE-ALL-BUT
                                                                           (-1
                                                                            -7
                                                                            2))
                                                                          (("1"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "decomposePairs" 1)
                                            (("2"
                                              (LEMMA
                                               "img_preservation_basic_subs")
                                              (("2"
                                                (INST -1
                                                 "car(x!1`unsolved)`label"
                                                 "pair(variable(freshLabel(x!1)),
                     variable(freshLabel(union(vars(x!1),
                                               singleton(freshLabel(x!1))))))"
                                                 "x!1`substitution" "t")
                                                (("2" (PROP)
                                                  (("1" (EXPAND "member")
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2" (EXPAND "member")
                                                    (("2" (EXPAND "img")
                                                      (("2" (INST 1 "X")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("3"
                                                    (HIDE-ALL-BUT (-1 -5 3))
                                                    (("3" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE-ALL-BUT (-1 -4 1 3))
                                            (("3" (EXPAND "decomposePairs")
                                              (("3" (EXPAND "makeEq")
                                                (("3" (EXPAND "labels")
                                                  (("3" (EXPAND "labels" 1)
                                                    (("3"
                                                      (REWRITE* "add_as_union")
                                                      (("3"
                                                        (REWRITE*
                                                         "distribute_intersection_union")
                                                        (("3"
                                                          (CASE-REPLACE
                                                           "intersection(vars(t), labels(cdr(x!1`unsolved))) = emptyset")
                                                          (("1" (HIDE -3)
                                                            (("1"
                                                              (LEMMA
                                                               "union_commutative[variable]")
                                                              (("1"
                                                                (INST -1
                                                                 "emptyset"
                                                                 "intersection(vars(t),
                                      singleton(freshLabel(union(vars(x!1),
                                                                 singleton(freshLabel(x!1))))))")
                                                                (("1"
                                                                  (REPLACES -1)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "union_empty")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "freshness_subs")
                                                                      (("1"
                                                                        (LEMMA
                                                                         "freshness_subs_ext")
                                                                        (("1"
                                                                          (INST
                                                                           -2
                                                                           "x!1")
                                                                          (("1"
                                                                            (CASE-REPLACE
                                                                             "intersection(vars(t), singleton(freshLabel(x!1)))=emptyset")
                                                                            (("1"
                                                                              (REWRITE
                                                                               "union_empty")
                                                                              (("1"
                                                                                (INST
                                                                                 -2
                                                                                 "x!1"
                                                                                 "singleton(freshLabel(x!1))")
                                                                                (("1"
                                                                                  (HIDE
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "member")
                                                                                    (("1"
                                                                                      (HIDE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "empty?")
                                                                                        (("1"
                                                                                          (SKEEP)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "member")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "intersection")
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "member"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "singleton"
                                                                                                     -2
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "union"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (FLATTEN)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "freshLabel"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "subset?(vars(t), vars(img(x!1`substitution)))")
                                                                                                            (("1"
                                                                                                              (GRIND)
                                                                                                              NIL
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REVEAL
                                                                                                               -8
                                                                                                               -9)
                                                                                                              (("2"
                                                                                                                (CASE
                                                                                                                    "member(t,img(x!1`substitution))")
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "vars_correct")
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (SKEEP)
                                                                                                                      (("1"
                                                                                                                        (INST
                                                                                                                         -1
                                                                                                                         "x!2"
                                                                                                                         "img(x!1`substitution)"
                                                                                                                         "t")
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (HIDE-ALL-BUT
                                                                                                                   (-1
                                                                                                                    -2
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (GRIND)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE-ALL-BUT
                                                                               (1
                                                                                2
                                                                                4))
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "emptyset_is_empty?"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "empty?")
                                                                                    (("2"
                                                                                      (SKEEP)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "member")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "intersection")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "member")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "singleton")
                                                                                                (("2"
                                                                                                  (REPLACES
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "union")
                                                                                                    (("2"
                                                                                                      (FLATTEN)
                                                                                                      (("2"
                                                                                                        (HIDE
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (CASE
                                                                                                                "member(t,img(x!1`substitution))")
                                                                                                            (("1"
                                                                                                              (LEMMA
                                                                                                               "vars_correct")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -1
                                                                                                                 "freshLabel(x!1)"
                                                                                                                 "img(x!1`substitution)"
                                                                                                                 "t")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (REVEAL
                                                                                                               -9
                                                                                                               -10)
                                                                                                              (("2"
                                                                                                                (GRIND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE 2)
                                                            (("2"
                                                              (LEMMA
                                                               "nonempty_union1[variable]")
                                                              (("2"
                                                                (INST -1
                                                                 "intersection(vars(t), labels(cdr(x!1`unsolved)))"
                                                                 "intersection(vars(t),
                                singleton(car(x!1`unsolved)`label))")
                                                                (("1"
                                                                  (EXPAND
                                                                   "nonempty?")
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (REWRITE
                                                                   "emptyset_is_empty?"
                                                                   :DIR RL)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (LEMMA "syntacticallyEq_classification")
                          (("3" (INST?)
                            (("3" (EXPAND "normal_configuration?")
                              (("3" (ASSERT)
                                (("3" (FLATTEN)
                                  (("3" (EXPAND "antiunify" 4)
                                    (("3" (ASSERT)
                                      (("3" (INST -2 "trivialSyn_Eqs(x!1)")
                                        (("3" (INST?)
                                          (("3" (ASSERT)
                                            (("3" (PROP)
                                              (("1" (REPLACES -1)
                                                (("1" (EXPAND "trivialSyn_Eqs")
                                                  (("1" (REPLACE -3 4 RL)
                                                    (("1" (EXPAND "subs" 4 1)
                                                      (("1"
                                                        (TYPEPRED
                                                         "x!1`substitution")
                                                        (("1"
                                                          (LEMMA
                                                           "nice_idempotent")
                                                          (("1" (INST?)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND
                                                                 "idempotent?")
                                                                (("1" (INST?)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             4)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -5 4)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "basic_sub_no_effect")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "car(x!1`unsolved)`label"
                                                                           "car(x!1`unsolved)`lhs"
                                                                           "t")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (HIDE-ALL-BUT
                                                                               (-1
                                                                                -7
                                                                                3))
                                                                              (("1"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA
                                                 "img_preservation_basic_subs")
                                                (("2"
                                                  (EXPAND "trivialSyn_Eqs" 1)
                                                  (("2"
                                                    (INST -1
                                                     "car(x!1`unsolved)`label"
                                                     "car(x!1`unsolved)`lhs"
                                                     "x!1`substitution" "t")
                                                    (("2" (PROP)
                                                      (("1" (EXPAND "member")
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (EXPAND "member")
                                                        (("2"
                                                          (HIDE-ALL-BUT
                                                           (-2 -3 1 5))
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (EXPAND "img")
                                                        (("3" (INST 1 "X")
                                                          (("3"
                                                            (EXPAND "member")
                                                            (("3"
                                                              (EXPAND "subs" 1)
                                                              (("3"
                                                                (EXPAND "subs"
                                                                        1)
                                                                (("3"
                                                                  (EXPAND
                                                                   "dom")
                                                                  (("3"
                                                                    (EXPAND
                                                                     "subs" -4)
                                                                    (("3"
                                                                      (EXPAND
                                                                       "subs" 1
                                                                       1)
                                                                      (("3"
                                                                        (EXPAND
                                                                         "subs"
                                                                         1 1)
                                                                        (("3"
                                                                          (REPLACE
                                                                           -4
                                                                           1)
                                                                          (("3"
                                                                            (LEMMA
                                                                             "basic_sub_no_effect")
                                                                            (("3"
                                                                              (INST
                                                                               -1
                                                                               "car(x!1`unsolved)`label"
                                                                               "car(x!1`unsolved)`lhs"
                                                                               "t")
                                                                              (("3"
                                                                                (SPLIT
                                                                                 -1)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-1
                                                                                    -6
                                                                                    4))
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (EXPAND "trivialSyn_Eqs" 1)
                                                (("3" (EXPAND "labels" -4)
                                                  (("3"
                                                    (REWRITE "add_as_union")
                                                    (("3"
                                                      (REWRITE
                                                       "distribute_intersection_union")
                                                      (("3"
                                                        (LEMMA
                                                         "nonempty_union1[variable]")
                                                        (("3"
                                                          (INST -1
                                                           "intersection(vars(t), labels(cdr(x!1`unsolved)))"
                                                           "intersection(vars(t),
                                singleton(car(x!1`unsolved)`label))")
                                                          (("1"
                                                            (EXPAND
                                                             "nonempty?")
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (EXPAND
                                                             "nonempty?")
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (LEMMA "SolvedEq_classification")
                          (("4" (INST?)
                            (("4" (EXPAND "normal_configuration?")
                              (("4" (ASSERT)
                                (("4" (FLATTEN)
                                  (("4" (EXPAND "antiunify" 5)
                                    (("4" (ASSERT)
                                      (("4" (INST -2 "solve(x!1)")
                                        (("4" (INST?)
                                          (("4" (ASSERT)
                                            (("4" (PROP)
                                              (("1" (REPLACES -1)
                                                (("1" (EXPAND "solve" 5)
                                                  (("1" (LIFT-IF)
                                                    (("1" (PROP)
                                                      (("1" (REPLACE -4 1 RL)
                                                        (("1"
                                                          (EXPAND "subs" 1 1)
                                                          (("1"
                                                            (TYPEPRED
                                                             "x!1`substitution")
                                                            (("1"
                                                              (LEMMA
                                                               "nice_idempotent")
                                                              (("1" (INST?)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "idempotent?")
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -6
                                                                           1)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "basic_sub_no_effect")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "car(x!1`unsolved)`label"
                                                                               "variable(red_eq_in(cons(car(x!1`unsolved),
                                    x!1`solved))`label)"
                                                                               "t")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (HIDE-ALL-BUT
                                                                                   (-1
                                                                                    -8
                                                                                    5))
                                                                                  (("1"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA
                                                 "img_preservation_basic_subs")
                                                (("2" (EXPAND "solve" 1)
                                                  (("2" (PROP)
                                                    (("1"
                                                      (INST -2
                                                       "car(x!1`unsolved)`label"
                                                       " variable(red_eq_in(cons(car(x!1`unsolved),
                                        x!1`solved))`label)"
                                                       "x!1`substitution" "t")
                                                      (("1" (SPLIT -2)
                                                        (("1" (EXPAND "member")
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (HIDE-ALL-BUT
                                                           (-3 -4 1))
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL)
                                                         ("3"
                                                          (HIDE-ALL-BUT
                                                           (-1 -6 5))
                                                          (("3" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (HIDE-ALL-BUT (-3 -4 2))
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (EXPAND "labels" -4)
                                                (("3" (REWRITE "add_as_union")
                                                  (("3" (EXPAND "solve" 1)
                                                    (("3" (LIFT-IF)
                                                      (("3"
                                                        (REWRITE
                                                         "distribute_intersection_union")
                                                        (("3"
                                                          (LEMMA
                                                           "nonempty_union1[variable]")
                                                          (("3"
                                                            (INST -1
                                                             "intersection(vars(t), labels(cdr(x!1`unsolved)))"
                                                             "intersection(vars(t),
                                singleton(car(x!1`unsolved)`label))")
                                                            (("1"
                                                              (EXPAND
                                                               "nonempty?")
                                                              (("1" (PROPAX)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND
                                                               "nonempty?")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|img_preservation_basic_subs| FORMULA-DECL NIL |first_order_substitution|
     NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|freshness_subs_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|antiunify_sub_decomposition| FORMULA-DECL NIL |antiunif| NIL)
    (|idempotent?| CONST-DECL "bool" |first_order_substitution| NIL)
    (|basic_sub_no_effect| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|nice_idempotent| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|freshness_subs| FORMULA-DECL NIL |antiunif| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|supset_dom| DEF-DECL "finite_set[variable]" |first_order_substitution|
     NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|epsilon| CONST-DECL "T" |epsilons| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|vars_correct| FORMULA-DECL NIL |first_order_terms_properties| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_union1| JUDGEMENT-TCC NIL |sets| NIL)
    (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|distribute_intersection_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (∅ CONST-DECL "set" |sets| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_dom_sub_preserves_vars_unsolved| 0
  (|antiunify_dom_sub_preserves_vars_unsolved-1| NIL 3937905482
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (LEMMA "antiunify_derivability")
      (("" (INST?)
        (("" (PROP)
          (("1" (EXPAND "antiunify" 1)
            (("1" (ASSERT)
              (("1" (EXPAND "matchingFuns_conf?")
                (("1" (EXPAND "matchingFuns?")
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (INST -3 "decomposeFuns(x!1)")
                        (("1" (ASSERT)
                          (("1"
                            (CASE-REPLACE
                             "vars(decomposeFuns(x!1)`unsolved) =  vars(x!1`unsolved)")
                            (("1" (HIDE -3 2) (("1" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "matchingPairs_classification")
            (("2" (INST?)
              (("2" (PROP)
                (("1" (EXPAND "antiunify" 2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "matchingPairs_conf?")
                      (("1" (EXPAND "matchingPairs?")
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (INST -3 "decomposePairs(x!1)")
                              (("1" (ASSERT)
                                (("1"
                                  (CASE-REPLACE
                                   "vars(decomposePairs(x!1)`unsolved) =  vars(x!1`unsolved) ")
                                  (("1" (HIDE -3 3)
                                    (("1" (HIDE 2)
                                      (("1" (GRIND)
                                        (("1" (DECOMPOSE-EQUALITY)
                                          (("1" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("3" (LEMMA "syntacticallyEq_classification")
            (("3" (INST?)
              (("3" (PROP)
                (("1" (EXPAND "antiunify" 3)
                  (("1" (ASSERT)
                    (("1" (EXPAND "syntacticallyEq_conf?")
                      (("1" (EXPAND "syntacticallyEq?")
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (INST -3 "trivialSyn_Eqs(x!1)")
                              (("1" (ASSERT)
                                (("1" (EXPAND "vars" 3)
                                  (("1" (EXPAND "syntacticallyEq?")
                                    (("1" (FLATTEN)
                                      (("1" (EXPAND "vars" 5 1)
                                        (("1" (REPLACE -2 5 RL)
                                          (("1"
                                            (CASE-REPLACE
                                             "vars(car(x!1`unsolved)`lhs) ∪
                    vars(car(x!1`unsolved)`lhs)
                    ∪ vars(cdr(x!1`unsolved)) = union(vars(car(x!1`unsolved)`lhs), vars(cdr(x!1`unsolved)))")
                                            (("1"
                                              (REWRITE
                                               "distribute_intersection_union")
                                              (("1"
                                                (EXPAND "trivialSyn_Eqs" -4 2)
                                                (("1" (REPLACES -4)
                                                  (("1" (REWRITE "union_empty")
                                                    (("1"
                                                      (LEMMA
                                                       "antiunify_sub_preserves_terms")
                                                      (("1"
                                                        (INST -1
                                                         "trivialSyn_Eqs(x!1)"
                                                         "car(x!1`unsolved)`lhs")
                                                        (("1" (SPLIT)
                                                          (("1"
                                                            (LEMMA
                                                             "idempotent_disjoint_dom_img")
                                                            (("1"
                                                              (INST -1
                                                               "antiunify(trivialSyn_Eqs(x!1))`substitution")
                                                              (("1" (PROP)
                                                                (("1"
                                                                  (CASE
                                                                      "subset?( vars(car(x!1`unsolved)`lhs),vars(img(antiunify(trivialSyn_Eqs(x!1))`substitution)))")
                                                                  (("1"
                                                                    (CASE
                                                                        "disjoint?(dom(antiunify(trivialSyn_Eqs(x!1))`substitution),vars(car(x!1`unsolved)`lhs))")
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       (-1 5))
                                                                      (("1"
                                                                        (REWRITE
                                                                         "emptyset_is_empty?"
                                                                         :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-1 -2
                                                                        1))
                                                                      (("2"
                                                                        (EXPAND
                                                                         "disjoint?")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "empty?")
                                                                          (("2"
                                                                            (SKEEP)
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "subset?")
                                                                                (("2"
                                                                                  (INST?)
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "trivialSyn_Eqs"
                                                                     -2 2)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "subs"
                                                                       -2 2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "img"
                                                                         1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "vars"
                                                                           1 2)
                                                                          (("2"
                                                                            (LIFT-IF)
                                                                            (("2"
                                                                              (PROP)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "empty?")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "car(x!1`unsolved)`lhs")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "member"
                                                                                     1)
                                                                                    (("1"
                                                                                      (INST
                                                                                       1
                                                                                       "car(x!1`unsolved)`label")
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "antiunify_sub_decomposition")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "trivialSyn_Eqs(x!1)")
                                                                                          (("1"
                                                                                            (SKEEP)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "subs"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REWRITE*
                                                                                                   "subs_append2")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "trivialSyn_Eqs"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "subs_no_effect_t_var")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "car(x!1`unsolved)`label"
                                                                                                         "x!1`substitution"
                                                                                                         "car(x!1`unsolved)`lhs")
                                                                                                        (("1"
                                                                                                          (PROP)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "dom")
                                                                                                            (("1"
                                                                                                              (PROP)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "subs"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (REWRITE
                                                                                                                   "subs_append2")
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "subs"
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -2
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "trivialSyn_Eqs"
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "subs"
                                                                                                                           -4
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (CASE-REPLACE
                                                                                                                             " subs(x!1`substitution)(car(x!1`unsolved)`lhs) = car(x!1`unsolved)`lhs")
                                                                                                                            (("1"
                                                                                                                              (LEMMA
                                                                                                                               "basic_sub_no_effect")
                                                                                                                              (("1"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "car(x!1`unsolved)`label"
                                                                                                                                 "car(x!1`unsolved)`lhs"
                                                                                                                                 "car(x!1`unsolved)`lhs")
                                                                                                                                (("1"
                                                                                                                                  (PROP)
                                                                                                                                  (("1"
                                                                                                                                    (REPLACES
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (REPLACES
                                                                                                                                       -5
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (TYPEPRED
                                                                                                                                         "x!1")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "validConfiguration?")
                                                                                                                                          (("1"
                                                                                                                                            (FLATTEN)
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "validEqs?")
                                                                                                                                              (("1"
                                                                                                                                                (FLATTEN)
                                                                                                                                                (("1"
                                                                                                                                                  (HIDE-ALL-BUT
                                                                                                                                                   (-1
                                                                                                                                                    -7
                                                                                                                                                    -11))
                                                                                                                                                  (("1"
                                                                                                                                                    (GRIND)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (HIDE-ALL-BUT
                                                                                                                                     (-1
                                                                                                                                      -8))
                                                                                                                                    (("2"
                                                                                                                                      (TYPEPRED
                                                                                                                                       "x!1")
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "validConfiguration?")
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "validEqs?")
                                                                                                                                          (("2"
                                                                                                                                            (FLATTEN)
                                                                                                                                            (("2"
                                                                                                                                              (HIDE
                                                                                                                                               -2
                                                                                                                                               -3
                                                                                                                                               -4
                                                                                                                                               -5)
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "empty?")
                                                                                                                                                (("2"
                                                                                                                                                  (INST
                                                                                                                                                   -1
                                                                                                                                                   "car(x!1`unsolved)`label")
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "member")
                                                                                                                                                    (("2"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "∩")
                                                                                                                                                      (("2"
                                                                                                                                                        (SPLIT)
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "append")
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "vars"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (GRIND)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL)
                                                                                                                                                         ("2"
                                                                                                                                                          (GRIND)
                                                                                                                                                          NIL
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (HIDE-ALL-BUT
                                                                                                                               (-6
                                                                                                                                1))
                                                                                                                              (("2"
                                                                                                                                (LEMMA
                                                                                                                                 "subs_no_effect_t")
                                                                                                                                (("2"
                                                                                                                                  (INST?)
                                                                                                                                  (("2"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("2"
                                                                                                                                      (HIDE
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (TYPEPRED
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "validConfiguration?")
                                                                                                                                          (("2"
                                                                                                                                            (FLATTEN)
                                                                                                                                            (("2"
                                                                                                                                              (LEMMA
                                                                                                                                               "supset_dom_correct2")
                                                                                                                                              (("2"
                                                                                                                                                (INST?)
                                                                                                                                                (("2"
                                                                                                                                                  (HIDE
                                                                                                                                                   -2
                                                                                                                                                   -3
                                                                                                                                                   -4)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "disjoint?")
                                                                                                                                                    (("2"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "empty?")
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "subset?")
                                                                                                                                                        (("2"
                                                                                                                                                          (SKEEP)
                                                                                                                                                          (("2"
                                                                                                                                                            (INST?)
                                                                                                                                                            (("2"
                                                                                                                                                              (INST?)
                                                                                                                                                              (("2"
                                                                                                                                                                (GRIND)
                                                                                                                                                                NIL
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (EXPAND
                                                                                                             "subs"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "trivialSyn_Eqs"
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (CASE
                                                                                                                    " subs(cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                x!1`substitution))
          (variable(car(x!1`unsolved)`label)) = subs((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
            subs(x!1`substitution)(car(x!1`unsolved)`lhs)) ")
                                                                                                                (("1"
                                                                                                                  (REPLACE
                                                                                                                   -2
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -2
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -1
                                                                                                                       -4
                                                                                                                       RL)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "subs"
                                                                                                                         -4
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (REPLACES
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (HIDE-ALL-BUT
                                                                                                                     (-4
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (TYPEPRED
                                                                                                                       "x!1")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "validConfiguration?")
                                                                                                                        (("2"
                                                                                                                          (FLATTEN)
                                                                                                                          (("2"
                                                                                                                            (LEMMA
                                                                                                                             "subs_no_effect_t")
                                                                                                                            (("2"
                                                                                                                              (INST
                                                                                                                               -1
                                                                                                                               "x!1`substitution"
                                                                                                                               "car(x!1`unsolved)`lhs")
                                                                                                                              (("2"
                                                                                                                                (PROP)
                                                                                                                                (("1"
                                                                                                                                  (REPLACES
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (LEMMA
                                                                                                                                     "basic_sub_no_effect")
                                                                                                                                    (("1"
                                                                                                                                      (INST?)
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        (("1"
                                                                                                                                          (HIDE-ALL-BUT
                                                                                                                                           (-1
                                                                                                                                            -2
                                                                                                                                            -6))
                                                                                                                                          (("1"
                                                                                                                                            (LEMMA
                                                                                                                                             "validity_Eq_in_ValidEqs")
                                                                                                                                            (("1"
                                                                                                                                              (INST
                                                                                                                                               -1
                                                                                                                                               "append(x!1`unsolved, x!1`solved)"
                                                                                                                                               "0")
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "nth")
                                                                                                                                                (("1"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "validEquation?")
                                                                                                                                                  (("1"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "member")
                                                                                                                                                    (("1"
                                                                                                                                                      (HIDE
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (GRIND)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (HIDE
                                                                                                                                                 -1
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (GRIND)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL)
                                                                                                                                 ("2"
                                                                                                                                  (HIDE-ALL-BUT
                                                                                                                                   (-4
                                                                                                                                    -5
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (LEMMA
                                                                                                                                     "supset_dom_correct2")
                                                                                                                                    (("2"
                                                                                                                                      (INST?)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "disjoint?")
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "empty?")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "subset?")
                                                                                                                                            (("2"
                                                                                                                                              (SKEEP)
                                                                                                                                              (("2"
                                                                                                                                                (INST?)
                                                                                                                                                (("2"
                                                                                                                                                  (INST?)
                                                                                                                                                  (("2"
                                                                                                                                                    (GRIND)
                                                                                                                                                    NIL
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("3"
                                                                                                            (HIDE-ALL-BUT
                                                                                                             (-1
                                                                                                              -5))
                                                                                                            (("3"
                                                                                                              (TYPEPRED
                                                                                                               "x!1")
                                                                                                              (("3"
                                                                                                                (EXPAND
                                                                                                                 "validConfiguration?")
                                                                                                                (("3"
                                                                                                                  (FLATTEN)
                                                                                                                  (("3"
                                                                                                                    (HIDE
                                                                                                                     -1
                                                                                                                     -3
                                                                                                                     -4)
                                                                                                                    (("3"
                                                                                                                      (LEMMA
                                                                                                                       "supset_dom_correct2")
                                                                                                                      (("3"
                                                                                                                        (INST?)
                                                                                                                        (("3"
                                                                                                                          (EXPAND
                                                                                                                           "empty?")
                                                                                                                          (("3"
                                                                                                                            (EXPAND
                                                                                                                             "subset?")
                                                                                                                            (("3"
                                                                                                                              (INST?)
                                                                                                                              (("3"
                                                                                                                                (INST?)
                                                                                                                                (("3"
                                                                                                                                  (GRIND)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("4"
                                                                                                            (HIDE-ALL-BUT
                                                                                                             (-1
                                                                                                              -5))
                                                                                                            (("4"
                                                                                                              (TYPEPRED
                                                                                                               "x!1")
                                                                                                              (("4"
                                                                                                                (EXPAND
                                                                                                                 "validConfiguration?")
                                                                                                                (("4"
                                                                                                                  (FLATTEN)
                                                                                                                  (("4"
                                                                                                                    (HIDE
                                                                                                                     -1
                                                                                                                     -3
                                                                                                                     -4)
                                                                                                                    (("4"
                                                                                                                      (LEMMA
                                                                                                                       "supset_dom_correct2")
                                                                                                                      (("4"
                                                                                                                        (INST?)
                                                                                                                        (("4"
                                                                                                                          (EXPAND
                                                                                                                           "empty?")
                                                                                                                          (("4"
                                                                                                                            (EXPAND
                                                                                                                             "subset?")
                                                                                                                            (("4"
                                                                                                                              (INST?)
                                                                                                                              (("4"
                                                                                                                                (INST?)
                                                                                                                                (("4"
                                                                                                                                  (GRIND)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (CASE
                                                                                      "member(car(x!1`unsolved)`lhs, img(antiunify(trivialSyn_Eqs(x!1))`substitution)) ")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -3
                                                                                     -4)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "disjoint?")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "empty?")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "emptyset_is_empty?"
                                                                                           :DIR
                                                                                           RL)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "empty?")
                                                                                            (("1"
                                                                                              (SKEEP
                                                                                               6)
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "intersection")
                                                                                                      (("1"
                                                                                                        (PROP)
                                                                                                        (("1"
                                                                                                          (HIDE
                                                                                                           -4
                                                                                                           4
                                                                                                           5)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "vars_correct")
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "x"
                                                                                                               "img(antiunify(trivialSyn_Eqs(x!1))`substitution)"
                                                                                                               "car(x!1`unsolved)`lhs")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "member"
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (CASE
                                                                                        "subs((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
            subs(x!1`substitution)(car(x!1`unsolved)`lhs)) = car(x!1`unsolved)`lhs")
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -1
                                                                                       -3)
                                                                                      (("1"
                                                                                        (CASE
                                                                                            "subs(antiunify(trivialSyn_Eqs(x!1))`substitution)
          (car(x!1`unsolved)`lhs) = subs(antiunify(trivialSyn_Eqs(x!1))`substitution)
          (car(x!1`unsolved)`label)")
                                                                                        (("1"
                                                                                          (REPLACES
                                                                                           -1
                                                                                           -3)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "img"
                                                                                             1)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "member"
                                                                                               1)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "car(x!1`unsolved)`label")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "dom"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (REPLACES
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (HIDE-ALL-BUT
                                                                                                         (-3
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (TYPEPRED
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "validConfiguration?")
                                                                                                            (("1"
                                                                                                              (FLATTEN)
                                                                                                              (("1"
                                                                                                                (HIDE-ALL-BUT
                                                                                                                 (-1
                                                                                                                  -5
                                                                                                                  -6))
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "validity_Eq_in_ValidEqs")
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "append(x!1`unsolved, x!1`solved)"
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "nth")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "append "
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (HIDE
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "validEquation?")
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "member")
                                                                                                                              (("1"
                                                                                                                                (GRIND)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE-ALL-BUT
                                                                                                                       (-3
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (GRIND)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (REPLACES
                                                                                           -2)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             3)
                                                                                            (("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (LEMMA
                                                                                                 "antiunify_sub_decomposition")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   -1
                                                                                                   "trivialSyn_Eqs(x!1)")
                                                                                                  (("2"
                                                                                                    (SKEEP)
                                                                                                    (("2"
                                                                                                      (REPLACES
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "trivialSyn_Eqs"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "subs"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (REWRITE
                                                                                                             "subs_append2")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "subs"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (LEMMA
                                                                                                                 "subs_no_effect_t")
                                                                                                                (("2"
                                                                                                                  (INST
                                                                                                                   -1
                                                                                                                   "x!1`substitution"
                                                                                                                   "variable(car(x!1`unsolved)`label)")
                                                                                                                  (("2"
                                                                                                                    (PROP)
                                                                                                                    (("1"
                                                                                                                      (REPLACES
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "subs"
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (LEMMA
                                                                                                                           "antiunify_sub_preserves_terms")
                                                                                                                          (("1"
                                                                                                                            (INST
                                                                                                                             -1
                                                                                                                             "trivialSyn_Eqs(x!1)"
                                                                                                                             "car(x!1`unsolved)`lhs")
                                                                                                                            (("1"
                                                                                                                              (PROP)
                                                                                                                              (("1"
                                                                                                                                (REVEAL
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (REPLACE
                                                                                                                                   -1
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (REWRITE
                                                                                                                                     "subs_append2")
                                                                                                                                    (("1"
                                                                                                                                      (CASE-REPLACE
                                                                                                                                       "subs(trivialSyn_Eqs(x!1)`substitution)(car(x!1`unsolved)`lhs) = car(x!1`unsolved)`lhs")
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        NIL
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (HIDE-ALL-BUT
                                                                                                                                         (-5
                                                                                                                                          1))
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "trivialSyn_Eqs")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "subs")
                                                                                                                                            (("2"
                                                                                                                                              (CASE-REPLACE
                                                                                                                                               "subs(x!1`substitution)(car(x!1`unsolved)`lhs) = car(x!1`unsolved)`lhs")
                                                                                                                                              (("1"
                                                                                                                                                (HIDE
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (TYPEPRED
                                                                                                                                                   "x!1")
                                                                                                                                                  (("1"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "validConfiguration?")
                                                                                                                                                    (("1"
                                                                                                                                                      (FLATTEN)
                                                                                                                                                      (("1"
                                                                                                                                                        (HIDE-ALL-BUT
                                                                                                                                                         (-1
                                                                                                                                                          -5
                                                                                                                                                          1))
                                                                                                                                                        (("1"
                                                                                                                                                          (LEMMA
                                                                                                                                                           "validity_Eq_in_ValidEqs")
                                                                                                                                                          (("1"
                                                                                                                                                            (INST
                                                                                                                                                             -1
                                                                                                                                                             "append(x!1`unsolved, x!1`solved)"
                                                                                                                                                             "0")
                                                                                                                                                            (("1"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "nth")
                                                                                                                                                              (("1"
                                                                                                                                                                (HIDE
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "validEquation?")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "member")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (LEMMA
                                                                                                                                                                       "basic_sub_no_effect")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (INST?)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (PROP)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (HIDE
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (EXPAND
                                                                                                                                                                               "append")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (EXPAND
                                                                                                                                                                                 "member")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (GRIND)
                                                                                                                                                                                  NIL
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL)
                                                                                                                                                             ("2"
                                                                                                                                                              (GRIND)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL)
                                                                                                                                               ("2"
                                                                                                                                                (HIDE
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (TYPEPRED
                                                                                                                                                   "x!1")
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "validConfiguration?")
                                                                                                                                                    (("2"
                                                                                                                                                      (FLATTEN)
                                                                                                                                                      (("2"
                                                                                                                                                        (HIDE
                                                                                                                                                         -1
                                                                                                                                                         -2
                                                                                                                                                         -3)
                                                                                                                                                        (("2"
                                                                                                                                                          (LEMMA
                                                                                                                                                           "subs_no_effect_t")
                                                                                                                                                          (("2"
                                                                                                                                                            (INST?)
                                                                                                                                                            (("2"
                                                                                                                                                              (PROP)
                                                                                                                                                              (("2"
                                                                                                                                                                (HIDE
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "append")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "vars"
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "vars"
                                                                                                                                                                       -1
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (LEMMA
                                                                                                                                                                         "supset_dom_correct2")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (INST?)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (GRIND)
                                                                                                                                                                            NIL
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("2"
                                                                                                                                (HIDE
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (HIDE
                                                                                                                                   7)
                                                                                                                                  (("2"
                                                                                                                                    (HIDE
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (HIDE
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "trivialSyn_Eqs")
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "member")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "img")
                                                                                                                                            (("2"
                                                                                                                                              (INST
                                                                                                                                               1
                                                                                                                                               " car(x!1`unsolved)`label")
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "member")
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "dom")
                                                                                                                                                  (("2"
                                                                                                                                                    (CASE-REPLACE
                                                                                                                                                     "subs(cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                x!1`substitution))
          (car(x!1`unsolved)`label) = car(x!1`unsolved)`lhs")
                                                                                                                                                    (("1"
                                                                                                                                                      (TYPEPRED
                                                                                                                                                       "x!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "validConfiguration?")
                                                                                                                                                        (("1"
                                                                                                                                                          (FLATTEN)
                                                                                                                                                          (("1"
                                                                                                                                                            (HIDE
                                                                                                                                                             -2
                                                                                                                                                             -3
                                                                                                                                                             -4
                                                                                                                                                             -5)
                                                                                                                                                            (("1"
                                                                                                                                                              (LEMMA
                                                                                                                                                               "validity_Eq_in_ValidEqs")
                                                                                                                                                              (("1"
                                                                                                                                                                (INST
                                                                                                                                                                 -1
                                                                                                                                                                 "append(x!1`unsolved, x!1`solved)"
                                                                                                                                                                 "0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "nth")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "validEquation?")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (HIDE
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (EXPAND
                                                                                                                                                                         "append")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (EXPAND
                                                                                                                                                                           "member")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (EXPAND
                                                                                                                                                                             "vars")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (REPLACES
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (EXPAND
                                                                                                                                                                                 "vars"
                                                                                                                                                                                 1
                                                                                                                                                                                 1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (GRIND)
                                                                                                                                                                                  NIL
                                                                                                                                                                                  NIL))
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (HIDE-ALL-BUT
                                                                                                                                                                   (-3
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (GRIND)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL)
                                                                                                                                                     ("2"
                                                                                                                                                      (HIDE
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "subs")
                                                                                                                                                        (("2"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "subs")
                                                                                                                                                          (("2"
                                                                                                                                                            (LEMMA
                                                                                                                                                             "invariance_labels_in_validConf")
                                                                                                                                                            (("2"
                                                                                                                                                              (INST?)
                                                                                                                                                              (("2"
                                                                                                                                                                (BETA)
                                                                                                                                                                (("2"
                                                                                                                                                                  (INST
                                                                                                                                                                   -1
                                                                                                                                                                   "car(x!1`unsolved)`label")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (REPLACES
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "subs")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (PROPAX)
                                                                                                                                                                        NIL
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "append")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "labels")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (REWRITE
                                                                                                                                                                         "add_as_union")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (HIDE
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (GRIND)
                                                                                                                                                                            NIL
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL)
                                                                                                                               ("3"
                                                                                                                                (HIDE
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -4
                                                                                                                                 2
                                                                                                                                 7)
                                                                                                                                (("3"
                                                                                                                                  (EXPAND
                                                                                                                                   "trivialSyn_Eqs")
                                                                                                                                  (("3"
                                                                                                                                    (TYPEPRED
                                                                                                                                     "x!1")
                                                                                                                                    (("3"
                                                                                                                                      (EXPAND
                                                                                                                                       "validConfiguration?")
                                                                                                                                      (("3"
                                                                                                                                        (FLATTEN)
                                                                                                                                        (("3"
                                                                                                                                          (HIDE
                                                                                                                                           -2
                                                                                                                                           -3
                                                                                                                                           -4)
                                                                                                                                          (("3"
                                                                                                                                            (LEMMA
                                                                                                                                             "validity_append_valid_Eqs")
                                                                                                                                            (("3"
                                                                                                                                              (INST
                                                                                                                                               -1
                                                                                                                                               "x!1`unsolved"
                                                                                                                                               " x!1`solved")
                                                                                                                                              (("3"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("3"
                                                                                                                                                  (FLATTEN)
                                                                                                                                                  (("3"
                                                                                                                                                    (HIDE
                                                                                                                                                     -2
                                                                                                                                                     -3)
                                                                                                                                                    (("3"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "validEqs?")
                                                                                                                                                      (("3"
                                                                                                                                                        (FLATTEN)
                                                                                                                                                        (("3"
                                                                                                                                                          (HIDE
                                                                                                                                                           -2)
                                                                                                                                                          (("3"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "empty?")
                                                                                                                                                            (("3"
                                                                                                                                                              (SKEEP)
                                                                                                                                                              (("3"
                                                                                                                                                                (INST?)
                                                                                                                                                                (("3"
                                                                                                                                                                  (GRIND)
                                                                                                                                                                  NIL
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (HIDE-ALL-BUT
                                                                                                                       (-3
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (TYPEPRED
                                                                                                                         "x!1")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "validConfiguration?")
                                                                                                                          (("2"
                                                                                                                            (FLATTEN)
                                                                                                                            (("2"
                                                                                                                              (HIDE
                                                                                                                               -1
                                                                                                                               -3
                                                                                                                               -4)
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "append"
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "labels"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (REWRITE
                                                                                                                                     "add_as_union")
                                                                                                                                    (("2"
                                                                                                                                      (LEMMA
                                                                                                                                       "supset_dom_correct2")
                                                                                                                                      (("2"
                                                                                                                                        (INST?)
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "disjoint?")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "empty?")
                                                                                                                                            (("2"
                                                                                                                                              (EXPAND
                                                                                                                                               "subset?")
                                                                                                                                              (("2"
                                                                                                                                                (SKEEP)
                                                                                                                                                (("2"
                                                                                                                                                  (INST?)
                                                                                                                                                  (("2"
                                                                                                                                                    (INST?)
                                                                                                                                                    (("2"
                                                                                                                                                      (GRIND)
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-4
                                                                                        1))
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "subs_no_effect_t")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "x!1`substitution"
                                                                                           "car(x!1`unsolved)`lhs")
                                                                                          (("2"
                                                                                            (PROP)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              (("1"
                                                                                                (TYPEPRED
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "validConfiguration?")
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "validity_Eq_in_ValidEqs")
                                                                                                        (("1"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "append(x!1`unsolved, x!1`solved)"
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "nth")
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "append"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "validEquation?")
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "member")
                                                                                                                  (("1"
                                                                                                                    (LEMMA
                                                                                                                     "basic_sub_no_effect")
                                                                                                                    (("1"
                                                                                                                      (INST?)
                                                                                                                      (("1"
                                                                                                                        (PROP)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "member")
                                                                                                                          (("1"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (GRIND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE
                                                                                               2)
                                                                                              (("2"
                                                                                                (TYPEPRED
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "validConfiguration?")
                                                                                                  (("2"
                                                                                                    (FLATTEN)
                                                                                                    (("2"
                                                                                                      (HIDE-ALL-BUT
                                                                                                       (-4
                                                                                                        -5
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "supset_dom_correct2")
                                                                                                        (("2"
                                                                                                          (INST?)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "append"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "vars"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "disjoint?")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "empty?")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "subset?")
                                                                                                                    (("2"
                                                                                                                      (SKEEP)
                                                                                                                      (("2"
                                                                                                                        (INST?)
                                                                                                                        (("2"
                                                                                                                          (INST?)
                                                                                                                          (("2"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (TYPEPRED
                                                                   "antiunify(trivialSyn_Eqs(x!1))`substitution")
                                                                  (("2"
                                                                    (REWRITE
                                                                     "nice_idempotent")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE -1 -3 6)
                                                            (("2"
                                                              (EXPAND "member")
                                                              (("2"
                                                                (EXPAND "img")
                                                                (("2"
                                                                  (INST 1
                                                                   "car(x!1`unsolved)`label")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "trivialSyn_Eqs")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "member")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "dom")
                                                                        (("2"
                                                                          (CASE-REPLACE
                                                                           "subs(cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                 x!1`substitution))
           (car(x!1`unsolved)`label)
        = car(x!1`unsolved)`lhs")
                                                                          (("1"
                                                                            (HIDE
                                                                             -1)
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "x!1")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "validConfiguration?")
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -2
                                                                                     -3
                                                                                     -4)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "validity_Eq_in_ValidEqs")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "append(x!1`unsolved, x!1`solved)"
                                                                                         "0")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "nth")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "append")
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -2)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "validEquation?")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "member")
                                                                                                  (("1"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "subs")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "subs")
                                                                                (("2"
                                                                                  (CASE-REPLACE
                                                                                   "subs(x!1`substitution)(variable(car(x!1`unsolved)`label)) = variable(car(x!1`unsolved)`label)")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "subs"
                                                                                     1)
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "invariance_labels_in_validConf")
                                                                                      (("2"
                                                                                        (INST?)
                                                                                        (("2"
                                                                                          (BETA)
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "car(x!1`unsolved)`label")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "append")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "labels")
                                                                                                (("2"
                                                                                                  (REWRITE
                                                                                                   "add_as_union")
                                                                                                  (("2"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3" (HIDE 6)
                                                            (("3"
                                                              (EXPAND
                                                               "trivialSyn_Eqs"
                                                               1)
                                                              (("3" (HIDE -1)
                                                                (("3"
                                                                  (TYPEPRED
                                                                   "x!1")
                                                                  (("3"
                                                                    (EXPAND
                                                                     "validConfiguration?")
                                                                    (("3"
                                                                      (FLATTEN)
                                                                      (("3"
                                                                        (HIDE
                                                                         -2 -3
                                                                         -4)
                                                                        (("3"
                                                                          (EXPAND
                                                                           "validEqs?")
                                                                          (("3"
                                                                            (FLATTEN)
                                                                            (("3"
                                                                              (HIDE
                                                                               -2)
                                                                              (("3"
                                                                                (EXPAND
                                                                                 "empty?")
                                                                                (("3"
                                                                                  (SKEEP)
                                                                                  (("3"
                                                                                    (INST?)
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "append"
                                                                                       1)
                                                                                      (("3"
                                                                                        (EXPAND
                                                                                         "vars"
                                                                                         1)
                                                                                        (("3"
                                                                                          (EXPAND
                                                                                           "labels"
                                                                                           1)
                                                                                          (("3"
                                                                                            (REWRITE
                                                                                             "add_as_union")
                                                                                            (("3"
                                                                                              (REWRITE
                                                                                               " append_labels_is_union_labels")
                                                                                              (("3"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-1 1))
                                              (("2" (DECOMPOSE-EQUALITY)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -3 1) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("4" (LEMMA "SolvedEq_classification")
            (("4" (INST?)
              (("4" (EXPAND "normal_configuration?")
                (("4" (EXPAND "SolvedEq_conf?")
                  (("4" (EXPAND "SolvedEq?")
                    (("4" (FLATTEN)
                      (("4" (ASSERT)
                        (("4" (FLATTEN)
                          (("4" (EXPAND "vars" 4)
                            (("4"
                              (CASE-REPLACE
                               "vars(car(x!1`unsolved)) ∪ vars(cdr(x!1`unsolved)) =union(vars(car(x!1`unsolved)), vars(cdr(x!1`unsolved)))")
                              (("1" (REWRITE "distribute_intersection_union")
                                (("1"
                                  (CASE-REPLACE
                                   "intersection(dom(antiunify(x!1)`substitution),
                         vars(car(x!1`unsolved))) = emptyset")
                                  (("1" (HIDE -2)
                                    (("1" (REWRITE "union_commutative")
                                      (("1" (REWRITE "union_empty")
                                        (("1" (EXPAND "antiunify" 4)
                                          (("1" (ASSERT)
                                            (("1" (INST -4 "solve(x!1)")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "solve" -4 2)
                                                  (("1" (LIFT-IF)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "antiunify" 1)
                                    (("2" (ASSERT)
                                      (("2" (HIDE -1 -4 5)
                                        (("2" (EXPAND "solve" 1)
                                          (("2" (LIFT-IF)
                                            (("2" (PROP)
                                              (("1"
                                                (CASE
                                                    " member(red_eq_in(cons(car(x!1`unsolved),x!1`solved)), x!1`solved)")
                                                (("1"
                                                  (LEMMA
                                                   "red_eq_in_lhs_rhs_equality")
                                                  (("1"
                                                    (INST -1
                                                     "cons(car(x!1`unsolved), x!1`solved)")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (REWRITE
                                                         "list_car_cons")
                                                        (("1"
                                                          (LEMMA
                                                           "antiunify_monotony_solved_equations")
                                                          (("1"
                                                            (INST -1 "x!1"
                                                             "red_eq_in(cons(car(x!1`unsolved), x!1`solved))")
                                                            (("1"
                                                              (EXPAND
                                                               "antiunify" -1)
                                                              (("1"
                                                                (EXPAND "solve"
                                                                        -1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (TYPEPRED
                                                                     " antiunify(x!1
                         WITH [unsolved := cdr(x!1`unsolved),
                               substitution
                                 := cons((car(x!1`unsolved)`label,
                                          variable(red_eq_in(cons(car(x!1`unsolved),
                                                                  x!1`solved))`label)),
                                         x!1`substitution)])")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "validConfiguration?")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (HIDE
                                                                           -1
                                                                           -2
                                                                           -3)
                                                                          (("1"
                                                                            (NAME-REPLACE
                                                                             "AUconf"
                                                                             "antiunify(x!1
                                    WITH [unsolved := cdr(x!1`unsolved),
                                          substitution
                                            := cons((car(x!1`unsolved)`label,
                                                     variable(red_eq_in(cons(car(x!1`unsolved),
                                                                             x!1`solved))`label)),
                                                    x!1`substitution)])")
                                                                            (("1"
                                                                              (HIDE
                                                                               -6
                                                                               -8)
                                                                              (("1"
                                                                                (NAME-REPLACE
                                                                                 "red_eq"
                                                                                 "red_eq_in(cons(car(x!1`unsolved), x!1`solved))")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "vars"
                                                                                   1)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "subset_vars_eq_listEqs")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "append(AUconf`unsolved, AUconf`solved)"
                                                                                       "red_eq")
                                                                                      (("1"
                                                                                        (PROP)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "supset_dom_correct2")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "AUconf`substitution")
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "emptyset_is_empty?"
                                                                                               :DIR
                                                                                               RL)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "empty?")
                                                                                                (("1"
                                                                                                  (SKEEP)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "subset?")
                                                                                                    (("1"
                                                                                                      (INST?)
                                                                                                      (("1"
                                                                                                        (INST?)
                                                                                                        (("1"
                                                                                                          (INST?)
                                                                                                          (("1"
                                                                                                            (GRIND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (REWRITE
                                                                                           "member_append_r")
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE -1
                                                                       -2 -3 -4
                                                                       2)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "solve(x!1)")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "solve")
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "SolvedEq_conf?")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "SolvedEq?")
                                                                            (("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (LEMMA
                                                                       "nice_sub_Solved_Eq")
                                                                      (("3"
                                                                        (INST
                                                                         -1
                                                                         "x!1")
                                                                        (("1"
                                                                          (BETA)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE-ALL-BUT
                                                                           (-6
                                                                            -7
                                                                            1))
                                                                          (("2"
                                                                            (EXPAND
                                                                             "SolvedEq_conf?")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "SolvedEq?")
                                                                              (("2"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (LEMMA " red_eq_in_cdr")
                                                  (("2"
                                                    (INST -1
                                                     " cons(car(x!1`unsolved), x!1`solved)")
                                                    (("2"
                                                      (REWRITE "list_cdr_cons")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (CASE
                                                    "member(car(x!1`unsolved), antiunify(x!1
                                   WITH [unsolved := cdr(x!1`unsolved),
                                         solved
                                           := cons(car(x!1`unsolved),
                                                   x!1`solved)])`solved)")
                                                (("1"
                                                  (TYPEPRED "antiunify(x!1
                                   WITH [unsolved := cdr(x!1`unsolved),
                                         solved
                                           := cons(car(x!1`unsolved),
                                                   x!1`solved)])")
                                                  (("1"
                                                    (EXPAND
                                                     "validConfiguration?")
                                                    (("1" (FLATTEN)
                                                      (("1" (HIDE -1 -2 -3)
                                                        (("1"
                                                          (NAME-REPLACE
                                                           "AUconf"
                                                           "antiunify(x!1
                                    WITH [unsolved := cdr(x!1`unsolved),
                                          solved
                                            := cons(car(x!1`unsolved),
                                                    x!1`solved)])")
                                                          (("1"
                                                            (LEMMA
                                                             "supset_dom_correct2")
                                                            (("1" (INST?)
                                                              (("1"
                                                                (REWRITE
                                                                 "emptyset_is_empty?"
                                                                 :DIR RL)
                                                                (("1"
                                                                  (EXPAND
                                                                   "empty?")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "subset?")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "subset_vars_eq_listEqs")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "append(AUconf`unsolved, AUconf`solved)"
                                                                         "car(x!1`unsolved)")
                                                                        (("1"
                                                                          (PROP)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "subset?")
                                                                            (("1"
                                                                              (SKEEP)
                                                                              (("1"
                                                                                (INST?)
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (INST?)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "member"
                                                                                       1)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "member"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "intersection"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -3
                                                                                                 -4
                                                                                                 -7
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "antiunify_monotony_solved_equations")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "solve(x!1)"
                                                                               "car(x!1`unsolved)")
                                                                              (("1"
                                                                                (CASE-REPLACE
                                                                                 "antiunify(solve(x!1))=AUconf")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "member_append_r")
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   2
                                                                                   4)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "AUconf")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "solve")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 4)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "solve")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "member"
                                                                                       1)
                                                                                      (("2"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (EXPAND
                                                                                 "SolvedEq_conf?")
                                                                                (("3"
                                                                                  (EXPAND
                                                                                   "SolvedEq?")
                                                                                  (("3"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 3)
                                                  (("2"
                                                    (LEMMA
                                                     "antiunify_monotony_solved_equations")
                                                    (("2"
                                                      (INST -1 "solve(x!1)"
                                                       "car(x!1`unsolved)")
                                                      (("1" (EXPAND "solve")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 2)
                                                        (("2" (EXPAND "solve")
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "member")
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3"
                                                        (EXPAND
                                                         "SolvedEq_conf?")
                                                        (("3"
                                                          (EXPAND "SolvedEq?")
                                                          (("3" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (TYPEPRED "solve(x!1)")
                                                  (("1" (EXPAND "solve")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2"
                                                    (EXPAND "SolvedEq_conf?")
                                                    (("2" (EXPAND "SolvedEq?")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (DECOMPOSE-EQUALITY)
                                (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("5" (EXPAND "normal_configuration?")
            (("5" (HIDE -2)
              (("5" (GRIND)
                (("5" (CASE-REPLACE " ∅[variable] = emptyset")
                  (("1" (REWRITE "intersection_empty") NIL NIL)
                   ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (|term2| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|term1| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|distribute_intersection_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|antiunify_sub_preserves_terms| FORMULA-DECL NIL |antiunif| NIL)
    (|nice_idempotent| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|subs_append2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subs_no_effect_t| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|basic_sub_no_effect| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|validity_Eq_in_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|antiunify_sub_decomposition| FORMULA-DECL NIL |antiunif| NIL)
    (|vars_correct| FORMULA-DECL NIL |first_order_terms_properties| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|invariance_labels_in_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL)
    (|idempotent_disjoint_dom_img| FORMULA-DECL NIL |first_order_substitution|
     NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|union_commutative| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|red_eq_in_cdr| FORMULA-DECL NIL |antiunif| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|red_eq_in_lhs_rhs_equality| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunify_monotony_solved_equations| FORMULA-DECL NIL |antiunif| NIL)
    (|nice_sub_Solved_Eq| FORMULA-DECL NIL |antiunif| NIL)
    (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|)
    (|subset_vars_eq_listEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|list_car_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (∅ CONST-DECL "set" |sets| NIL)
    (|intersection_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_lbls_preserves_vars_unsolved| 0
  (|antiunify_lbls_preserves_vars_unsolved-1| NIL 3939791175
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (CASE "normal_configuration?(x!1)")
      (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (SKEEP)
        (("2"
          (CASE
              "disjoint?(vars(t), labels(cdr(x!1`unsolved))) AND disjoint?(vars(t), labels(x!1`solved))")
          (("1" (FLATTEN)
            (("1" (LEMMA "img_preservation_basic_subs")
              (("1"
                (INST -1 "label(car(x!1`unsolved))" "_" "x!1`substitution" "t")
                (("1" (ASSERT)
                  (("1" (CASE "NOT member(label(car(x!1`unsolved)), vars(t))")
                    (("1" (ASSERT)
                      (("1" (LEMMA "antiunify_derivability")
                        (("1" (INST?)
                          (("1" (ASSERT)
                            (("1" (EXPAND "normal_configuration?")
                              (("1" (EXPAND "antiunify" 3)
                                (("1" (LIFT-IF)
                                  (("1" (ASSERT)
                                    (("1" (SPLIT)
                                      (("1" (ASSERT)
                                        (("1" (INST -5 "decomposeFuns(x!1)")
                                          (("1" (INST -5 "t")
                                            (("1" (ASSERT)
                                              (("1" (HIDE 4)
                                                (("1" (SPLIT)
                                                  (("1" (EXPAND "member")
                                                    (("1"
                                                      (EXPAND "decomposeFuns")
                                                      (("1"
                                                        (INST -2
                                                         "app(sym(car(x!1`unsolved)`lhs),
                    variable(freshLabel(x!1)))")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (EXPAND "decomposeFuns")
                                                    (("2" (EXPAND "makeEq")
                                                      (("2" (EXPAND "append" 1)
                                                        (("2"
                                                          (EXPAND "labels" 1)
                                                          (("2"
                                                            (REWRITE
                                                             "add_as_union")
                                                            (("2"
                                                              (REWRITE
                                                               "append_labels_is_union_labels")
                                                              (("2"
                                                                (EXPAND
                                                                 "disjoint?")
                                                                (("2"
                                                                  (CASE
                                                                      "empty?(intersection(vars(t),singleton(freshLabel(x!1))))")
                                                                  (("1"
                                                                    (HIDE -3)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "empty?")
                                                                      (("1"
                                                                        (SKEEP)
                                                                        (("1"
                                                                          (INST?)
                                                                          (("1"
                                                                            (INST?)
                                                                            (("1"
                                                                              (INST?)
                                                                              (("1"
                                                                                (INST?)
                                                                                (("1"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE -2 -3
                                                                     -4 -6 2)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "freshness_subs")
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "member")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "union")
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "vars_correct")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (SKEEP)
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "x"
                                                                                       "img(x!1`substitution)"
                                                                                       "t")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "member")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "intersection")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "member")
                                                                                              (("2"
                                                                                                (FLATTEN)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "singleton")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2"
                                        (LEMMA "matchingPairs_classification")
                                        (("2" (INST?)
                                          (("2"
                                            (EXPAND "normal_configuration?")
                                            (("2" (ASSERT)
                                              (("2"
                                                (INST -5 "decomposePairs(x!1)")
                                                (("2" (INST -5 "t")
                                                  (("2" (ASSERT)
                                                    (("2" (HIDE 5)
                                                      (("2" (SPLIT)
                                                        (("1"
                                                          (EXPAND
                                                           "decomposePairs")
                                                          (("1"
                                                            (INST -2
                                                             " pair(variable(freshLabel(x!1)),
                            variable(freshLabel(union(vars(x!1),
                                                      singleton(freshLabel(x!1))))))")
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (HIDE -2)
                                                          (("2"
                                                            (EXPAND
                                                             "decomposePairs")
                                                            (("2"
                                                              (EXPAND "makeEq")
                                                              (("2"
                                                                (EXPAND
                                                                 "append" 1)
                                                                (("2"
                                                                  (EXPAND
                                                                   "labels" 1)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "append"
                                                                     1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "labels"
                                                                       1)
                                                                      (("2"
                                                                        (REWRITE*
                                                                         "add_as_union")
                                                                        (("2"
                                                                          (REWRITE
                                                                           "append_labels_is_union_labels")
                                                                          (("2"
                                                                            (CASE
                                                                                "empty?(intersection(vars(t),singleton(freshLabel(union(vars(x!1),
                                                       singleton(freshLabel(x!1))))))) AND empty?(intersection(vars(t), singleton(freshLabel(x!1))))")
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "disjoint?")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "empty?")
                                                                                  (("1"
                                                                                    (SKEEP)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "x")
                                                                                      (("1"
                                                                                        (INST?)
                                                                                        (("1"
                                                                                          (INST?)
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -4)
                                                                                              (("1"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               2)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -2
                                                                                 -3
                                                                                 -5)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "vars_correct")
                                                                                    (("2"
                                                                                      (SPLIT)
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "freshness_subs_ext")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "x!1"
                                                                                           "singleton(freshLabel(x!1))")
                                                                                          (("1"
                                                                                            (SKEEP)
                                                                                            (("1"
                                                                                              (INST
                                                                                               -2
                                                                                               "x"
                                                                                               "img(x!1`substitution)"
                                                                                               "t")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "intersection")
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "union"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (FLATTEN)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "singleton"
                                                                                                               -2
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "member")
                                                                                                                  (("1"
                                                                                                                    (GRIND)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (SKEEP)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -2
                                                                                           "x"
                                                                                           "img(x!1`substitution)"
                                                                                           "t")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "member")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "intersection")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "member")
                                                                                                (("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "singleton")
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "freshness_subs")
                                                                                                        (("2"
                                                                                                          (INST?)
                                                                                                          (("2"
                                                                                                            (GRIND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3"
                                        (LEMMA
                                         "syntacticallyEq_classification")
                                        (("3" (INST?)
                                          (("3"
                                            (EXPAND "normal_configuration?")
                                            (("3" (PROP)
                                              (("3"
                                                (INST -6 "trivialSyn_Eqs(x!1)")
                                                (("3" (INST -6 "t")
                                                  (("3" (ASSERT)
                                                    (("3" (HIDE -1 1 2 4)
                                                      (("3"
                                                        (EXPAND
                                                         "trivialSyn_Eqs")
                                                        (("3" (SPLIT)
                                                          (("1"
                                                            (INST -2
                                                             "car(x!1`unsolved)`lhs")
                                                            NIL NIL)
                                                           ("2" (HIDE -2 -6)
                                                            (("2"
                                                              (REWRITE
                                                               "append_labels_is_union_labels")
                                                              (("2"
                                                                (EXPAND
                                                                 "disjoint?")
                                                                (("2"
                                                                  (EXPAND
                                                                   "empty?")
                                                                  (("2" (SKEEP)
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("4" (LEMMA "SolvedEq_classification")
                                        (("4" (INST?)
                                          (("4"
                                            (EXPAND "normal_configuration?")
                                            (("4" (PROP)
                                              (("4" (HIDE 1 3 4)
                                                (("4" (INST -5 "solve(x!1)")
                                                  (("4" (INST -5 "t")
                                                    (("4" (ASSERT)
                                                      (("4" (HIDE 1)
                                                        (("4" (EXPAND "solve")
                                                          (("4"
                                                            (CASE
                                                                "eq_repeated_in?(car(x!1`unsolved), x!1`solved)")
                                                            (("1" (ASSERT)
                                                              (("1" (SPLIT)
                                                                (("1"
                                                                  (INST -3
                                                                   "variable(red_eq_in(cons(car(x!1`unsolved),
                                               x!1`solved))`label)")
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-4 -5 1 6))
                                                                  (("2"
                                                                    (EXPAND
                                                                     "disjoint?")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "empty?")
                                                                      (("2"
                                                                        (SKEEP)
                                                                        (("2"
                                                                          (INST?)
                                                                          (("2"
                                                                            (INST?)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "append_labels_is_union_labels")
                                                                              (("2"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (HIDE-ALL-BUT
                                                                 (-6 6 7))
                                                                (("2"
                                                                  (REWRITE*
                                                                   "append_labels_is_union_labels")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "labels"
                                                                     -1 1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "labels"
                                                                       2 2)
                                                                      (("2"
                                                                        (REWRITE*
                                                                         "add_as_union")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "empty?")
                                                                            (("2"
                                                                              (SKEEP)
                                                                              (("2"
                                                                                (INST?)
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-1 -7 1))
                      (("2" (EXPAND "normal_configuration?")
                        (("2" (EXPAND "append")
                          (("2" (ASSERT)
                            (("2" (EXPAND "labels")
                              (("2" (REWRITE "add_as_union")
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE -1 -2 3)
            (("2" (EXPAND "append")
              (("2" (EXPAND "normal_configuration?")
                (("2" (ASSERT)
                  (("2" (EXPAND "labels" -1)
                    (("2" (REWRITE "add_as_union")
                      (("2" (REWRITE "append_labels_is_union_labels")
                        (("2" (EXPAND "disjoint?")
                          (("2" (EXPAND "empty?")
                            (("2" (SPLIT)
                              (("1" (SKEEP)
                                (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (SKEEP)
                                (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE-ALL-BUT (1 2)) (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|img_preservation_basic_subs| FORMULA-DECL NIL |first_order_substitution|
     NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|freshness_subs| FORMULA-DECL NIL |antiunif| NIL)
    (|vars_correct| FORMULA-DECL NIL |first_order_terms_properties| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|freshness_subs_ext| FORMULA-DECL NIL |antiunif| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_union2| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_solved_labels_preserve_vars_unsolved| 0
  (|antiunify_solved_labels_preserve_vars_unsolved-1| NIL 3939698013
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (LEMMA "antiunify_derivability")
      (("" (INST?)
        (("" (EXPAND "normal_configuration?")
          (("" (CASE "null?(x!1`unsolved)")
            (("1" (HIDE -2 -3)
              (("1" (GRIND)
                (("1" (CASE-REPLACE " ∅[variable] = emptyset")
                  (("1" (REWRITE "intersection_empty") NIL NIL)
                   ("2" (DECOMPOSE-EQUALITY) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2"
                (CASE "matchingFuns_conf?(x!1) OR
       matchingPairs_conf?(x!1)")
                (("1" (HIDE -2)
                  (("1"
                    (CASE
                        "(matchingFuns_conf?(x!1) =>  vars(x!1`unsolved) = vars(decomposeFuns(x!1)`unsolved)) AND
             (matchingPairs_conf?(x!1) =>  vars(x!1`unsolved) = vars(decomposePairs(x!1)`unsolved))")
                    (("1" (REWRITE "matchingPairs_classification")
                      (("1" (ASSERT)
                        (("1" (INST -3 "decomposePairs(x!1)")
                          (("1" (ASSERT)
                            (("1" (EXPAND "antiunify" 2)
                              (("1" (REWRITE "matchingPairs_classification")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (EXPAND "normal_configuration?")
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (INST -3 "decomposeFuns(x!1)")
                          (("2" (ASSERT)
                            (("2" (EXPAND "antiunify" 3)
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (EXPAND "normal_configuration?")
                        (("3" (PROPAX) NIL NIL)) NIL))
                      NIL)
                     ("2" (HIDE -2 3)
                      (("2" (EXPAND "decomposeFuns")
                        (("2" (EXPAND "decomposePairs")
                          (("2" (EXPAND "makeEq")
                            (("2" (EXPAND "vars" 1 (2 4))
                              (("2" (EXPAND "vars" 1 (2 4 5))
                                (("2" (EXPAND "vars" 1 9)
                                  (("2" (EXPAND "vars" 1 9)
                                    (("2" (EXPAND "vars" 1 1)
                                      (("2"
                                        (LEMMA "matchingPairs_classification")
                                        (("2" (INST?)
                                          (("2"
                                            (EXPAND "normal_configuration?")
                                            (("2" (PROP)
                                              (("1" (HIDE -2 2)
                                                (("1"
                                                  (EXPAND
                                                   "matchingPairs_conf?")
                                                  (("1"
                                                    (EXPAND "matchingPairs?")
                                                    (("1"
                                                      (EXPAND "matchingPairs?")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY)
                                                          (("1" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (HIDE -1 2)
                                                (("2"
                                                  (EXPAND "matchingFuns_conf?")
                                                  (("2"
                                                    (EXPAND "matchingFuns?")
                                                    (("2"
                                                      (EXPAND "matchingFuns?")
                                                      (("2" (FLATTEN)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROP)
                  (("1" (LEMMA "syntacticallyEq_classification")
                    (("1" (INST?)
                      (("1" (EXPAND "normal_configuration?")
                        (("1" (EXPAND "antiunify" 4)
                          (("1" (ASSERT)
                            (("1" (HIDE -1)
                              (("1" (INST -2 "trivialSyn_Eqs(x!1)")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "trivialSyn_Eqs" -2 2)
                                    (("1" (EXPAND "vars" 4)
                                      (("1"
                                        (CASE-REPLACE
                                         "vars(car(x!1`unsolved)) ∪ vars(cdr(x!1`unsolved)) = union(vars(car(x!1`unsolved)),vars(cdr(x!1`unsolved)))")
                                        (("1"
                                          (REWRITE
                                           "distribute_intersection_union")
                                          (("1" (REPLACES -3)
                                            (("1" (REWRITE "union_empty")
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA
                                                   "antiunify_lbls_preserves_vars_unsolved")
                                                  (("1"
                                                    (INST -1
                                                     "trivialSyn_Eqs(x!1)"
                                                     "car(x!1`unsolved)`lhs")
                                                    (("1" (PROP)
                                                      (("1"
                                                        (EXPAND "disjoint?")
                                                        (("1"
                                                          (REWRITE
                                                           "emptyset_is_empty?"
                                                           :DIR RL)
                                                          (("1"
                                                            (EXPAND "vars" 4)
                                                            (("1"
                                                              (EXPAND
                                                               "syntacticallyEq_conf?")
                                                              (("1"
                                                                (EXPAND
                                                                 "syntacticallyEq?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "syntacticallyEq?")
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (REPLACES
                                                                       -2)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "empty?")
                                                                        (("1"
                                                                          (SKEEP)
                                                                          (("1"
                                                                            (INST?)
                                                                            (("1"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (HIDE 5)
                                                        (("2" (EXPAND "member")
                                                          (("2" (EXPAND "img")
                                                            (("2"
                                                              (EXPAND
                                                               "trivialSyn_Eqs")
                                                              (("2"
                                                                (INST 1
                                                                 "car(x!1`unsolved)`label")
                                                                (("2"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "dom")
                                                                    (("2"
                                                                      (CASE
                                                                          " subs(cons((car(x!1`unsolved)`label, car(x!1`unsolved)`lhs),
                 x!1`substitution))
           (car(x!1`unsolved)`label)
        = car(x!1`unsolved)`lhs")
                                                                      (("1"
                                                                        (REPLACES
                                                                         -1)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "x!1")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "validConfiguration?")
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -2
                                                                                 -3
                                                                                 -4)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "validity_Eq_in_ValidEqs")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "append(x!1`unsolved, x!1`solved)"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "validEquation?")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "member")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "append")
                                                                                            (("1"
                                                                                              (HIDE
                                                                                               -1)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "vars"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REPLACES
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "vars"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE
                                                                         2)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "subs")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "subs")
                                                                            (("2"
                                                                              (CASE-REPLACE
                                                                               "subs(x!1`substitution)(variable(car(x!1`unsolved)`label)) = variable(car(x!1`unsolved)`label)")
                                                                              (("1"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "subs"
                                                                                   1)
                                                                                  (("1"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "invariance_labels_in_validConf")
                                                                                  (("2"
                                                                                    (INST?)
                                                                                    (("2"
                                                                                      (BETA)
                                                                                      (("2"
                                                                                        (INST
                                                                                         -1
                                                                                         "car(x!1`unsolved)`label")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "append")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "labels")
                                                                                            (("2"
                                                                                              (REWRITE
                                                                                               "add_as_union")
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("3" (HIDE 5)
                                                        (("3"
                                                          (EXPAND
                                                           "trivialSyn_Eqs")
                                                          (("3"
                                                            (TYPEPRED "x!1")
                                                            (("3"
                                                              (EXPAND
                                                               "validConfiguration?")
                                                              (("3" (FLATTEN)
                                                                (("3"
                                                                  (HIDE -2 -3
                                                                   -4)
                                                                  (("3"
                                                                    (EXPAND
                                                                     "validEqs?")
                                                                    (("3"
                                                                      (FLATTEN)
                                                                      (("3"
                                                                        (HIDE
                                                                         -2)
                                                                        (("3"
                                                                          (EXPAND
                                                                           "append"
                                                                           -1)
                                                                          (("3"
                                                                            (EXPAND
                                                                             "vars"
                                                                             -1)
                                                                            (("3"
                                                                              (EXPAND
                                                                               "labels"
                                                                               -1)
                                                                              (("3"
                                                                                (EXPAND
                                                                                 "vars"
                                                                                 -1
                                                                                 1)
                                                                                (("3"
                                                                                  (REWRITE
                                                                                   "add_as_union")
                                                                                  (("3"
                                                                                    (EXPAND
                                                                                     "disjoint?")
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "empty?")
                                                                                      (("3"
                                                                                        (SKEEP)
                                                                                        (("3"
                                                                                          (INST?)
                                                                                          (("3"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (DECOMPOSE-EQUALITY)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "antiunify" 4)
                    (("2" (LEMMA "SolvedEq_classification")
                      (("2" (INST?)
                        (("2" (EXPAND "normal_configuration?")
                          (("2" (ASSERT)
                            (("2"
                              (CASE
                                  "EXISTS(red_eq :AUEquation) : member(red_eq,solve(x!1)`solved) AND  repeated_eq?(red_eq, car(x!1`unsolved))")
                              (("1" (SKEEP)
                                (("1" (INST -4 "solve(x!1)")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "solve" -4 2)
                                      (("1" (LIFT-IF)
                                        (("1" (EXPAND "vars" 5)
                                          (("1"
                                            (CASE-REPLACE
                                             "vars(car(x!1`unsolved)) ∪ vars(cdr(x!1`unsolved)) = union(vars(car(x!1`unsolved)),vars(cdr(x!1`unsolved)))")
                                            (("1"
                                              (REWRITE
                                               "distribute_intersection_union")
                                              (("1" (REPLACES -5)
                                                (("1" (REWRITE " union_empty")
                                                  (("1" (HIDE -1)
                                                    (("1"
                                                      (LEMMA
                                                       "antiunify_monotony_solved_equations")
                                                      (("1" (INST?)
                                                        (("1" (INST?)
                                                          (("1" (HIDE -2)
                                                            (("1"
                                                              (TYPEPRED
                                                               "antiunify(solve(x!1))")
                                                              (("1"
                                                                (EXPAND
                                                                 "validConfiguration?")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (HIDE -2 -3
                                                                     -4)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "validEqs?")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (HIDE
                                                                           -2)
                                                                          (("1"
                                                                            (CASE
                                                                                "empty?(intersection(vars(antiunify(solve(x!1))`solved),
              labels(antiunify(solve(x!1))`solved)))")
                                                                            (("1"
                                                                              (HIDE
                                                                               -2)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "subset_vars_eq_listEqs")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (CASE-REPLACE
                                                                                       "vars(car(x!1`unsolved)) = vars(red_eq)")
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "emptyset_is_empty?"
                                                                                         :DIR
                                                                                         RL)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "empty?")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "subset?")
                                                                                            (("1"
                                                                                              (SKEEP)
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (INST?)
                                                                                                  (("1"
                                                                                                    (PROP)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "member"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "intersection"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "member"
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "intersection")
                                                                                                              (("1"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "member"
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "intersection")
                                                                                                        (("2"
                                                                                                          (FLATTEN)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         (-4
                                                                                          1
                                                                                          5))
                                                                                        (("2"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (REWRITE
                                                                               "vars_in_append_List_eq")
                                                                              (("2"
                                                                                (REWRITE
                                                                                 "append_labels_is_union_labels")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "empty?")
                                                                                  (("2"
                                                                                    (SKEEP)
                                                                                    (("2"
                                                                                      (INST?)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -2
                                                                                         6)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "member")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "intersection")
                                                                                            (("2"
                                                                                              (FLATTEN)
                                                                                              (("2"
                                                                                                (CASE
                                                                                                    "union(vars(antiunify(solve(x!1))`unsolved),
             vars(antiunify(solve(x!1))`solved))(x) AND union(labels(antiunify(solve(x!1))`unsolved),
              labels(antiunify(solve(x!1))`solved))(x)")
                                                                                                (("1"
                                                                                                  (FLATTEN)
                                                                                                  (("1"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (-1
                                                                                                      -2
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       " ∩")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "∈")
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "union")
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DECOMPOSE-EQUALITY)
                                              (("2" (HIDE-ALL-BUT (1 5))
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE -2)
                                (("2" (HIDE 6)
                                  (("2" (EXPAND "solve")
                                    (("2"
                                      (CASE
                                          "eq_repeated_in?(car(x!1`unsolved), x!1`solved)")
                                      (("1"
                                        (CASE
                                            "first_eq_repeated?(cons(car(x!1`unsolved), x!1`solved))")
                                        (("1" (LEMMA "red_eq_in_cdr")
                                          (("1"
                                            (INST -1
                                             "cons(car(x!1`unsolved), x!1`solved)")
                                            (("1"
                                              (INST 1
                                               "red_eq_in(cons(car(x!1`unsolved), x!1`solved))")
                                              (("1" (REWRITE "list_cdr_cons")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (LEMMA
                                                     "red_eq_in_lhs_rhs_equality")
                                                    (("1" (INST?)
                                                      (("1"
                                                        (REWRITE
                                                         "list_car_cons")
                                                        (("1"
                                                          (EXPAND
                                                           "repeated_eq?")
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "first_eq_repeated?")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (INST 2 " car(x!1`unsolved)")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "member")
                                            (("2" (EXPAND "repeated_eq?")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|distribute_intersection_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|union_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|antiunify_lbls_preserves_vars_unsolved| FORMULA-DECL NIL |antiunif| NIL)
    (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|validity_Eq_in_ValidEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|invariance_labels_in_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|repeated_eq?| CONST-DECL "bool" |antiunif| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|antiunify_monotony_solved_equations| FORMULA-DECL NIL |antiunif| NIL)
    (|vars_in_append_List_eq| FORMULA-DECL NIL |antiunif| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_vars_eq_listEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|red_eq_in_cdr| FORMULA-DECL NIL |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|list_car_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|red_eq_in_lhs_rhs_equality| FORMULA-DECL NIL |antiunif| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|term2| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|term1| ADT-ACCESSOR-DECL "[(pair?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (∪ CONST-DECL "set" |sets| NIL) (∈ CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|arg| ADT-ACCESSOR-DECL "[(app?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (∅ CONST-DECL "set" |sets| NIL)
    (|intersection_empty| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|antiunify_solved_substitution_TCC1| 0
  (|antiunify_solved_substitution_TCC1-2| NIL 3939436804
   ("" (SKEEP)
    (("" (TYPEPRED "antiunify(c)")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN)
          (("" (LEMMA "validity_append_valid_Eqs")
            (("" (INST -1 "antiunify(c)`unsolved" "antiunify(c)`solved")
              (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL))
   NIL
   (|antiunify_solved_substitution| SUBTYPE
    "antiunif.antiunify(antiunif.c)`solved" "(antiunif.validEqs?)"))
  (|antiunify_solved_substitution_TCC1-1| NIL 3938596466
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|antiunify_solved_substitution| SUBTYPE
    "antiunif.antiunify(antiunif.c)`solved" "(antiunif.validEqs?)")))
 (|antiunify_solved_substitution| 0
  (|antiunify_solved_substitution-1| NIL 3939446052
   ("" (LEMMA "images_of_build_subs_left_right")
    (("" (SKEEP)
      (("" (INST -1 "antiunify(c)`solved" "eq")
        (("" (ASSERT)
          (("" (SPLIT -1)
            (("1" (PROPAX) NIL NIL)
             ("2" (HIDE 2)
              (("2" (REWRITE "antiunify_monotony_solved_equations") NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| DEF-DECL "bool" |list_props| NIL)
    (|antiunify_monotony_solved_equations| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|images_of_build_subs_left_right| FORMULA-DECL NIL |antiunif| NIL))
   SHOSTAK))
 (|antiunif_is_sound_TCC1| 0
  (|antiunif_is_sound_TCC1-2| NIL 3939436869
   ("" (SKEEP)
    (("" (TYPEPRED "antiunify(ci)")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN)
          (("" (LEMMA "validity_append_valid_Eqs")
            (("" (INST -1 "antiunify(ci)`unsolved" "antiunify(ci)`solved")
              (("" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL))
   NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.cf`solved" "(antiunif.validEqs?)"))
  (|antiunif_is_sound_TCC1-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.cf`solved" "(antiunif.validEqs?)")))
 (|antiunif_is_sound_TCC2| 0
  (|antiunif_is_sound_TCC2-2| NIL 3939436904
   ("" (SKEEP)
    (("" (TYPEPRED "ci")
      (("" (EXPAND "validConfiguration?")
        (("" (FLATTEN)
          (("" (LEMMA "validity_append_valid_Eqs")
            (("" (INST -1 "ci`unsolved" "ci`solved") (("" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL))
   NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.ci`unsolved" "(antiunif.validEqs?)"))
  (|antiunif_is_sound_TCC2-1| NIL 3937537223 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.ci`unsolved"
    "(antiunif.validEqs?)")))
 (|antiunif_is_sound_TCC3| 0
  (|antiunif_is_sound_TCC3-2| NIL 3939436966
   ("" (SKEEP)
    (("" (LEMMA "nice_subs_left")
      (("" (INST -1 "cf`solved") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nice_subs_left| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL))
   NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.rho_l"
    "(first_order_substitution.nice?)"))
  (|antiunif_is_sound_TCC3-1| NIL 3939118920 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.rho_l"
    "(first_order_substitution.nice?)")))
 (|antiunif_is_sound_TCC4| 0
  (|antiunif_is_sound_TCC4-2| NIL 3939437002
   ("" (SKEEP)
    (("" (LEMMA "nice_subs_right")
      (("" (INST -1 "cf`solved") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|nice_subs_right| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL))
   NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.rho_r"
    "(first_order_substitution.nice?)"))
  (|antiunif_is_sound_TCC4-1| NIL 3939118920 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|antiunif_is_sound| SUBTYPE "antiunif.rho_r"
    "(first_order_substitution.nice?)")))
 (|antiunif_is_sound| 0
  (|antiunif_is_sound-1| NIL 3937368889
   ("" (MEASURE-INDUCT+ "size(ci`unsolved)" ("ci"))
    (("1" (CASE "normal_configuration?(x!1)")
      (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (LEMMA "antiunify_sub_decomposition")
        (("2" (LEMMA "antiunify_derivability")
          (("2" (INST?)
            (("2" (ASSERT)
              (("2" (EXPAND "antiunify" 2)
                (("2" (EXPAND "normal_configuration?")
                  (("2" (ASSERT)
                    (("2" (LIFT-IF)
                      (("2" (SPLIT -1)
                        (("1" (ASSERT)
                          (("1" (INST -3 "decomposeFuns(x!1)")
                            (("1" (PROP)
                              (("1" (EXPAND "generalizer?" 2)
                                (("1" (SKEEP)
                                  (("1" (EXPAND "generalizer?" -1)
                                    (("1" (CASE "eq = car(x!1`unsolved)")
                                      (("1"
                                        (INST -2
                                         "car(decomposeFuns(x!1)`unsolved)")
                                        (("1" (PROP)
                                          (("1" (EXPAND "generalizer?")
                                            (("1"
                                              (INST -4 "decomposeFuns(x!1)")
                                              (("1" (SKEEP)
                                                (("1" (REPLACES -5)
                                                  (("1"
                                                    (EXPAND "decomposeFuns" -1
                                                            (3 4))
                                                    (("1"
                                                      (EXPAND "decomposeFuns"
                                                              -2 (3 4))
                                                      (("1" (EXPAND "makeEq")
                                                        (("1"
                                                          (EXPAND "subs" -1)
                                                          (("1"
                                                            (EXPAND "subs" -2)
                                                            (("1"
                                                              (EXPAND "subs" 2)
                                                              (("1"
                                                                (REWRITE*
                                                                 "subs_append2")
                                                                (("1"
                                                                  (LEMMA
                                                                   "invariance_labels_in_validConf")
                                                                  (("1"
                                                                    (INST -1
                                                                     "decomposeFuns(x!1)")
                                                                    (("1"
                                                                      (BETA)
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "(car(decomposeFuns(x!1)`unsolved))`label")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "decomposeFuns"
                                                                           -1
                                                                           (2
                                                                            3))
                                                                          (("1"
                                                                            (EXPAND
                                                                             "makeEq")
                                                                            (("1"
                                                                              (REPLACES
                                                                               -1)
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "decomposeFuns(x!1)")
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -8
                                                                                   -4
                                                                                   RL)
                                                                                  (("1"
                                                                                    (REPLACES
                                                                                     -4)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "decomposeFuns"
                                                                                       2
                                                                                       (2
                                                                                        4))
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "makeEq")
                                                                                        (("1"
                                                                                          (REWRITE*
                                                                                           "subs_app")
                                                                                          (("1"
                                                                                            (REPLACES
                                                                                             -5)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -5)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (DECOMPOSE-EQUALITY
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (-6
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (-6
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (DECOMPOSE-EQUALITY
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (-6
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (-6
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           " append"
                                                                           1)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "labels"
                                                                             1)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "member_add_reduce[variable]")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "labels(append(cdr(decomposeFuns(x!1)`unsolved),
                        decomposeFuns(x!1)`solved))"
                                                                                 "car(decomposeFuns(x!1)`unsolved)`label"
                                                                                 " car(decomposeFuns(x!1)`unsolved)`label")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "member")
                                                                                  (("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "member")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (TYPEPRED "decomposeFuns(x!1)")
                                          (("2"
                                            (REWRITE
                                             "validity_car_conf_unsolved")
                                            NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (INST -1 "eq")
                                        (("2" (PROP)
                                          (("2" (HIDE 4)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (TYPEPRED "decomposeFuns(x!1)")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (LEMMA "matchingPairs_classification")
                            (("2" (INST?)
                              (("2" (EXPAND "normal_configuration?")
                                (("2" (ASSERT)
                                  (("2" (INST -3 "decomposePairs(x!1)")
                                    (("2" (PROP)
                                      (("1" (EXPAND "generalizer?")
                                        (("1" (SKEEP)
                                          (("1" (CASE "eq = car(x!1`unsolved)")
                                            (("1"
                                              (INST-CP -2
                                               "car( decomposePairs(x!1)`unsolved)")
                                              (("1"
                                                (INST -2
                                                 "car(cdr(decomposePairs(x!1)`unsolved))")
                                                (("1" (PROP)
                                                  (("1"
                                                    (INST -5
                                                     "decomposePairs(x!1)")
                                                    (("1" (SKEEP)
                                                      (("1" (REPLACES -5)
                                                        (("1"
                                                          (EXPAND
                                                           "generalizer?")
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "subs"
                                                                      -1)
                                                              (("1"
                                                                (EXPAND "subs"
                                                                        -2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "subs" -3)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "subs" -4)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "subs"
                                                                       3)
                                                                      (("1"
                                                                        (REWRITE*
                                                                         "subs_append2")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "decomposePairs"
                                                                           -1
                                                                           3)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "decomposePairs"
                                                                             -2
                                                                             3)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "decomposePairs"
                                                                               -3
                                                                               3)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "decomposePairs"
                                                                                 -4
                                                                                 3)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "makeEq")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "invariance_labels_in_validConf")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "decomposePairs(x!1)")
                                                                                      (("1"
                                                                                        (BETA)
                                                                                        (("1"
                                                                                          (INST-CP
                                                                                           -1
                                                                                           "freshLabel(x!1)")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "freshLabel(union(vars(x!1),
                                               singleton(freshLabel(x!1))))")
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              (("1"
                                                                                                (REPLACES
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (TYPEPRED
                                                                                                   "decomposePairs(x!1)")
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -11
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (REPLACES
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (REWRITE*
                                                                                                         "subs_pair")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "decomposePairs"
                                                                                                           3
                                                                                                           (2
                                                                                                            4
                                                                                                            6
                                                                                                            8))
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "makeEq")
                                                                                                            (("1"
                                                                                                              (REPLACES
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (REPLACES
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (REPLACES
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (REPLACES
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (SPLIT)
                                                                                                                      (("1"
                                                                                                                        (DECOMPOSE-EQUALITY)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "decomposePairs"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "makeEq")
                                                                                                                            (("1"
                                                                                                                              (PROPAX)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (EXPAND
                                                                                                                           "decomposePairs"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "makeEq")
                                                                                                                            (("2"
                                                                                                                              (PROPAX)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("3"
                                                                                                                          (HIDE-ALL-BUT
                                                                                                                           (-7
                                                                                                                            1))
                                                                                                                          (("3"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (DECOMPOSE-EQUALITY)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "decomposePairs"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "makeEq")
                                                                                                                            (("1"
                                                                                                                              (PROPAX)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (EXPAND
                                                                                                                           "decomposePairs"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "makeEq")
                                                                                                                            (("2"
                                                                                                                              (PROPAX)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("3"
                                                                                                                          (HIDE-ALL-BUT
                                                                                                                           (-7
                                                                                                                            1))
                                                                                                                          (("3"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-7
                                                                                                1
                                                                                                3))
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "append")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "labels")
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "append")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "labels")
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "member_add_reduce[variable]")
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "add_as_union")
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "union(labels(append[AUEquation]
                           (cdr(cdr(decomposePairs(x!1)`unsolved)),
                            decomposePairs(x!1)`solved)),
                singleton(car(cdr(decomposePairs(x!1)`unsolved))`label))"
                                                                                                             "freshLabel(union[variable]
                         (vars(x!1), singleton[variable](freshLabel(x!1))))"
                                                                                                             "car(decomposePairs(x!1)`unsolved)`label")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (IFF)
                                                                                                                (("2"
                                                                                                                  (FLATTEN)
                                                                                                                  (("2"
                                                                                                                    (ASSERT)
                                                                                                                    (("2"
                                                                                                                      (PROP)
                                                                                                                      (("2"
                                                                                                                        (HIDE-ALL-BUT
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "union")
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "member")
                                                                                                                            (("2"
                                                                                                                              (FLATTEN)
                                                                                                                              (("2"
                                                                                                                                (HIDE
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "decomposePairs")
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "makeEq")
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "singleton")
                                                                                                                                      (("2"
                                                                                                                                        (ASSERT)
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "union")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "member")
                                                                                                                                            (("2"
                                                                                                                                              (PROPAX)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE-ALL-BUT
                                                                                             (-6
                                                                                              1
                                                                                              3))
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "append")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "labels")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "decomposePairs"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "makeEq")
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "member_add_reduce[variable]")
                                                                                                      (("2"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "labels(append[AUEquation]
                     (cdr(decomposePairs(x!1)`unsolved),
                      decomposePairs(x!1)`solved))"
                                                                                                         "freshLabel(x!1)"
                                                                                                         "freshLabel(x!1)")
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "member")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("3" (EXPAND "member")
                                                    (("3" (EXPAND "member")
                                                      (("3" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("4" (EXPAND "member")
                                                    (("4" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (LEMMA
                                                   "validity_cdr_conf_unsolved")
                                                  (("2"
                                                    (HIDE-ALL-BUT (-1 -4 1 3))
                                                    (("2"
                                                      (INST -1
                                                       "decomposePairs(x!1)"
                                                       "car[AUEquation]
                         (cdr[AUEquation](decomposePairs(x!1)`unsolved))")
                                                      (("2" (ASSERT)
                                                        (("2" (EXPAND "member")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (LEMMA
                                                 "validity_car_conf_unsolved ")
                                                (("2"
                                                  (HIDE-ALL-BUT (-1 -3 1 3))
                                                  (("2"
                                                    (INST -1
                                                     "decomposePairs(x!1)")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST -1 "eq")
                                              (("2" (PROP)
                                                (("2" (HIDE -2 3 5)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "decomposePairs(x!1)")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (ASSERT)
                          (("3" (LEMMA "syntacticallyEq_classification")
                            (("3" (INST?)
                              (("3" (EXPAND "normal_configuration?")
                                (("3" (PROP)
                                  (("3" (HIDE 1 3 4 5)
                                    (("3" (INST -3 "trivialSyn_Eqs(x!1)")
                                      (("3"
                                        (CASE
                                            "normal_configuration?(trivialSyn_Eqs(x!1))")
                                        (("1" (EXPAND "normal_configuration?")
                                          (("1" (HIDE -3 -4)
                                            (("1" (EXPAND "antiunify" 1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "generalizer?")
                                                  (("1" (SKEEP)
                                                    (("1"
                                                      (EXPAND "generalizer?")
                                                      (("1"
                                                        (TYPEPRED
                                                         "trivialSyn_Eqs(x!1)")
                                                        (("1" (EXPAND "member")
                                                          (("1" (SPLIT -5)
                                                            (("1"
                                                              (EXPAND "subs" 1)
                                                              (("1"
                                                                (REWRITE*
                                                                 "subs_append2")
                                                                (("1"
                                                                  (EXPAND
                                                                   "syntacticallyEq_conf?")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "syntacticallyEq?")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "syntacticallyEq?")
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -6
                                                                             1
                                                                             RL)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "syntEq_inter_vars_unsolv_labels_solv")
                                                                              (("1"
                                                                                (INST?)
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -4)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "domain_subs_left")
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "domain_subs_right")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "trivialSyn_Eqs(x!1)`solved")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -2
                                                                                           "trivialSyn_Eqs(x!1)`solved")
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "subs_no_effect_t")
                                                                                            (("1"
                                                                                              (INST-CP
                                                                                               -1
                                                                                               "build_subs_left(trivialSyn_Eqs(x!1)`solved)"
                                                                                               "car(x!1`unsolved)`lhs")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "build_subs_right(trivialSyn_Eqs(x!1)`solved)"
                                                                                                 "car(x!1`unsolved)`lhs")
                                                                                                (("1"
                                                                                                  (SPLIT
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (SPLIT
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE-ALL-BUT
                                                                                                       (-3
                                                                                                        -4
                                                                                                        1
                                                                                                        5))
                                                                                                      (("2"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (-2
                                                                                                      -4
                                                                                                      1
                                                                                                      5))
                                                                                                    (("2"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "validConfiguration?")
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-4
                                                                                                -8
                                                                                                1
                                                                                                5))
                                                                                              (("2"
                                                                                                (LEMMA
                                                                                                 "validity_append_valid_Eqs")
                                                                                                (("2"
                                                                                                  (INST?)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE-ALL-BUT
                                                                   (-2 -5 1 3))
                                                                  (("2"
                                                                    (EXPAND
                                                                     "validConfiguration?")
                                                                    (("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "validity_append_valid_Eqs")
                                                                        (("2"
                                                                          (INST?)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3"
                                                                  (HIDE-ALL-BUT
                                                                   (-2 -5 1 3))
                                                                  (("3"
                                                                    (EXPAND
                                                                     "validConfiguration?")
                                                                    (("3"
                                                                      (FLATTEN)
                                                                      (("3"
                                                                        (LEMMA
                                                                         "validity_append_valid_Eqs")
                                                                        (("3"
                                                                          (INST?)
                                                                          (("3"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (HIDE -2 -3 -4 1)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "normal_configuration?")
                                          (("2" (PROP)
                                            (("1"
                                              (INST -3 "trivialSyn_Eqs(x!1)")
                                              (("1" (SKEEP)
                                                (("1" (REPLACES -3)
                                                  (("1" (EXPAND "generalizer?")
                                                    (("1" (SKEEP)
                                                      (("1"
                                                        (CASE
                                                            "eq = car(x!1`unsolved)")
                                                        (("1" (HIDE -2)
                                                          (("1"
                                                            (EXPAND
                                                             "generalizer?")
                                                            (("1"
                                                              (EXPAND "subs" 2)
                                                              (("1"
                                                                (REWRITE*
                                                                 "subs_append2")
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "trivialSyn_Eqs(x!1)")
                                                                  (("1"
                                                                    (REPLACE -4
                                                                             2)
                                                                    (("1"
                                                                      (REPLACES
                                                                       -2)
                                                                      (("1"
                                                                        (CASE-REPLACE
                                                                         "subs(theta)(car(x!1`unsolved)`lhs) = car(x!1`unsolved)`lhs")
                                                                        (("1"
                                                                          (SPLIT)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "domain_subs_left")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "antiunify(trivialSyn_Eqs(x!1))`solved")
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "antiunify(trivialSyn_Eqs(x!1))")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "validConfiguration?")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "antiunify_solved_labels_preserve_vars_unsolved")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "antiunify"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "syntacticallyEq_classification")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "normal_configuration?")
                                                                                                (("1"
                                                                                                  (FLATTEN)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "domain_subs_left")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "antiunify(x!1)`solved")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "antiunify"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "subs_no_effect_t")
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "build_subs_left(antiunify(trivialSyn_Eqs(x!1))`solved)"
                                                                                                               "car(x!1`unsolved)`lhs")
                                                                                                              (("1"
                                                                                                                (PROP)
                                                                                                                (("1"
                                                                                                                  (HIDE-ALL-BUT
                                                                                                                   (-1
                                                                                                                    -2
                                                                                                                    1
                                                                                                                    5
                                                                                                                    6))
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "disjoint?")
                                                                                                                    (("1"
                                                                                                                      (CASE
                                                                                                                          "subset?(vars(car(x!1`unsolved)`lhs),vars(x!1`unsolved))")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "empty?")
                                                                                                                        (("1"
                                                                                                                          (SKEEP)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "member")
                                                                                                                            (("1"
                                                                                                                              (REWRITE
                                                                                                                               "emptyset_is_empty?"
                                                                                                                               :DIR
                                                                                                                               RL)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "empty?")
                                                                                                                                (("1"
                                                                                                                                  (INST?)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (EXPAND
                                                                                                                                       "subset?")
                                                                                                                                      (("1"
                                                                                                                                        (INST?)
                                                                                                                                        (("1"
                                                                                                                                          (INST?)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "member")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "intersection")
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "member")
                                                                                                                                                (("1"
                                                                                                                                                  (GRIND)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (HIDE
                                                                                                                         -
                                                                                                                         2
                                                                                                                         3)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "subset?")
                                                                                                                          (("2"
                                                                                                                            (SKEEP)
                                                                                                                            (("2"
                                                                                                                              (EXPAND
                                                                                                                               "vars"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (GRIND)
                                                                                                                                NIL
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (TYPEPRED
                                                                                                           "antiunify(x!1)")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "validConfiguration?")
                                                                                                            (("2"
                                                                                                              (LEMMA
                                                                                                               "validity_append_valid_Eqs")
                                                                                                              (("2"
                                                                                                                (INST?)
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (LEMMA
                                                                             "antiunify_solved_labels_preserve_vars_unsolved")
                                                                            (("2"
                                                                              (INST
                                                                               -1
                                                                               "x!1")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "antiunify"
                                                                                 -1)
                                                                                (("2"
                                                                                  (REVEAL
                                                                                   (1
                                                                                    2))
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "domain_subs_right")
                                                                                      (("2"
                                                                                        (INST?)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "subs_no_effect_t")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "build_subs_right(antiunify(trivialSyn_Eqs(x!1))`solved)"
                                                                                             "car(x!1`unsolved)`lhs")
                                                                                            (("2"
                                                                                              (PROP)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "syntacticallyEq_conf?")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "syntacticallyEq?")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "syntacticallyEq?")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (HIDE-ALL-BUT
                                                                                                 (-1
                                                                                                  -2
                                                                                                  1
                                                                                                  6))
                                                                                                (("2"
                                                                                                  (CASE
                                                                                                      "subset?(vars(car(x!1`unsolved)`lhs),vars(x!1`unsolved))")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "disjoint?")
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "empty?")
                                                                                                      (("1"
                                                                                                        (SKEEP)
                                                                                                        (("1"
                                                                                                          (REWRITE
                                                                                                           "emptyset_is_empty?"
                                                                                                           :DIR
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "empty?")
                                                                                                            (("1"
                                                                                                              (INST?)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "subset?")
                                                                                                                (("1"
                                                                                                                  (INST?)
                                                                                                                  (("1"
                                                                                                                    (INST?)
                                                                                                                    (("1"
                                                                                                                      (GRIND)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     (1
                                                                                                      3))
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "vars"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "vars"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           3)
                                                                          (("2"
                                                                            (REVEAL
                                                                             (-3))
                                                                            (("2"
                                                                              (LEMMA
                                                                               " antiunify_dom_sub_preserves_vars_unsolved")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "antiunify"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (REVEAL
                                                                                     (2
                                                                                      3))
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "subs_no_effect_t")
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "antiunify(trivialSyn_Eqs(x!1))`substitution"
                                                                                           "car(x!1`unsolved)`lhs")
                                                                                          (("2"
                                                                                            (PROP)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -3
                                                                                               -1)
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "subs_append2")
                                                                                                (("1"
                                                                                                  (CASE
                                                                                                      "subs(trivialSyn_Eqs(x!1)`substitution)(car(x!1`unsolved)`lhs) = car(x!1`unsolved)`lhs")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "trivialSyn_Eqs"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "subs"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (LEMMA
                                                                                                         "subs_no_effect_t")
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "x!1`substitution"
                                                                                                           "car(x!1`unsolved)`lhs")
                                                                                                          (("2"
                                                                                                            (PROP)
                                                                                                            (("1"
                                                                                                              (REPLACES)
                                                                                                              (("1"
                                                                                                                (REWRITE
                                                                                                                 "basic_sub_no_effect")
                                                                                                                (("1"
                                                                                                                  (HIDE-ALL-BUT
                                                                                                                   (-1
                                                                                                                    6))
                                                                                                                  (("1"
                                                                                                                    (TYPEPRED
                                                                                                                     "x!1")
                                                                                                                    (("1"
                                                                                                                      (EXPAND
                                                                                                                       "validConfiguration?")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "validEqs?")
                                                                                                                        (("1"
                                                                                                                          (FLATTEN)
                                                                                                                          (("1"
                                                                                                                            (HIDE
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -4
                                                                                                                             -5)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "append")
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "vars"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "vars"
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "labels")
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "add_as_union")
                                                                                                                                      (("1"
                                                                                                                                        (GRIND)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (HIDE-ALL-BUT
                                                                                                               (1
                                                                                                                7))
                                                                                                              (("2"
                                                                                                                (TYPEPRED
                                                                                                                 "x!1")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "validConfiguration?")
                                                                                                                  (("2"
                                                                                                                    (FLATTEN)
                                                                                                                    (("2"
                                                                                                                      (HIDE
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3)
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "append")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "vars"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "vars"
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (LEMMA
                                                                                                                               "supset_dom_correct2")
                                                                                                                              (("2"
                                                                                                                                (INST?)
                                                                                                                                (("2"
                                                                                                                                  (GRIND)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-1
                                                                                                1
                                                                                                6))
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "emptyset_is_empty?"
                                                                                                 :DIR
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "vars"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "vars"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "disjoint?")
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "empty?")
                                                                                                          (("2"
                                                                                                            (SKEEP)
                                                                                                            (("2"
                                                                                                              (INST?)
                                                                                                              (("2"
                                                                                                                (GRIND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (TYPEPRED
                                                                   "antiunify(trivialSyn_Eqs(x!1))")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "validConfiguration?")
                                                                    (("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "validity_append_valid_Eqs")
                                                                        (("2"
                                                                          (INST?)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3"
                                                                  (TYPEPRED
                                                                   "antiunify(trivialSyn_Eqs(x!1))")
                                                                  (("3"
                                                                    (EXPAND
                                                                     "validConfiguration?")
                                                                    (("3"
                                                                      (FLATTEN)
                                                                      (("3"
                                                                        (LEMMA
                                                                         "validity_append_valid_Eqs")
                                                                        (("3"
                                                                          (INST?)
                                                                          (("3"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (INST -1 "eq")
                                                          (("2" (ASSERT)
                                                            (("2" (HIDE 4)
                                                              (("2"
                                                                (EXPAND
                                                                 "trivialSyn_Eqs"
                                                                 2)
                                                                (("2" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (TYPEPRED "trivialSyn_Eqs(x!1)")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (LEMMA "SolvedEq_classification")
                          (("4" (INST?)
                            (("4" (EXPAND "normal_configuration?")
                              (("4" (ASSERT)
                                (("4" (FLATTEN)
                                  (("4" (ASSERT)
                                    (("4" (INST -3 "solve(x!1)")
                                      (("4" (ASSERT)
                                        (("4" (EXPAND "generalizer?")
                                          (("4" (SKEEP)
                                            (("4"
                                              (CASE "eq = car(x!1`unsolved)")
                                              (("1" (HIDE -4)
                                                (("1" (INST -3 "solve(x!1)")
                                                  (("1" (SKEEP)
                                                    (("1"
                                                      (EXPAND "generalizer?")
                                                      (("1" (REPLACE -3 5)
                                                        (("1"
                                                          (EXPAND "solve" 5
                                                                  (2 4))
                                                          (("1" (LIFT-IF)
                                                            (("1"
                                                              (CASE
                                                                  "eq_repeated_in?(car(x!1`unsolved), x!1`solved)")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND
                                                                   "subs")
                                                                  (("1"
                                                                    (REWRITE
                                                                     "subs_append2")
                                                                    (("1"
                                                                      (LEMMA
                                                                       "subs_append2")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         " append(theta,
                          cons((car(x!1`unsolved)`label,
                                variable(red_eq_in(cons(car(x!1`unsolved),
                                                        x!1`solved))`label)),
                               x!1`substitution))"
                                                                         "build_subs_right(antiunify(solve(x!1))`solved)"
                                                                         "variable(eq`label)")
                                                                        (("1"
                                                                          (REPLACES
                                                                           -1)
                                                                          (("1"
                                                                            (CASE
                                                                                "subs(append(theta,
                       cons((car(x!1`unsolved)`label,
                             variable(red_eq_in(cons(car(x!1`unsolved),
                                                     x!1`solved))`label)),
                            x!1`substitution)))
               (variable(eq`label))  =  variable(red_eq_in(cons(car(x!1`unsolved),
                                                     x!1`solved))`label)")
                                                                            (("1"
                                                                              (REPLACES
                                                                               -1)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "antiunify_solved_substitution")
                                                                                (("1"
                                                                                  (INST
                                                                                   -1
                                                                                   "x!1"
                                                                                   "red_eq_in(cons(car(x!1`unsolved), x!1`solved))")
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (BETA)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "subs"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "antiunify"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              (("1"
                                                                                                (REPLACES
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "red_eq_in_lhs_rhs_equality")
                                                                                                  (("1"
                                                                                                    (INST?)
                                                                                                    (("1"
                                                                                                      (REWRITE*
                                                                                                       "list_car_cons[AUEquation]")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        (("1"
                                                                                                          (FLATTEN)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (EXPAND
                                                                                                       "first_eq_repeated?")
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (LEMMA
                                                                                       "red_eq_in_cdr")
                                                                                      (("2"
                                                                                        (INST?)
                                                                                        (("2"
                                                                                          (REWRITE
                                                                                           "list_cdr_cons[AUEquation]")
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "first_eq_repeated?")
                                                                                    (("2"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               6)
                                                                              (("2"
                                                                                (REWRITE*
                                                                                 "subs_append2")
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "subs_no_effect_t_var")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "car(x!1`unsolved)`label"
                                                                                     " x!1`substitution"
                                                                                     "variable(red_eq_in(cons(car(x!1`unsolved),
                                              x!1`solved))`label)")
                                                                                    (("2"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -3
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "subs"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACES
                                                                                             -1)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "antiunify_sub_preserves_terms")
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -1
                                                                                                 "solve(x!1)"
                                                                                                 "variable(red_eq_in(cons(car(x!1`unsolved), x!1`solved))`label)")
                                                                                                (("1"
                                                                                                  (PROP)
                                                                                                  (("1"
                                                                                                    (REPLACE
                                                                                                     -5
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "subs_append2")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "solve"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (CASE-REPLACE
                                                                                                           "subs(cons((car(x!1`unsolved)`label,
                      variable(red_eq_in(cons(car(x!1`unsolved),
                                              x!1`solved))`label)),
                     x!1`substitution))
               (variable(red_eq_in(cons(car(x!1`unsolved),
                                        x!1`solved))`label)) = variable(red_eq_in(cons(car(x!1`unsolved), x!1`solved))`label)")
                                                                                                          (("1"
                                                                                                            (HIDE
                                                                                                             -1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "subs")
                                                                                                              (("1"
                                                                                                                (CASE-REPLACE
                                                                                                                 "subs(x!1`substitution)
               (variable(red_eq_in(cons(car(x!1`unsolved),
                                        x!1`solved))`label)) = variable(red_eq_in(cons(car(x!1`unsolved),
                                        x!1`solved))`label)")
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "basic_sub_no_effect")
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "car(x!1`unsolved)`label"
                                                                                                                     "variable(red_eq_in(cons(car(x!1`unsolved),
                                    x!1`solved))`label)"
                                                                                                                     "variable(red_eq_in(cons(car(x!1`unsolved),
                                    x!1`solved))`label)")
                                                                                                                    (("1"
                                                                                                                      (PROP)
                                                                                                                      (("1"
                                                                                                                        (HIDE
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (TYPEPRED
                                                                                                                           "x!1")
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "validConfiguration?")
                                                                                                                            (("1"
                                                                                                                              (FLATTEN)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "member")
                                                                                                                                (("1"
                                                                                                                                  (EXPAND
                                                                                                                                   "vars"
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "singleton")
                                                                                                                                    (("1"
                                                                                                                                      (LEMMA
                                                                                                                                       "disjoint_valid_append_validEqs")
                                                                                                                                      (("1"
                                                                                                                                        (INST?)
                                                                                                                                        (("1"
                                                                                                                                          (ASSERT)
                                                                                                                                          (("1"
                                                                                                                                            (LEMMA
                                                                                                                                             "red_eq_in_cdr")
                                                                                                                                            (("1"
                                                                                                                                              (INST
                                                                                                                                               -1
                                                                                                                                               "cons(car(x!1`unsolved), x!1`solved)")
                                                                                                                                              (("1"
                                                                                                                                                (REWRITE
                                                                                                                                                 "list_cdr_cons[AUEquation]")
                                                                                                                                                (("1"
                                                                                                                                                  (HIDE-ALL-BUT
                                                                                                                                                   (-1
                                                                                                                                                    -2
                                                                                                                                                    -7
                                                                                                                                                    4))
                                                                                                                                                  (("1"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "disjoint?")
                                                                                                                                                    (("1"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "empty?")
                                                                                                                                                      (("1"
                                                                                                                                                        (INST
                                                                                                                                                         -2
                                                                                                                                                         "car(x!1`unsolved)`label")
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "intersection")
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "member"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "labels"
                                                                                                                                                               1
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (REWRITE
                                                                                                                                                                 "add_as_union")
                                                                                                                                                                (("1"
                                                                                                                                                                  (EXPAND
                                                                                                                                                                   "union")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "member"
                                                                                                                                                                     1
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (EXPAND
                                                                                                                                                                       "singleton")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (LEMMA
                                                                                                                                                                         "eq_member_eq_label_in_labels")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (INST
                                                                                                                                                                           -1
                                                                                                                                                                           "x!1`solved"
                                                                                                                                                                           "red_eq_in(cons(car(x!1`unsolved), x!1`solved))")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (ASSERT)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (EXPAND
                                                                                                                                                                               "member")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (GRIND)
                                                                                                                                                                                NIL
                                                                                                                                                                                NIL))
                                                                                                                                                                              NIL))
                                                                                                                                                                            NIL))
                                                                                                                                                                          NIL))
                                                                                                                                                                        NIL))
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (LEMMA
                                                                                                                   "red_eq_in_cdr")
                                                                                                                  (("2"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "cons(car(x!1`unsolved), x!1`solved)")
                                                                                                                    (("2"
                                                                                                                      (REWRITE
                                                                                                                       "list_cdr_cons")
                                                                                                                      (("2"
                                                                                                                        (LEMMA
                                                                                                                         "eq_member_eq_label_in_labels")
                                                                                                                        (("2"
                                                                                                                          (INST
                                                                                                                           -1
                                                                                                                           "x!1`solved"
                                                                                                                           "red_eq_in(cons(car(x!1`unsolved), x!1`solved))")
                                                                                                                          (("2"
                                                                                                                            (ASSERT)
                                                                                                                            (("2"
                                                                                                                              (LEMMA
                                                                                                                               "invariance_labels_in_validConf")
                                                                                                                              (("2"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (BETA)
                                                                                                                                  (("2"
                                                                                                                                    (INST?)
                                                                                                                                    (("2"
                                                                                                                                      (LEMMA
                                                                                                                                       " append_labels_is_union_labels")
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -1
                                                                                                                                         "x!1`unsolved"
                                                                                                                                         "x!1`solved")
                                                                                                                                        (("2"
                                                                                                                                          (REPLACES
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                             (-1
                                                                                                                                              1))
                                                                                                                                            (("2"
                                                                                                                                              (GRIND)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE
                                                                                                     -4
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "solve")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "member"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "img")
                                                                                                          (("2"
                                                                                                            (INST
                                                                                                             1
                                                                                                             "car(x!1`unsolved)`label")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "member"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "dom")
                                                                                                                (("2"
                                                                                                                  (CASE-REPLACE
                                                                                                                   "subs(cons((car(x!1`unsolved)`label,
                  variable(red_eq_in(cons(car(x!1`unsolved),
                                          x!1`solved))`label)),
                 x!1`substitution))
           (car(x!1`unsolved)`label)
        = variable(red_eq_in(cons(car(x!1`unsolved), x!1`solved))`label)")
                                                                                                                  (("1"
                                                                                                                    (LEMMA
                                                                                                                     "disjoint_labels_unsolved_solved")
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       -1
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (LEMMA
                                                                                                                         "red_eq_in_cdr")
                                                                                                                        (("1"
                                                                                                                          (INST
                                                                                                                           -1
                                                                                                                           "cons(car(x!1`unsolved), x!1`solved)")
                                                                                                                          (("1"
                                                                                                                            (REWRITE
                                                                                                                             "list_cdr_cons")
                                                                                                                            (("1"
                                                                                                                              (HIDE-ALL-BUT
                                                                                                                               (-1
                                                                                                                                -2
                                                                                                                                1
                                                                                                                                5))
                                                                                                                              (("1"
                                                                                                                                (LEMMA
                                                                                                                                 "eq_member_eq_label_in_labels")
                                                                                                                                (("1"
                                                                                                                                  (INST?)
                                                                                                                                  (("1"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("1"
                                                                                                                                      (CASE
                                                                                                                                          "member(car(x!1`unsolved)`label, labels(x!1`unsolved))")
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "disjoint?")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "empty?")
                                                                                                                                          (("1"
                                                                                                                                            (INST
                                                                                                                                             -4
                                                                                                                                             "car(x!1`unsolved)`label")
                                                                                                                                            (("1"
                                                                                                                                              (PROP)
                                                                                                                                              (("1"
                                                                                                                                                (EXPAND
                                                                                                                                                 "member"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "intersection")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (DECOMPOSE-EQUALITY
                                                                                                                                                       -4)
                                                                                                                                                      (("1"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "labels"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (REWRITE
                                                                                                                                           "add_as_union")
                                                                                                                                          (("2"
                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                             (1
                                                                                                                                              3))
                                                                                                                                            (("2"
                                                                                                                                              (GRIND)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (HIDE
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "subs"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "subs")
                                                                                                                        (("2"
                                                                                                                          (LEMMA
                                                                                                                           "invariance_labels_in_validConf")
                                                                                                                          (("2"
                                                                                                                            (INST?)
                                                                                                                            (("2"
                                                                                                                              (BETA)
                                                                                                                              (("2"
                                                                                                                                (INST?)
                                                                                                                                (("1"
                                                                                                                                  (REPLACES
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (EXPAND
                                                                                                                                     "subs")
                                                                                                                                    (("1"
                                                                                                                                      (PROPAX)
                                                                                                                                      NIL
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL)
                                                                                                                                 ("2"
                                                                                                                                  (HIDE
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "append")
                                                                                                                                    (("2"
                                                                                                                                      (EXPAND
                                                                                                                                       "labels")
                                                                                                                                      (("2"
                                                                                                                                        (REWRITE
                                                                                                                                         "add_as_union")
                                                                                                                                        (("2"
                                                                                                                                          (HIDE-ALL-BUT
                                                                                                                                           (1
                                                                                                                                            5))
                                                                                                                                          (("2"
                                                                                                                                            (GRIND)
                                                                                                                                            NIL
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("3"
                                                                                                    (HIDE
                                                                                                     -4
                                                                                                     2)
                                                                                                    (("3"
                                                                                                      (EXPAND
                                                                                                       "vars")
                                                                                                      (("3"
                                                                                                        (LEMMA
                                                                                                         "red_eq_in_cdr")
                                                                                                        (("3"
                                                                                                          (LEMMA
                                                                                                           "eq_member_eq_label_in_labels")
                                                                                                          (("3"
                                                                                                            (INST
                                                                                                             -2
                                                                                                             "cons(car(x!1`unsolved),
                                                   x!1`solved)")
                                                                                                            (("3"
                                                                                                              (REWRITE
                                                                                                               "list_cdr_cons")
                                                                                                              (("3"
                                                                                                                (INST?)
                                                                                                                (("3"
                                                                                                                  (ASSERT)
                                                                                                                  (("3"
                                                                                                                    (EXPAND
                                                                                                                     "empty?")
                                                                                                                    (("3"
                                                                                                                      (SKEEP)
                                                                                                                      (("3"
                                                                                                                        (EXPAND
                                                                                                                         "member"
                                                                                                                         -3)
                                                                                                                        (("3"
                                                                                                                          (EXPAND
                                                                                                                           "intersection")
                                                                                                                          (("3"
                                                                                                                            (EXPAND
                                                                                                                             "member"
                                                                                                                             -3)
                                                                                                                            (("3"
                                                                                                                              (FLATTEN)
                                                                                                                              (("3"
                                                                                                                                (EXPAND
                                                                                                                                 "singleton")
                                                                                                                                (("3"
                                                                                                                                  (HIDE
                                                                                                                                   -2)
                                                                                                                                  (("3"
                                                                                                                                    (REPLACE
                                                                                                                                     -2
                                                                                                                                     -1
                                                                                                                                     RL)
                                                                                                                                    (("3"
                                                                                                                                      (LEMMA
                                                                                                                                       "disjoint_labels_unsolved_solved")
                                                                                                                                      (("3"
                                                                                                                                        (INST?)
                                                                                                                                        (("3"
                                                                                                                                          (EXPAND
                                                                                                                                           "solve"
                                                                                                                                           -1
                                                                                                                                           2)
                                                                                                                                          (("3"
                                                                                                                                            (HIDE-ALL-BUT
                                                                                                                                             (-1
                                                                                                                                              -2
                                                                                                                                              -4
                                                                                                                                              -5
                                                                                                                                              4))
                                                                                                                                            (("3"
                                                                                                                                              (EXPAND
                                                                                                                                               "disjoint?")
                                                                                                                                              (("3"
                                                                                                                                                (EXPAND
                                                                                                                                                 "empty?")
                                                                                                                                                (("3"
                                                                                                                                                  (INST
                                                                                                                                                   -1
                                                                                                                                                   "x")
                                                                                                                                                  (("3"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "member")
                                                                                                                                                    (("3"
                                                                                                                                                      (EXPAND
                                                                                                                                                       "intersection")
                                                                                                                                                      (("3"
                                                                                                                                                        (ASSERT)
                                                                                                                                                        (("3"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "member")
                                                                                                                                                          (("3"
                                                                                                                                                            (PROPAX)
                                                                                                                                                            NIL
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (LEMMA
                                                                                         "car_lbl_fresh_dom")
                                                                                        (("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("3"
                                                                              (EXPAND
                                                                               "first_eq_repeated?")
                                                                              (("3"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (TYPEPRED
                                                                           "antiunify(solve(x!1))")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "validConfiguration?")
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (HIDE-ALL-BUT
                                                                                 (-1
                                                                                  1))
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "validity_append_valid_Eqs")
                                                                                  (("2"
                                                                                    (INST?)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (EXPAND
                                                                           "first_eq_repeated?")
                                                                          (("3"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (TYPEPRED
                                                                       "antiunify(solve(x!1))")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "validConfiguration?")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (HIDE-ALL-BUT
                                                                             (-1
                                                                              1))
                                                                            (("2"
                                                                              (LEMMA
                                                                               "validity_append_valid_Eqs")
                                                                              (("2"
                                                                                (INST?)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (EXPAND
                                                                       "first_eq_repeated?")
                                                                      (("3"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "solve" -3
                                                                   2)
                                                                  (("2"
                                                                    (REPLACE -3
                                                                             6
                                                                             RL)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "subs")
                                                                      (("2"
                                                                        (REWRITE*
                                                                         "subs_append2")
                                                                        (("1"
                                                                          (CASE-REPLACE
                                                                           "subs(antiunify(solve(x!1))`substitution)(variable(eq`label)) = variable(eq`label)")
                                                                          (("1"
                                                                            (LEMMA
                                                                             "antiunify_solved_substitution")
                                                                            (("1"
                                                                              (CASE
                                                                                  "eq = car(solve(x!1)`solved)")
                                                                              (("1"
                                                                                (INST
                                                                                 -2
                                                                                 "solve(x!1)"
                                                                                 "eq")
                                                                                (("1"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (BETA)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "subs"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     -2
                                                                                     -5
                                                                                     7)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "solve"
                                                                                       1)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "member"
                                                                                         1)
                                                                                        (("2"
                                                                                          (PROPAX)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (EXPAND
                                                                                 "solve"
                                                                                 1)
                                                                                (("2"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (EXPAND
                                                                                 "solve"
                                                                                 1)
                                                                                (("3"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             7)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "antiunify_domain_disjoint_sol_labels")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "solve(x!1)")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "solve"
                                                                                   -1
                                                                                   2)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "subs_no_effect_t")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "antiunify(solve(x!1))`substitution"
                                                                                       "variable(eq`label)")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "labels"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "add_as_union")
                                                                                            (("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               (-1
                                                                                                -2
                                                                                                1
                                                                                                7))
                                                                                              (("2"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (TYPEPRED
                                                                           "antiunify(solve(x!1))")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "validConfiguration?")
                                                                            (("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (HIDE
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5
                                                                                 -7
                                                                                 -8
                                                                                 7)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "validity_append_valid_Eqs")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "antiunify(solve(x!1))`unsolved"
                                                                                     "antiunify(solve(x!1))`solved")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (TYPEPRED
                                                                           "antiunify(solve(x!1))")
                                                                          (("3"
                                                                            (EXPAND
                                                                             "validConfiguration?")
                                                                            (("3"
                                                                              (FLATTEN)
                                                                              (("3"
                                                                                (HIDE
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -7
                                                                                 7)
                                                                                (("3"
                                                                                  (LEMMA
                                                                                   "validity_append_valid_Eqs")
                                                                                  (("3"
                                                                                    (INST
                                                                                     -1
                                                                                     "antiunify(solve(x!1))`unsolved"
                                                                                     "antiunify(solve(x!1))`solved")
                                                                                    (("3"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST -3 "eq")
                                                (("2"
                                                  (CASE
                                                      "null?(cdr(x!1`unsolved))")
                                                  (("1"
                                                    (HIDE-ALL-BUT (-1 -5 1))
                                                    (("1" (GRIND) NIL NIL))
                                                    NIL)
                                                   ("2" (PROP)
                                                    (("2"
                                                      (HIDE-ALL-BUT
                                                       (-3 1 2 3 7))
                                                      (("2" (EXPAND "solve")
                                                        (("2" (LIFT-IF)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2" (LEMMA "nice_subs_right")
        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("3" (HIDE 2)
      (("3" (LEMMA "nice_subs_left")
        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("4" (TYPEPRED "ci!1")
      (("4" (EXPAND "validConfiguration?")
        (("4" (FLATTEN)
          (("4" (HIDE-ALL-BUT (-1 1))
            (("4" (LEMMA "validity_append_valid_Eqs")
              (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE-ALL-BUT 1)
      (("5" (TYPEPRED "cf!1")
        (("5" (EXPAND "validConfiguration?")
          (("5" (FLATTEN)
            (("5" (HIDE-ALL-BUT (-1 1))
              (("5" (LEMMA "validity_append_valid_Eqs")
                (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (HIDE-ALL-BUT 1)
      (("6" (TYPEPRED "cf!1")
        (("6" (EXPAND "validConfiguration?")
          (("6" (FLATTEN)
            (("6" (HIDE-ALL-BUT (-1 1))
              (("6" (LEMMA "validity_append_valid_Eqs")
                (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nice_subs_left| FORMULA-DECL NIL |antiunif| NIL)
    (|nice_subs_right| FORMULA-DECL NIL |antiunif| NIL)
    (|normal_configuration?| CONST-DECL "bool" |antiunif| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|antiunify_derivability| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|SolvedEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|solve| CONST-DECL
     "{cp: (validConfiguration?) | size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|eq_repeated_in?| DEF-DECL "bool" |antiunif| NIL)
    (|subs_no_effect_t_var| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|antiunify_sub_preserves_terms| FORMULA-DECL NIL |antiunif| NIL)
    (|append_labels_is_union_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|disjoint_valid_append_validEqs| FORMULA-DECL NIL |antiunif| NIL)
    (|repeated_eq?| CONST-DECL "bool" |antiunif| NIL)
    (|eq_member_eq_label_in_labels| FORMULA-DECL NIL |antiunif| NIL)
    (V ADT-ACCESSOR-DECL "[(var?) -> variable]" |first_order_term_adt| NIL)
    (|disjoint_labels_unsolved_solved| FORMULA-DECL NIL |antiunif| NIL)
    (|car_lbl_fresh_dom| FORMULA-DECL NIL |antiunif| NIL)
    (|red_eq_in_cdr| FORMULA-DECL NIL |antiunif| NIL)
    (|list_cdr_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|red_eq_in_lhs_rhs_equality| FORMULA-DECL NIL |antiunif| NIL)
    (|list_car_cons| FORMULA-DECL NIL |list_adt| NIL)
    (|antiunify_solved_substitution| FORMULA-DECL NIL |antiunif| NIL)
    (|red_eq_in| DEF-DECL "AUEquation" |antiunif| NIL)
    (|first_eq_repeated?| CONST-DECL "bool" |antiunif| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|antiunify_domain_disjoint_sol_labels| FORMULA-DECL NIL |antiunif| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|syntacticallyEq_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|trivialSyn_Eqs| CONST-DECL "{cp: (validConfiguration?) |
   subs(cp`substitution)(variable(car(c`unsolved)`label)) =
    car(c`unsolved)`lhs
    AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|antiunify_dom_sub_preserves_vars_unsolved| FORMULA-DECL NIL |antiunif|
     NIL)
    (|supset_dom_correct2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (∩ CONST-DECL "set" |sets| NIL)
    (|basic_sub_no_effect| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|antiunify_solved_labels_preserve_vars_unsolved| FORMULA-DECL NIL
     |antiunif| NIL)
    (|emptyset_is_empty?| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|syntEq_inter_vars_unsolv_labels_solv| FORMULA-DECL NIL |antiunif| NIL)
    (|domain_subs_right| FORMULA-DECL NIL |antiunif| NIL)
    (|validity_append_valid_Eqs| FORMULA-DECL NIL |antiunif| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subs_no_effect_t| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|domain_subs_left| FORMULA-DECL NIL |antiunif| NIL)
    (|syntacticallyEq_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|validity_cdr_conf_unsolved| FORMULA-DECL NIL |antiunif| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|first_order_term_pair_extensionality| FORMULA-DECL NIL
     |first_order_term_adt| NIL)
    (|subs_pair| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|decomposePairs| CONST-DECL "{cp: (validConfiguration?) |
        cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
    AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
    AND (subs(cp`substitution)(variable(car(c`unsolved)`label)) =
          pair(variable(car(cp`unsolved)`label),
               variable(car(cdr(cp`unsolved))`label)))
    AND (size(cp`unsolved) < size(c`unsolved))}"
     |antiunif| NIL)
    (|pair| ADT-CONSTRUCTOR-DECL
     "[[first_order_term, first_order_term] -> (pair?)]" |first_order_term_adt|
     NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|matchingPairs_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingPairs_classification| FORMULA-DECL NIL |antiunif| NIL)
    (|validEquation?| CONST-DECL "bool" |antiunif| NIL)
    (|validity_car_conf_unsolved| FORMULA-DECL NIL |antiunif| NIL)
    (|invariance_labels_in_validConf| FORMULA-DECL NIL |antiunif| NIL)
    (|member_add_reduce| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subs_app| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|first_order_term_app_extensionality| FORMULA-DECL NIL
     |first_order_term_adt| NIL)
    (|arg| ADT-ACCESSOR-DECL "[(app?) -> first_order_term]"
     |first_order_term_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs_append2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|makeEq| CONST-DECL "AUEquation" |antiunif| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL) (∪ CONST-DECL "set" |sets| NIL)
    (∈ CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|vars| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|decomposeFuns| CONST-DECL "{cp: (validConfiguration?) |
   cons?(cp`unsolved) AND
    cdr(c`unsolved) = cdr(cp`unsolved) AND
     subs(cp`substitution)(variable(car(c`unsolved)`label)) =
      app(sym((car(c`unsolved))`lhs), variable(car(cp`unsolved)`label))
      AND size(cp`unsolved) < size(c`unsolved)}"
     |antiunif| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|app| ADT-CONSTRUCTOR-DECL "[[f_symbol, first_order_term] -> (app?)]"
     |first_order_term_adt| NIL)
    (|app?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL)
    (|antiunify_sub_decomposition| FORMULA-DECL NIL |antiunif| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|build_subs_right| DEF-DECL "sub" |antiunif| NIL)
    (|build_subs_left| DEF-DECL "sub" |antiunif| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|antiunify| DEF-DECL "(validConfiguration?)" |antiunif| NIL)
    (|validEqs?| CONST-DECL "bool" |antiunif| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|matchingFuns_generalizer_classification| 0
  (|matchingFuns_generalizer_classification-1| NIL 3940310874
   ("" (SKEEP)
    (("" (BETA)
      (("" (TYPEPRED "c")
        (("" (TYPEPRED "gamma")
          (("" (EXPAND "generalizer?")
            (("" (FLATTEN)
              (("" (SKEEP)
                (("" (INST -3 "car(c`unsolved)")
                  (("1" (FLATTEN)
                    (("1" (HIDE -4)
                      (("1" (EXPAND "subs" -3)
                        (("1" (REWRITE "subs_append2")
                          (("1" (LEMMA "subs_ord")
                            (("1"
                              (INST -1
                               "subs(gamma)(variable(car(c`unsolved)`label))"
                               "tau_l"
                               "subs(tau_l)(subs(gamma)(variable(car(c`unsolved)`label)))")
                              (("1" (EXPAND "subs" 1)
                                (("1" (ASSERT)
                                  (("1" (HIDE -2 -5) (("1" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -1 -3) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|AUEquation| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|Term| NONEMPTY-TYPE-EQ-DECL NIL |antiunif| NIL)
    (|subs_append2| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|var?| ADT-RECOGNIZER-DECL "[first_order_term -> boolean]"
     |first_order_term_adt| NIL)
    (|variable| ADT-CONSTRUCTOR-DECL "[variable -> (var?)]"
     |first_order_term_adt| NIL)
    (|sym| CONST-DECL "string" |first_order_terms_properties| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|ord| CONST-DECL "upto(4)" |first_order_term_adt| NIL)
    (|labels| DEF-DECL "finite_set[variable]" |antiunif| NIL)
    (|subs_ord| FORMULA-DECL NIL |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|matchingFuns_conf?| CONST-DECL "bool" |antiunif| NIL))
   SHOSTAK))
 (|r_generalizer_is_generalizer| 0
  (|r_generalizer_is_generalizer-1| NIL 3940393140
   ("" (SKEEP)
    (("" (TYPEPRED "gamma") (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|r_generalizer?| CONST-DECL "bool" |antiunif| NIL)
    (|validConfiguration?| CONST-DECL "bool" |antiunif| NIL)
    (|Configuration| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|List_eq| TYPE-EQ-DECL NIL |antiunif| NIL)
    (|nice?| DEF-DECL "bool" |first_order_substitution| NIL)
    (|sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|basic_sub| TYPE-EQ-DECL NIL |first_order_substitution| NIL)
    (|constant| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|first_order_term| TYPE-DECL NIL |first_order_term_adt| NIL)
    (|f_symbol| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|variable| TYPE-EQ-DECL NIL |first_order_terms_properties| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|antiunification_j| APPLICATION-JUDGEMENT "(validConfiguration?)"
     |antiunif| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|img| CONST-DECL
     "finite_set[first_order_term[constant, variable, f_symbol]]"
     |first_order_substitution| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|dom| CONST-DECL "finite_set[variable]" |first_order_substitution| NIL)
    (|subs| CONST-DECL "first_order_term" |first_order_substitution| NIL))
   SHOSTAK))
 (|generalizer_is_r_generalizer_TCC1| 0
  (|generalizer_is_r_generalizer_TCC1-1| NIL 3941082920
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|generalizer_is_r_generalizer| SUBTYPE
    "list_props[basic_sub].append(antiunif.rho, antiunif.gamma)"
    "(first_order_substitution.nice?)")))
 (|generalizer_is_r_generalizer| 0
  (|generalizer_is_r_generalizer-1| NIL 3941086710
   ("" (SKEEP)
    (("" (INST 1 "disj_var_renaming(vars(img(gamma)), vars(antiunify(c)))")
      (("" (EXPAND "r_generalizer?")
        (("" (LEMMA "renaming_sub_dom_preservation")
          ((""
            (INST -1 "gamma"
             "disj_var_renaming(vars(img(gamma)), vars(antiunify(c)))")
            (("" (TYPEPRED "gamma")
              (("" (EXPAND "generalizer?" -2)
                (("" (FLATTEN -2)
                  (("" (ASSERT)
                    (("" (SPLIT -4)
                      (("1" (POSTPONE) NIL NIL)
                       ("2" (REWRITE "dis_var_renaming_niceness?") NIL NIL)
                       ("3" (HIDE -4 2) (("3" (POSTPONE) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|antiunify_preserves_lbls_unsolved| 0
  (|antiunify_preserves_lbls_unsolved-1| NIL 3940675731
   ("" (MEASURE-INDUCT "size(c`unsolved)" ("c"))
    (("" (SKEEP)
      (("" (LEMMA "antiunify_derivability")
        (("" (INST?)
          (("" (PROP)
            (("1" (EXPAND "antiunify" 1)
              (("1" (EXPAND "matchingFuns_conf?")
                (("1" (EXPAND "matchingFuns?")
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (INST -3 "decomposeFuns(x)")
                        (("1" (ASSERT)
                          (("1" (EXPAND "decomposeFuns" -3 1)
                            (("1" (EXPAND "makeEq")
                              (("1" (EXPAND "labels" -3)
                                (("1" (EXPAND "labels" 1)
                                  (("1" (REWRITE* "add_as_union")
                                    (("1" (REWRITE* "subset_union")
                                      (("1" (FLATTEN)
                                        (("1" (ASSERT)
                                          (("1" (HIDE -3 -4)
                                            (("1" (EXPAND "subset?")
                                              (("1" (SKEEP)
                                                (("1" (EXPAND "member")
                                                  (("1" (EXPAND "singleton")
                                                    (("1" (REPLACES -3)
                                                      (("1"
                                                        (LEMMA
                                                         "antiunify_sub_decomposition")
                                                        (("1"
                                                          (INST -1
                                                           "decomposeFuns(x)")
                                                          (("1" (SKEEP)
                                                            (("1"
                                                              (EXPAND "vars" 1)
                                                              (("1"
                                                                (CASE
                                                                    "member(car(x`unsolved)`label, supset_dom(antiunify(decomposeFuns(x))`substitution))")
                                                                (("1"
                                                                  (EXPAND
                                                                   "union")
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (HIDE 1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "member")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (REPLACES
                                                                     -1)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "member")
                                                                      (("2"
                                                                        (LEMMA
                                                                         "supset_dom_correct")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "car(x`unsolved)`label"
                                                                           "append(theta, decomposeFuns(x)`substitution)")
                                                                          (("2"
                                                                            (PROP)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "member")
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               1)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "subs")
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "subs_append2")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "decomposeFuns")
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "subs_no_effect_t_var")
                                                                                      (("2"
                                                                                        (INST
                                                                                         -1
                                                                                         "car(x`unsolved)`label"
                                                                                         "x`substitution"
                                                                                         "app(sym(car(x`unsolved)`lhs),
                          variable(freshLabel(x)))")
                                                                                        (("2"
                                                                                          (PROP)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "subs"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -1)
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "subs_app")
                                                                                                (("1"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             -2)
                                                                                            (("2"
                                                                                              (TYPEPRED
                                                                                               "x")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "validConfiguration?")
                                                                                                (("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (HIDE
                                                                                                     -1
                                                                                                     -3
                                                                                                     -4)
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "supset_dom_correct2")
                                                                                                      (("2"
                                                                                                        (INST?)
                                                                                                        (("2"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "antiunify" 1)
              (("2" (EXPAND "matchingPairs_conf?")
                (("2" (EXPAND "matchingPairs?")
                  (("2" (FLATTEN)
                    (("2" (LEMMA "matchingPairs_classification")
                      (("2" (INST?)
                        (("2" (EXPAND "normal_configuration?")
                          (("2" (ASSERT)
                            (("2" (EXPAND "matchingPairs_conf?")
                              (("2" (EXPAND "matchingPairs?" -1)
                                (("2" (ASSERT)
                                  (("2" (INST -3 "decomposePairs(x)")
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "decomposePairs" -3 1)
                                        (("2" (EXPAND "makeEq")
                                          (("2" (EXPAND "labels" -3)
                                            (("2" (EXPAND "labels" -3)
                                              (("2" (EXPAND "labels" 2)
                                                (("2" (REWRITE* "add_as_union")
                                                  (("2"
                                                    (REWRITE* "subset_union")
                                                    (("2" (FLATTEN)
                                                      (("2" (ASSERT)
                                                        (("2" (HIDE -3 -4 -5)
                                                          (("2"
                                                            (EXPAND "subset?")
                                                            (("2" (SKEEP)
                                                              (("2"
                                                                (EXPAND
                                                                 "member")
                                                                (("2"
                                                                  (EXPAND
                                                                   "singleton")
                                                                  (("2"
                                                                    (REPLACES
                                                                     -3)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "antiunify_sub_decomposition")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "decomposePairs(x)")
                                                                        (("2"
                                                                          (SKEEP)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "vars"
                                                                             2)
                                                                            (("2"
                                                                              (CASE
                                                                                  "member(car(x`unsolved)`label, supset_dom(antiunify(decomposePairs(x))`substitution))")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "union")
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     2)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "member")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 3)
                                                                                (("2"
                                                                                  (REPLACES
                                                                                   -1)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "member")
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "supset_dom_correct")
                                                                                      (("2"
                                                                                        (INST
                                                                                         -1
                                                                                         "car(x`unsolved)`label"
                                                                                         "append(theta, decomposePairs(x)`substitution)")
                                                                                        (("2"
                                                                                          (PROP)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "member")
                                                                                            (("1"
                                                                                              (PROPAX)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "subs")
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "subs_append2")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "decomposePairs")
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "subs_no_effect_t_var")
                                                                                                    (("2"
                                                                                                      (INST
                                                                                                       -1
                                                                                                       "car(x`unsolved)`label"
                                                                                                       "x`substitution"
                                                                                                       "pair(variable(freshLabel(x)),
                           variable(freshLabel(union(vars(x),
                                                     singleton(freshLabel(x))))))")
                                                                                                      (("2"
                                                                                                        (PROP)
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "subs"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (REPLACES
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (REWRITE
                                                                                                               "subs_pair")
                                                                                                              (("1"
                                                                                                                (GRIND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (TYPEPRED
                                                                                                             "x")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "validConfiguration?")
                                                                                                              (("2"
                                                                                                                (FLATTEN)
                                                                                                                (("2"
                                                                                                                  (HIDE
                                                                                                                   -1
                                                                                                                   -3
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (LEMMA
                                                                                                                     "supset_dom_correct2")
                                                                                                                    (("2"
                                                                                                                      (INST?)
                                                                                                                      (("2"
                                                                                                                        (GRIND)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "antiunify" 1)
              (("3" (EXPAND "syntacticallyEq_conf?")
                (("3" (EXPAND "syntacticallyEq?")
                  (("3" (FLATTEN)
                    (("3" (LEMMA "syntacticallyEq_classification")
                      (("3" (INST?)
                        (("3" (EXPAND "normal_configuration?")
                          (("3" (ASSERT)
                            (("3" (EXPAND "syntacticallyEq_conf?")
                              (("3" (EXPAND "syntacticallyEq?" -1)
                                (("3" (FLATTEN)
                                  (("3" (ASSERT)
                                    (("3" (INST -3 "trivialSyn_Eqs(x)")
                                      (("3" (ASSERT)
                                        (("3" (EXPAND "trivialSyn_Eqs" -3 1)
                                          (("3" (EXPAND "labels" 3)
                                            (("3" (REWRITE "add_as_union")
                                              (("3" (REWRITE "subset_union")
                                                (("3" (ASSERT)
                                                  (("3" (HIDE -3)
                                                    (("3" (EXPAND "subset?")
                                                      (("3" (SKEEP)
                                                        (("3" (EXPAND "member")
                                                          (("3"
                                                            (EXPAND
                                                             "singleton")
                                                            (("3" (REPLACES -3)
                                                              (("3"
                                                                (LEMMA
                                                                 "antiunify_sub_decomposition")
                                                                (("3"
                                                                  (INST -1
                                                                   "trivialSyn_Eqs(x)")
                                                                  (("3" (SKEEP)
                                                                    (("3"
                                                                      (EXPAND
                                                                       "vars"
                                                                       3)
                                                                      (("3"
                                                                        (CASE
                                                                            "member(car(x`unsolved)`label, supset_dom(antiunify(trivialSyn_Eqs(x))`substitution))")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "union")
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (HIDE
                                                                               3)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE
                                                                           4)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "member")
                                                                            (("2"
                                                                              (LEMMA
                                                                               "supset_dom_correct")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "car(x`unsolved)`label"
                                                                                 "antiunify(trivialSyn_Eqs(x))`substitution")
                                                                                (("2"
                                                                                  (PROP)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "member")
                                                                                    (("1"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (HIDE
                                                                                     1)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "antiunify_sub_preserves_terms")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "trivialSyn_Eqs"
                                                                                         -3
                                                                                         2)
                                                                                        (("2"
                                                                                          (INST
                                                                                           -1
                                                                                           "trivialSyn_Eqs(x)"
                                                                                           "car(x`unsolved)`lhs")
                                                                                          (("2"
                                                                                            (PROP)
                                                                                            (("1"
                                                                                              (REPLACES
                                                                                               -3
                                                                                               -2)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "subs"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "subs_append2")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "subs"
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "invariance_labels_in_validConf")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (BETA)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -1
                                                                                                             "car(x`unsolved)`label")
                                                                                                            (("1"
                                                                                                              (REPLACES
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "subs"
                                                                                                                 -2
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (REVEAL
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (REPLACES
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "subs_append2")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "subs"
                                                                                                                         -1
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "trivialSyn_Eqs")
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "subs"
                                                                                                                             -1
                                                                                                                             4)
                                                                                                                            (("1"
                                                                                                                              (LEMMA
                                                                                                                               "subs_no_effect_t")
                                                                                                                              (("1"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "x`substitution"
                                                                                                                                 "car(x`unsolved)`lhs")
                                                                                                                                (("1"
                                                                                                                                  (PROP)
                                                                                                                                  (("1"
                                                                                                                                    (REPLACES
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (LEMMA
                                                                                                                                       "basic_sub_no_effect")
                                                                                                                                      (("1"
                                                                                                                                        (INST
                                                                                                                                         -1
                                                                                                                                         "car(x`unsolved)`label"
                                                                                                                                         "car(x`unsolved)`lhs"
                                                                                                                                         "car(x`unsolved)`lhs")
                                                                                                                                        (("1"
                                                                                                                                          (PROP)
                                                                                                                                          (("1"
                                                                                                                                            (REPLACES
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (REPLACES
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (TYPEPRED
                                                                                                                                                 "x")
                                                                                                                                                (("1"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "validConfiguration?")
                                                                                                                                                  (("1"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "validEqs?")
                                                                                                                                                    (("1"
                                                                                                                                                      (FLATTEN)
                                                                                                                                                      (("1"
                                                                                                                                                        (HIDE
                                                                                                                                                         -2
                                                                                                                                                         -3
                                                                                                                                                         -4
                                                                                                                                                         -5)
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "append")
                                                                                                                                                          (("1"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "vars")
                                                                                                                                                            (("1"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "vars"
                                                                                                                                                               -1
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "labels")
                                                                                                                                                                (("1"
                                                                                                                                                                  (REPLACE
                                                                                                                                                                   -2
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (EXPAND
                                                                                                                                                                     "vars"
                                                                                                                                                                     -1
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (GRIND)
                                                                                                                                                                      NIL
                                                                                                                                                                      NIL))
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL)
                                                                                                                                           ("2"
                                                                                                                                            (HIDE
                                                                                                                                             -2
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (TYPEPRED
                                                                                                                                               "x")
                                                                                                                                              (("2"
                                                                                                                                                (EXPAND
                                                                                                                                                 "validConfiguration?")
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "validEqs?")
                                                                                                                                                  (("2"
                                                                                                                                                    (FLATTEN)
                                                                                                                                                    (("2"
                                                                                                                                                      (HIDE
                                                                                                                                                       -2
                                                                                                                                                       -3
                                                                                                                                                       -4
                                                                                                                                                       -5)
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "append")
                                                                                                                                                        (("2"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "vars"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (EXPAND
                                                                                                                                                             "vars"
                                                                                                                                                             -1
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (EXPAND
                                                                                                                                                               "labels")
                                                                                                                                                              (("2"
                                                                                                                                                                (GRIND)
                                                                                                                                                                NIL
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL)
                                                                                                                                   ("2"
                                                                                                                                    (HIDE
                                                                                                                                     -1
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (TYPEPRED
                                                                                                                                       "x")
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "validConfiguration?")
                                                                                                                                        (("2"
                                                                                                                                          (FLATTEN)
                                                                                                                                          (("2"
                                                                                                                                            (HIDE
                                                                                                                                             -1
                                                                                                                                             -2
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (LEMMA
                                                                                                                                               "supset_dom_correct2")
                                                                                                                                              (("2"
                                                                                                                                                (INST?)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "disjoint?")
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "empty?")
                                                                                                                                                    (("2"
                                                                                                                                                      (SKEEP)
                                                                                                                                                      (("2"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "subset?")
                                                                                                                                                        (("2"
                                                                                                                                                          (INST?)
                                                                                                                                                          (("2"
                                                                                                                                                            (INST?)
                                                                                                                                                            (("2"
                                                                                                                                                              (GRIND)
                                                                                                                                                              NIL
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (HIDE
                                                                                                               -1
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (GRIND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (REWRITE
                                                                                               "syntEq_car_lhs_member_img")
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("3"
                                                                                              (HIDE
                                                                                               -1
                                                                                               -2)
                                                                                              (("3"
                                                                                                (POSTPONE)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (POSTPONE) NIL NIL)
             ("5" (HIDE -2) (("5" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|antiunif_completeness| 0
  (|antiunif_completeness-1| NIL 3940393387
   ("" (MEASURE-INDUCT+ "size(c`unsolved)" ("c"))
    (("" (LEMMA "antiunify_derivability")
      (("" (INST?)
        (("" (SKEEP)
          (("" (PROP)
            (("1" (LEMMA "matchingFuns_generalizer_classification")
              (("1" (INST?)
                (("1" (INST -1 "gamma")
                  (("1" (BETA)
                    (("1" (EXPAND "antiunify" 1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "matchingFuns_conf?")
                          (("1" (EXPAND "matchingFuns?")
                            (("1" (FLATTEN)
                              (("1" (ASSERT)
                                (("1" (INST -4 "decomposeFuns(x!1)")
                                  (("1" (PROP)
                                    (("1"
                                      (NAME-REPLACE "Y"
                                       "subs(gamma)(car(x!1`unsolved)`label)")
                                      (("1"
                                        (INST -4
                                         "cons((car(decomposeFuns(x!1)`unsolved)`label, variable(freshLabel(union(vars(img(gamma)),vars(antiunify(decomposeFuns(x!1))))))), r_nice_subs(gamma)(labels(cdr(x!1`unsolved))))")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "more_general?")
                                            (("1" (SKOLEM -4 "delta_p")
                                              (("1" (EXPAND "equal?")
                                                (("1"
                                                  (NAME-REPLACE "gamma_p"
                                                   "cons((car(decomposeFuns(x!1)`unsolved)`label,
                            variable(freshLabel(union(vars(img(gamma)),
                                                      vars(antiunify(decomposeFuns(x!1))))))),
                           r_nice_subs(gamma)(labels(cdr(x!1`unsolved))))")
                                                  (("1"
                                                    (INST 1
                                                     "cons((V(Y), subs(antiunify(x!1)`substitution)(car(x!1`unsolved)`label)),
                                          r_nice_subs(delta_p)(labels(cdr(x!1`unsolved))))")
                                                    (("1" (POSTPONE) NIL NIL)
                                                     ("2" (POSTPONE) NIL NIL)
                                                     ("3" (POSTPONE) NIL NIL))
                                                    NIL)
                                                   ("2" (POSTPONE) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (POSTPONE) NIL NIL)
                                         ("3" (POSTPONE) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (POSTPONE) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (POSTPONE) NIL NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)
             ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|antiunif_is_complete| 0
  (|antiunif_is_complete-1| NIL 3939877632
   ("" (SKEEP)
    (("" (LEMMA "antiunif_completeness")
      (("" (INST -1 "c" "_") (("" (POSTPONE) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)))

