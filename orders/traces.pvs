traces[T:TYPE] : THEORY
BEGIN

  IMPORTING termination[T]

  rel  : VAR Relation
  init : VAR PRED[T]
  inv  : VAR PRED[T]

  reachable(rel)(init)(t:T) : INDUCTIVE bool =
    init(t) OR
    EXISTS (tp:T) : reachable(rel)(init)(tp) AND rel(tp,t)

  normal_form(rel)(init)(t:T) : bool =
    reachable(rel)(init)(t) AND normal(rel)(t)

  reachable_empty : LEMMA
    empty?(init) IFF empty?(reachable(rel)(init))

  invariant(rel)(init)(inv) : bool =
    FORALL (t:(reachable(rel)(init))) : inv(t)

  invariant_rule : THEOREM
    FORALL (rel,init,inv) :
      ((FORALL (t0:(init)) : inv(t0)) AND
       (FORALL (t1:(reachable(rel)(init)))(t2:T):
         rel(t1,t2) AND inv(t1) IMPLIES inv(t2)))
      IMPLIES
        invariant(rel)(init)(inv)

  reachable_tc : LEMMA
    FORALL (rel,init)(t1,t2:T):
      reachable(rel)(init)(t1) AND TC(rel)(t1,t2) IMPLIES
      reachable(rel)(init)(t2)

  reachable_iff_tc : LEMMA
    FORALL (rel,init)(t:T):
      reachable(rel)(init)(t) IFF
      (init(t) OR EXISTS (tt:(init)): TC(rel)(tt,t))

  % Relation is normalizing starting from init
  normalizing(init:PRED[T])(rel) : bool =
    empty?({seq:(ascending?(rel)) | init(seq(0))})

  normalizing_reachable : LEMMA
    normalizing(init)(rel) IFF
    empty?({seq:(ascending?(rel)) | FORALL (i:nat): reachable(rel)(init)(seq(i))})

  terminating_eq_normalizing : LEMMA
    terminating = normalizing(LAMBDA(t:T):TRUE)

  normalizing_is_terminating : LEMMA
    normalizing(init)(rel) IFF
    terminating(LAMBDA(t1,t2:T):reachable(rel)(init)(t1) AND rel(t1,t2))

  normalizing_reachable_normalizable : LEMMA
    FORALL (init)(rel:(normalizing(init)))(t:(reachable(rel)(init))):
      normalizable(rel)(t)

  terminating_is_normalizing : LEMMA
    terminating(rel) IFF
    FORALL (init): normalizing(init)(rel)

  IMPORTING structures@Maybe

  % A trace is an infinite sequence of values or none, such that
  % if one if none, all the rest are nones.
  Trace : TYPE = { seq: sequence[Maybe[T]] |
    FORALL (i:nat) : none?(seq(i)) IMPLIES none?(seq(i+1)) }

  none_above : LEMMA
    FORALL (tr:Trace,i:nat,j:upfrom(i)) :
      none?(tr(i)) IMPLIES none?(tr(j))

  some_below : LEMMA
    FORALL (tr:Trace,i:nat,j:upto(i)) :
      some?(tr(i)) IMPLIES some?(tr(j))

  some_before_none : LEMMA
    FORALL (tr:Trace,i,j:nat):
      some?(tr(i)) AND none?(tr(j)) IMPLIES i < j

  % Trace is finite if at some point is none
  finite_trace?(tr:Trace) : bool =
    EXISTS (n:nat) : none?(tr(n))

  FiniteTrace : TYPE = (finite_trace?)

  length(ftr:FiniteTrace) : nat =
    min( {n :nat | none?(ftr(n))} )

  none_after_length : LEMMA
    FORALL (ftr:FiniteTrace, i:upfrom(length(ftr))) :
      none?(ftr(i))

  some_before_length: LEMMA
    FORALL (ftr:FiniteTrace)(i:below(length(ftr))) :
      some?(ftr(i))

  length_is_none : LEMMA
    FORALL (ftr:FiniteTrace) :
      none?(ftr(length(ftr)))

  at(ftr:FiniteTrace)(i:below(length(ftr))):T =
    val(ftr(i))

  empty_trace : FiniteTrace = LAMBDA (i:nat) : None

  empty_trace_length : LEMMA
    FORALL (ftr:FiniteTrace) :
      length(ftr) = 0 IFF ftr = empty_trace 

  empty_trace_lenght_eq_0 : LEMMA
    length(empty_trace) = 0

  head_none_empty_trace : LEMMA
    FORALL (tr:Trace) :
      none?(tr(0)) IFF tr=empty_trace

  single_trace(t:T) : FiniteTrace =
    LAMBDA (i:nat) : IF i=0 THEN Some(t) ELSE None ENDIF

  single_trace_length : LEMMA
    FORALL (t:T): 
      length(single_trace(t)) = 1

  % Trace of a relation 
  traces(rel)(tr:Trace) : bool =
    FORALL (n:nat) :
      none?(tr(n)) OR 
      IF some?(tr(n+1)) THEN rel(val(tr(n)),val(tr(n+1)))
      ELSE normal(rel)(val(tr(n)))
      ENDIF

  single_iff_normal : LEMMA
    FORALL (rel)(t:T):
      normal(rel)(t) IFF traces(rel)(single_trace(t))

  single_normal_unique : LEMMA
    FORALL (rel)(tr:(traces(rel))):
      some?(tr(0)) IMPLIES
      (normal(rel)(val(tr(0))) IFF tr=single_trace(val(tr(0))))
  
  tc_iff_prefix_of_trace : LEMMA
    FORALL(rel)(t1,t2:T):
      TC(rel)(t1,t2) IFF
      (EXISTS (tr:(traces(rel)),n:posnat):
        (FORALL (i:upto(n)): some?(tr(i))) AND
        val(tr(0)) = t1 AND
        val(tr(n)) = t2)

  terminating_iff_finite_traces : LEMMA
    FORALL (rel):
      terminating(rel) IFF
      FORALL (tr:(traces(rel))):finite_trace?(tr)

  trel : VAR (terminating)

  terminating_finite_traces_j : JUDGEMENT
    (traces(trel)) SUBTYPE_OF (finite_trace?)

  last_of_finite_is_normal : LEMMA
    FORALL (rel)(tr:(traces(rel))):
      finite_trace?(tr) AND length(tr) > 0 IMPLIES
        LET lst = length(tr)-1 IN
        some?(tr(lst)) AND
        normal(rel)(val(tr(lst)))

  % Run is a trace from an initial set
  run(rel)(init) : PRED[Trace] =
    { tr:Trace | traces(rel)(tr) AND some?(tr(0)) AND init(val(tr(0))) }

  run_trace_j : JUDGEMENT
    (run(rel)(init)) SUBTYPE_OF (traces(rel))

  superset_init_run : LEMMA
    FORALL (rel,init)(rn:(run(rel)(init)))(s:set[T]):
      subset?(init,s) IMPLIES
      run(rel)(s)(rn)

  normalizing_iff_finite_traces : LEMMA
    FORALL (rel,init):
      normalizing(init)(rel) IFF
      FORALL (rn:(run(rel)(init))) : finite_trace?(rn)

  terminating_finite_runs_j : JUDGEMENT
    (run(trel)(init)) SUBTYPE_OF (finite_trace?)

  run_empty : LEMMA
    empty?(init) IFF empty?(run(rel)(init))

  empty_trace_not_run : LEMMA
    FORALL (rel,init):
      NOT member(empty_trace,run(rel)(init))

  head_of_run_some : LEMMA
    FORALL (rel,init)(rn:(run(rel)(init))):
      some?(rn(0))

  first(rel,init)(rn:(run(rel)(init))): T =
    val(rn(0))

  finite_run?(rel)(init)(rn:(run(rel)(init))) : bool =
    finite_trace?(rn)

  finite_run_finite_trace_j : JUDGEMENT
    (finite_run?(rel)(init)) SUBTYPE_OF (finite_trace?)

  pos_length_finite_run : LEMMA
    FORALL (rel,init)(frn:(finite_run?(rel)(init))):
      length(frn) > 0

  last(rel,init)(frn:(finite_run?(rel)(init))): (normal(rel)) =
    val(frn(length(frn)-1))

  run_all_reachable : LEMMA
    FORALL (rel,init)(tr:(run(rel)(init)))(n:nat) : some?(tr(n)) IMPLIES
      reachable(rel)(init)(val(tr(n)))

  last_reachable_j : JUDGEMENT
    last(rel,init)(frn:(finite_run?(rel)(init))) HAS_TYPE (reachable(rel)(init))

  reachable_prefix_of_trace : LEMMA
    FORALL (rel,init)(t:(reachable(rel)(init))):
      (EXISTS (rn:(run(rel)(init)), n:nat):
        (FORALL (i:upto(n)): some?(rn(i))) AND
         init(val(rn(0))) AND
         val(rn(n)) = t)

  normal_form_iff_last_of_run : LEMMA
    FORALL (rel,init)(t:T) :
      normal_form(rel)(init)(t) IFF
      EXISTS (frn:(finite_run?(rel)(init))):
        last(rel,init)(frn) = t
        
  % An inv_run is a predicate on t that has as parameters the run and the position in the
  % run where the invariant predicate holds. This allows for dependencies that are not
  % possible with inv.
  invariant_run(rel)(init)(inv_run:[[(run(rel)(init)),nat]->[T->bool]]) : bool =
    FORALL (rn : (run(rel)(init)), n:nat ): some?(rn(n)) IMPLIES inv_run(rn,n)(val(rn(n)))

  invariant_run_rule : THEOREM
    FORALL (rel,init)(inv_run:[[(run(rel)(init)),nat]->[T->bool]]):
      (FORALL (rn : (run(rel)(init))) :
       (some?(rn(0)) IMPLIES inv_run(rn,0)(val(rn(0)))) AND 
       FORALL (n : nat) : some?(rn(n)) AND some?(rn(n+1)) AND inv_run(rn,n)(val(rn(n)))
         IMPLIES inv_run(rn,n+1)(val(rn(n+1))))
       IMPLIES invariant_run(rel)(init)(inv_run)

  invariant_is_invariant_run : LEMMA
    invariant(rel)(init)(inv) IFF invariant_run(rel)(init)(LAMBDA(rnn:[(run(rel)(init)),nat]):inv)

END traces
